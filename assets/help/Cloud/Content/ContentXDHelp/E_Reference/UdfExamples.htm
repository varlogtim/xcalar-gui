<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="_Skins_HTML5___SideNav" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../../" data-mc-has-content-body="True" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta charset="utf-8" />
        <meta name="description" content="" />
        <meta name="author" content="" /><title>User-defined function  examples</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/Stylesheets/foundation.6.2.3.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/Stylesheets/Styles.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/Stylesheets/Tablet.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/Stylesheets/Mobile.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/MainStyles.css" rel="stylesheet" />
        <style>/*&lt;meta /&gt;*/

.button.previous-topic-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/navigate-previous.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.next-topic-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/navigate-next.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.separator-button
{
	-pie-background: linear-gradient(#ffffff, #ececec);
}

.button.print-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/printer.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.needs-pie
{
	behavior: url('../../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <link href="../../Resources/TableStyles/SimpleTable.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/require.config.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/foundation.6.2.3_custom.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapGlobal.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapDom.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapUtilities.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapXhr.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapTextEffects.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapSlideshow.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapFeedback.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapDefault.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapAccessibility.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapHelpSystem.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.Breadcrumbs.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.MiniToc.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.SideMenu.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapIndex.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapGlossary.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapParser.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapSearch.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapTopic.js" defer="defer">
        </script>
        <script src="../../../Skins/Default/Scripts/TopicToolBar.js">
        </script>
    </head>
    <body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-right" role="navigation" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
                    <ul class="off-canvas-accordion vertical menu off-canvas-list" data-accordion-menu="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div data-sticky-container="" class="title-bar-container">
                        <nav class="title-bar tab-bar sticky" data-sticky="" data-options="marginTop:0" style="width:100%" data-sticky-on="only screen and (max-width: 800px)" data-mc-ignore="true"><a class="skip-to-content fluid-skip showOnFocus" href="#">Skip To Main Content</a>
                            <div class="middle title-bar-section outer-row clearfix">
                                <div class="menu-icon-container relative clearfix">
                                    <button class="menu-icon" aria-label="Show Navigation Panel" data-toggle="offCanvas"><span></span>
                                    </button>
                                </div>
                            </div>
                            <div class="title-bar-layout outer-row">
                                <div class="logo-wrapper"><a class="logo" href="../../Home_cloud.htm" alt="Logo"></a>
                                </div>
                                <div class="navigation-wrapper nocontent">
                                    <ul class="navigation clearfix" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                        <li class="placeholder" style="visibility:hidden"><a>placeholder</a>
                                        </li>
                                    </ul>
                                </div>
                                <div class="nav-search-wrapper">
                                    <div class="nav-search row">
                                        <form class="search" action="#">
                                            <div class="search-bar search-bar-container needs-pie">
                                                <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search" />
                                                <div class="search-filter-wrapper"><span class="invisible-label" id="search-filters-label">Filter: </span>
                                                    <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                                    </div>
                                                    <div class="search-filter-content" id="sf-content">
                                                        <ul>
                                                            <li>
                                                                <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001"><span id="filterSelectorLabel-00001">All Files</span>
                                                                </button>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                </div>
                                                <div class="search-submit-wrapper" dir="ltr">
                                                    <div class="search-submit" title="Search" role="button" tabindex="0"><span class="invisible-label">Submit Search</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </nav>
                    </div>
                    <div class="main-section">
                        <div class="row outer-row sidenav-layout">
                            <nav class="sidenav-wrapper">
                                <div class="sidenav-container">
                                    <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                                </div>
                            </nav>
                            <main id="main" class="body-container">
                                <div data-mc-content-body="True">
                                    <div class="content">
                                        <p><a name="top"></a>
                                        </p>
                                        <div id="contentBody">
                                            <div class="row collapse">
                                                <div class="sideContent">
                                                    <div class="clearfix">
                                                        <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolBar mc-component nocontent">
                                                            <div class="button-group-container-left">
                                                                <button class="button needs-pie previous-topic-button" title="Navigate previous">
                                                                    <img alt="Navigate previous" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" class="invisible-label" />
                                                                </button>
                                                                <button class="button needs-pie next-topic-button" title="Navigate next">
                                                                    <img alt="Navigate next" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" class="invisible-label" />
                                                                </button>
                                                                <div class="button-separator">
                                                                </div>
                                                                <button class="button needs-pie print-button" title="Print">
                                                                    <img alt="Print" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" class="invisible-label" />
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="nocontent">
                                                    <div class="MCBreadcrumbsBox_0 breadcrumbs" role="navigation" aria-label="Breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="3" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">You are here: </span>
                                                    </div>
                                                </div>
                                                <h1>User-defined function  examples</h1>
                                                <p>This section provides examples for the following user-defined function (UDF)&#160;types: </p>
                                                <ul>
                                                    <li value="1"> Map UDF - a UDF for a mapping operation</li>
                                                    <li value="2">Import UDF - a UDF for parsing the input data during an import, also known as import parser</li>
                                                </ul>
                                                <h2 class="noPageBreak">Example of a Map user-defined function</h2>
                                                <p>Suppose you have the following result set in <span class="GeneralGUIName1">Xcalar Design</span> showing some events and their dates, and you want to add a column that shows the day of the week for each event. You can write a Map UDF to create this new Weekday column.</p>
                                                <table style="mc-table-style: url('../../Resources/TableStyles/SimpleTable.css');margin-left: 0;margin-right: auto;" class="TableStyle-SimpleTable" cellspacing="0">
                                                    <col class="TableStyle-SimpleTable-Column-Column1" />
                                                    <col class="TableStyle-SimpleTable-Column-Column2" />
                                                    <thead>
                                                        <tr class="TableStyle-SimpleTable-Head-Header1">
                                                            <th class="TableStyle-SimpleTable-HeadE-Column1-Header1">Event</th>
                                                            <th class="TableStyle-SimpleTable-HeadD-Column2-Header1">Date</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Party</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">2014-06-07</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Concert</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">2015-09-12</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyB-Column1-Body1">Conference</td>
                                                            <td class="TableStyle-SimpleTable-BodyA-Column2-Body1">2015-09-14</td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                                <h3>Coding the Map UDF</h3>
                                                <p>Write the following code in a module named <span class="UIelement">calendar</span>. To learn how to code a UDF directly in <span class="GeneralGUIName1">Xcalar Design</span>, see <a href="../D_ClusterTasks/UDFTasks.htm#Entering" class="MCXref xref">Entering the user-defined function code in the UDF panel</a>.</p>
                                                <div class="Code">
                                                    <p class="CLIoutput">import time</p>
                                                    <p class="CLIoutput">def getWeekday(column, format):</p>
                                                    <p class="CLIoutput">&#160;&#160;&#160;&#160;&#160;parsedTime = time.strptime(column, format)</p>
                                                    <p class="CLIoutput">&#160;&#160;&#160;&#160;&#160;weekday = time.strftime("%A", parsedTime)</p>
                                                    <p class="CLIoutput">&#160;&#160;&#160;&#160;&#160;return weekday</p>
                                                </div>
                                                <p>The <span class="UIelement">getWeekday</span> function takes a column value and a date-time format string as input. The Python built-in <span class="UIelement">time</span> module imported into <span class="UIelement">calendar</span>, is used to parse the input column value and convert it into a weekday. The function returns the converted weekday. </p>
                                                <h3>Running the Map UDF</h3>
                                                <p>In <span class="GeneralGUIName1">Xcalar Design</span>, right click on the Date column of the result set and select Map. In the Map panel, select <span class="UIelement">user-defined</span> as the category and then select <span class="UIelement">calendar:getWeekday</span> as the function. Specify the <span class="UIelement">Date</span> column ($Date)&#160;as the first argument and <span class="UIelement">"%Y-%m-%d"</span> as the second argument. In the <span class="UIelement">New Resultant Column Name</span>, enter Weekday.</p>
                                                <p>Save the configuration and execute it to create the new result set. For more information about the Map operation, see <a href="../C_XcalarAdvancedMode/B_Operations/Map.htm" class="MCXref xref">Applying a function on a column using a Map Node</a>.</p>
                                                <h3>How to enter input for a Map UDF</h3>
                                                <p>A UDF can accept input just as other Map functions in the <span class="UIelement">Map</span>&#160;panel.</p>
                                                <div class="MCDropDown MCDropDown_Closed dropDown"><span class="MCDropDownHead dropDownHead"><a href="#" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage" aria-expanded="false"><img class="MCDropDown_Image_Icon" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" height="16" width="17" alt="Closed" data-mc-alt2="Open" />The following lists describe the rules and tips for entering information in a <span class="GeneralGUIName1">Xcalar Design</span> panel.</a></span>
                                                    <div class="MCDropDownBody dropDownBody">
                                                        <p>For selecting columns:</p>
                                                        <ul>
                                                            <li value="1">By default, the name of the column from which you start the function is displayed as an argument. You can select another column.</li>
                                                            <li value="2">If the column you want to select is not in the result set, go to the Data Browser to pull the column. Then you can select the column as input to the function.</li>
                                                        </ul>
                                                        <p>For typing a column name:</p>
                                                        <ul>
                                                            <li value="1">Always start with the dollar sign ($).</li>
                                                            <li value="2">Always include the prefix if one exists. A derived column does not have a column name prefix.</li>
                                                            <li value="3">To specify the resultant column name, type the name without preceding it with the dollar sign ($).</li>
                                                            <li value="4">To avoid mistakes when typing a column name, click on the argument field, move your cursor to the active result set and click anywhere in the desired column. The column's name is automatically entered for you.</li>
                                                            <li value="5">If an operand accepts a column name, it also accepts the aggregate name that you created when you calculated the aggregate value for a column. </li>
                                                        </ul>
                                                        <p>For typing an operand value:</p>
                                                        <ul>
                                                            <li value="1">In most cases, do not surround the value with quote marks, even if it is a string with a space. In cases where the function can evaluate the value as a string or numeric value, use the quote marks.&#160;You can check the syntax displayed in the panel.&#160;The syntax displays the quote marks for an operand if the operand is to be interpreted as a string.</li>
                                                            <li value="2">If the string contains  the backslash (\) or double quote mark ("), escape the character with a backslash (\). Not doing so causes an error message, indicating that the input string is a malformed evaluation string.</li>
                                                            <li value="3">The $ character has special meaning in <span class="GeneralGUIName1">Xcalar Design</span>. It denotes a column name. If your input string starts with $, escape it with a backslash (\).</li>
                                                            <li value="4">The caret (^) has  special meaning in <span class="GeneralGUIName1">Xcalar Design</span>.&#160;It denotes a named aggregate value. If your input string starts with a caret, escape it with a backslash (\).</li>
                                                            <li value="5">
                                                                <p>Boolean values are case-insensitive. For example, in an input field that accepts a Boolean value, you can type true, True, false, or False.</p>
                                                            </li>
                                                        </ul>
                                                        <p>In the panel, you can undo any typing with the undo key or key combination that you normally use in your browser.</p>
                                                    </div>
                                                </div>
                                                <p>When you enter a string that cannot be interpreted as another data type (for example, <span class="UIelement">airlines</span>), do not surround the string with quote marks. If the input can be interpreted as a numeric or Boolean value, surround the input with quote marks to indicate that the input is meant be a string. In the following examples, the input is interpreted as a string:</p>
                                                <ul>
                                                    <li value="1">"3"</li>
                                                    <li value="2">"true"</li>
                                                </ul>
                                                <p>Without the quote marks, <span class="UIelement">3</span> is interpreted as an integer, and <span class="UIelement">true</span> is interpreted as a Boolean value. </p>
                                                <h3>Result of running the Map UDF</h3>
                                                <p>The following result set is created with an additional column showing the day of week for each date:</p>
                                                <table style="mc-table-style: url('../../Resources/TableStyles/SimpleTable.css');margin-left: 0;margin-right: auto;" class="TableStyle-SimpleTable" cellspacing="0">
                                                    <col class="TableStyle-SimpleTable-Column-Column1" />
                                                    <col class="TableStyle-SimpleTable-Column-Column2" />
                                                    <col class="TableStyle-SimpleTable-Column-Column1" />
                                                    <thead>
                                                        <tr class="TableStyle-SimpleTable-Head-Header1">
                                                            <th class="TableStyle-SimpleTable-HeadE-Column1-Header1">Event</th>
                                                            <th class="TableStyle-SimpleTable-HeadE-Column2-Header1">Date</th>
                                                            <th class="TableStyle-SimpleTable-HeadD-Column1-Header1">Weekday</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Party</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">2014-06-07</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column1-Body1">Saturday</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Concert</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">2015-09-12</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column1-Body2">Saturday</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyB-Column1-Body1">Conference</td>
                                                            <td class="TableStyle-SimpleTable-BodyB-Column2-Body1">2015-09-14</td>
                                                            <td class="TableStyle-SimpleTable-BodyA-Column1-Body1">Monday</td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                                <h3><a name="Locating"></a>Locating errors in the Map UDF execution </h3>
                                                <p>If the execution of a Map UDF generates errors, the icon of the Map Node turns red with an exclamation sign:</p>
                                                <p>
                                                    <img src="../../Resources/Images/XD_screenshots/xd-map-udf-error-1.png" />
                                                </p>
                                                <p>Clicking on the red icon displays a modal with a list of errors:</p>
                                                <p><a class="MCPopupThumbnailLink MCPopupThumbnailPopup" href="../../Resources/Images/XD_screenshots/xd-map-udf-error-3.png"><img class="MCPopupThumbnail img imgBigImage" data-mc-width="702" data-mc-height="603" src="../../Resources/Images/XD_screenshots/xd-map-udf-error-3_thumb_0_150.png" tabindex="" /></a>
                                                </p>
                                                <p>If the error information in the modal is not sufficient, click <span class="UIelement">Generate detailed error table</span> in the modal. This adds another <span class="UIelement">Map </span>Node in the dataflow and displays a new result set with <span class="UIelement">erroneous rows only</span> and the new resultant column displays the details of each error.</p>
                                                <div class="Note"><span class="label">NOTE</span>: Once you have fixed all the errors, delete the system generated <span class="UIelement">Map </span>Node with <span class="UIelement">erroneous rows only</span>.</div>
                                                <h2 class="noPageBreak"><a name="Example"></a>Example of an import user-defined function</h2>
                                                <p>If you want to import the data, which is not natively supported by <span class="GeneralProductName3">Xcalar</span>, you can write an import parser in the form of a user-defined function (UDF) to parse the data as per your requirements and use the UDF during the import process. In the following example, the data source is an XML&#160;file, which you can convert into JSON&#160;with an import UDF.</p>
                                                <h3><a name="Coding"></a>Coding the import user-defined function</h3>
                                                <p>Write the following code in the UDF editor and save it in a module named <span class="UIelement">convertxmltojson</span>. The source data to be converted is shown as comments in this example to illustrate how the user-defined function (UDF) works.</p>
                                                <div class="Code"><pre xml:space="preserve"># Sample XML document

# &lt;?xml version="1.0" encoding="UTF-8"?&gt;
# &lt;bookstore&gt;
#   &lt;book category="cooking"&gt;
#     &lt;title lang="en"&gt;Everyday Italian&lt;/title&gt;
#     &lt;author&gt;Giada De Laurentiis&lt;/author&gt;
#     &lt;year&gt;2005&lt;/year&gt;
#     &lt;price&gt;30.00&lt;/price&gt;
#   &lt;/book&gt;
#   &lt;book category="children"&gt;
#     &lt;title lang="en"&gt;Harry Potter&lt;/title&gt;
#     &lt;author&gt;J K. Rowling&lt;/author&gt;
#     &lt;year&gt;2005&lt;/year&gt;
#     &lt;price&gt;29.99&lt;/price&gt;
#   &lt;/book&gt;
#   &lt;book category="web"&gt;
#     &lt;title lang="en"&gt;Learning XML&lt;/title&gt;
#     &lt;author&gt;Erik T. Ray&lt;/author&gt;
#     &lt;year&gt;2003&lt;/year&gt;
#     &lt;price&gt;39.95&lt;/price&gt;
#   &lt;/book&gt;
# &lt;/bookstore&gt;

import codecs
import xmltodict
import json

def xmlToJson(fullPath, inStream):
    Utf8Reader = codecs.getreader("utf-8")
    utf8Stream = Utf8Reader(inStream)
    allJson = xmltodict.parse(utf8Stream.read())
    for book in allJson["bookstore"]["book"]:
        yield book</pre>
                                                </div>
                                                <p>This module imports a third-party module named <span class="UIelement">xmltodict</span> and defines a function named <span class="UIelement">xmlToJson</span>. This function has two parameters, which are the required parameters for any Import UDF unless the import is using a Generated or Database connector:</p>
                                                <ul>
                                                    <li value="1">The <span class="UIelement">fullPath</span> parameter  is a string which is the full path name of the data source.</li>
                                                    <li value="2">The <span class="UIelement">inStream</span> parameter is the input stream for the content of the data source. </li>
                                                </ul>
                                                <p>If you are writing your own import UDF, you can use as many parameters as needed but the first two parameters must be  fullPath and inStream. </p>
                                                <p>The return value of the function is used in place of the actual file contents. </p>
                                                <h3>Running the import UDF</h3>
                                                <p>In the <span class="UIelement">Import Data Source</span> window, after you specify the pathname to the XML data source:</p>
                                                <ol>
                                                    <li value="1">In the <span class="UIelement">Format</span> field, select <span class="UIelement">Custom Format</span>. </li>
                                                    <li value="2">In the <span class="UIelement">Module</span> field, select the <span class="UIelement">convertxmltojson</span> module.</li>
                                                    <li value="3">In the <span class="UIelement">Function</span> field, select the <span class="UIelement">xmlToJson</span> function. </li>
                                                    <li value="4">
                                                        <p>(Optional) If you have additional parameters (other than fullPath and inStream) in your import UDF, enter the argument name value pairs in JSON format in the <span class="UIelement">UDF Args</span> field. Do not enter the name value pair for fullPath and inStream. For example, if the third parameter in your import UDF is a Boolean parameter called <code>withHeader</code> and you want to pass <code>true</code> for the value, enter the following in the <span class="UIelement">UDF Args</span> field:</p>
                                                        <p><code>{"withHeader": true}</code>
                                                        </p>
                                                    </li>
                                                    <li value="5">
                                                        <p>Click on <span class="UIelement">Create Table</span> or <span class="UIelement">Create Dataset</span>. </p>
                                                        <p>This imports the selected data source using the import UDF and creates the table or the dataset.</p>
                                                    </li>
                                                </ol>
                                                <p>For more information about importing a data source, see <a href="../A_GetStarted/ImportData.htm" class="MCXref xref">Selecting format options during an import</a>.</p>
                                                <h3>Result of running the import UDF</h3>
                                                <p>Suppose the data source is a file named <span class="UIelement">bookstore</span>. Its path, which you specified in the <span class="UIelement">Data Source Path</span> field, is passed to the UDF as the <span class="UIelement">fullPath</span> parameter. The contents of <span class="UIelement">bookstore</span> are passed to the UDF&#160;in <span class="UIelement">inStream</span>. The function returns a string containing the corresponding JSON&#160;data being imported. If you create a result set with all columns from the dataset, your workbook contains the following result set:</p>
                                                <p><a class="MCPopupThumbnailLink MCPopupThumbnailPopup" href="../../Resources/Images/XD_screenshots/xd-udf-streaming-example-output.png"><img class="MCPopupThumbnail img imgBigImage" data-mc-width="699" data-mc-height="90" src="../../Resources/Images/XD_screenshots/xd-udf-streaming-example-output_thumb_0_150.png" tabindex="" /></a>
                                                </p>
                                                <p><a href="#top">Go to the top</a>
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </main>
                        </div>
                    </div><a data-close="true"></a>
                </div>
            </div>
        </div>
    </body>
</html>