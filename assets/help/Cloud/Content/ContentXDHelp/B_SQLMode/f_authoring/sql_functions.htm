<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="_Skins_HTML5___SideNav" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../../../" data-mc-has-content-body="True" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="SQL Mode|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta charset="utf-8" />
        <meta name="description" content="" />
        <meta name="author" content="" /><title>Understanding Xcalar SQL functions</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" />
        <link href="../../../../Skins/Fluid/Stylesheets/foundation.6.2.3.css" rel="stylesheet" />
        <link href="../../../../Skins/Fluid/Stylesheets/Styles.css" rel="stylesheet" />
        <link href="../../../../Skins/Fluid/Stylesheets/Tablet.css" rel="stylesheet" />
        <link href="../../../../Skins/Fluid/Stylesheets/Mobile.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/MainStyles.css" rel="stylesheet" />
        <style>/*&lt;meta /&gt;*/

.button.previous-topic-button
{
	-pie-background: url('../../../../Skins/Default/Stylesheets/Images/navigate-previous.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.next-topic-button
{
	-pie-background: url('../../../../Skins/Default/Stylesheets/Images/navigate-next.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.separator-button
{
	-pie-background: linear-gradient(#ffffff, #ececec);
}

.button.print-button
{
	-pie-background: url('../../../../Skins/Default/Stylesheets/Images/printer.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.needs-pie
{
	behavior: url('../../../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/foundation.6.2.3_custom.js" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapGlobal.js" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapDom.js" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapUtilities.js" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapXhr.js" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTextEffects.js" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapSlideshow.js" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapFeedback.js" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapDefault.js" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAccessibility.js" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapHelpSystem.js" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.js" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.Breadcrumbs.js" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.MiniToc.js" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.SideMenu.js" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapIndex.js" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapGlossary.js" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapParser.js" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapSearch.js" defer="defer">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTopic.js" defer="defer">
        </script>
        <script src="../../../../Skins/Default/Scripts/TopicToolBar.js">
        </script>
    </head>
    <body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-right" role="navigation" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
                    <ul class="off-canvas-accordion vertical menu off-canvas-list" data-accordion-menu="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div data-sticky-container="" class="title-bar-container">
                        <nav class="title-bar tab-bar sticky" data-sticky="" data-options="marginTop:0" style="width:100%" data-sticky-on="only screen and (max-width: 800px)" data-mc-ignore="true"><a class="skip-to-content fluid-skip showOnFocus" href="#">Skip To Main Content</a>
                            <div class="middle title-bar-section outer-row clearfix">
                                <div class="menu-icon-container relative clearfix">
                                    <button class="menu-icon" aria-label="Show Navigation Panel" data-toggle="offCanvas"><span></span>
                                    </button>
                                </div>
                            </div>
                            <div class="title-bar-layout outer-row">
                                <div class="logo-wrapper"><a class="logo" href="../../../Home_cloud.htm" alt="Logo"></a>
                                </div>
                                <div class="navigation-wrapper nocontent">
                                    <ul class="navigation clearfix" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                        <li class="placeholder" style="visibility:hidden"><a>placeholder</a>
                                        </li>
                                    </ul>
                                </div>
                                <div class="nav-search-wrapper">
                                    <div class="nav-search row">
                                        <form class="search" action="#">
                                            <div class="search-bar search-bar-container needs-pie">
                                                <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search" />
                                                <div class="search-filter-wrapper"><span class="invisible-label" id="search-filters-label">Filter: </span>
                                                    <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                                    </div>
                                                    <div class="search-filter-content" id="sf-content">
                                                        <ul>
                                                            <li>
                                                                <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001"><span id="filterSelectorLabel-00001">All Files</span>
                                                                </button>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                </div>
                                                <div class="search-submit-wrapper" dir="ltr">
                                                    <div class="search-submit" title="Search" role="button" tabindex="0"><span class="invisible-label">Submit Search</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </nav>
                    </div>
                    <div class="main-section">
                        <div class="row outer-row sidenav-layout">
                            <nav class="sidenav-wrapper">
                                <div class="sidenav-container">
                                    <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                                </div>
                            </nav>
                            <main id="main" class="body-container">
                                <div data-mc-content-body="True">
                                    <div class="content">
                                        <p><a name="top"></a>
                                        </p>
                                        <div id="contentBody">
                                            <div class="row collapse">
                                                <div class="sideContent">
                                                    <div class="clearfix">
                                                        <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolBar mc-component nocontent">
                                                            <div class="button-group-container-left">
                                                                <button class="button needs-pie previous-topic-button" title="Navigate previous">
                                                                    <img alt="Navigate previous" src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" class="invisible-label" />
                                                                </button>
                                                                <button class="button needs-pie next-topic-button" title="Navigate next">
                                                                    <img alt="Navigate next" src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" class="invisible-label" />
                                                                </button>
                                                                <div class="button-separator">
                                                                </div>
                                                                <button class="button needs-pie print-button" title="Print">
                                                                    <img alt="Print" src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" class="invisible-label" />
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="nocontent">
                                                    <div class="MCBreadcrumbsBox_0 breadcrumbs" role="navigation" aria-label="Breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="3" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">You are here: </span>
                                                    </div>
                                                </div>
                                                <h2 class="noPageBreak">Understanding <span class="GeneralProductName3">Xcalar</span> SQL functions</h2>
                                                <p><span class="GeneralProductName3">Xcalar</span> SQL functions are <span class="GeneralProductName3">Xcalar</span> dataflows that enable you to include table manipulation operations as a function in your SQL query statements. The SQL function is a series of operations that manipulate and retrieve data from one or more tables (Input Nodes) and returns the results in another table (Output Node). The SQL function can replace any table within a SQL&#160;query statement.</p>
                                                <p>Unlike a <span class="GeneralProductName3">Xcalar</span> dataflow,  with a SQL&#160;function you can only have <span class="UIelement">one</span> output. If you require more Output Nodes, you must create multiple SQL functions. </p>
                                                <p>You can use SQL functions:</p>
                                                <ul>
                                                    <li value="1">To save coding time by creating reusable SQL functions that can quickly be inserted within a statement for repetitive manipulations.</li>
                                                    <li value="2">For manipulations that are difficult to include as part of a SQL query. In the Dataflow Mode workspace you can test and debug each phase of the SQL&#160;function. </li>
                                                    <li value="3"> To use for repetitive statements.</li>
                                                    <li value="4">To create SQL functions from existing statements or dataflows. For more information, see <a href="../i_analyzing/sql_dataflow_to_sqlfunct.htm#Converti" class="MCXref xref" xrefformat="{para}">Converting a dataflow into a SQL function</a>.</li>
                                                </ul>
                                                <h3>Working in the Dataflow Mode for SQL Functions </h3>
                                                <p>SQL functions are created in the  Dataflow Mode of <span class="GeneralGUIName1">Xcalar Design</span>. The SQL function feature has its own set of Node components and except for a few Input and Output Node differences, creating a SQL function is similar to creating a dataflow in the Dataflow Mode. For more information on how to use the Dataflow Mode, see <a href="../../C_XcalarAdvancedMode/A_Dataflows/CreateEditDeleteDf.htm" class="MCXref xref" xrefformat="{para}">Creating and editing a dataflow</a>.</p>
                                                <p>The SQL function tab contains an icon on the left side of the SQL function name, as shown below, which enables you to quickly identify the SQL function canvas:</p>
                                                <p> <img src="../../../Resources/Images/XD_assets/xd_sql_function_icon.png" /> </p>
                                                <p>To name the SQL function, double-click the SQL function name tab and enter a name. For the SQL function naming conventions, see <a href="../../E_Reference/naming_rules.htm#SQL" class="MCXref xref" xrefformat="{para}">SQL code snippet</a>.</p>
                                                <h3><a name="Creating"></a>Creating a SQL function</h3>
                                                <div class="Note"><span class="label">NOTE:</span> The following procedure assumes that you are logged into <span class="GeneralGUIName1">Xcalar Design</span> and that you are in a Workbook.</div>
                                                <p>To create a SQL function:</p>
                                                <ol>
                                                    <li value="1">Verify that you are in the <span class="UIelement">Dataflow Mode</span> workspace. If not, from the top menu bar of <span class="GeneralGUIName1">Xcalar Design</span>, click the mode switch to <span class="UIelement">Dataflow Mode</span> . </li>
                                                    <li value="2">From the tabs bar, click the <span class="UIelement">+SQL function</span> button.</li>
                                                    <p>The New SQL Function modal window opens.</p>
                                                    <li value="3">In the <span class="UIelement">Number of parameters</span> field, enter the number of <span class="UIelement">Input</span> Nodes (tables) you require in your SQL function.</li>
                                                    <li value="4">Click <span class="UIelement">Confirm</span>.</li>
                                                    <p>The SQL function canvas opens containing the number of <span class="UIelement">Input</span> Nodes you requested and one <span class="UIelement">Output</span> Node.</p>
                                                    <div class="Note"><span class="label">TIP:</span> If required, you can add more <span class="UIelement">Input</span> Nodes to the SQL function. To add an <span class="UIelement">Input</span> Node, from the SQL function toolbar, select the <span class="UIelement">In</span> tab, and either drag the <span class="UIelement">Input</span> Node to the canvas, or double-click the the <span class="UIelement">Input</span> Node. </div>
                                                    <li value="5">(Optional) Double-click the <span class="UIelement">SQL function</span> tab and enter a name for the SQL function. For more information on the SQL function naming conventions, see <a href="../../E_Reference/naming_rules.htm#SQL" class="MCXref xref" xrefformat="{para}">SQL code snippet</a>.</li>
                                                    <li value="6">For each <span class="UIelement">Input</span> Node, do the following:</li>
                                                    <ol style="list-style-type: lower-alpha;">
                                                        <li value="1">Select the <span class="UIelement">Input</span> Node, right-click and select <span class="UIelement">Configure</span>.</li>
                                                        <li value="2">From the <span class="UIelement">SQL Function Input</span> panel, click in the <span class="UIelement">Source Table (For testing only)</span> field and select a table.</li>
                                                        <li value="3">From the <span class="UIelement">Column Schema</span> section, verify the schema columns and their data types.</li>
                                                        <li value="4">Click <span class="UIelement">Save</span>.</li>
                                                        <div class="Note"><span class="label">NOTE:</span> If  the <span class="UIelement">Auto preview the results after execution</span> setting is enabled, the table is displayed in the Dataflow Mode's previewing section. You can enable the <span class="UIelement">Auto preview the results after execution</span> setting from the <span class="UIelement">Dataflow Settings</span> modal window by clicking the <span class="UIelement">Dataflow settings</span> icon <img src="../../../Resources/Images/XD_assets/xd_dataflow_settings_icon.png" /> in the <span class="GeneralGUIName1">Xcalar Design</span> menu bar.</div>
                                                    </ol>
                                                    <p>For more information on configuring  a Node's schema, see <a href="#Configur" class="MCXref xref" xrefformat="{para}">Configuring the  Input Node's schema</a>. </p>
                                                    <p>For more information on configuring each Node type, see <a href="../../C_XcalarAdvancedMode/B_Operations/AboutOperations.htm" class="MCXref xref" xrefformat="{para}">Understanding the operation Nodes</a>.</p>
                                                    <li value="7">For each required operation in your SQL function, add the SQL operator from the SQL function toolbar to the  canvas by selecting the operator and doing one of the following:</li>
                                                    <ul style="list-style-type: circle;">
                                                        <li value="1">Double-click.</li>
                                                        <li value="2">Drag and drop.</li>
                                                    </ul>
                                                    <li value="8">Connect the <span class="UIelement">Input</span> and <span class="UIelement">Output</span> Nodes to the operator Nodes by clicking one of the Node's anchors and dragging your cursor to the connecting Node.</li>
                                                    <li value="9">Configure each operator by right-clicking on the operator Node and selecting <span class="UIelement">Configure</span>. For more information on how to configure each Node type from their operator panel, see <a href="../../C_XcalarAdvancedMode/B_Operations/AboutOperations.htm" class="MCXref xref" xrefformat="{para}">Understanding the operation Nodes</a>.</li>
                                                    <li value="10">Configure the <span class="UIelement">Output</span> Node, by doing the following:</li>
                                                    <ol style="list-style-type: lower-alpha;">
                                                        <li value="1">Select the <span class="UIelement">Output</span> Node, right-click, and select <span class="UIelement">Configure</span>.</li>
                                                        <li value="2">From the <span class="UIelement">SQL Function Output</span> panel, verify the schema.</li>
                                                        <li value="3">Click <span class="UIelement">Save</span>.</li>
                                                    </ol>
                                                    <li value="11">In the canvas, right-click and select <span class="UIelement">Execute All</span>.</li>
                                                    <li value="12">(Optional) As you connect each Node, test each phase of the SQL function, by right-clicking the Node and selecting <span class="UIelement">Execute</span>.</li>
                                                    <div class="Note"><span class="label">NOTE:</span> <span class="GeneralProductName3">Xcalar</span> recommends that you test each phase of the SQL function and fix any errors during  each configuration step.</div>
                                                    <li value="13">When you are satisfied with your SQL&#160;function, the next step is to include the SQL function in an SQL&#160;Statement. For this task you must go back to the <span class="UIelement">SQL Mode</span> workspace.</li>
                                                    <p>To go back to the <span class="UIelement">SQL Mode</span> workspace, from the top menu bar of <span class="GeneralGUIName1">Xcalar Design</span>, click the mode switch to <span class="UIelement">SQL&#160;Mode</span>.</p>
                                                </ol>
                                                <p>For more information on how to include a SQL function in a SQL&#160;statement, see <a href="#Invoking" class="MCXref xref" xrefformat="{para}">Invoking a SQL function in a SQL statement</a>. </p>
                                                <h3><a name="Configur"></a>Configuring the  Input Node's schema</h3>
                                                <p>Tables must be associated with a schema that describes the table by its column names and their data type formats, such as integer or string. In the Dataflow Mode, you can choose to manually code the schema or allow <span class="GeneralProductName3">Xcalar</span> to detect the columns and their data types for you. </p>
                                                <p>To configure the <span class="UIelement">Input</span> Node's schema:</p>
                                                <ol>
                                                    <li value="1">In the Dataflow Mode canvas, select the <span class="UIelement">Input</span> Node.</li>
                                                    <li value="2">Right-click and select <span class="UIelement">Configure</span>.</li>
                                                    <p>The <span class="UIelement">SQL&#160;Function Input</span> panel appears.</p>
                                                    <li value="3">From the <span class="UIelement">Source Table (For testing only)</span> list, select the table that contains your input source data.</li>
                                                    <li value="4"> Do one of the following:</li>
                                                    <ul style="list-style-type: circle;">
                                                        <li value="1">To use the <span class="UIelement">Standard</span> default option where <span class="GeneralProductName3">Xcalar</span> detects the table's column names and their data types:</li>
                                                        <ol style="list-style-type: lower-alpha;">
                                                            <li value="1">In the <span class="UIelement">SQL&#160;Function Input</span> panel, stay in the <span class="UIelement">Standard</span> procedure. </li>
                                                            <li value="2">Verify the column names and their data type format selections.</li>
                                                            <li value="3">(Optional) Edit the column names and their data type as follows:</li>
                                                            <ul>
                                                                <li value="1"><span class="UIelement">Column Name</span> field, which lists the name of the column. You can change the name and add or remove the entry field.</li>
                                                                <li value="2"><span class="UIelement">Column Type</span> field, which lists the data type format of the column. You can change the data type format entry from the <span class="UIelement">Column Type</span> list and add or remove the entry field.</li>
                                                                <li value="3"><span class="UIelement">CLEAR ALL</span> icon, which removes all entry fields. </li>
                                                                <li value="4"><span class="UIelement">DETECT</span> icon, which automatically detects column names and their data type format from your source data. </li>
                                                            </ul>
                                                        </ol>
                                                        <li value="2">To manually enter the table's schema:</li>
                                                        <ol style="list-style-type: lower-alpha;">
                                                            <li value="1">In the <span class="UIelement">SQL&#160;Function Input</span> panel, click the toggle switch from the <span class="UIelement">Standard</span> view to the <span class="UIelement">Advanced</span> view.</li>
                                                            <p>The schema code editor opens.</p>
                                                            <li value="2">In the code editor enter the table's column names and their data type using the following syntax:</li>
                                                            <p>[{"name":"<var>column1</var>", "type":"<var>data type</var>"}, {"name":"<var>column2</var>", "type":"<var>data type</var>"}, ... ]
</p>
                                                            <p>Where,</p>
                                                            <ul style="list-style-type: square;">
                                                                <li value="1"><var>column</var> is the name of the column.</li>
                                                                <li value="2"><var>data type</var> is the data type format of the column. Choose from boolean, integer, float, string, timestamp, and money. For more information on the data types formats that <span class="GeneralProductName3">Xcalar</span> supports, see <a href="../../E_Reference/DataTypes.htm" class="MCXref xref" xrefformat="{para}">Data types supported</a>.</li>
                                                            </ul>
                                                        </ol>
                                                        <p>For an <span class="UIelement">Input</span> Node's schema that requires a primary key, contains nested JSON data, or contains nested XML data, see the following topics on how to include these in the table syntax:</p>
                                                        <ul>
                                                            <li value="1"><a href="../../A_GetStarted/ImportData.htm#Creating2" class="MCXref xref" xrefformat="{para}">Creating a primary key</a>
                                                            </li>
                                                            <li value="2"><a href="../../A_GetStarted/ImportJSONExample.htm#Importin" class="MCXref xref" xrefformat="{para}">Importing a JSON file into a table</a>
                                                            </li>
                                                            <li value="3"><a href="../../A_GetStarted/ImportXMLExample.htm#Importin" class="MCXref xref" xrefformat="{para}">Importing an XML into a table</a>
                                                            </li>
                                                        </ul>
                                                    </ul>
                                                    <li value="5">When you are satisfied with all the entries, click <span class="UIelement">Save</span>.</li>
                                                </ol>
                                                <div class="Note"><span class="label">NOTE:</span> If  the <span class="UIelement">Auto preview the results after execution</span> setting is enabled, the table is displayed in the Dataflow Mode's previewing section. You can enable the <span class="UIelement">Auto preview the results after execution</span> setting from the <span class="UIelement">Dataflow Settings</span> modal window by clicking the <span class="UIelement">Dataflow settings</span> icon <img src="../../../Resources/Images/XD_assets/xd_dataflow_settings_icon.png" /> in the <span class="GeneralGUIName1">Xcalar Design</span> menu bar.</div>
                                                <h3><a name="Invoking"></a>Invoking a SQL function in a SQL statement</h3>
                                                <p>The SQL function replaces a table  within a SQL query statement as long as it generates the same schema. SQL&#160;functions use standard modular programming. You can apply multiple SQL&#160;functions to one table, you can include one SQL function multiple times in a SQL&#160;statement, and you can create nested SQL&#160;functions. </p>
                                                <p>When including the SQL&#160;function in a statement the following <span class="UIelement">must</span> be adhered:</p>
                                                <ul>
                                                    <li value="1">The SQL function's <span class="UIelement">Output</span> table must contain the same schema as the table it is replacing. </li>
                                                    <li value="2">All Input tables that are part of the SQL function must contain the same schema as the Input tables used to create the SQL function.</li>
                                                    <li value="3">All Input tables that are part of the SQL function must adhere to the same order for processing as the Input tables used to create the SQL function.</li>
                                                </ul>
                                                <h4>Examples:</h4>
                                                <ul>
                                                    <li value="1">The following example, uses a  <span class="UIelement">mysqlfn</span> SQL function on a set of production  tables, where the production tables are in the exact order that was used to create the <span class="UIelement">mysqlfn</span> SQL function and where each production table contains the same schema as the respective input table that was used to create the SQL function.</li>
                                                    <p><code>SELECT * FROM mysqlfn(<var>PRODUCTION_INPUT1</var>, <var>PRODUCTION_INPUT2</var>, <var>PRODUCTION_INPUT3</var>)</code>
                                                    </p>
                                                    <li value="2">The following  example, shows a simple nested SQL&#160;function:</li>
                                                    <p><code>SELECT * FROM mysqlfn1(mysqlfn2(<var>INPUT_A</var>), <var>INPUT_B</var>)</code>
                                                    </p>
                                                </ul>
                                                <p><a href="#top">Go to the top</a>
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </main>
                        </div>
                    </div><a data-close="true"></a>
                </div>
            </div>
        </div>
    </body>
</html>