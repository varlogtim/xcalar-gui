<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="_Skins_HTML5___SideNav" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../../" data-mc-has-content-body="True" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Reference">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta charset="utf-8" />
        <meta name="description" content="" />
        <meta name="author" content="" /><title>Map functions</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/Stylesheets/foundation.6.2.3.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/Stylesheets/Styles.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/Stylesheets/Tablet.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/Stylesheets/Mobile.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/MainStyles.css" rel="stylesheet" />
        <style>/*&lt;meta /&gt;*/

.button.previous-topic-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/navigate-previous.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.next-topic-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/navigate-next.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.separator-button
{
	-pie-background: linear-gradient(#ffffff, #ececec);
}

.button.print-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/printer.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.needs-pie
{
	behavior: url('../../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <link href="../../Resources/TableStyles/SimpleTable.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.6.2.3_custom.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapGlobal.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapDom.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapUtilities.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapXhr.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapTextEffects.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapSlideshow.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapFeedback.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapDefault.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapHelpSystem.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.Breadcrumbs.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.MiniToc.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.SideMenu.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapIndex.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapGlossary.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapParser.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapSearch.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapTopic.js">
        </script>
        <script src="../../../Skins/Default/Scripts/TopicToolBar.js">
        </script>
    </head>
    <body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-right" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
                    <ul class="off-canvas-accordion vertical menu off-canvas-list" data-accordion-menu="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div data-sticky-container="" class="title-bar-container">
                        <nav class="title-bar tab-bar sticky" data-sticky="" data-options="marginTop:0" style="width:100%" data-sticky-on="only screen and (max-width: 800px)" data-mc-ignore="true">
                            <div class="middle title-bar-section outer-row clearfix">
                                <div class="menu-icon-container relative clearfix">
                                    <button class="menu-icon" data-toggle="offCanvas"><span></span>
                                    </button>
                                </div>
                            </div>
                            <div class="title-bar-layout outer-row">
                                <div class="logo-wrapper"><a class="logo" href="../../Home.htm" alt="Logo"></a>
                                </div>
                                <div class="navigation-wrapper nocontent">
                                    <ul class="navigation clearfix" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                        <li class="placeholder" style="visibility:hidden"><a>placeholder</a>
                                        </li>
                                    </ul>
                                </div>
                                <div class="nav-search-wrapper">
                                    <div class="nav-search row">
                                        <form class="search" action="#">
                                            <div class="search-bar search-bar-container needs-pie">
                                                <input class="search-field needs-pie" type="search" placeholder="Search" />
                                                <div class="search-filter-wrapper">
                                                    <div class="search-filter">
                                                        <div class="search-filter-content">
                                                            <ul>
                                                                <li>All Files</li>
                                                            </ul>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="search-submit-wrapper" dir="ltr">
                                                    <div class="search-submit" title="Search">
                                                    </div>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </nav>
                    </div>
                    <section class="main-section">
                        <div class="row outer-row sidenav-layout">
                            <div class="sidenav-wrapper">
                                <div class="sidenav-container">
                                    <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                                </div>
                            </div>
                            <div class="body-container">
                                <div data-mc-content-body="True">
                                    <div class="content">
                                        <p><a name="top"></a>
                                        </p>
                                        <div id="contentBody">
                                            <div class="row collapse">
                                                <div class="sideContent">
                                                    <div class="clearfix">
                                                        <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolBar mc-component nocontent">
                                                            <div class="button-group-container-left">
                                                                <button class="button needs-pie previous-topic-button" title="Navigate previous">
                                                                    <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="previous topic" />
                                                                </button>
                                                                <button class="button needs-pie next-topic-button" title="Navigate next">
                                                                    <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="next topic" />
                                                                </button>
                                                                <div class="button-separator">
                                                                </div>
                                                                <button class="button needs-pie print-button" title="Print">
                                                                    <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="print" />
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="nocontent">
                                                    <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="3" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">You are here: </span>
                                                    </div>
                                                </div>
                                                <h1><a name="mapFunctions" class="ForCSH"></a>Map functions</h1>
                                                <p>This section describes the function categories supported by the Map operation. If the input type is shown as Any, the data type can be boolean, float, integer, or string.</p>
                                                <div class="Note"><span class="label">NOTE</span>:&#160;Functions that accept  an integer as input also accept a boolean value, unless specified otherwise in the following tables. When an arithmetic function evaluates boolean input, true is equivalent to 1, and false is equivalent to 0.</div>
                                                <div class="Note"><span class="label">IMPORTANT</span>: The data type of a prefixed column might be number. If a function accepts only float or integer, always cast a number column to the appropriate type before running the function to avoid unexpected results. To confirm that the data type of a column is appropriate for a function, move the cursor over the data type icon in the column header. A tooltip is displayed to indicate the data type. </div>
                                                <p>For information about how to start a Map operation, see <a href="../C_XcalarAdvancedMode/B_Operations/K_Map.htm" class="MCXref xref">Using a Map function to create new values</a>.</p>
                                                <h2 class="noPageBreak"><a name="About"></a>Understanding date and time formats</h2>
                                                <p>Some functions  require you to enter date or time formats in the input and output fields. You specify year, month, day, hour, minute, and second as %Y, %m, %d, %H, %M, and %S, respectively. </p>
                                                <p>Some specifiers use uppercase and lowercase letters to distinguish between  the long and short form of the same name. For example, %b is an abbreviated month name such as Aug, and %B is a full month name such as August. </p>
                                                <p>For a date to be displayed as <span class="UIelement">Sat, April 07, 2007</span> in a table column, specify the following format as the output format:</p>
                                                <p class="userInput">%a, %B %d, %Y </p>
                                                <p>For a complete list of specifiers that you can use in a <span class="GeneralProductName3">Xcalar</span> function, see  the following document:</p>
                                                <p><a href="http://www.cplusplus.com/reference/ctime/strftime/">http://www.cplusplus.com/reference/ctime/strftime/</a>
                                                </p>
                                                <h2 class="noPageBreak">Understanding precision in arithmetic functions for floating point values</h2>
                                                <p><span class="GeneralProductName3">Xcalar</span> uses the  IEEE 754 double-precision floating point format. Be aware that inaccuracies might occur in floating point computation when it involves a numeric value that cannot be accurately represented in binary form. The following  examples show how using an arithmetic function for floating point values causes inaccuracies:</p>
                                                <ul>
                                                    <li value="1">Dividing 0.6 by 0.2 results in 2.9999999999999996 instead of 3, </li>
                                                    <li value="2">Subtracting 11 from 11.1 results in 0.09999999999999964 instead of 0.1.</li>
                                                </ul>
                                                <h2 class="noPageBreak">Understanding the mixed data type</h2>
                                                <p>A column might contain data of various types.&#160;For example, some cells contain strings, some cells contain floating point values, and so on. The data type for such a column is mixed. You can run a function on a mixed column, but only values of the acceptable input data type produce meaningful results. The function returns FNF&#160;if one or more operands are not acceptable to the function. For example, you can run the add function on two mixed columns. The function returns the sum only if both operands are numbers. If one or both operands are a string, the result is FNF.</p>
                                                <h2 class="noPageBreak">About the function syntax</h2>
                                                <p>The argument to a function can be a constant, an aggregate, or a column. In the following tables, if a function takes variable number of arguments, shown as ellipsis (…), you can include up to 1024 arguments in that function.</p>
                                                <h2 class="noPageBreak">Arithmetic functions</h2>
                                                <table style="mc-table-style: url('../../Resources/TableStyles/SimpleTable.css');margin-left: 0;margin-right: auto;" class="TableStyle-SimpleTable" cellspacing="0">
                                                    <col class="TableStyle-SimpleTable-Column-Column1" />
                                                    <col class="TableStyle-SimpleTable-Column-Column2" />
                                                    <col class="TableStyle-SimpleTable-Column-Column1" />
                                                    <col class="TableStyle-SimpleTable-Column-Column2" />
                                                    <thead>
                                                        <tr class="TableStyle-SimpleTable-Head-Header1">
                                                            <th class="TableStyle-SimpleTable-HeadE-Column1-Header1">Function</th>
                                                            <th class="TableStyle-SimpleTable-HeadE-Column2-Header1">Description</th>
                                                            <th class="TableStyle-SimpleTable-HeadE-Column1-Header1">Input type</th>
                                                            <th class="TableStyle-SimpleTable-HeadD-Column2-Header1">Output type</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">abs(number)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Returns the absolute value of <var>number</var>.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Float or Integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p>absInt(number)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">
                                                                <p>Returns the absolute value of <var>number</var>.</p>
                                                                <div class="Note"><span class="label">NOTE</span>:&#160;If the input is  boolean , the function returns FNF.</div>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Integer</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">absNumeric(number)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Returns the absolute value of <var>number</var>.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Integer or Money</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Money</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">add(number1, number2, …)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Returns the sum of all arguments. The function adds up to  1,024 arguments.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Float or Integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">addInteger(number1, number2, …)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Returns the sum of all arguments. Floats are truncated before addition. The function adds up to  1,024 arguments.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Float or Integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Integer</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p class="tableParagraph">addNumeric(number1, number2, …)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">
                                                                <p class="tableParagraph">Returns the sum of all arguments. The string must be a number or a scientific notation of a number (for example, "3.14", "2.78e1").</p>
                                                                <p class="tableParagraph">The function adds up to  1,024 arguments.</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p class="tableParagraph">Integer, Money or String</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">
                                                                <p class="tableParagraph">Money</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">ceil(number)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">
                                                                <p>Returns the smallest integer that is greater than or equal to <var>number</var>.</p>
                                                                <div class="Note"><span class="label">NOTE</span>:&#160;The data type of the output is float even though the output is displayed as an integer.</div>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Float or Integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">div(number1, number2)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Divides <var>number1</var> by <var>number2</var>. If <var>number2</var> is 0, the result is FNF.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Float or Integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">divNumeric(number1, number2)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Divides <var>number1</var> by <var>number2</var>. If <var>number2</var> is 0, the result is NAN. The string must be a number or a scientific notation of a number (for example, "3.14", "2.78e1")</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">
                                                                <p class="tableParagraph">Integer, Money or String</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">
                                                                <p class="tableParagraph">Money</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">exp(number)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Raises e (the base of natural logarithms)&#160;to the power that is equal to <var>number</var>.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Float or Integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">
                                                                <p>floatCompare(number1, number2, precision)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">
                                                                <p>Compares <var>number1</var> and <var>number2</var> to determine if the difference is within the precision value. The function returns  0, 1, or -1. The following list describes the results:</p>
                                                                <ul>
                                                                    <li value="1">
                                                                        <p>0 if the difference of <var>number1</var> and <var>number2</var> is less than <var>precision</var>. </p>
                                                                        <div class="Note"><span class="label">EXAMPLE</span>: If <var>number1</var> is 1.1, <var>number2</var> is 1.2, and <var>precision</var> is 0.5, the result is 0. This is because the difference (0.1) is less than <var>precision</var> (0.5).</div>
                                                                    </li>
                                                                    <li value="2">
                                                                        <p>1 if the  difference of <var>number1</var> and <var>number2</var> is greater than or equal to <var>precision</var>, and <var>number1</var> is greater than <var>number2</var>.</p>
                                                                        <div class="Note"><span class="label">EXAMPLE</span>: If <var>number1</var> is 1.2, <var>number2</var> is 1.1, and <var>precision</var> is 0.1, the result is 1. This is because the difference (0.1) is equal to <var>precision</var> (0.1) and <var>number1</var> is greater than <var>number2</var>.</div>
                                                                    </li>
                                                                    <li value="3">
                                                                        <p>-1 if  the difference of <var>number1 </var>and <var>number2</var> is greater than or equal to <var>precision</var>, and <var>number1</var> is less than <var>number2</var>. </p>
                                                                        <div class="Note"><span class="label">EXAMPLE</span>: If <var>number1</var> is 1.1, <var>number2</var> is 1.2, and <var>precision</var> is 0.1, the result is -1. This is because the difference (0.1) is equal to <var>precision</var> (0.1) and <var>number1</var> is less than <var>number2</var>.</div>
                                                                    </li>
                                                                </ul>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">
                                                                <p>Float</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">
                                                                <p>Integer</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">floor(number)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">
                                                                <p>Returns the largest integer less than or equal to <var>number</var>.</p>
                                                                <div class="Note"><span class="label">NOTE</span>:&#160;The data type of the output is float even though the output is displayed as an integer.</div>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Float or Integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">log(number)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">
                                                                <p>Returns the logarithm of <var>number</var> to the base of e.</p>
                                                                <div class="Note"><span class="label">IMPORTANT</span>: This function is the natural logarithm. It is not the same as the log function in other applications such as Excel, which uses 10 as the default base of the logarithm.</div>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Float or Integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">log10(number)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Returns the logarithm of <var>number</var> to the base of 10.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Float or Integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">log2(number)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Returns the logarithm of <var>number</var> to the base of 2.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Float or Integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p>mod(number1, number2)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">
                                                                <p>Returns the remainder after <var>number1</var> is divided by <var>number2</var>.</p>
                                                                <p>The following list provides guidelines for using this function:</p>
                                                                <ul>
                                                                    <li value="1"> If <var>number2</var> is 0, the result is FNF. </li>
                                                                    <li value="2">The sign of the result is the same as the sign of <var>number1</var>.</li>
                                                                    <li value="3">
                                                                        <p>If the absolute value of <var>number2</var> is greater than the absolute value of <var>number1</var>, the result is <var>number1</var>. The following are examples:</p>
                                                                        <ul>
                                                                            <li value="1">mod(2,5) evaluates to 2.</li>
                                                                            <li value="2">mod(-2,-5) evaluates to -2.</li>
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Integer</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">mult(number1, number2, …)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Returns the product of multiplying all arguments. The function can multiply up to 1,024 arguments.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Float or Integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p class="tableParagraph">multInteger(number1, number2, …)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">
                                                                <p class="tableParagraph">Returns the product of multiplying all arguments. The function can multiply up to 1,024 arguments. The arguments are truncated before multiplication.</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p class="tableParagraph">Float or Integer</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">
                                                                <p class="tableParagraph">Integer</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">multNumeric(number1, number2, …)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Returns the product of multiplying all arguments. The string must be a number or a scientific notation of a number (for example, "3.14", "2.78e1"). The function can multiply up to 1,024 arguments.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Integer, Money or String</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Money</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">pow(base, exponent)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Raises base to the power specified by <var>exponent</var>.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Float or Integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">round(number, decimal_places)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">
                                                                <p>Rounds <var>number</var> to the specified decimal places. </p>
                                                                <div class="Note"><span class="label">NOTE</span>:&#160;If <var>decimal_places</var> is None, the resultant number has no decimal places.</div>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Float or Integer for <var>number</var>; Integer for <var>decimal_places</var></td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p class="tableParagraph">roundNumeric(number, decimal_places)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">
                                                                <p class="tableParagraph">Rounds <var>number</var> to the specified decimal places. The string must be a number or a scientific notation of a number (for example, "3.14", "2.78e1").</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Integer, Money or String for <var>number</var>; Integer for <var>decimal_places</var></td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Money</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">sqrt(number)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Returns the square root of <var>number</var>.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Float or Integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">sub(number1, number2, …)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Subtracts one or more arguments from <var>number1</var>. The function accepts up to 1,024 arguments.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Float or Integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">subInteger(number1, number2, …)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Subtracts one or more arguments from <var>number1</var>. The function accepts up to 1,024 arguments. Arguments are truncated before the operation.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Float or Integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Integer</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyB-Column1-Body2">
                                                                <p class="tableParagraph">subNumeric(number1, number2, …)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyB-Column2-Body2">
                                                                <p class="tableParagraph">Subtracts one or more arguments from <var>number1</var>. The string must be a number or a scientific notation of a number (for example, "3.14", "2.78e1"). The function accepts up to 1,024 arguments.</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyB-Column1-Body2">
                                                                <p class="tableParagraph">Integer, Money or String</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyA-Column2-Body2">
                                                                <p class="tableParagraph">Money</p>
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                                <h2 class="noPageBreak">Bitwise functions</h2>
                                                <table style="mc-table-style: url('../../Resources/TableStyles/SimpleTable.css');margin-left: 0;margin-right: auto;width: 100%;" class="TableStyle-SimpleTable" cellspacing="0">
                                                    <col class="TableStyle-SimpleTable-Column-Column1" style="width: 107px;" />
                                                    <col class="TableStyle-SimpleTable-Column-Column2" />
                                                    <col class="TableStyle-SimpleTable-Column-Column1" />
                                                    <col class="TableStyle-SimpleTable-Column-Column2" style="width: 22px;" />
                                                    <thead>
                                                        <tr class="TableStyle-SimpleTable-Head-Header1">
                                                            <th class="TableStyle-SimpleTable-HeadE-Column1-Header1">Function</th>
                                                            <th class="TableStyle-SimpleTable-HeadE-Column2-Header1">Description</th>
                                                            <th class="TableStyle-SimpleTable-HeadE-Column1-Header1">Input type</th>
                                                            <th class="TableStyle-SimpleTable-HeadD-Column2-Header1">Output type</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">bitCount(number)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Returns count of 1's in the binary representation of the <span class="UIelement">number</span>.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Integer</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p class="tableParagraph">bitLength(number)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">
                                                                <p>Returns the bit length of <span class="UIelement">number</span>.</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p class="tableParagraph">Any</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">
                                                                <p class="tableParagraph">Integer</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">bitand(number1, number2)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Returns the result of the AND&#160;operation on the bit patterns of <var>number1</var> and <var>number2</var>.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Integer</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p>bitLength(expression)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">
                                                                <p>Returns the amount of memory, expressed in bits, used for <var>expression</var>. The following list describes how it determines the result:</p>
                                                                <ul>
                                                                    <li value="1">If <var>expression</var> is boolean, float, or integer, the function returns 64. </li>
                                                                    <li value="2">If <var>expression</var> is String, the function multiplies the number of characters by 8 and then adds 72.</li>
                                                                </ul>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p>Any</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">
                                                                <p>Integer</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">bitlshift(number1, number2)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">
                                                                <p>Returns the result of a logical left shift on <var>number1</var> by the number of bits specified by <var>number2</var>.</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Integer</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">bitor(number1, number2)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">
                                                                <p>Returns the result of the inclusive OR operation on the bit patterns of <var>number1</var> and <var>number2</var>.</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Integer</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">bitrshift(number1, number2)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">
                                                                <p>Returns the result of a logical right shift on <var>number1</var> by the number of bits specified by <var>number2</var>.</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Integer</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">bitxor(number1, number2)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Returns the result of the XOR&#160;(exclusive OR) operation on <var>number1</var> and <var>number2</var>.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Integer</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">colsDefinedBitmap(value1, value2, ...)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Replaces the non-null parameter values with 1, the null/FNF parameter values with 0 and creates a binary number. The order of the parameters is important. The first parameter makes the most significant bit of the resultant binary number and the last parameter makes the least significant bit of the same binary number. The resultant binary number is then converted to a decimal number and returned as an integer. </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Any</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Integer</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyB-Column1-Body2">
                                                                <p>octetLength</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyB-Column2-Body2">
                                                                <p>Returns the amount of memory, expressed in bytes, used for <var>expression</var>. The following list describes how it determines the result:</p>
                                                                <ul>
                                                                    <li value="1">If <var>expression</var> is boolean, float, or integer, the function returns 8. </li>
                                                                    <li value="2">
                                                                        <p>If <var>expression</var> is string, the function performs these steps and returns the result:</p>
                                                                        <ol style="list-style-type: lower-alpha;">
                                                                            <li value="1">Multiplies the number of characters by 8.</li>
                                                                            <li value="2">Adds 72.</li>
                                                                            <li value="3">Divides by 8.</li>
                                                                        </ol>
                                                                    </li>
                                                                </ul>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyB-Column1-Body2">
                                                                <p>Any</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyA-Column2-Body2">
                                                                <p>Integer</p>
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                                <h2 class="noPageBreak"><a name="Conditio"></a>Conditional functions</h2>
                                                <div class="Note"><span class="label">NOTE</span>:&#160;Due to the limited precision in floating point computations, functions such as eq, ge, le, which test equality, might produce unexpected results. For example, eq(div(0.6,0.2), 3.0) returns false. For a more precise result when comparing two floating point values, use the floatCompare function. </div>
                                                <table style="mc-table-style: url('../../Resources/TableStyles/SimpleTable.css');margin-left: 0;margin-right: auto;width: 100%;" class="TableStyle-SimpleTable" cellspacing="0">
                                                    <col class="TableStyle-SimpleTable-Column-Column1" />
                                                    <col class="TableStyle-SimpleTable-Column-Column2" />
                                                    <col class="TableStyle-SimpleTable-Column-Column1" style="width: 151px;" />
                                                    <col class="TableStyle-SimpleTable-Column-Column2" style="width: 151px;" />
                                                    <thead>
                                                        <tr class="TableStyle-SimpleTable-Head-Header1">
                                                            <th class="TableStyle-SimpleTable-HeadE-Column1-Header1">Function</th>
                                                            <th class="TableStyle-SimpleTable-HeadE-Column2-Header1">Description</th>
                                                            <th class="TableStyle-SimpleTable-HeadE-Column1-Header1">Input type</th>
                                                            <th class="TableStyle-SimpleTable-HeadD-Column2-Header1">Output type</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">and(value1, value2)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Returns the result of the AND&#160;operation on <var>value1</var> and <var>value2</var>.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Boolean</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Boolean</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">between(number1, number2, number3)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Tests if <var>number1</var> is equal to or greater than <var>number2</var>, and less than or equal to <var>number3</var>. All the values should be of the same type. </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Boolean, Float, Integer, String or Timestamp</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Boolean</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">contains(string, pattern, ignoreCase)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Tests if <var>string</var> contains <var>pattern</var>. <var>IgnoreCase</var> is set to false by default, which means the pattern matching is case-sensitive. If you select the <var>IgnoreCase</var> option (that is, set the option to true), the pattern matching is case-insensitive.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">String for <var>string</var> and <var>pattern</var>; Boolean for <var>ignoreCase</var></td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Boolean</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p>endsWith(string, pattern, ignoreCase)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">
                                                                <p>Tests if <var>string</var> ends with the pattern.  <var>IgnoreCase</var> is set to false by default, which means the pattern matching is case-sensitive. If you select <var>IgnoreCase</var> (that is, set the option to true), the pattern matching is case-insensitive.</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p>String for <var>string</var> and <var>pattern;</var> Boolean for <var>ignoreCase</var></p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">
                                                                <p>Boolean</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">eq(value1, value2)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">
                                                                <p>Tests if <var>value1</var> and <var>value2</var> are equal. Both the values must be of the same type. For example, if column1 contains Timestamps, the following statement will produce an error:</p>
                                                                <p>eq($column1, "1996-02-28T00:00:00.000Z")</p>
                                                                <p>because the second argument is a String, not a Timestamp. The correct statement will be:</p>
                                                                <p>eq($column1, timestamp("1996-02-28T00:00:00.000Z"))</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Any (all values must be of the same type)</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Boolean</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p class="tableParagraph">eqNonNull()</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">
                                                                <p class="tableParagraph">Tests if <var>value1</var> and <var>value2</var> are equal. Returns FNF if either of the values is FNF.</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p class="tableParagraph">Any (all values must be of the same type)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">
                                                                <p class="tableParagraph">Boolean</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">exists(field_name)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Tests if a value exists in the field  specified by <var>field_name</var>. If a value exists, the result is true; otherwise (that is, the value is shown as FNF), the result is false.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Any</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Boolean</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">ge(value1, value2)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Tests if <var>value1</var> is greater than or equal to <var>value2</var>.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Any (all values must be of the same type)</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Boolean</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">gt(value1, value2)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Tests if <var>value1</var> is greater than <var>value2</var>.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Any (all values must be of the same type)</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Boolean</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p class="tableParagraph">in(value1, value2, value3, ...)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">
                                                                <p class="tableParagraph">Returns true if <span class="UIelement">value1 </span>matches with at least one of the other arguments, otherwise it returns false.</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p class="tableParagraph">Any (all values must be of the same type)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">
                                                                <p class="tableParagraph">Boolean</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">isBoolean(value)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Tests if the data type of <var>value</var> is boolean.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Any</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Boolean</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">isFloat(value)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Tests if the data type of <var>value</var> is float.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Any</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Boolean</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">isInf(value)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Tests if <var>value</var> is infinity. Infinity is displayed as <span class="UIelement">inf</span> or <span class="UIelement">-inf</span>.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Float</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Boolean</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">isInteger(value)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Tests if the data type of <var>value</var> is integer.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Any</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Boolean</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">
                                                                <p>isNull(field_name)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">
                                                                <p>Tests if a field specified by <var>field_name</var> has the JSON&#160;value, null.</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">
                                                                <p>Any</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">
                                                                <p>Boolean</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p class="tableParagraph">isNumeric(value)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">
                                                                <p class="tableParagraph">Tests if the data type of <var>value</var> is money.</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p class="tableParagraph">Any</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">
                                                                <p class="tableParagraph">Boolean</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">isString(value)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Tests if the data type of <var>value</var> is string.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Any</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Boolean</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">le(value1, value2)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Tests if <var>value1</var> is less than or equal to <var>value2</var>.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Any (all values must be of the same type)</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Boolean</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">like(string1, string2)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">
                                                                <p>Tests if <var>string1</var> is similar to <var>string2</var>. The comparison is case sensitive. The result is true only if the strings are a complete match. </p>
                                                                <p>You can include an asterisk (*) as a wild card character. For example, if <var>string1</var> is ABC and <var>string2</var> is A*C, the result is true. If <var>string1</var> is ABC and <var>string2</var> is AB, the result is false.</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">String</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Boolean</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">lt(value1, value2)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Tests if <var>value1</var> is less than <var>value2</var>.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Any (all values must be of the same type)</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Boolean</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">neq(value1, value2)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Tests if <var>value1</var> is not equal to <var>value2</var>. Both the values must be of the same type. For example, if column1 contains Timestamps, the following statement will produce an error:<p>neq($column1, "1996-02-28T00:00:00.000Z")</p><p>because the second argument is a String, not a Timestamp. The correct statement will be:</p><p>neq($column1, timestamp("1996-02-28T00:00:00.000Z"))</p></td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Any (all operands must be of the same type)</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Boolean</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">not(value)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Reverses <var>value</var>. For example, if <var>value </var>is true, the function returns false.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Boolean</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Boolean</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">or(value1, value2)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Returns the result of the OR operation on <var>value1</var> and <var>value2</var>.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Boolean</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Boolean</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">regex(string, regular_expression)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">
                                                                <p>Tests if a substring matching <var> regular_expression</var> exists in <var>string</var>.</p>
                                                                <div class="Example"><span class="label">EXAMPLE</span>: If <var>string</var> is UA01 and<var> regular_expression</var> is 01$, the result is true. If <var>string</var> is UA012 and <var>regular_expression</var> is 01$, the result is false.&#160;The regular expression specifies that  01 must be matched at the end of <var>string</var> for the function to return true.</div>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">String</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Boolean</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyB-Column1-Body1">
                                                                <p>startsWith(string, pattern, ignoreCase)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyB-Column2-Body1">
                                                                <p>Tests if <var>string</var> starts with <var>pattern</var>.  The <var>IgnoreCase</var> option is set to false by default, which means the pattern matching is case-sensitive. If you select the <var>IgnoreCase</var> option (that is, set the option to true), the pattern matching is case-insensitive.</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyB-Column1-Body1">
                                                                <p>String for <var>string</var> and <var>pattern</var>; Boolean for <var>ignoreCase</var></p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyA-Column2-Body1">
                                                                <p>Boolean</p>
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                                <h2 class="noPageBreak">Conversion functions</h2>
                                                <div class="Note"><span class="label">NOTE</span>:&#160;Functions for converting date and time strings require an input or output format. For more information about how to specify the format, see <a href="#About" class="MCXref xref">Understanding date and time formats</a>.</div>
                                                <table style="mc-table-style: url('../../Resources/TableStyles/SimpleTable.css');margin-left: 0;margin-right: auto;width: 100%;" class="TableStyle-SimpleTable" cellspacing="0">
                                                    <col style="width: 134px;" class="TableStyle-SimpleTable-Column-Column1" />
                                                    <col style="width: 134px;" class="TableStyle-SimpleTable-Column-Column2" />
                                                    <col style="width: 134px;" class="TableStyle-SimpleTable-Column-Column1" />
                                                    <col style="width: 134px;" class="TableStyle-SimpleTable-Column-Column2" />
                                                    <thead>
                                                        <tr class="TableStyle-SimpleTable-Head-Header1">
                                                            <th class="TableStyle-SimpleTable-HeadE-Column1-Header1">Function</th>
                                                            <th class="TableStyle-SimpleTable-HeadE-Column2-Header1">Description</th>
                                                            <th class="TableStyle-SimpleTable-HeadE-Column1-Header1">Input type</th>
                                                            <th class="TableStyle-SimpleTable-HeadD-Column2-Header1">Output type</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">convertDate(date_string, format1, format2)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Converts <var>date_string</var> from  <var>format1</var> to <var>format2</var>.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">String</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">String</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">convertToUnixTS(timestamp, format)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Converts a given timestamp in the specified format to a UNIX timestamp.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">String</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Integer</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">dateAddDay(date, format, number_of_days)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Adds a specified number of days to a date in the specified format. The number of days can be negative.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">String for <var>date</var> and <var>format</var>, Integer for <var>number_of_days</var></td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">String</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">dateAddInterval(date, format, years, months, days)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Adds a time interval (specified in the number of years, the number of months, and the number of days) to a date. The numbers can be negative.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">String for <var>date</var> and <var>format</var>, Integer for <var>years</var>, <var>months</var>, and <var>days</var></td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">String</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">dateAddMonth(date, format, months)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Adds a specified number of months to a date. The number can be negative.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">String for <var>date</var> and <var>format</var>, Integer for <var>months</var></td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">String</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">dateAddYear(date, format, years)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Adds a specified number of years to a date. The number can be negative.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">String for <var>date</var> and <var>format</var>, Integer for <var>years</var></td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">String</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyB-Column1-Body1">dateDiffDay(start_date, end_date, format)</td>
                                                            <td class="TableStyle-SimpleTable-BodyB-Column2-Body1">Calculates the number of days between two dates. </td>
                                                            <td class="TableStyle-SimpleTable-BodyB-Column1-Body1">String</td>
                                                            <td class="TableStyle-SimpleTable-BodyA-Column2-Body1">Integer</td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                                <h2 class="noPageBreak">Miscellaneous functions</h2>
                                                <table style="mc-table-style: url('../../Resources/TableStyles/SimpleTable.css');margin-left: 0;margin-right: auto;width: 100%;" class="TableStyle-SimpleTable" cellspacing="0">
                                                    <col style="width: 134px;" class="TableStyle-SimpleTable-Column-Column1" />
                                                    <col style="width: 134px;" class="TableStyle-SimpleTable-Column-Column2" />
                                                    <col style="width: 134px;" class="TableStyle-SimpleTable-Column-Column1" />
                                                    <col style="width: 134px;" class="TableStyle-SimpleTable-Column-Column2" />
                                                    <thead>
                                                        <tr class="TableStyle-SimpleTable-Head-Header1">
                                                            <th class="TableStyle-SimpleTable-HeadE-Column1-Header1">Function</th>
                                                            <th class="TableStyle-SimpleTable-HeadE-Column2-Header1">Description</th>
                                                            <th class="TableStyle-SimpleTable-HeadE-Column1-Header1">Input type</th>
                                                            <th class="TableStyle-SimpleTable-HeadD-Column2-Header1">Output type</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">dhtHash(field, mod_by)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Generates a hash key used by the distributed hash table. You can omit <var>mod_by</var>.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Any for <var>field</var>, integer for <var>mod_by</var></td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Integer</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">genRandom(number1, number2)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Generates a random number between <var>number1</var>and <var>number2</var>. Numbers are inclusive. A valid result is generated if <var>number1</var> is less than <var>number2</var>. Otherwise, the result is FNF.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Integer</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">genUnique</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Generates a unique integer for each row in a new column.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">N/A</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Integer</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p>if(condition, value_if_true, value_if_false)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">
                                                                <p>Tests if <var>condition</var> is true or false. If true, returns <var>value_if_true</var>; if false, returns <var>value_if_false</var>.</p>
                                                                <p>If condition is non-zero, it is considered  true. If it is 0, it is considered  false.</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Float or Integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">
                                                                <p>ifInt(condition, value_if_true, value_if_false)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">
                                                                <p>Tests if <var>condition</var> is true or false. If true, returns <var>value_if_true</var>; if false, returns <var>value_if_false</var>.</p>
                                                                <p>If <var>condition</var> is non-zero, it is considered  true. If it is 0, it is considered  false.</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Float, Integer or Money for <var>condition</var>, Integer for <var>value_if_true</var> and <var>value_if_false</var></td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Integer</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p class="tableParagraph">ifNumeric(condition, value_if_true, value_if_false)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">
                                                                <p>Tests if <var>condition</var> is true or false. If true, returns <var>value_if_true</var>; if false, returns <var>value_if_false</var>.</p>
                                                                <p>If <span class="UIelement">condition </span>is non-zero, it is considered  true. If it is 0, it is considered  false.</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p class="tableParagraph">Float, Integer or Money for <var>condition</var>, Money for <span class="UIelement">value_if_true</span> and <span class="UIelement">value_if_false</span></p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">
                                                                <p class="tableParagraph">Money</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">ifStr(condition, value_if_true, value_if_false)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">
                                                                <p>Tests if <var>condition</var> is true or false. If true, returns <var>value_if_true</var>; if false, returns <var>value_if_false</var>.</p>
                                                                <p>If <var>condition</var> is non-zero, it is considered  true. If it is 0, it is considered  false.</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Float, Integer or Money for <var>condition</var>, String for <var>value_if_true</var> and <var>value_if_false</var></td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">String</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p class="tableParagraph">ifTimestamp(condition,  value_if_true, value_if_false)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">
                                                                <p>Tests if <var>condition</var> is true or false. If true, returns <var>value_if_true</var>; if false, returns <var>value_if_false</var>.</p>
                                                                <p>If <span class="UIelement">condition</span> is non-zero, it is considered  true. If it is 0, it is considered  false.</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p class="tableParagraph">Float, Integer or Money for <var>condition</var>, Timestamp for  <span class="UIelement">value_if_true</span> and <span class="UIelement">value_if_false</span></p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">
                                                                <p class="tableParagraph">Timestamp</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyB-Column1-Body1">
                                                                <p>xdbHash(argument)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyB-Column2-Body1">
                                                                <p>Determines which XDB hash slot a key hashes to.</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyB-Column1-Body1">
                                                                <p>Any</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyA-Column2-Body1">
                                                                <p>Integer</p>
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                                <h2 class="noPageBreak">String functions</h2>
                                                <table style="mc-table-style: url('../../Resources/TableStyles/SimpleTable.css');margin-left: 0;margin-right: auto;width: 100%;" class="TableStyle-SimpleTable" cellspacing="0">
                                                    <col class="TableStyle-SimpleTable-Column-Column1" />
                                                    <col class="TableStyle-SimpleTable-Column-Column2" />
                                                    <col class="TableStyle-SimpleTable-Column-Column1" />
                                                    <col class="TableStyle-SimpleTable-Column-Column2" />
                                                    <thead>
                                                        <tr class="TableStyle-SimpleTable-Head-Header1">
                                                            <th class="TableStyle-SimpleTable-HeadE-Column1-Header1">Function</th>
                                                            <th class="TableStyle-SimpleTable-HeadE-Column2-Header1">Description</th>
                                                            <th class="TableStyle-SimpleTable-HeadE-Column1-Header1">Input type</th>
                                                            <th class="TableStyle-SimpleTable-HeadD-Column2-Header1">Output type</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">
                                                                <p>ascii(string)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">
                                                                <p>Returns the numeric value of the first character of <var>string</var>. For example, if <var>string</var> is Apple, the function returns 65, because 65 is the ASCII&#160;code for the first character, A.</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">
                                                                <p>String</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">
                                                                <p>Integer</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p>chr(integer)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">
                                                                <p>Returns the character whose ASCII&#160;code is equal to <var>  integer</var>. For example, if <var>integer</var> is 65, the function returns the character, A, because this character's ASCII code is 65.</p>
                                                                <p>If <var>integer</var> is greater than 255, the function returns the value equal to <var> integer</var> mod 256. For example, if integer is 321, the function returns the character, A, because 321 mod 256 is 65, which is the ASCII code for A.</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p>Integer</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">
                                                                <p>String</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">concat(string1, string2, …)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Concatenates up to 1,024 strings.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">String</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">String</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p class="tableParagraph">concatDelim(delim, null_value, include_null, string1, string2, ...)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">
                                                                <p class="tableParagraph">Concatenates <span class="UIelement">string1</span>, <span class="UIelement">string2</span>, ... with delimiter <span class="UIelement">delim</span>. Replaces NULL with <span class="UIelement">null_value</span> if <span class="UIelement">include_null</span> is set to true. </p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p class="tableParagraph">String for <span class="UIelement">delim, null_value</span>, <span class="UIelement">string1</span>, <span class="UIelement">string2</span> Boolean for <span class="UIelement">include_null</span></p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">
                                                                <p class="tableParagraph">String</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">countChar(string1, string2)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Counts occurrences of <var>string2</var> in <var>string1</var>. For example, if <var>string1</var> is abcabd, and <var>string2</var> is ab, the result is 2 because ab occurs twice in abcabd. </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">String</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Integer</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">cut(string, field_number, delimiter)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">
                                                                <p>Returns the string located at the numbered field in <var>string</var>.&#160;</p>
                                                                <p>Field numbers start at 1. Fields are separated by a delimiter, which can be a character or a string of characters.</p>
                                                                <div class="Example"><span class="label">EXAMPLE</span>:&#160;If <var>string</var> is 12/6/2016, <var>field_number</var> is 3, and <var>delimiter</var> is  /,  the function returns 2016, which is the third field in the string.</div>
                                                                <p>The function returns an empty string if any of the following conditions is true:</p>
                                                                <ul>
                                                                    <li value="1">The delimiter exists in <var>string</var> but the numbered field does not exist.</li>
                                                                    <li value="2">The delimiter does not exist in <var>string</var>, and the field number is not equal to 1.</li>
                                                                </ul>
                                                                <p>If the delimiter does not exist in <var>string</var>, and the field number is 1, the result is the input string.</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p>String for string, Integer for <var>field_number</var>, and String for <var>delimiter</var></p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">String</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">
                                                                <p>explodeString(string, delimiter)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">
                                                                <p>Splits a string into multiple strings based on the delimiter, and creates rows containing the resultant strings.</p>
                                                                <p>Delimiter can contain one or multiple characters. If delimiter does not exist, string is not split. A duplicate column with the same contents is created.</p>
                                                                <p>In the newly created rows, the columns retain the same contents before the split.</p>
                                                                <div class="Example"><span class="label">EXAMPLE</span>:&#160;If <var>string</var> is 18/07/03, and <var>delimiter</var> is a slash (/), then <var>string</var> is split into three strings, which are 18, 07, and 03. Each of these strings is stored in a separate row. </div>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">
                                                                <p>String</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">
                                                                <p>String</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">find(string_to_search, string_to_find, starting_index, ending_index)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">
                                                                <p>Returns the  position of the first character of <var>string_to_find</var> contained in <var>string_to_search</var>. Starting index and ending index limit where <var>string_to_find</var> can be found. </p>
                                                                <p> Indexes start at 0 and are inclusive. To return an index as long as it is equal to or greater than the starting index, specify 0 for the ending index. </p>
                                                                <p>If <var>string_to_find</var> is not found within the specified indexes, the function returns -1.</p>
                                                                <div class="Example"><span class="label">EXAMPLE</span>:&#160;If <var>string_to_search</var> is 1/1/2007, <var>string_to_find</var> is 2007, <var>starting_index</var> is 3, and <var>ending_index</var> is 5, the function returns 4 because 2007 is found at index 4. Suppose <var>string_to_search</var> is 12/12/2007, the function returns -1 because  2007 is not found at an index between 3 and 5. However, if the ending index is  0, the function returns 6.</div>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p>String for <var>string_to_search</var> and <var>string_to_find</var></p>
                                                                <p>Integer for <var>starting_index</var> and <var>ending_index</var></p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Integer</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">
                                                                <p>findInSet(string, element)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">
                                                                <p>Returns the index of <var>element</var> in <var>string</var>, which is a comma-delimited list of elements. The pattern matching is case-sensitive.</p>
                                                                <p>Indexes start at 1. If <var>element</var> does not exist, the function returns 0.</p>
                                                                <div class="Example"><span class="label">EXAMPLE</span>:&#160;If <var>string</var> is 18,07,03, and <var>element</var> is 07, the index is 2. If <var>element</var> is 19, the index is 0.</div>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">
                                                                <p>String for all</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">
                                                                <p>Integer</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p>formatNumber(number, decimal_places)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">
                                                                <p>Formats <var>number</var> into a string format with commas and a decimal point.&#160;<var>Decimal_places</var> specifies the number of decimal places.</p>
                                                                <div class="Example"><span class="label">EXAMPLE</span>:&#160;If <var>string</var> is 1234567.89, and <var>decimal_places</var> is 1, the resultant string is 1,234,567.9.</div>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p>Float, Integer or Moneyfor <var>number</var>, Integer for <var>decimal_places</var></p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">
                                                                <p>String</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">
                                                                <p>initCap(string)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">
                                                                <p>Changes the first letter of each word in <var> string</var> to uppercase. If the initial character is already an uppercase letter or is not a letter, no changes are made to the character. Other letters in the  word are changed to lowercase if they are not already in lowercase.</p>
                                                                <p>Words are separated by a space.</p>
                                                                <div class="Example"><span class="label">EXAMPLE</span>:&#160;If <var>string</var> is <span class="UIelement">flight is domestic</span> or <span class="UIelement">FLIGHT IS DOMESTIC</span>, the function returns <span class="UIelement">Flight Is Domestic</span>. </div>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">
                                                                <p>String</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">
                                                                <p>String</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">len(string)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Returns the length of <var>string</var>.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">String</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Integer</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">
                                                                <p>levenshtein(string1, string2)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">
                                                                <p>Returns the Levenshtein distance between string1 and string2.</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">
                                                                <p>String</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">
                                                                <p>Integer</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">lower(string)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Changes a string to lowercase.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">String</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">String</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">
                                                                <p>repeat(string, number_of_times)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">
                                                                <p>Duplicates <var>string</var> by the number of times specified by <var>number_of_times</var>.</p>
                                                                <div class="Example"><span class="label">EXAMPLE</span>:&#160;If <var>string</var> is abc, and <var>number_of_times</var> is 2, the resultant string is abcabc.</div>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">
                                                                <p>String for <var>string</var>, Integer for <var>number_of_times</var></p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">
                                                                <p>String</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">replace(string_to_search, string_to_find, replacement_string, ignoreCase)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">
                                                                <p>In <var>string_to_search</var>, replaces <var>string_to_find</var> and  with <var>replacement_string</var>.</p>
                                                                <p>The pattern matching is case-sensitive by default. If you select the <span class="UIelement">IgnoreCase</span> option (that is, set the option to true), the pattern matching is case-insensitive.</p>
                                                                <div class="Example"><span class="label">EXAMPLE</span>:&#160;If <var>string_to_search</var> is abc, <var>string_to_find</var> is ab, and <var>replacement_string</var> is XYZ, the resultant string is XYZc.</div>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">String for <var>string_to_search</var>, <var>string_to_find</var>, and <var>replacement_string</var>, Boolean for <var>ignoreCase</var></td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">String</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">rfind(string_to_search, string_to_find, starting_index, ending_index)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Same as the find function except that it returns the index of the last character of <var>string_to_find</var>.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">
                                                                <p>String for <var>string_to_search</var> and <var>string_to_find</var></p>
                                                                <p>Integer for <var>starting_index</var> and <var>ending_index</var></p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Integer</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p>soundEx(string)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">
                                                                <p>Returns the American Soundex code for <var>string</var>.</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p>String</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">
                                                                <p>String</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">
                                                                <p>stringLPad(string, pad_string, length)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">
                                                                <p>Left-pads <var>string</var> with the string specified by <var>pad_string</var> to the length specified by <var>length</var>.</p>
                                                                <p>If <var>string</var> is shorter than <var>length</var>, <var>string</var> is shortened to <var>length</var>.</p>
                                                                <div class="Example"><span class="label">EXAMPLE</span>: If <var>string</var> is abc, <var>pad_string</var> is XYZ, and <var>length</var> is 6, the resultant string is XYZabc.</div>
                                                                <div class="Example"><span class="label">EXAMPLE</span>:&#160;If <var>string</var> is abc, <var>pad_string</var> is XYZ, and <var>length</var> is 2, the resultant string is ab. </div>
                                                                <div class="Example"><span class="label">EXAMPLE</span>: If <var>string</var> is abc, <var>pad_string</var> is XYZ, and <var>length</var> is 4, the resultant string is Xabc.</div>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">
                                                                <p>String for <var>string</var> and <var>pad_string</var>, Integer for <var>length</var></p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">
                                                                <p>String</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p class="tableParagraph">stringsPosCompare(string1, string2, delim, min_diff, max_diff)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">
                                                                <p class="tableParagraph">Returns true if the substrings of <span class="UIelement">string1</span> and <span class="UIelement">string2 </span>have specified range of mismatches. First it splits <span class="UIelement">string1 </span>and <span class="UIelement">string2</span> by the delimiter <span class="UIelement">delim</span>. Then it compares the substrings of each and counts the number of differences. If the number of differences is within the range <span class="UIelement">min_diff</span> (included) to <span class="UIelement">max_diff</span> (excluded), it returns true otherwise it returns false. If the number of substrings is different in <span class="UIelement">string1</span> and <span class="UIelement">string2</span>, it returns FNF. For example, if <span class="UIelement">string1</span> = abcdef, <span class="UIelement">string2</span> = defcab, <span class="UIelement">delim</span> = c, <span class="UIelement">min_diff</span> = 1, <span class="UIelement">max_diff </span>= 3, the result will be true. First the strings are split and result in ab, def and def, ab. Then the substrings are compared and returns 2 mismatches and since that number falls in the range <span class="UIelement">min_diff</span> to <span class="UIelement">max_diff</span>, the result is true. In the same example, if <span class="UIelement">max_diff</span> was 2, the function will return false.</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p class="tableParagraph">String for <span class="UIelement">string1</span>, <span class="UIelement">string2</span>, <span class="UIelement">delim</span> and Integer for <span class="UIelement">min_diff</span> and <span class="UIelement">max_diff</span></p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">
                                                                <p class="tableParagraph">Boolean</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">
                                                                <p>stringRPad(string, pad_string, length)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">
                                                                <p>Right-pads <var>string</var> with the string specified by <var>pad_string</var> to the length specified by <var>length</var>.</p>
                                                                <p>If <var>string</var> is shorter than <var>length</var>, <var>string</var> is shortened to <var>length</var>.</p>
                                                                <div class="Example"><span class="label">EXAMPLE</span>: If <var>string</var> is abc, <var>pad_string</var> is XYZ, and length is 6, the resultant string is abcXYZ.</div>
                                                                <div class="Example"><span class="label">EXAMPLE</span>:&#160;If <var>string</var> is abc, <var>pad_string</var> is XYZ, and <var>length</var> is 2, the resultant string is ab. </div>
                                                                <div class="Example"><span class="label">EXAMPLE</span>: If <var>string</var> is abc,<var> pad_string</var> is XYZ, and <var>length</var> is 4, the resultant string is abcX.</div>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">
                                                                <p>String for <var>string</var> and <var>pad_string</var>, Integer for <var>length</var></p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">
                                                                <p>String</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p>stringReverse(string)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">
                                                                <p>Reverses a string. </p>
                                                                <div class="Example"><span class="label">EXAMPLE</span>:&#160;If <var>string</var> is abc, the resultant string is cba.</div>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p>String</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">
                                                                <p>String</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">strip(string)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Eliminates the leading and trailing spaces from <var>string</var>.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">String</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">String</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p>stripLeft(string)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Eliminates the leading  spaces from <var>string</var>.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p>String</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">
                                                                <p>String</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">
                                                                <p>stripRight(string)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Eliminates the trailing spaces from <var>string</var>.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">
                                                                <p>String</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">
                                                                <p>String</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">substring(string, starting_index, ending_index)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">
                                                                <p> Creates a string from <var>string</var> that starts at <var>starting_index</var> (inclusive) and ends at <var>ending_index</var> (exclusive). This  is equivalent to the Python command <code>str[startIdx:endIdx]</code>. </p>
                                                                <p>To have the same effect as  <code>str[startIdx:]</code>, specify 0 for <var>ending_index</var>. To have the same effect as <code>str[:endIdx]</code>, specify 0 for the <var>starting_index</var>. To index back from the end of the string, use a negative index value.</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p>String for <var>string</var>, Integer for <var>starting_index</var> and <var>ending_index</var></p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">String</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">substringIndex(string1, delimiter, n)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Returns a substring, left to the nth delimiter, if <span class="UIelement">n</span> is positive. If <span class="UIelement">n</span> is negative, it returns a substring, to the right of the  nth delimiter, while counting the delimiters from the right. Returns an empty string if n is 0. Delimiter matching is case sensitive.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">String for <span class="UIelement">string1 </span>and <span class="UIelement">delimiter</span>, Integer for <span class="UIelement">n</span></td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">String</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">upper(string)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Changes a string to uppercase.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">String</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">String</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyB-Column1-Body1">wordCount(string)</td>
                                                            <td class="TableStyle-SimpleTable-BodyB-Column2-Body1">
                                                                <p>Returns the number of words in string. A word is a string delimited by one or multiple spaces. For example, the following string has 5 words:</p>
                                                                <p>CA + NV / #</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyB-Column1-Body1">String</td>
                                                            <td class="TableStyle-SimpleTable-BodyA-Column2-Body1">Integer</td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                                <h2 class="noPageBreak">Timestamp functions</h2>
                                                <table style="mc-table-style: url('../../Resources/TableStyles/SimpleTable.css');margin-left: 0;margin-right: auto;width: 100%;" class="TableStyle-SimpleTable" cellspacing="0">
                                                    <col class="TableStyle-SimpleTable-Column-Column1" />
                                                    <col class="TableStyle-SimpleTable-Column-Column2" />
                                                    <col class="TableStyle-SimpleTable-Column-Column1" />
                                                    <col class="TableStyle-SimpleTable-Column-Column2" />
                                                    <thead>
                                                        <tr class="TableStyle-SimpleTable-Head-Header1">
                                                            <th class="TableStyle-SimpleTable-HeadE-Column1-Header1">Function</th>
                                                            <th class="TableStyle-SimpleTable-HeadE-Column2-Header1">Description</th>
                                                            <th class="TableStyle-SimpleTable-HeadE-Column1-Header1">Input type</th>
                                                            <th class="TableStyle-SimpleTable-HeadD-Column2-Header1">Output type</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">addDateInterval(start_date, years, months, days)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Returns a timestamp after adding <span class="UIelement">years</span>, <span class="UIelement">months </span>and <span class="UIelement">days </span>to the <span class="UIelement">start_date</span>.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Timestamp for <span class="UIelement">start_date</span>, Integer for <span class="UIelement">years</span>, <span class="UIelement">months </span>and <span class="UIelement">days</span></td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Timestamp</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">addIntervalString(start_date, string1)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Returns a timestamp after adding years, months, days, hours, minutes, seconds specified in <span class="UIelement">string1 </span>to <span class="UIelement">start_date</span>. The format of <span class="UIelement">string1 </span>is "years,months,days,hours,minutes,seconds". years, months, days, hours and seconds need to be integers while seconds can be float or integer. <span class="UIelement">string1 </span>does not take any spaces.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Timestamp for <span class="UIelement">start_date</span>, String for <span class="UIelement">string1</span></td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Timestamp</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">addTimeInterval(start_time, hours, minutes, seconds)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Returns a timestamp after adding <span class="UIelement">hours</span>, <span class="UIelement">minutes</span> and <span class="UIelement">seconds</span> to the <span class="UIelement">start_time</span>.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Timestamp for <span class="UIelement">start_time</span>, Integer for <span class="UIelement">hours</span>, <span class="UIelement">minutes</span> and <span class="UIelement">seconds</span></td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Timestamp</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">convertFromUnixTS(date1, string1)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Converts a unix timestamp to a date string as specified in <span class="UIelement">string1</span>. Read <a href="#About" class="MCXref xref">Understanding date and time formats</a> to learn how to format the date string.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Float, Integer or Timestamp for <span class="UIelement">date1</span>, String for <span class="UIelement">string1</span></td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">String</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">convertTimezone(date1, offset1)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Changes timzeone of <span class="UIelement">date1 </span>to a timezone specified by <span class="UIelement">offset1 </span>in hours from UTC.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Timestamp for <span class="UIelement">date1</span>, Integer for <span class="UIelement">offset1</span></td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Timestamp</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">dateDiff(start_date, end_date)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Returns the number of days between <span class="UIelement">start_date</span> and <span class="UIelement">end_date</span>.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Timestamp for <span class="UIelement">start_date</span> and <span class="UIelement">end_date</span></td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Integer</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">datePart(date1, string1)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">
                                                                <p>Returns a part of <span class="UIelement">date1 </span>depending on the value of <span class="UIelement">string1</span>. The function is case insensitive. The value of <span class="UIelement">string1 </span>can be Y, Q, M, D or W. </p>
                                                                <p>Y returns the year of date1, Q returns the quarter of <span class="UIelement">date1</span>,            M returns the month of <span class="UIelement">date1</span>, D returns the day of <span class="UIelement">date1 </span>and W returns the week of <span class="UIelement">date1</span>. Any other value for <span class="UIelement">string1 </span>returns FNF.</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Timestamp for <span class="UIelement">date1</span>, String for <span class="UIelement">string1</span></td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Integer</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">dateTrunc(date1, format1)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Returns a timestamp by truncating the date to the accuracy of the format you specify. In other words, it rounds the date towards the format. Format can be one of the following: YEAR, YYYY, YY, MONTH, MON, MM, DAY, DD, HOUR, MINUTE, SECOND, WEEK, QUARTER. For example, if <span class="UIelement">date1 </span>is 1970-02-01, and <span class="UIelement">format1 </span>is QUARTER, the resultant timestamp will be 1970-01-01T00:00:00.000Z</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Timestamp for <span class="UIelement">date1</span>, String for <span class="UIelement">format1</span></td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Timestamp</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">dayOfYear(date1)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Returns the day number of the year represented by <span class="UIelement">date1</span>.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Timestamp</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Integer</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">lastDayOfMonth(date1)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Returns the last date of the month represented by <span class="UIelement">date1</span>.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Timestamp</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Timestamp</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">monthsBetween(date1, date2)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Returns the number of months between <span class="UIelement">date1 </span>and <span class="UIelement">date2</span>. If <span class="UIelement">date1 </span>is later than <span class="UIelement">date2</span>, the result is positive else if <span class="UIelement">date1 </span>is earlier than <span class="UIelement">date2</span>, the result is negative. If both dates have the same day component, the result is always an integer otherwise it  calculates the fractional portion of the result based on  a 31-day month and also considers the difference in time components.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Timestamp for <span class="UIelement">date1 </span>and <span class="UIelement">date2</span></td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">nextDay(date1, string1)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">
                                                                <p>Returns the first date after <span class="UIelement">date1</span>, which has the day specified by <span class="UIelement">string1</span>. The operation is case insensitive. The value of <span class="UIelement">string1 </span>can be:</p>
                                                                <p> the full name of the weekdays - "Monday", "Tuesday" etc.</p>
                                                                <p>the first 2 characters of the weekdays - "Mo", "Tu" etc.</p>
                                                                <p>the first 3 characters of the weekdays - "Mon", "Tue" etc.</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Timestamp for <span class="UIelement">date1</span>, String for <span class="UIelement">string1</span></td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Timestamp</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">timePart(date1, string1)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Returns a part of <span class="UIelement">date1</span>, depending on the value of <span class="UIelement">string1</span>. The function is case insensitive. The value of <span class="UIelement">string1 </span>can be H, M or S. H returns the hour part of <span class="UIelement">date1</span>, M returns the minute part of <span class="UIelement">date1 </span>and S returns the seconds part of <span class="UIelement">date1</span>. Any other value for <span class="UIelement">string1 </span>returns FNF.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Timestamp for <span class="UIelement">date1</span>, String for <span class="UIelement">string1</span></td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Integer</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyB-Column1-Body2">weekOfYear(date1)</td>
                                                            <td class="TableStyle-SimpleTable-BodyB-Column2-Body2">Returns the week of the year represented by <span class="UIelement">date1</span>. A week starts on  a Monday and week 1 is the first week with more than 3 days. If January 1 of the year was starting on a Friday, then Jan 1 to Jan 10 will be part of week 1 and week 2 will start from Jan 11. If January 1 of the year was starting on a Thursday, then Jan 1 to Jan 4 will be part of week 1 and week 2 will start from Jan 5. </td>
                                                            <td class="TableStyle-SimpleTable-BodyB-Column1-Body2">Timestamp</td>
                                                            <td class="TableStyle-SimpleTable-BodyA-Column2-Body2">Integer</td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                                <h2 class="noPageBreak">Trigonometric functions</h2>
                                                <table style="mc-table-style: url('../../Resources/TableStyles/SimpleTable.css');margin-left: 0;margin-right: auto;width: 100%;" class="TableStyle-SimpleTable" cellspacing="0">
                                                    <col class="TableStyle-SimpleTable-Column-Column1" />
                                                    <col class="TableStyle-SimpleTable-Column-Column2" />
                                                    <col class="TableStyle-SimpleTable-Column-Column1" />
                                                    <col class="TableStyle-SimpleTable-Column-Column2" />
                                                    <thead>
                                                        <tr class="TableStyle-SimpleTable-Head-Header1">
                                                            <th class="TableStyle-SimpleTable-HeadE-Column1-Header1">Function</th>
                                                            <th class="TableStyle-SimpleTable-HeadE-Column2-Header1">Description</th>
                                                            <th class="TableStyle-SimpleTable-HeadE-Column1-Header1">Input type</th>
                                                            <th class="TableStyle-SimpleTable-HeadD-Column2-Header1">Output type</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">acos(number)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Returns the arccosine of <var>number</var>, in radians.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Float or integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">acosh(number)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Returns the hyperbolic arccosine of <var>number</var>, in radians.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Float or integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">asin(number)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Returns the arcsine of <var>number</var>, in radians.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Float or integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">asinh(number)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Returns the hyperbolic arcsine of <var>number</var>, in radians.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Float or integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">atan(number)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Returns the arctangent of <var>number</var>, in radians.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Float or integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">atan2(y,x)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">
                                                                <p>Returns the principal value of arctangent(y/x).</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Float or integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">atanh(number)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Returns the hyperbolic arctangent of <var>number</var>, in radians.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Float or integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">cos(angle)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Returns the cosine of <var>angle</var> expressed in radians.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Float or integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">cosh(angle)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Returns the hyperbolic cosine of <var>angle</var> expressed in radians.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Float or integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">degrees(number)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Converts <var>number</var>, expressed in radians, to degrees.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Float or integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">pi</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Creates a column with the value of pi in each row.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">N/A</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">radians(number)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Converts <var>number</var>, expressed in degrees, to radians.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Float or integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">sin(angle)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Returns the sine of <var>angle</var> expressed in radians.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Float or integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">sinh(angle)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">Returns the hyperbolic sine of <var>angle</var> expressed in radians.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Float or integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">tan(angle)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">Returns the tangent of <var>angle</var> expressed in radians.</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Float or integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyB-Column1-Body2">tanh(angle)</td>
                                                            <td class="TableStyle-SimpleTable-BodyB-Column2-Body2">Returns the hyperbolic tangent of <var>angle</var> expressed in radians.</td>
                                                            <td class="TableStyle-SimpleTable-BodyB-Column1-Body2">Float or integer</td>
                                                            <td class="TableStyle-SimpleTable-BodyA-Column2-Body2">Float</td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                                <h2 class="noPageBreak">Type-casting functions</h2>
                                                <table style="mc-table-style: url('../../Resources/TableStyles/SimpleTable.css');margin-left: 0;margin-right: auto;width: 100%;" class="TableStyle-SimpleTable" cellspacing="0">
                                                    <col class="TableStyle-SimpleTable-Column-Column1" />
                                                    <col class="TableStyle-SimpleTable-Column-Column2" />
                                                    <col class="TableStyle-SimpleTable-Column-Column1" style="width: 18px;" />
                                                    <col class="TableStyle-SimpleTable-Column-Column2" style="width: 18px;" />
                                                    <thead>
                                                        <tr class="TableStyle-SimpleTable-Head-Header1">
                                                            <th class="TableStyle-SimpleTable-HeadE-Column1-Header1">Function</th>
                                                            <th class="TableStyle-SimpleTable-HeadE-Column2-Header1">Description</th>
                                                            <th class="TableStyle-SimpleTable-HeadE-Column1-Header1">Input type</th>
                                                            <th class="TableStyle-SimpleTable-HeadD-Column2-Header1">Output type</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">bool(value)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">
                                                                <p>Casts <var>value</var> to a boolean value as follows:</p>
                                                                <ul>
                                                                    <li value="1">A string is converted to the boolean value, false. The only exception is that if the string is <span class="UIelement">true</span> (case-insensitive), the string is converted to the boolean value, true.</li>
                                                                    <li value="2">The number  0 is converted to the boolean value, false.</li>
                                                                    <li value="3">A non-zero float or integer value is converted to the boolean value, true. </li>
                                                                </ul>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Any</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Boolean</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">float(value)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">
                                                                <p>Casts <var>value</var> to float. </p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Any</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Float</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">int(value, base)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">
                                                                <p>Casts <var>value</var> to integer. Base is optional. If you do not specify the base, the function returns a base-10 integer.</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Any for <span class="UIelement">value</span>, Integer for <span class="UIelement">base</span></td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Integer</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p class="tableParagraph">money(value)</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">
                                                                <p class="tableParagraph">Casts <span class="UIelement">value</span> to Money.</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p class="tableParagraph">Any</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">
                                                                <p class="tableParagraph">Money</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">string(value)</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">
                                                                <p>Casts <var>value</var> to string. </p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Any</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">String</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyB-Column1-Body2">timestamp(value)</td>
                                                            <td class="TableStyle-SimpleTable-BodyB-Column2-Body2">Casts <span class="UIelement">value</span> to a Timestamp. Numeric values will be treated as milliseconds since Unix epoch. Strings will be interpreted using the following format: %Y-%m-%dT%H:%M:%SZ</td>
                                                            <td class="TableStyle-SimpleTable-BodyB-Column1-Body2">Any</td>
                                                            <td class="TableStyle-SimpleTable-BodyA-Column2-Body2">Timestamp</td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                                <div class="Note"><span class="label">NOTE</span>:&#160;If <var>value</var> is an empty string, the output of the float and int functions is 0, the output of the bool function is false, the output of the string function is an empty string and the output of the timestamp and the money functions is FNF..</div>
                                                <div class="Note"><span class="label">NOTE</span>:&#160;All type-casting functions return FNF&#160;if value is Null.</div>
                                                <h2 class="noPageBreak">User-defined functions</h2>
                                                <p>User-defined functions (UDFs)&#160;are functions that you or other users of <span class="GeneralGUIName1">Xcalar Design</span> create and upload. <span class="GeneralProductName3">Xcalar</span> is shipped with several <span class="GeneralCompanyNameShort">Xcalar</span>-defined UDFs in the default module. This section describes the <span class="GeneralCompanyNameShort">Xcalar</span>-defined UDFs.</p>
                                                <div class="Note"><span class="label">NOTE</span>:&#160;The data type of all UDF output is string.</div>
                                                <h3>convertFormats</h3>
                                                <table style="width: 100%;mc-table-style: url('../../Resources/TableStyles/SimpleTable.css');margin-left: 0;margin-right: auto;" class="TableStyle-SimpleTable" cellspacing="0">
                                                    <col class="TableStyle-SimpleTable-Column-Column1" />
                                                    <col class="TableStyle-SimpleTable-Column-Column2" />
                                                    <col class="TableStyle-SimpleTable-Column-Column1" />
                                                    <thead>
                                                        <tr class="TableStyle-SimpleTable-Head-Header1">
                                                            <th class="TableStyle-SimpleTable-HeadE-Column1-Header1">Syntax</th>
                                                            <th class="TableStyle-SimpleTable-HeadE-Column2-Header1">Description</th>
                                                            <th class="TableStyle-SimpleTable-HeadD-Column1-Header1">Input</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyB-Column1-Body1">convertFormats(colName, inputFormat, outputFormat)</td>
                                                            <td class="TableStyle-SimpleTable-BodyB-Column2-Body1">Converts the time format of the specified column to another time format.</td>
                                                            <td class="TableStyle-SimpleTable-BodyA-Column1-Body1">
                                                                <p>colName: name of the column to convert.</p>
                                                                <p>inputFormat: format of the column named colName. For example, if the format is 2005-12-05 in the column, then the input format is %Y-%m-%d.</p>
                                                                <p>outputFormat: output format. For example if you want the date to be 12/05/2005, then the output format is %m/%d/%Y.</p>
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                                <h3>convertFromUnixTS</h3>
                                                <table style="width: 100%;mc-table-style: url('../../Resources/TableStyles/SimpleTable.css');margin-left: 0;margin-right: auto;" class="TableStyle-SimpleTable" cellspacing="0">
                                                    <col class="TableStyle-SimpleTable-Column-Column1" />
                                                    <col class="TableStyle-SimpleTable-Column-Column2" />
                                                    <col class="TableStyle-SimpleTable-Column-Column1" />
                                                    <thead>
                                                        <tr class="TableStyle-SimpleTable-Head-Header1">
                                                            <th class="TableStyle-SimpleTable-HeadE-Column1-Header1">Syntax</th>
                                                            <th class="TableStyle-SimpleTable-HeadE-Column2-Header1">Description</th>
                                                            <th class="TableStyle-SimpleTable-HeadD-Column1-Header1">Input</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyB-Column1-Body1">convertFromUnixTS(colName, outputFormat)</td>
                                                            <td class="TableStyle-SimpleTable-BodyB-Column2-Body1">Converts from a UNIX timestamp to another time format.</td>
                                                            <td class="TableStyle-SimpleTable-BodyA-Column1-Body1">
                                                                <p>colName: name of the column to convert.</p>
                                                                <p>outputFormat: resultant format of the column.</p>
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                                <h3>convertToUnixTS</h3>
                                                <table style="width: 100%;mc-table-style: url('../../Resources/TableStyles/SimpleTable.css');margin-left: 0;margin-right: auto;" class="TableStyle-SimpleTable" cellspacing="0">
                                                    <col class="TableStyle-SimpleTable-Column-Column1" />
                                                    <col class="TableStyle-SimpleTable-Column-Column2" />
                                                    <col class="TableStyle-SimpleTable-Column-Column1" />
                                                    <thead>
                                                        <tr class="TableStyle-SimpleTable-Head-Header1">
                                                            <th class="TableStyle-SimpleTable-HeadE-Column1-Header1">Syntax</th>
                                                            <th class="TableStyle-SimpleTable-HeadE-Column2-Header1">Description</th>
                                                            <th class="TableStyle-SimpleTable-HeadD-Column1-Header1">Input</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyB-Column1-Body1">convertToUnixTS(colName, inputFormat)</td>
                                                            <td class="TableStyle-SimpleTable-BodyB-Column2-Body1">Converts from a timestamp format to the UNIX timestamp format.</td>
                                                            <td class="TableStyle-SimpleTable-BodyA-Column1-Body1">
                                                                <p>colName: name of the column to convert.</p>
                                                                <p>inputFormat: format from which the column is converted.</p>
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                                <h3>openExcel</h3>
                                                <p>This function is not to be invoked by <span class="GeneralProductName3">Xcalar</span> users. It is called by <span class="GeneralGUIName1">Xcalar Design</span> when you select the file format to be Excel during the dataset creation step. </p>
                                                <h3>convertExcelTime</h3>
                                                <table style="width: 100%;mc-table-style: url('../../Resources/TableStyles/SimpleTable.css');margin-left: 0;margin-right: auto;" class="TableStyle-SimpleTable" cellspacing="0">
                                                    <col class="TableStyle-SimpleTable-Column-Column1" />
                                                    <col class="TableStyle-SimpleTable-Column-Column2" />
                                                    <col class="TableStyle-SimpleTable-Column-Column1" />
                                                    <thead>
                                                        <tr class="TableStyle-SimpleTable-Head-Header1">
                                                            <th class="TableStyle-SimpleTable-HeadE-Column1-Header1">Syntax</th>
                                                            <th class="TableStyle-SimpleTable-HeadE-Column2-Header1">Description</th>
                                                            <th class="TableStyle-SimpleTable-HeadD-Column1-Header1">Input</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyB-Column1-Body1">convertExcelTime(colName, outputFormat)</td>
                                                            <td class="TableStyle-SimpleTable-BodyB-Column2-Body1">In Excel, a date can be displayed and stored as a value that represents the number of days that have elapsed since the base date. For example, a date shown as 48739 means that 48739 days have elapsed since the base date. This function converts this value to a regular date. </td>
                                                            <td class="TableStyle-SimpleTable-BodyA-Column1-Body1">
                                                                <p>colName: name of the column to convert.</p>
                                                                <p>outputFormat: output format from which the Excel date is converted. For example, if you want the date to be 2005-12-04, then enter %Y-%m-%d.</p>
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                                <h3>splitWithDelim</h3>
                                                <table style="width: 100%;mc-table-style: url('../../Resources/TableStyles/SimpleTable.css');margin-left: 0;margin-right: auto;" class="TableStyle-SimpleTable" cellspacing="0">
                                                    <col class="TableStyle-SimpleTable-Column-Column1" />
                                                    <col class="TableStyle-SimpleTable-Column-Column2" />
                                                    <col class="TableStyle-SimpleTable-Column-Column1" />
                                                    <thead>
                                                        <tr class="TableStyle-SimpleTable-Head-Header1">
                                                            <th class="TableStyle-SimpleTable-HeadE-Column1-Header1">Syntax</th>
                                                            <th class="TableStyle-SimpleTable-HeadE-Column2-Header1">Description</th>
                                                            <th class="TableStyle-SimpleTable-HeadD-Column1-Header1">Input</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyB-Column1-Body1">splitWithDelim(txt, index, delim)</td>
                                                            <td class="TableStyle-SimpleTable-BodyB-Column2-Body1">Extracts the substring from a string starting from the character following the delimiter with the specified index. For example, it there are two delimiters, the indexes for the delimiters are 0 and 1. To obtain the substring starting from the character following the second delimiter, specify 1 as the index.</td>
                                                            <td class="TableStyle-SimpleTable-BodyA-Column1-Body1">
                                                                <p>txt: string from which a substring is extracted.</p>
                                                                <p>index: index of the delimiter. Indexing starts from 0, and the substring starts from the character following the delimiter pointed to by the index.</p>
                                                                <p>delim:&#160;character that serves as delimiter.</p>
                                                                <p>The following examples show how this function is used:</p>
                                                                <p>splitWithDelim(a-b-c, 1, -) produces the substring <span class="UIelement">b-c</span>. </p>
                                                                <p>splitWithDelim(a-b-c, 3, -) produces an empty substring. </p>
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                                <h3>now</h3>
                                                <p>This function gets the current time of the <span class="GeneralProductName3">Xcalar</span> cluster. The output represents the number of seconds since the epoch, in UTC. </p>
                                                <p>This function does not take any input.</p>
                                                <p><a href="#top">Go to the top</a>
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </section><a data-close="true"></a>
                </div>
            </div>
            <script>/* <![CDATA[ */$(document).foundation();/* ]]> */</script>
        </div>
    </body>
</html>