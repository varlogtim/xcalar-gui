<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="_Skins_HTML5___SideNav" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../../../" data-mc-has-content-body="True" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="SQL Mode|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta charset="utf-8" />
        <meta name="description" content="" />
        <meta name="author" content="" /><title>Configuring the properties of a table</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" />
        <link href="../../../../Skins/Fluid/Stylesheets/foundation.6.2.3.css" rel="stylesheet" />
        <link href="../../../../Skins/Fluid/Stylesheets/Styles.css" rel="stylesheet" />
        <link href="../../../../Skins/Fluid/Stylesheets/Tablet.css" rel="stylesheet" />
        <link href="../../../../Skins/Fluid/Stylesheets/Mobile.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/MainStyles.css" rel="stylesheet" />
        <style>/*&lt;meta /&gt;*/

.button.previous-topic-button
{
	-pie-background: url('../../../../Skins/Default/Stylesheets/Images/navigate-previous.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.next-topic-button
{
	-pie-background: url('../../../../Skins/Default/Stylesheets/Images/navigate-next.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.separator-button
{
	-pie-background: linear-gradient(#ffffff, #ececec);
}

.button.print-button
{
	-pie-background: url('../../../../Skins/Default/Stylesheets/Images/printer.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.needs-pie
{
	behavior: url('../../../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.6.2.3_custom.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapGlobal.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapDom.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapUtilities.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapXhr.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTextEffects.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapSlideshow.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapFeedback.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapDefault.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapHelpSystem.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.Breadcrumbs.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.MiniToc.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapToc.SideMenu.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapIndex.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapGlossary.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapParser.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapSearch.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapTopic.js">
        </script>
        <script src="../../../../Skins/Default/Scripts/TopicToolBar.js">
        </script>
    </head>
    <body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-right" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
                    <ul class="off-canvas-accordion vertical menu off-canvas-list" data-accordion-menu="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div data-sticky-container="" class="title-bar-container">
                        <nav class="title-bar tab-bar sticky" data-sticky="" data-options="marginTop:0" style="width:100%" data-sticky-on="only screen and (max-width: 800px)" data-mc-ignore="true">
                            <div class="middle title-bar-section outer-row clearfix">
                                <div class="menu-icon-container relative clearfix">
                                    <button class="menu-icon" data-toggle="offCanvas"><span></span>
                                    </button>
                                </div>
                            </div>
                            <div class="title-bar-layout outer-row">
                                <div class="logo-wrapper"><a class="logo" href="../../../Home.htm" alt="Logo"></a>
                                </div>
                                <div class="navigation-wrapper nocontent">
                                    <ul class="navigation clearfix" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                        <li class="placeholder" style="visibility:hidden"><a>placeholder</a>
                                        </li>
                                    </ul>
                                </div>
                                <div class="nav-search-wrapper">
                                    <div class="nav-search row">
                                        <form class="search" action="#">
                                            <div class="search-bar search-bar-container needs-pie">
                                                <input class="search-field needs-pie" type="search" placeholder="Search" />
                                                <div class="search-filter-wrapper">
                                                    <div class="search-filter">
                                                        <div class="search-filter-content">
                                                            <ul>
                                                                <li>All Files</li>
                                                            </ul>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="search-submit-wrapper" dir="ltr">
                                                    <div class="search-submit" title="Search">
                                                    </div>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </nav>
                    </div>
                    <section class="main-section">
                        <div class="row outer-row sidenav-layout">
                            <div class="sidenav-wrapper">
                                <div class="sidenav-container">
                                    <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                                </div>
                            </div>
                            <div class="body-container">
                                <div data-mc-content-body="True">
                                    <div class="content">
                                        <p><a name="top"></a>
                                        </p>
                                        <div id="contentBody">
                                            <div class="row collapse">
                                                <div class="sideContent">
                                                    <div class="clearfix">
                                                        <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolBar mc-component nocontent">
                                                            <div class="button-group-container-left">
                                                                <button class="button needs-pie previous-topic-button" title="Navigate previous">
                                                                    <img src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="previous topic" />
                                                                </button>
                                                                <button class="button needs-pie next-topic-button" title="Navigate next">
                                                                    <img src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="next topic" />
                                                                </button>
                                                                <div class="button-separator">
                                                                </div>
                                                                <button class="button needs-pie print-button" title="Print">
                                                                    <img src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="print" />
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="nocontent">
                                                    <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="3" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">You are here: </span>
                                                    </div>
                                                </div>
                                                <h2 class="noPageBreak">Configuring the properties of a table</h2>
                                                <p>This sub-topic describes the procedures for configuring the properties  of the table with the <span class="UIelement">Import Data Source</span> page, which contains the following sections and entry fields:</p>
                                                <ul>
                                                    <li value="1">
                                                        <p> The <span class="UIelement">Previewing</span> section, which displays a preview of a table generated from the selected data source for verifying records, column names, and  data types. </p>
                                                    </li>
                                                    <div class="Note"><span class="label">TIP</span>: If the format of your data source is CSV, you can change column names and their data types directly from the <span class="UIelement">Previewing</span> section. Your changes are automatically populated in the <span class="UIelement">Schema</span> field. For more information, see <a href="../../A_GetStarted/B4_ImportData.htm#Changing" class="MCXref xref" xrefformat="{para}">Changing the data type and column name in a CSV&#160;data source</a>.</div>
                                                    <li value="2">Dialect format parameter fields, which enable you to configure specific formats for your data records, such as the type of field separator or special quote.</li>
                                                    <li value="3"><span class="UIelement">Schema</span> configuration section, which enables you to create the schema for your table, with or without the help of <span class="GeneralGUIName1">Xcalar Design</span>. </li>
                                                    <li value="4">Advanced  settings, which are optional settings for adding columns that augment the data in your table and preference options for how <span class="GeneralProductName3">Xcalar</span> will handle errors during the import process.</li>
                                                </ul>
                                                <p>The following tasks configure the properties of a table:</p>
                                                <ul>
                                                    <li value="1"><a href="#Setting" class="MCXref xref" xrefformat="{para}">Setting the table name</a>
                                                    </li>
                                                    <li value="2"><a href="#Setting2" class="MCXref xref" xrefformat="{para}">Setting the data file format </a>
                                                    </li>
                                                    <li value="3"><a href="#Setting3" class="MCXref xref" xrefformat="{para}">Setting the format parameters</a>
                                                    </li>
                                                    <li value="4"><a href="#Applying" class="MCXref xref" xrefformat="{para}">Applying an import UDF</a>
                                                    </li>
                                                    <li value="5"><a href="#Configur" class="MCXref xref" xrefformat="{para}">Configuring the schema for the table</a>
                                                        <ul>
                                                            <li value="1"><a href="#Creating" class="MCXref xref" xrefformat="{para}">Creating a primary key</a>
                                                            </li>
                                                            <li value="2"><a href="#Understa" class="MCXref xref" xrefformat="{para}">Understanding the Schema Wizard</a>
                                                            </li>
                                                        </ul>
                                                    </li>
                                                    <li value="6"><a href="#Setting4" class="MCXref xref" xrefformat="{para}">Setting the advanced options</a>
                                                    </li>
                                                </ul>
                                                <h3><a name="Setting"></a>Setting the table name</h3>
                                                <p>In the <span class="UIelement">Table Name</span> field, either accept the suggested name or enter a name for your table. For more information on the table naming conventions, see <a href="../../E_Reference/J_naming_rules.htm#Table" class="MCXref xref" xrefformat="{para}">Table</a>. </p>
                                                <div class="Note"><span class="label">NOTE:</span> Column and table names must observe the all capital letters rule, therefore <span class="GeneralGUIName1">Xcalar Design</span> automatically processes table and column names into uppercase.</div>
                                                <div class="Note"><span class="label">TIP:</span> Table names <span class="UIelement">cannot</span> be changed after the table is created, such as by using a SQL ALTER command. <br />If the table name is incorrect, run a <span class="UIelement">select</span> statement on the table with the incorrect name and then  from the result set create a new table with the correct name. For more information, see <a href="../sql_h_sql_about_view_section.htm#Saving2" class="MCXref xref" xrefformat="{para}">Saving a result set to a table</a>.</div>
                                                <h3><a name="Setting2"></a>Setting the data file format </h3>
                                                <p>In the <span class="UIelement">Format</span> section, either accept the suggested format or from the <span class="UIelement">Format</span> list, select a format from one of the following:</p>
                                                <ul>
                                                    <li value="1">Separated Values</li>
                                                    <li value="2">JSON</li>
                                                    <li value="3">Excel</li>
                                                    <li value="4">Text</li>
                                                    <li value="5">XML</li>
                                                    <li value="6">Parquet File</li>
                                                    <li value="7">Custom Format. For more information on this option, see <a href="#Applying" class="MCXref xref" xrefformat="{para}">Applying an import UDF</a>.</li>
                                                </ul>
                                                <div class="Note"><span class="label">NOTE:</span> If you select an incorrect format, the preview section will display an error message with a recommendation for a format that <span class="GeneralProductName3">Xcalar</span> can parse with this data.</div>
                                                <h3><a name="Setting3"></a>Setting the format parameters</h3>
                                                <p>Based on the option selected from the <span class="UIelement">Format</span> list, not all the field options that are described in the <a href="../../A_GetStarted/B4_ImportData.htm#Specifyi2" class="MCXref xref" xrefformat="{para}">Specifying how data is imported</a> topic, will display. For the entry fields that are displayed, verify that they contain the correct values. If not, make the appropriate changes. </p>
                                                <h3><a name="Applying"></a>Applying an import UDF</h3>
                                                <p>If your data source requires specific data cleansing from a user-defined function (UDF)&#160;during the import, you must select the <span class="UIelement">Custom Format</span> format. Even if the original format of the data source is one of the listed formats in the <span class="UIelement">Format</span> list. For example, if your data source is a <span class="UIelement">CSV</span> file, which  during parsing requires a UDF to remove illegal characters, you must select <span class="UIelement">Custom Format</span> and not <span class="UIelement">Separated Values</span>. </p>
                                                <div class="Note"><span class="label">IMPORTANT:</span> If the format of your data source is CSV,  you can change the column names and their data types directly from the <span class="UIelement">Previewing</span> section. For all other <span class="GeneralProductName3">Xcalar</span> supported formats, you must use a UDF to change the column names and the data types.</div>
                                                <p>To apply an import UDF:</p>
                                                <ol>
                                                    <li value="1">From the <span class="UIelement">Format</span> list, select <span class="UIelement">Custom Format</span>.</li>
                                                    <li value="2">Do one of the following:</li>
                                                    <ul style="list-style-type: circle;">
                                                        <li value="1">If the UDF already exists, from the <span class="UIelement">UDF&#160;Module</span> list, select the module that contains the function.</li>
                                                        <li value="2">If the UDF does not exist, click <span class="UIelement">Write Parser Using Jupyter</span>, which opens the JUPYTER NOTEBOOK workspace for you to either create a new UDF or edit an existing UDF with the required parsing code. <br />After saving the UDF module, from the <span class="UIelement">UDF&#160;Module</span> list, select the new UDF module containing the function.</li>
                                                    </ul>
                                                    <li value="3">Click <span class="UIelement">Apply UDF</span>.</li>
                                                    <p>After parsing the data with the import UDF, a preview table is displayed in the <span class="UIelement">Previewing</span> section. </p>
                                                    <div class="Note"><span class="label">TIP:</span> During parsing, <span class="GeneralGUIName1">Xcalar Design</span> displays the percentage completed. You can terminate the preview generation process at any time by clicking the <span class="UIelement">Cancel</span> icon.<br /></div>
                                                    <div class="Note"><span class="label">IMPORTANT:</span>  If you imported CSV formatted data, you cannot continue to make changes from the preview section after selecting the  <span class="UIelement">Custom Format</span> format setting. <br />If you changed a column name or a data type in the <span class="UIelement">Previewing</span> section before you selected the <span class="UIelement">Custom Format</span> format, all your changes are overridden. In this case,  you must modify your UDF to include these changes and re-apply.</div>
                                                </ol>
                                                <p> For more information about using Jupyter Notebook in <span class="GeneralGUIName1">Xcalar Design</span>, see <a href="../../C_XcalarAdvancedMode/D_Jupyter/C1_UsingJupyter.htm" class="MCXref xref" xrefformat="{para}">Using Xcalar Design with Jupyter Notebook</a>.</p>
                                                <p>For more information about UDFs, see <a href="../../D_ClusterTasks/B_UDFUnderstand.htm" class="MCXref xref" xrefformat="{para}">Understanding user-defined functions</a> and <a href="../../D_ClusterTasks/C_UDFTasks.htm" class="MCXref xref" xrefformat="{para}">Creating and managing user-defined functions</a>.</p>
                                                <h3><a name="Configur"></a>Configuring the schema for the table</h3>
                                                <div class="Note"><span class="label">IMPORTANT:</span> When creating a table from multiple data sources, all data sources must each adhere to the same schema. </div>
                                                <p>Similar to databases, tables must be associated with a schema that describes the table by its column names and their data type formats, such as integer or string. </p>
                                                <p>In <span class="GeneralGUIName1">Xcalar Design</span>, you can choose to manually configure the schema for your table, with or without help from <span class="GeneralProductName3">Xcalar</span>. For more information on the <span class="GeneralProductName3">Xcalar</span> Schema Wizard, see <a href="#Understa" class="MCXref xref" xrefformat="{para}">Understanding the Schema Wizard</a>.</p>
                                                <p>To configure the schema for the table, in the <span class="UIelement">Schema</span> section, do one of the following:</p>
                                                <ul>
                                                    <li value="1">Use the <span class="GeneralGUIName1">Xcalar Design</span> Schema Wizard, which detects the column names and their data types and populates the <span class="UIelement">Schema</span> field with these entries. <br />For this option, do the following:
			<ol style="list-style-type: lower-alpha;"><li value="1"> Click the <span class="UIelement">Schema Wizard</span> link.</li><p>The <span class="UIelement">Schema Wizard</span> modal window opens.</p><li value="2">Verify the column names and their data type format selections. </li><li value="3">(Optional) Edit the column names and their data type. For more information about the <span class="UIelement">Schema Wizard</span> modal window, see <a href="#Understa" class="MCXref xref" xrefformat="{para}">Understanding the Schema Wizard</a>.</li><li value="4">When you are satisfied with all the entries, click <span class="UIelement">Confirm</span>, which populates  the <span class="UIelement">Schema</span> field with the <span class="UIelement">Column Name</span> and <span class="UIelement">Column type</span> field entries.</li></ol><p>This is the most common option for creating your table's schema.</p></li>
                                                    <li value="2">If populated, verify  and and use the schema that <span class="GeneralProductName3">Xcalar</span> created for you in the <span class="UIelement">Schema</span> field.<br /></li>
                                                    <p>This option is the fastest option for creating your table's schema.</p>
                                                    <li value="3">
                                                        <p>(CSV format only) Manually make changes from the <span class="UIelement">Previewing</span> section. <br /></p>
                                                        <p>As you make your changes the <span class="UIelement">Schema</span> field is populated with those changes. For more information, see <a href="../../A_GetStarted/B4_ImportData.htm#Changing" class="MCXref xref" xrefformat="{para}">Changing the data type and column name in a CSV&#160;data source</a>. </p>
                                                    </li>
                                                    <li value="4">Manually enter your column and data type values in the <span class="UIelement">Schema</span> field.<br />For this option, do the following:</li>
                                                    <p>In the <span class="UIelement">Schema</span> field, enter the column names and their data type. The syntax is as follows:</p>
                                                    <p>[{"name":"<var>column1</var>","type":"<var>data_type</var>"},{"name":"<var>column2</var>","type":"<var>data_type</var>"},{"name":"<var>column3</var>","type":"<var>data_type</var>","<var>pk</var>":"1"},{"name":"<var>colname. nestname</var>","<var>newName</var>": "<var>new_colname</var>", "type":"<var>data_type</var>"},{"name":"<var>element1</var>.<var>child_element2</var>", "newName": "<var>new_colname</var>", "type":"<var>datatype</var>"} ... ]</p>
                                                    <p>Where,</p>
                                                    <ul style="list-style-type: circle;">
                                                        <li value="1"><var>column</var> is the name of the column.</li>
                                                        <li value="2"><var>data_type</var> is the data type format of the column. Choose from boolean, integer, float, string, timestamp, and money. For more information on the data types formats that <span class="GeneralProductName3">Xcalar</span> supports, see <a href="../../E_Reference/B_DataTypes.htm" class="MCXref xref" xrefformat="{para}">Data types supported</a>.</li>
                                                        <li value="3">(Optional) <var>pk</var> is the primary key that uniquely identifies each record in the table. </li>
                                                        <li value="4">(Optional) <var>colname</var> is the existing name of the column that contains the JSON objects and/or arrays.</li>
                                                        <li value="5">(Optional) <var>nestname</var> is the name of the JSON array or object that contains a group of items.</li>
                                                        <li value="6">(Optional) <var>newName</var> is the parameter for the new name of the column.</li>
                                                        <li value="7">(Optional) <var>new_colname</var> is the name for the new column. For JSON formats, the column records will contain the array or object data values and for XML formats, the column records will contain the XML nested element values.</li>
                                                        <li value="8">(Optional) <var>element</var> is a parent element in the hierarchical XML structure. </li>
                                                        <li value="9">(Optional) <var>child_element</var> is a nested child element of the parent element.</li>
                                                        <li value="10">(Optional) <var>sub_element</var> is a  sub element of the nested child element.</li>
                                                    </ul>
                                                    <p>This option is suitable for users who have an existing schema created for their data. </p>
                                                </ul>
                                                <p>As shown in the schema syntax above, tables require extra syntax if they require a primary key, or they contain nested JSON data, or nested XML data:</p>
                                                <ul>
                                                    <li value="1">For more information about the syntax for tables that require a primary key, see <a href="#Creating" class="MCXref xref" xrefformat="{para}">Creating a primary key</a>.</li>
                                                    <li value="2">For more information about the syntax for tables using JSON formatted data that contain arrays or objects, see <a href="#Includin" class="MCXref xref" xrefformat="{para}">Including JSON&#160;nested data as columns in table </a>.</li>
                                                    <li value="3">For more information about the syntax for tables using XML formatted data that contain nested elements, see <a href="#Includin2" class="MCXref xref" xrefformat="{para}">Including XML&#160;nested data as columns in table </a>.</li>
                                                </ul>
                                                <h4><a name="Creating"></a>Creating a primary key</h4>
                                                <p>The primary key uniquely identifies each record in the table. It is  created from one column, or from multiple columns (composite key) using the ascending order integer value of the <span class="UIelement">pk</span> parameter. </p>
                                                <p>To create a primary key, in the <span class="UIelement">Schema</span> field, enter one of the following:</p>
                                                <ul>
                                                    <li value="1">For a primary key that  uniquely identifies each record from a single column name, include <span class="UIelement">"pk":"1"</span> at the end of the column's syntax, as follows:
					<p>[{"name":"<var>column1</var>","type":"<var>data_type</var>"},{"name":"<var>column2</var>","type":"<var>data_type</var>"<span class="UIelement">,"pk":"1"</span>},{"name":"<var>column3</var>","type":"<var>data_type</var>"}, ... ]</p></li>
                                                    <li value="2">For a composite primary key that uniquely identifies each record from multiple column names, include the <span class="UIelement">"pk":"<var>integer value</var>"</span> syntax at the end of each column's syntax that specifies the composite primary key, as follows:
					<p>[{"name":"<var>column1</var>","type":"<var>data_type</var>"<span class="UIelement">,"pk":"2"</span>},{"name":"<var>column2</var>","type":"<var>data_type</var>"}<span class="UIelement">,"pk":"1"</span>},{"name":"<var>column3</var>","type":"<var>data_type</var>"}, ... ]</p></li>
                                                </ul>
                                                <div class="Note"><span class="label">NOTE:</span> The table cannot be updated when a primary key is not included in the schema .</div>
                                                <h4><a name="Includin"></a>Including JSON&#160;nested data as columns in table </h4>
                                                <div class="Note"><span class="label">TIP:</span> Columns that include objects and arrays are grayed out in the <span class="UIelement">Previewing</span> section.</div>
                                                <p>This section describes how to include nested JSON&#160;data  in the form of arrays and objects into your tables for analysis.</p>
                                                <p>To include JSON nested data (arrays and objects) as columns in a table:</p>
                                                <ol>
                                                    <li value="1">Verify that JSON is displaying in the <span class="UIelement">Format</span> list.</li>
                                                    <li value="2">(Optional) To further extract and transform elements from your JSON document, in the <span class="UIelement">JMESPath</span> text field, enter your JMESPath query. For example, whilst you are creating your data model you only require enough data for testing purposes. For this case, enter a JMESPath query  that gives you enough columns to create your data model.</li>
                                                    <li value="3">In the <span class="UIelement">Schema</span> field, enter the JSON array and object column names and their data type. The syntax is as follows:</li>
                                                    <p>[... ,{"name":"<var>colname.arrayname</var>[<var>index_no</var>]", "newName": "<var>new_colname</var>", "type":"<var>data_type</var>"},{"name":"<var>colname. objname</var>","newName": "<var>new_colname</var>", "type":"<var>data_type</var>"}, ... ]</p>
                                                    <p>Where</p>
                                                    <ul style="list-style-type: circle;">
                                                        <li value="1"><var>colname</var> is the existing name of the column that contains the JSON objects and/or arrays. </li>
                                                        <li value="2"><var>arrayname</var> is the name of the array that contains a group of items. </li>
                                                        <li value="3">[<var>index_no</var>] is the index number. The index number enables you to select a specific element in the array list.  Index numbers start at 0.</li>
                                                        <div class="Note"><span class="label">NOTE:</span> If you use a number that is larger than the amount of keys in the array, a value of null is returned.</div>
                                                        <li value="4"><var>new_colname</var> is the new name for the column that will contain the array or object data values.</li>
                                                        <li value="5"><var>objname</var> is the name of the object that contains the group’s property items.</li>
                                                        <li value="6"><var>data_type</var> is the data type format of the column. Choose from boolean, integer, float, string, timestamp, and money. For more information on the data types formats that <span class="GeneralProductName3">Xcalar</span> supports, see <a href="../../E_Reference/B_DataTypes.htm" class="MCXref xref" xrefformat="{para}">Data types supported</a>.</li>
                                                    </ul>
                                                </ol>
                                                <div class="Example"><span class="label">EXAMPLE</span>: Below is the schema syntax that <span class="GeneralProductName3">Xcalar</span> uses to create a table schema from nested columns containing both objects and arrays. The nested columns will be named <span class="UIelement">friends</span> and <span class="UIelement">birth_year</span>.</div>
                                                <div class="Code">[... ,{"name":"friends[0]","newName":"friends_0","type":"string"},{"name":"birth.year","newName":"birth_year","type":"integer"}, ... ]</div>
                                                <p>Where,</p>
                                                <ul>
                                                    <li value="1">For the column <span class="UIelement">friends</span>, the first set of friend name values from the array are pulled, denoted by the 0 in square brackets.</li>
                                                    <li value="2">For the column <span class="UIelement">birth</span>, the nested object's key <span class="UIelement">year</span> is pulled, denoted by the <span class="UIelement">.year</span>.</li>
                                                </ul>
                                                <h4><a name="Includin2"></a>Including XML&#160;nested data as columns in table </h4>
                                                <div class="Note"><span class="label">NOTE:</span> When the <span class="UIelement">Import Data Source</span> page first opens, the <span class="UIelement">Previewing</span> section displays the XML data in XML structure format (hierarchical) and not in a table format. Once you have entered your <span class="UIelement">XPath</span> details and clicked <span class="UIelement">Click to refresh the Preview</span>, <span class="GeneralGUIName1">Xcalar Design</span> will display the structured XML as a table.</div>
                                                <p>This section describes how to include nested XML data  in the form of child list elements into your tables for analysis.</p>
                                                <p>To include XML nested data as columns in a table:</p>
                                                <ol>
                                                    <li value="1">Verify that XML is displaying in the <span class="UIelement">Format</span> list.</li>
                                                    <li value="2">In the <span class="UIelement">XPath</span> field, enter as a path, the element tags up to the child element that contains the ordered sequence of sub elements from the XML hierarchical order.</li>
                                                    <div class="Example"><span class="label">EXAMPLE</span>: Using the XML structured view below as an example, the path for the below XML child element <span class="UIelement">book</span> is <span class="UIelement">/bookstore/book</span>, which contains the list sub elements <span class="UIelement">author</span>, <span class="UIelement">title</span>, <span class="UIelement">genre</span>, <span class="UIelement">price</span>, <span class="UIelement">publish_date</span>, and <span class="UIelement">description</span>:</div>
                                                    <p>
                                                        <img src="../../../Resources/Images/XD_screenshots/xml_nested_data.png" />
                                                    </p>
                                                    <li value="3">(Optional) To augment the new nested element columns by adding a column that displays the path that you entered in step 2, select the <span class="UIelement">Matched XPath</span> check box.</li>
                                                    <li value="4">(Optional) To augment the new nested element columns by adding a column that displays the element's hierarchical XML path and index value (node-set position), select the <span class="UIelement">Element XPath</span> check box.</li>
                                                    <li value="5">Click the <span class="UIelement">Click to refresh the Preview</span> icon <img src="../../../Resources/Images/XD_assets/xd_refresh_icon1.png" />.</li>
                                                    <p>The <span class="UIelement">Previewing</span> section now displays the structured XML as a table.</p>
                                                    <p>For example, the above XML structured view now displays in the <span class="UIelement">Previewing</span> section, as a column named <span class="UIelement">book </span>, which contains rows for each list of <span class="UIelement">book</span> elements.</p>
                                                    <li value="6">In the <span class="UIelement">Schema</span> field, enter the XML column names and their data type. The syntax is as follows:</li>
                                                    <p>[ ... ,{"name":"<var>element1</var>.<var>child_element2</var>", "newName": "<var>new_colname</var>", "type":"<var>datatype</var>"},{"name":"<var>child_element2</var>.<var>sub_element3</var>","newName": "<var>new_colname</var>", "type":"<var>datatype</var>"}, ... ]</p>
                                                    <p>Where</p>
                                                    <ul style="list-style-type: circle;">
                                                        <li value="1"><var>element</var> is the parent element. For example, bookstore.</li>
                                                        <li value="2"><var>child_element</var> is the child element that contains the sub elements. For example, book.</li>
                                                        <li value="3"><var>sub_element3</var> is a sub element. For example, author.</li>
                                                        <li value="4"><var>new_colname</var> is the new name for the column that will contain the child element or sub element values.</li>
                                                        <li value="5"><var>data_type</var> is the data type format of the column. Choose from boolean, integer, float, string, timestamp, and money. For more information on the data types formats that <span class="GeneralProductName3">Xcalar</span> supports, see <a href="../../E_Reference/B_DataTypes.htm" class="MCXref xref" xrefformat="{para}">Data types supported</a>.</li>
                                                    </ul>
                                                </ol>
                                                <div class="Example"><span class="label">EXAMPLE 2</span>: Below is the schema syntax from the above example that <span class="GeneralProductName3">Xcalar</span> will use to create a table schema from XML nested columns. The nested columns will be named <span class="UIelement">category</span>, <span class="UIelement">author</span>, <span class="UIelement">title</span>, and <span class="UIelement">year</span>:</div>
                                                <div class="Code">[... ,{"name":"book.genre","newName":"category","type":"string"},{"name":"book.author","newName":"author","type":"string"},{"name":"book.price","newName":"price","type":"money"},{"name":"book.title._text","newName":"title","type":"string"},{"name":"book.published_date","newName":"year","type":"integer"}, ... ]</div>
                                                <h4><a name="Understa"></a>Understanding the Schema Wizard</h4>
                                                <p>The <span class="GeneralProductName3">Xcalar</span> Schema Wizard helps you create the schema for the table by identifying the column names and data type formats from your source data. </p>
                                                <p>The <span class="UIelement">Schema Wizard</span> modal window contains the following:   </p>
                                                <ul>
                                                    <li value="1"><span class="UIelement">Column Name</span> field, which lists the name of the column. You can change the name and add or remove the entry field.</li>
                                                    <li value="2"><span class="UIelement">Column Type</span> field, which lists the data type format of the column. You can change the data type format entry from the <span class="UIelement">Column Type</span> list and add or remove the entry field.</li>
                                                    <li value="3"><span class="UIelement">CLEAR ALL</span> icon, which removes all entry fields. </li>
                                                    <li value="4"><span class="UIelement">DETECT</span> icon, which automatically detects column names and their data type format from your source data. </li>
                                                </ul>
                                                <div class="Note"><span class="label">IMPORTANT: </span>Any changes to column names or data types that you previously entered manually, in the Schema field or from the Previewing section, cannot be changed with the <span class="UIelement">Schema Wizard</span>, even with the CLEAR ALL action.
		<br />If you do not require the previous changes, click the <span class="UIelement">Refresh preview</span> icon <img src="../../../Resources/Images/XD_assets/xd_refresh_icon.png" />, which is by the side of the <span class="UIelement">Format</span> entry field. </div>
                                                <h3><a name="Setting4"></a>Setting the advanced options</h3>
                                                <p>To set the advanced options:</p>
                                                <ol>
                                                    <li value="1">Expand the <span class="UIelement">Advanced Options</span> section.</li>
                                                    <li value="2">(Dataflow Mode only) To add a column that contains the file name and path for each record in the data source, select the <span class="UIelement">File Name</span> check box and enter a name for the column. For example, FILENAME.</li>
                                                    <li value="3">(Dataflow Mode only) To add a column that contains an identification number for each record, select the <span class="UIelement">Record Number</span> check box and enter a name for the column. For example, RECORDNUMBER.</li>
                                                    <div class="Note"><span class="label">NOTE:</span> Numbering starts at 0 for the first record in a file.</div>
                                                    <li value="4">(Optional) Choose how <span class="GeneralGUIName1">Xcalar Design</span> handles import errors from one of the following options:</li>
                                                    <ul style="list-style-type: circle;">
                                                        <li value="1">To log the error and stop the import when an error is detected, select <span class="UIelement">Low - Abort import on error</span>. This is the default setting.</li>
                                                        <li value="2">To log the error, skip to the next file, and then continue reading records when an error is detected, select <span class="UIelement">Medium - Skip to next file on error, continue</span>.</li>
                                                        <li value="3">To log the error and continue reading records from the file when an error is detected, select <span class="UIelement">HIgh - Skip to next file on parse fail or completion, continue</span>.</li>
                                                    </ul>
                                                </ol>
                                                <p>For more information, see <a href="../../A_GetStarted/B4_ImportData.htm#About" class="MCXref xref" xrefformat="{para}">Setting advanced options</a>.</p>
                                                <p><a href="#top">Go to the top</a>
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </section><a data-close="true"></a>
                </div>
            </div>
            <script>/* <![CDATA[ */$(document).foundation();/* ]]> */</script>
        </div>
    </body>
</html>