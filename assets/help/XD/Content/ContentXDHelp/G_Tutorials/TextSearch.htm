<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="_Skins_HTML5___SideNav" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../../" data-mc-has-content-body="True" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta charset="utf-8" />
        <meta name="description" content="" />
        <meta name="author" content="" /><title>Writing a text search application</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/Stylesheets/foundation.6.2.3.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/Stylesheets/Styles.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/Stylesheets/Tablet.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/Stylesheets/Mobile.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/MainStyles.css" rel="stylesheet" />
        <style>/*&lt;meta /&gt;*/

.button.previous-topic-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/navigate-previous.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.next-topic-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/navigate-next.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.separator-button
{
	-pie-background: linear-gradient(#ffffff, #ececec);
}

.button.print-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/printer.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.needs-pie
{
	behavior: url('../../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <link href="../../Resources/TableStyles/SimpleTable.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/require.config.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/foundation.6.2.3_custom.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapGlobal.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapDom.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapUtilities.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapXhr.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapTextEffects.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapSlideshow.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapFeedback.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapDefault.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapAccessibility.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapHelpSystem.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.Breadcrumbs.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.MiniToc.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.SideMenu.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapIndex.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapGlossary.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapParser.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapSearch.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapTopic.js" defer="defer">
        </script>
        <script src="../../../Skins/Default/Scripts/TopicToolBar.js">
        </script>
    </head>
    <body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-right" role="navigation" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
                    <ul class="off-canvas-accordion vertical menu off-canvas-list" data-accordion-menu="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div data-sticky-container="" class="title-bar-container">
                        <nav class="title-bar tab-bar sticky" data-sticky="" data-options="marginTop:0" style="width:100%" data-sticky-on="only screen and (max-width: 800px)" data-mc-ignore="true"><a class="skip-to-content fluid-skip showOnFocus" href="#">Skip To Main Content</a>
                            <div class="middle title-bar-section outer-row clearfix">
                                <div class="menu-icon-container relative clearfix">
                                    <button class="menu-icon" aria-label="Show Navigation Panel" data-toggle="offCanvas"><span></span>
                                    </button>
                                </div>
                            </div>
                            <div class="title-bar-layout outer-row">
                                <div class="logo-wrapper"><a class="logo" href="../../Home.htm" alt="Logo"></a>
                                </div>
                                <div class="navigation-wrapper nocontent">
                                    <ul class="navigation clearfix" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                        <li class="placeholder" style="visibility:hidden"><a>placeholder</a>
                                        </li>
                                    </ul>
                                </div>
                                <div class="nav-search-wrapper">
                                    <div class="nav-search row">
                                        <form class="search" action="#">
                                            <div class="search-bar search-bar-container needs-pie">
                                                <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search" />
                                                <div class="search-filter-wrapper"><span class="invisible-label" id="search-filters-label">Filter: </span>
                                                    <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                                    </div>
                                                    <div class="search-filter-content" id="sf-content">
                                                        <ul>
                                                            <li>
                                                                <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001"><span id="filterSelectorLabel-00001">All Files</span>
                                                                </button>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                </div>
                                                <div class="search-submit-wrapper" dir="ltr">
                                                    <div class="search-submit" title="Search" role="button" tabindex="0"><span class="invisible-label">Submit Search</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </nav>
                    </div>
                    <div class="main-section">
                        <div class="row outer-row sidenav-layout">
                            <nav class="sidenav-wrapper">
                                <div class="sidenav-container">
                                    <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                                </div>
                            </nav>
                            <main id="main" class="body-container">
                                <div data-mc-content-body="True">
                                    <div class="content">
                                        <p><a name="top"></a>
                                        </p>
                                        <div id="contentBody">
                                            <div class="row collapse">
                                                <div class="sideContent">
                                                    <div class="clearfix">
                                                        <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolBar mc-component nocontent">
                                                            <div class="button-group-container-left">
                                                                <button class="button needs-pie previous-topic-button" title="Navigate previous">
                                                                    <img alt="Navigate previous" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" class="invisible-label" />
                                                                </button>
                                                                <button class="button needs-pie next-topic-button" title="Navigate next">
                                                                    <img alt="Navigate next" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" class="invisible-label" />
                                                                </button>
                                                                <div class="button-separator">
                                                                </div>
                                                                <button class="button needs-pie print-button" title="Print">
                                                                    <img alt="Print" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" class="invisible-label" />
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="nocontent">
                                                    <div class="MCBreadcrumbsBox_0 breadcrumbs" role="navigation" aria-label="Breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="3" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">You are here: </span>
                                                    </div>
                                                </div>
                                                <h1>Writing a text search application</h1>
                                                <p>Text search is a common requirement in any application development. <span class="GeneralProductName3">Xcalar</span> provides a powerful set of search functions for simple as well as sophisticated search needs. This tutorial shows you how you can ingest a simple JSON file with wine reviews and search it for the wines of your choice.</p>
                                                <p>The first step in creating an application in <span class="GeneralProductName3">Xcalar</span> is to create a project. A project is a container where you create, design, troubleshoot, and execute your application. Open <span class="GeneralGUIName1">Xcalar Design</span> in a browser and log in. Create a new project called <span class="UIelement">TextSearch </span>and open it by clicking on the project card.</p>
                                                <p><span class="GeneralProductName3">Xcalar</span> has two modes - the SQL Mode and the Developer Mode. In SQL Mode, you develop your queries using the SQL query statements and user-defined functions (UDFs) written in Python. In Developer Mode, you develop your applications using visual components, SQL query statements, and UDFs written in Python.</p>
                                                <p>We will be using visual components in this application; therefore, we will work in Developer Mode. If you are not in Developer Mode, from the top menu bar of <span class="GeneralGUIName1">Xcalar Design</span>, click the mode switch to <span class="UIelement">Developer Mode</span>.</p>
                                                <p>Next, we will import the wine reviews file (winemag-data.json) into <span class="GeneralProductName3">Xcalar</span>.  If you have already created a dataset using this file, skip to the second step. </p>
                                                <h2 class="noPageBreak">1. Importing the wine reviews file</h2>
                                                <p>To import the reviews file, click on the <span class="UIelement">Sources </span>icon in the sidebar and then in the <span class="UIelement">Datasets </span>panel, click <span class="UIelement">Import data Source</span>. Since our file resides on <span class="GeneralProductName3">Xcalar</span>’s public S3 bucket (/xcmarketplace-us-east-1/tutorial-datasets/), for the <span class="UIelement">Connector</span>, select <span class="UIelement">Public S3</span> and in the <span class="UIelement">Data Source Path</span>, enter <code>/xcmarketplace-us-east-1/tutorial-datasets/</code>. Click <span class="UIelement">Browse </span>to browse the directory structure and select winemag-data.json. Click <span class="UIelement">Next </span>to preview the file.</p>
                                                <p><span class="GeneralProductName3">Xcalar</span> automatically detects the format of the file and displays its preview. Since this is a simple json file, we don't need to pull out any nested fields. Let's accept all default options and click <span class="UIelement">Create Dataset</span>. A dataset called <span class="UIelement">winemag-data</span> is created with 129,971 rows and 13 columns. The next step is to read the dataset into a module.</p>
                                                <h2 class="noPageBreak">2. Creating a module and reading the dataset</h2>
                                                <p>To read the dataset and process it, we need to create a module. In <span class="GeneralProductName3">Xcalar</span>, module is a graphical representation of a series of operations performed on data. Each operation is represented by a graphical component called Node.</p>
                                                <p>To create a module, click on the <span class="UIelement">Application Builder</span> icon in the sidebar and click <span class="UIelement">Create new module</span> or <span class="UIelement">New module</span> tab. A new module is created. From the <span class="UIelement">In</span> category of Nodes, add a <span class="UIelement">Dataset </span>Node to the module. To configure the <span class="UIelement">Dataset </span>Node, click on it and select <span class="UIelement">Configure</span>. Select the <span class="UIelement">winemag-data</span> dataset in the configuration panel and click <span class="UIelement">Save</span>. By default, the Node gets executed and the result set is displayed:</p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/ts-dataset.png" />
                                                </p>
                                                <p>Scrolling through the result set shows that it has a description column containing the description of each wine. Let’s search the description column for a keyword.</p>
                                                <h2 class="noPageBreak">3. Searching a column</h2>
                                                <p><span class="GeneralProductName3">Xcalar</span> provides many different functions for searching text through the <span class="UIelement">Map </span>Node. From the <span class="UIelement">Column Ops</span> category of Nodes, drag and drop the <span class="UIelement">Map </span>Node into the canvas. Connect the output of the <span class="UIelement">Dataset </span>Node to the <span class="UIelement">Map </span>Node. To configure the <span class="UIelement">Map </span>Node, click on it and select <span class="UIelement">Configure</span>. A configuration panel opens up. To search for a keyword <span class="UIelement">cinnamon </span>in the description column, configure the <span class="UIelement">Map </span>Node as follows:</p>
                                                <p class="CLIoutput">Category: string</p>
                                                <p class="CLIoutput">Function: find</p>
                                                <p class="CLIoutput">String to search: $winemag_data::description </p>
                                                <p class="CLIoutput">String to find: cinnamon</p>
                                                <p class="CLIoutput">Starting index: 0 (search from the beginning)</p>
                                                <p class="CLIoutput">Ending index: 0 (no end restriction)</p>
                                                <p class="CLIoutput">New Resultant Column Name: cinnamon</p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/ts-map-find1.png" />
                                                </p>
                                                <p>Save and execute the <span class="UIelement">Map</span> Node. A new result set is displayed with a new column called <span class="UIelement">cinnamon</span>. Notice that the column has many rows with value -1. These are the rows in which the word <span class="UIelement">cinnamon </span>was not found:</p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/ts-cinnamon-rs.png" />
                                                </p>
                                                <p>Let's exclude these rows.</p>
                                                <h2 class="noPageBreak">4. Excluding rows</h2>
                                                <p>In the result set, click on a cell with value -1, and select <span class="UIelement">Exclude this value</span>. Notice that a <span class="UIelement">Filter </span>Node is automatically added to the module and executed. A new result set is displayed with 3,555 rows with  the word <span class="UIelement">cinnamon </span>in all the descriptions:</p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/ts-filter-cinnamon.png" />
                                                </p>
                                                <p>This was a simple one word search. Let's add another keyword to the search.</p>
                                                <h2 class="noPageBreak">5. Searching multiple words in the text</h2>
                                                <p>Let’s add another function to the same <span class="UIelement">Map </span>Node by clicking on <span class="UIelement">Apply Additional Functions</span>. Configure the newly added fields as follows:</p>
                                                <p class="CLIoutput">Category: string</p>
                                                <p class="CLIoutput">Function: find</p>
                                                <p class="CLIoutput">String to search: $winemag_data::description </p>
                                                <p class="CLIoutput">String to find: ripe</p>
                                                <p class="CLIoutput">Starting index: 0 (search from the beginning)</p>
                                                <p class="CLIoutput">Ending index: 0 (no end restriction)</p>
                                                <p class="CLIoutput">New Resultant Column Name: ripe</p>
                                                <p>Save and execute the Node. A new result set is displayed with two new columns - <span class="UIelement">cinnamon </span>and <span class="UIelement">ripe</span>. </p>
                                                <p>Let's reconfigure our <span class="UIelement">Filter </span>Node to exclude all those rows which have -1 values in either of the two columns. Click <span class="UIelement">Additional Conditions</span> in the <span class="UIelement">Filter </span>Node configuration. Configure the newly added condition as follows: </p>
                                                <p class="CLIoutput">Filter Function: neq (not equal to)</p>
                                                <p class="CLIoutput">Operand 1: $ripe</p>
                                                <p class="CLIoutput">Operand 2: -1</p>
                                                <p class="CLIoutput">Clauses combined by: and</p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/ts-double-filter.png" />
                                                </p>
                                                <p>Save and execute the Node and a new result is displayed with 765 rows. Notice that both the columns have no -1 values. </p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/ts-cinnamon-ripe-rs.png" />
                                                </p>
                                                <p>Now that we have reduced our dataset by searching for two keywords, let's make it more interesting by finding the wines that are rated very highly and have reasonable prices. </p>
                                                <h2 class="noPageBreak">6. Changing the data types</h2>
                                                <p>The wine ratings are stored in the <span class="UIelement">points </span>column and the wine prices are stored in the <span class="UIelement">price </span>column. For convenience, let's drag and drop the <span class="UIelement">price </span>column next to the <span class="UIelement">points </span>column. If you look carefully at the data type of both columns in the column header, you will notice  that the <span class="UIelement">points </span>column is of type string (<img src="../../Resources/Images/Tutorials/ts-string.png" />) and the price column is of type mixed (<img src="../../Resources/Images/Tutorials/ts-mixed.png" />). A Mixed column is created when <span class="GeneralProductName3">Xcalar</span> is unable to detect the type of the column correctly at the time of import. </p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/ts-wrong-data-type.png" />
                                                </p>
                                                <p>Since we know that both these columns contain integer data, let's convert these column to integers so that we can apply simple numeric functions on them and find the wines we want. </p>
                                                <p>Select both the columns and right click the column header and select <span class="UIelement">Change data type -&gt; Integer</span>. Notice that a <span class="UIelement">Cast </span>Node is added to the module and its configuration panel is open. The <span class="UIelement">points </span>and <span class="UIelement">price </span>columns are at the top of the panel displaying their <span class="UIelement">New Name</span> and <span class="UIelement">New Type</span>. If you want to change the data type of another column, you can click on another column name at the bottom of the panel and enter its <span class="UIelement">New Name</span> and <span class="UIelement">New Type</span>. We want to change the data type of <span class="UIelement">points </span>and <span class="UIelement">price </span>columns only. Click <span class="UIelement">Save </span>and execute the Node. </p>
                                                <p>A new result set is displayed with <span class="UIelement">points </span>and <span class="UIelement">price </span>column types as Integer. </p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/ts-correct-data-type.png" />
                                                </p>
                                                <p>We can now apply some numeric functions to filter the wine we want.</p>
                                                <h3>7. Filtering rows</h3>
                                                <p>From the <span class="UIelement">Row Ops</span> category of Nodes, add a <span class="UIelement">Filter</span>Node to the module and connect the <span class="UIelement">Cast</span> Node to the <span class="UIelement">Filter</span> Node. Configure the <span class="UIelement">Filter</span>Node as follows:</p>
                                                <table style="mc-table-style: url('../../Resources/TableStyles/SimpleTable.css');margin-left: 0;margin-right: auto;" class="TableStyle-SimpleTable" cellspacing="0">
                                                    <col class="TableStyle-SimpleTable-Column-Column1" />
                                                    <col class="TableStyle-SimpleTable-Column-Column2" />
                                                    <col class="TableStyle-SimpleTable-Column-Column1" />
                                                    <col class="TableStyle-SimpleTable-Column-Column2" style="width: 28px;" />
                                                    <thead>
                                                        <tr class="TableStyle-SimpleTable-Head-Header1">
                                                            <th class="TableStyle-SimpleTable-HeadE-Column1-Header1">Filter Function</th>
                                                            <th class="TableStyle-SimpleTable-HeadE-Column2-Header1">Operand 1</th>
                                                            <th class="TableStyle-SimpleTable-HeadE-Column1-Header1">Operand 2</th>
                                                            <th class="TableStyle-SimpleTable-HeadD-Column2-Header1">Description</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">
                                                                <p>gt</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">$points</td>
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">94</td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Filter rows where $points &gt; 94</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyB-Column1-Body2">
                                                                <p>lt</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyB-Column2-Body2">
                                                                <p>$price</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyB-Column1-Body2">
                                                                <p>50</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyA-Column2-Body2">
                                                                <p class="tableParagraph">Filter rows where $price &lt; 50</p>
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                                <p><code>Clauses combined by: and</code>
                                                </p>
                                                <p>Save and execute the Node. A new result set is displayed with 4 rows. </p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/ts-final-result.png" />
                                                </p>
                                                <p>You can play with the search keywords, <span class="UIelement">points</span>, and <span class="UIelement">price </span>columns and you will get different results. For example, if you replace the keyword <span class="UIelement">ripe </span>with <span class="UIelement">smooth</span>, you will get precisely one wine. </p>
                                                <p>We have used the most basic search function in this tutorial but the <span class="UIelement">Map </span>Node provides all sorts of advanced search functions if you need to use them. </p>
                                                <h2 class="noPageBreak">Summary</h2>
                                                <p>This tutorial touched upon the following topics:</p>
                                                <ul>
                                                    <li value="1">Projects</li>
                                                    <li value="2">Modules</li>
                                                    <li value="3">Importing a file</li>
                                                    <li value="4">Using a dataset</li>
                                                    <li value="5">Searching a column</li>
                                                    <li value="6">Filtering rows</li>
                                                    <li value="7">Changing the data types</li>
                                                </ul>
                                                <p>For detailed information about these topics, see the online help for <span class="GeneralProductName3">Xcalar</span>.</p>
                                                <p>The <span class="UIelement">TextSearch </span>application is available on the tutorial page of <span class="GeneralGUIName1">Xcalar Design</span>.</p>
                                                <p>&#160;</p>
                                                <p><a href="#top">Go to the top</a>
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </main>
                        </div>
                    </div><a data-close="true"></a>
                </div>
            </div>
        </div>
    </body>
</html>