<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="_Skins_HTML5___SideNav" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../../" data-mc-has-content-body="True" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta charset="utf-8" />
        <meta name="description" content="" />
        <meta name="author" content="" /><title>Writing a data correlation application</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/Stylesheets/foundation.6.2.3.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/Stylesheets/Styles.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/Stylesheets/Tablet.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/Stylesheets/Mobile.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/MainStyles.css" rel="stylesheet" />
        <style>/*&lt;meta /&gt;*/

.button.previous-topic-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/navigate-previous.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.next-topic-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/navigate-next.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.separator-button
{
	-pie-background: linear-gradient(#ffffff, #ececec);
}

.button.print-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/printer.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.needs-pie
{
	behavior: url('../../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <link href="../../Resources/TableStyles/SimpleTable.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/require.config.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/foundation.6.2.3_custom.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapGlobal.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapDom.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapUtilities.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapXhr.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapTextEffects.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapSlideshow.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapFeedback.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapDefault.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapAccessibility.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapHelpSystem.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.Breadcrumbs.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.MiniToc.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.SideMenu.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapIndex.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapGlossary.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapParser.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapSearch.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapTopic.js" defer="defer">
        </script>
        <script src="../../../Skins/Default/Scripts/TopicToolBar.js">
        </script>
    </head>
    <body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-right" role="navigation" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
                    <ul class="off-canvas-accordion vertical menu off-canvas-list" data-accordion-menu="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div data-sticky-container="" class="title-bar-container">
                        <nav class="title-bar tab-bar sticky" data-sticky="" data-options="marginTop:0" style="width:100%" data-sticky-on="only screen and (max-width: 800px)" data-mc-ignore="true"><a class="skip-to-content fluid-skip showOnFocus" href="#">Skip To Main Content</a>
                            <div class="middle title-bar-section outer-row clearfix">
                                <div class="menu-icon-container relative clearfix">
                                    <button class="menu-icon" aria-label="Show Navigation Panel" data-toggle="offCanvas"><span></span>
                                    </button>
                                </div>
                            </div>
                            <div class="title-bar-layout outer-row">
                                <div class="logo-wrapper"><a class="logo" href="../../Home.htm" alt="Logo"></a>
                                </div>
                                <div class="navigation-wrapper nocontent">
                                    <ul class="navigation clearfix" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                        <li class="placeholder" style="visibility:hidden"><a>placeholder</a>
                                        </li>
                                    </ul>
                                </div>
                                <div class="nav-search-wrapper">
                                    <div class="nav-search row">
                                        <form class="search" action="#">
                                            <div class="search-bar search-bar-container needs-pie">
                                                <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search" />
                                                <div class="search-filter-wrapper"><span class="invisible-label" id="search-filters-label">Filter: </span>
                                                    <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                                    </div>
                                                    <div class="search-filter-content" id="sf-content">
                                                        <ul>
                                                            <li>
                                                                <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001"><span id="filterSelectorLabel-00001">All Files</span>
                                                                </button>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                </div>
                                                <div class="search-submit-wrapper" dir="ltr">
                                                    <div class="search-submit" title="Search" role="button" tabindex="0"><span class="invisible-label">Submit Search</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </nav>
                    </div>
                    <div class="main-section">
                        <div class="row outer-row sidenav-layout">
                            <nav class="sidenav-wrapper">
                                <div class="sidenav-container">
                                    <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                                </div>
                            </nav>
                            <main id="main" class="body-container">
                                <div data-mc-content-body="True">
                                    <div class="content">
                                        <p><a name="top"></a>
                                        </p>
                                        <div id="contentBody">
                                            <div class="row collapse">
                                                <div class="sideContent">
                                                    <div class="clearfix">
                                                        <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolBar mc-component nocontent">
                                                            <div class="button-group-container-left">
                                                                <button class="button needs-pie previous-topic-button" title="Navigate previous">
                                                                    <img alt="Navigate previous" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" class="invisible-label" />
                                                                </button>
                                                                <button class="button needs-pie next-topic-button" title="Navigate next">
                                                                    <img alt="Navigate next" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" class="invisible-label" />
                                                                </button>
                                                                <div class="button-separator">
                                                                </div>
                                                                <button class="button needs-pie print-button" title="Print">
                                                                    <img alt="Print" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" class="invisible-label" />
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="nocontent">
                                                    <div class="MCBreadcrumbsBox_0 breadcrumbs" role="navigation" aria-label="Breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="3" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">You are here: </span>
                                                    </div>
                                                </div>
                                                <h1>Writing a data correlation application</h1>
                                                <p>In this tutorial, we will write an application that finds the correlation coefficients between movie genres and IMDB ratings. We will use a data file, which contains movie titles, IMDB ratings, and the genres of the movies. The file is called genres.csv and looks like this:</p>
                                                <p>
                                                    <img src="../../Resources/Images/Usecases/uc3-tabular-data.png" />
                                                </p>
                                                <p>The Genre column contains multiple genres separated by commas. Since we want to find the correlation coefficients between individual genres and IMDB ratings, we need to split the Genre column such that a new column is created for each genre and filled in with a 1 or 0 depending on whether the movie belongs to that genre or not:</p>
                                                <p>
                                                    <img src="../../Resources/Images/Usecases/uc3-expected-result.png" />
                                                </p>
                                                <h2 class="noPageBreak">Challenge</h2>
                                                <p>The first instinct of a <span class="GeneralProductName3">Xcalar</span> user is to use the standard split operation on the Genre column. If you perform a split operation on the Genre column, it looks like this:</p>
                                                <p>
                                                    <img src="../../Resources/Images/Usecases/uc3-split-result.png" />
                                                </p>
                                                <p>The Split operation splits the column values into new columns but different genres are mixed up in each column depending on how they were stored in the input file. This is not what we want. We want a separate column for each genre with value 1 or 0.</p>
                                                <h2 class="noPageBreak">Solution</h2>
                                                <p>To separate the individual genres, we need to write a custom import parser. Then, we can use <span class="GeneralProductName3">Xcalar</span>'s built-in capabilities to find the correlation coefficients.</p>
                                                <h2 class="noPageBreak">1. Creating a project</h2>
                                                <p>The first step in creating an application in <span class="GeneralProductName3">Xcalar</span> is to create a project. A project is a container where you create, design, troubleshoot, and execute your application. Open <span class="GeneralGUIName1">Xcalar Design</span> in a browser and log in. Create a new project called DataCorrelation and open it by clicking on the project card.</p>
                                                <p><span class="GeneralProductName3">Xcalar</span> has two modes - the SQL Mode and the Developer Mode. In SQL Mode, you develop your applications using SQL query statements and user-defined functions (UDFs) written in Python. In Developer Mode, you develop your applications using visual components, SQL query statements, and UDFs written in Python.</p>
                                                <p>We will be using visual components and Python in this application; therefore, we will work in Developer Mode. If you are not in Developer Mode, click the mode switch to <span class="UIelement">Developer Mode</span> in the top menu bar.</p>
                                                <h2 class="noPageBreak">2. Examining the data file</h2>
                                                <p>Before we write the import parser, let’s examine the data file in a text editor to understand how we can split the columns:</p>
                                                <p>
                                                    <img src="../../Resources/Images/Usecases/uc3-csv-data.png" />
                                                </p>
                                                <p>Notice that commas are used both as delimiters and as part of column values. When we import files in <span class="GeneralProductName3">Xcalar</span>, such formatting is automatically taken care of by <span class="GeneralProductName3">Xcalar</span> but now that we are writing our own import parser, we must take care of it.</p>
                                                <p> While normally</p>
                                                <h2 class="noPageBreak">3. Writing the import parser code</h2>
                                                <p>In <span class="GeneralProductName3">Xcalar</span>, the parsers are written in Python using the user-defined function (UDF) framework. UDFs can be of two types:</p>
                                                <p>Map UDF - When you need to apply a function on your column data, you can write a Map UDF and specify it as a function in a Map operation. </p>
                                                <p>Import UDF - When your source data requires custom processing during an import, you can use an import UDF to parse the data.</p>
                                                <p>Since this application requires custom processing during the import, we will write an import UDF. </p>
                                                <p>In the import UDF, you can use as many parameters as you need, but the first two parameters must be fullPath and inStream. fullPath is the full pathname of the data source and inStream is the input stream of the content of the data source.</p>
                                                <p>In our example, the import UDF code must make two passes on the data:</p>
                                                <ol>
                                                    <li value="1">In the first pass, the code reads the whole file and creates a dictionary of all genres.</li>
                                                    <li value="2">In the second pass, the code:<ol style="list-style-type: lower-alpha;"><li value="1">Creates a copy of the dictionary.</li><li value="2">Reads a line from inStream.</li><li value="3">Splits the line into column values.</li><li value="4">Strips off any white space from the column values and saves the Title and the IMDB_Rating in the dictionary.</li><li value="5">Splits the Genre column on comma.</li><li value="6">For each genre, strips off the white space, removes any characters that are considered illegal in a <span class="GeneralProductName3">Xcalar</span> column name, and saves the genre name in the dictionary.</li><li value="7">Yields the column dictionary for the line and continues the execution.</li><li value="8">Repeats the steps of the second pass till EOF.</li></ol></li>
                                                </ol>
                                                <p><span class="GeneralProductName3">Xcalar</span> provides a simple UDF panel to code UDF. To open the UDF panel, click the <span class="UIelement">UDF</span> icon in the sidebar. Select <span class="UIelement">New Module</span> in the drop-down and enter the following code for our tutorial:</p>
                                                <div class="Code"><pre xml:space="preserve">import codecs
import csv
Utf8Reader = codecs.getreader("utf-8")

# helper function to create a column dictionary
def create_dict(utf8Stream):
    # clean dictionary
    clean_dict = {"Title":0, "IMDB_Rating":0}
 
    # read the csv file
    csv_reader = csv.reader(utf8Stream, delimiter=',')

    # add genre columns to the dictionary
    for line in csv_reader:
        try:
            for genre in line[2].split(","):
                genre = genre.strip(" \"\n")
                genre = genre.replace('-', '_')
                if len(genre) &gt; 0: 
                    clean_dict[genre] = 0
        except:
            pass
    return clean_dict

def split_genres(fullPath, inStream):
    # convert binary stream to utf-8 text stream
    utf8Stream = Utf8Reader(inStream)

    # create a clean dictionary of all the columns
    clean_dict = create_dict(utf8Stream)

    # reset the input stream
    utf8Stream.seek(0)
    csv_reader = csv.reader(utf8Stream, delimiter=',')

    # for each row
    for line_tokens in csv_reader:
        # make a copy of the clean dictionary
        d = clean_dict.copy()

        # save the title in the title column
        d["Title"] = line_tokens[0].strip(" \"\n")

        # save the rating in the imdb_rating column
        d["IMDB_Rating"] = line_tokens[1].strip(" \"\n")

        # save the genres in the respective genre columns
        try:
            for genre in line_tokens[2].split(","):
                genre = genre.strip(" \"\n")
                genre = genre.replace('-', '_')
                if len(genre) &gt; 0:
                    d[genre] = 1
        except:
            pass
        yield d</pre>
                                                </div>
                                                <p>To save the UDF, click the <span class="UIelement">Save </span>icon on the UDF panel. A <span class="UIelement">Save As</span> modal is displayed. Enter the module name (movie_genre.py) and click <span class="UIelement">Save</span>. The function split_genres in the Python module movie_genre.py is now accessible as movie_genre:split_genres.</p>
                                                <p>The next step is to apply the UDF.</p>
                                                <h2 class="noPageBreak">3. Applying the import UDF</h2>
                                                <p> An import UDF is applied while importing the file. To import the file, click on the <span class="UIelement">Sources</span> icon in the sidebar, and then click <span class="UIelement">Import Data Source</span> in the <span class="UIelement">Datasets </span>panel. Since our file resides on <span class="GeneralProductName3">Xcalar</span>’s public S3 bucket, select <span class="UIelement">Public S3</span> as the <span class="UIelement">Connector</span>, and enter /xcmarketplace-us-east-1/tutorial-datasets/ as the <span class="UIelement">Data Source Path</span>. Click <span class="UIelement">Browse </span>to browse the directory structure and select genres.csv. Click <span class="UIelement">Next </span>to preview the file.</p>
                                                <p>Since we want to import using our import UDF, in the Format window, change the following options:</p>
                                                <p class="CLIoutput">Format: Custom Format</p>
                                                <p class="CLIoutput">Module: movie_genre </p>
                                                <p class="CLIoutput">Function: split_generes</p>
                                                <p class="CLIoutput">
                                                    <img src="../../Resources/Images/Tutorials/dc-import.png" />
                                                </p>
                                                <p> Click <span class="UIelement">Apply UDF</span>.</p>
                                                <p>The file is read and passed through the movie_genre:split_genres UDF, creating individual columns for each of the genres. After the process is finished, a preview of the file data is displayed:</p>
                                                <p>
                                                    <img src="../../Resources/Images/Usecases/uc3-expected-result.png" />
                                                </p>
                                                <p>Click <span class="UIelement">Create Dataset</span> to finish importing the file. You now have a dataset named genres. The next step is to read the dataset. </p>
                                                <h2 class="noPageBreak">4. Creating a module and reading the dataset</h2>
                                                <p>To read the dataset, we need to create a module. In <span class="GeneralProductName3">Xcalar</span>, a module is a graphical representation of a series of operations performed on data. Each operation is represented by a graphical component called Node. To create a module, click the <span class="UIelement">Application Builder</span> icon in the sidebar and then click either the <span class="UIelement">Create new module</span> or the <span class="UIelement">New module</span> tab. A new module called Module 1 is created.</p>
                                                <p>Every module starts with a source Node, which brings the data into the module. Since we imported our data file into a dataset, let’s add a Dataset Node to the module and configure it to read the dataset we imported.</p>
                                                <p>Drag and drop a <span class="UIelement">Dataset</span> Node to the canvas. To configure the Node, click on it and select <span class="UIelement">Configure</span>. Select the genres dataset in the configuration panel and click <span class="UIelement">Save</span>. By default, the Node gets executed and a result set is displayed unless you have changed the module settings by checking off the auto execute option. </p>
                                                <h2 class="noPageBreak">5. Changing the data type of a column</h2>
                                                <p>To find the correlation between columns, they must have numeric values. Notice that our IMDB_Rating column is of type string (<img src="../../Resources/Images/Tutorials/ts-string.png" />). We need to convert it to float. Right click the IMDB_Rating column header and select <span class="UIelement">Change data type -&gt; Float</span>. This adds a <span class="UIelement">Cast </span>Node to the canvas and displays the Node's configuration panel. The column IMDB_Rating is displayed on the top with the <span class="UIelement">New Type</span> as <span class="UIelement">float</span>.  </p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/cc-cast-config.png" />
                                                </p>
                                                <p>Save and execute the Node. A new result set is displayed with IMDB_Rating column as a float. </p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/cc-changed-data-type.png" />
                                                </p>
                                                <p>The next step is to find the correlation coefficients.</p>
                                                <h2 class="noPageBreak">6. Finding the correlation coefficients </h2>
                                                <p>A correlation coefficient is a numerical measure of a statistical relationship between two variables. The value of a correlation coefficient ranges between -1 and 1. The greater the absolute value of the correlation coefficient, the stronger is the linear relationship. The strongest linear relationship is indicated by a correlation coefficient of -1 or 1.</p>
                                                <p>There are two ways of calculating correlation coefficients in <span class="GeneralProductName3">Xcalar</span>:</p>
                                                <ul>
                                                    <li value="1">If you want to find the correlation coefficient between two specific columns, select those columns, click on the column headers, and select <span class="UIelement">Correlation</span>. </li>
                                                    <li value="2">If you want to find the correlation coefficient between all columns, click <span class="UIelement">Menu </span>in the top right corner of the result set and select <span class="UIelement">Correlation</span>. </li>
                                                </ul>
                                                <p>We will calculate the correlation coefficients for all columns by clicking <span class="UIelement">Menu </span>and then selecting <span class="UIelement">Correlation</span>. A modal is displayed with a matrix of all correlation coefficients:</p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/cc-correlation.png" />
                                                </p>
                                                <p>Increase the size of the modal or scroll horizontally and vertically to view all coefficients. The stronger the correlation, the darker is the rectangle color in the matrix. Here are some observations from the correlation matrix:</p>
                                                <table style="mc-table-style: url('../../Resources/TableStyles/SimpleTable.css');width: 100%;margin-left: 0;margin-right: auto;" class="TableStyle-SimpleTable" cellspacing="0">
                                                    <col class="TableStyle-SimpleTable-Column-Column1" style="width: 217px;" />
                                                    <col class="TableStyle-SimpleTable-Column-Column2" style="width: 362px;" />
                                                    <thead>
                                                        <tr class="TableStyle-SimpleTable-Head-Header1">
                                                            <th class="TableStyle-SimpleTable-HeadE-Column1-Header1">
                                                                <p>Stronger correlation</p>
                                                            </th>
                                                            <th class="TableStyle-SimpleTable-HeadD-Column2-Header1">Almost no correlation</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">
                                                                <p>Drama and IMDB_Rating</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">Drama and Western</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body2">
                                                            <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">
                                                                <p class="tableParagraph">Sci-fi and Action</p>
                                                            </td>
                                                            <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">Biography and War</td>
                                                        </tr>
                                                        <tr class="TableStyle-SimpleTable-Body-Body1">
                                                            <td class="TableStyle-SimpleTable-BodyB-Column1-Body1">Adventure and Animation</td>
                                                            <td class="TableStyle-SimpleTable-BodyA-Column2-Body1">Romance and Short</td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                                <h2 class="noPageBreak">Summary</h2>
                                                <p>This tutorial touched upon the following topics:</p>
                                                <ul>
                                                    <li value="1">Writing and using an import parser</li>
                                                    <li value="2">Changing the data type of a column</li>
                                                    <li value="3">Finding the correlation coefficients</li>
                                                </ul>
                                                <p>For detailed information about these topics, see the online help for <span class="GeneralProductName3">Xcalar</span>.</p>
                                                <p>The DataCorrelation application is available on the tutorial page of <span class="GeneralGUIName1">Xcalar Design</span>.</p>
                                                <p><a href="#top">Go to the top</a>
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </main>
                        </div>
                    </div><a data-close="true"></a>
                </div>
            </div>
        </div>
    </body>
</html>