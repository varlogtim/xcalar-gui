<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="_Skins_HTML5___SideNav" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../../" data-mc-has-content-body="True" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta charset="utf-8" />
        <meta name="description" content="" />
        <meta name="author" content="" /><title>Writing a machine learning application - part 2</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/Stylesheets/foundation.6.2.3.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/Stylesheets/Styles.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/Stylesheets/Tablet.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/Stylesheets/Mobile.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/MainStyles.css" rel="stylesheet" />
        <style>/*&lt;meta /&gt;*/

.button.previous-topic-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/navigate-previous.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.next-topic-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/navigate-next.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.separator-button
{
	-pie-background: linear-gradient(#ffffff, #ececec);
}

.button.print-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/printer.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.needs-pie
{
	behavior: url('../../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/require.config.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/foundation.6.2.3_custom.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapGlobal.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapDom.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapUtilities.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapXhr.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapTextEffects.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapSlideshow.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapFeedback.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapDefault.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapAccessibility.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapHelpSystem.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.Breadcrumbs.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.MiniToc.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.SideMenu.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapIndex.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapGlossary.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapParser.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapSearch.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapTopic.js" defer="defer">
        </script>
        <script src="../../../Skins/Default/Scripts/TopicToolBar.js">
        </script>
    </head>
    <body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-right" role="navigation" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
                    <ul class="off-canvas-accordion vertical menu off-canvas-list" data-accordion-menu="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div data-sticky-container="" class="title-bar-container">
                        <nav class="title-bar tab-bar sticky" data-sticky="" data-options="marginTop:0" style="width:100%" data-sticky-on="only screen and (max-width: 800px)" data-mc-ignore="true"><a class="skip-to-content fluid-skip showOnFocus" href="#">Skip To Main Content</a>
                            <div class="middle title-bar-section outer-row clearfix">
                                <div class="menu-icon-container relative clearfix">
                                    <button class="menu-icon" aria-label="Show Navigation Panel" data-toggle="offCanvas"><span></span>
                                    </button>
                                </div>
                            </div>
                            <div class="title-bar-layout outer-row">
                                <div class="logo-wrapper"><a class="logo" href="../../Home.htm" alt="Logo"></a>
                                </div>
                                <div class="navigation-wrapper nocontent">
                                    <ul class="navigation clearfix" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                        <li class="placeholder" style="visibility:hidden"><a>placeholder</a>
                                        </li>
                                    </ul>
                                </div>
                                <div class="nav-search-wrapper">
                                    <div class="nav-search row">
                                        <form class="search" action="#">
                                            <div class="search-bar search-bar-container needs-pie">
                                                <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search" />
                                                <div class="search-filter-wrapper"><span class="invisible-label" id="search-filters-label">Filter: </span>
                                                    <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                                    </div>
                                                    <div class="search-filter-content" id="sf-content">
                                                        <ul>
                                                            <li>
                                                                <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001"><span id="filterSelectorLabel-00001">All Files</span>
                                                                </button>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                </div>
                                                <div class="search-submit-wrapper" dir="ltr">
                                                    <div class="search-submit" title="Search" role="button" tabindex="0"><span class="invisible-label">Submit Search</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </nav>
                    </div>
                    <div class="main-section">
                        <div class="row outer-row sidenav-layout">
                            <nav class="sidenav-wrapper">
                                <div class="sidenav-container">
                                    <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                                </div>
                            </nav>
                            <main id="main" class="body-container">
                                <div data-mc-content-body="True">
                                    <div class="content">
                                        <p><a name="top"></a>
                                        </p>
                                        <div id="contentBody">
                                            <div class="row collapse">
                                                <div class="sideContent">
                                                    <div class="clearfix">
                                                        <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolBar mc-component nocontent">
                                                            <div class="button-group-container-left">
                                                                <button class="button needs-pie previous-topic-button" title="Navigate previous">
                                                                    <img alt="Navigate previous" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" class="invisible-label" />
                                                                </button>
                                                                <button class="button needs-pie next-topic-button" title="Navigate next">
                                                                    <img alt="Navigate next" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" class="invisible-label" />
                                                                </button>
                                                                <div class="button-separator">
                                                                </div>
                                                                <button class="button needs-pie print-button" title="Print">
                                                                    <img alt="Print" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" class="invisible-label" />
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="nocontent">
                                                    <div class="MCBreadcrumbsBox_0 breadcrumbs" role="navigation" aria-label="Breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="3" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">You are here: </span>
                                                    </div>
                                                </div>
                                                <h1>Writing a machine learning application - part 2</h1>
                                                <p>The machine learning (ML) algorithms take a known set of inputs and outputs to train a model and generate predictions for a new set of input data. The whole ML process can be divided into three major parts:</p>
                                                <ol>
                                                    <li value="1">Cleaning and transforming data.</li>
                                                    <li value="2">Training an ML model.</li>
                                                    <li value="3">Running predictive analysis using the trained ML model.</li>
                                                </ol>
                                                <p>This tutorial focuses on the second and third parts - Training and running predictive analysis.</p>
                                                <h2 class="noPageBreak">Challenge</h2>
                                                <p>There are many tools available in the market for developing the ML models. The problem arises while applying those models on a huge amount of data to produce reliable and quick results consistently.</p>
                                                <h2 class="noPageBreak">Solution</h2>
                                                <p><span class="GeneralProductName3">Xcalar</span> provides a cloud-scale platform for executing your ML jobs on big data in minutes rather than in hours. The combination of visual tools, SQL and Python for cleaning and transforming the data requires minimal or no learning period.</p>
                                                <h2 class="noPageBreak">Objective</h2>
                                                <p>The publicly available Crunchbase funding data contains the funding information about 66k companies. It includes information like their current status, total funding, first funding date, last funding date, etc. </p>
                                                <p>In part 1 of this tutorial, we created a project called <span class="UIelement">MachineLearning</span> and a module named <span class="UIelement">Module 1</span>. In that module we cleaned and extracted the companies data for training our ML model and for running the predictive analysis. </p>
                                                <p>In this tutorial we will train our ML model and run predictive analysis on those clean data sets.</p>
                                                <h2 class="noPageBreak">Pre-requisites</h2>
                                                <p>You have already completed <span class="UIelement">Writing a machine learning application - part 1</span> tutorial.</p>
                                                <h2 class="noPageBreak">Understanding the ML training process</h2>
                                                <p>In simple words, training an ML model means feeding the training data to an ML algorithm for learning the patterns between the input and the output attributes. The training data must contain the correct output for each set of inputs.</p>
                                                <p>The attribute you want to predict is called a target or a label and the attributes that you want to use as input are called features. The algorithm finds patterns between the features and the target, known as fitting a model, and saves those patterns in the form of an ML model.</p>
                                                <h2 class="noPageBreak">1. Writing the training algorithm</h2>
                                                <p>We will write our training algorithm in Python. In <span class="GeneralProductName3">Xcalar</span>, the Python code is written as a user-defined function (UDF). UDFs can be of two types:</p>
                                                <p><span class="UIelement">Map UDF</span> - When you need to use Python to convert your column data into custom values, you can write a Map UDF, and specify it as a Map function in a Map operation. </p>
                                                <p><span class="UIelement">Import UDF</span> - When your source data requires custom processing during an import, you can use an import UDF to parse the data.</p>
                                                <p>Since we have to generate a single ML model by processing the whole training data, we will use an import UDF.</p>
                                                <p>Open the <span class="UIelement">MachineLearning</span> project and then <span class="UIelement">Module 1</span>. To create an import UDF, from the sidebar, click on the <span class="UIelement">UDF </span>icon. The UDF panel opens up. Copy and paste the following sample ML training code for our tutorial. The comments explain each line of code.</p>
                                                <div class="Code"># fullPath and inStream are the default arguments in an import UDF</div>
                                                <div class="Code"># fullPath contains the path of the file to read</div>
                                                <div class="Code"># inStream contains the input stream of the file content</div>
                                                <div class="Code">def fn_training(fullPath, inStream):</div>
                                                <div class="Code"># NumPy is the fundamental library for scientific computing in Python.</div>
                                                <div class="Code">import numpy as np</div>
                                                <div class="Code">&#160;</div>
                                                <div class="Code"># Pickle module is used for serializing and de-serializing a Python object structure</div>
                                                <div class="Code">import pickle</div>
                                                <div class="Code">&#160;</div>
                                                <div class="Code"># Scikit-learn is a library in Python that provides many unsupervised and supervised learning algorithms.</div>
                                                <div class="Code">from sklearn.ensemble import RandomForestClassifier</div>
                                                <div class="Code">&#160;</div>
                                                <div class="Code"># Read the whole stream,</div>
                                                <div class="Code"># read all columns as integer</div>
                                                <div class="Code"># skip first row as data has the column headers.</div>
                                                <div class="Code">dataset = np.loadtxt(inStream, delimiter=",", dtype='int', skiprows=1)</div>
                                                <div class="Code">&#160;</div>
                                                <div class="Code"># The target (often called Y) is the feature of a dataset</div>
                                                <div class="Code"># which you want to predict.</div>
                                                <div class="Code"># In our case, status is the target, present in the first column.</div>
                                                <div class="Code">targets = dataset [:, 0]</div>
                                                <div class="Code">&#160;</div>
                                                <div class="Code"># A feature (often called X) is a property of the object you’re trying to analyze.</div>
                                                <div class="Code"># In datasets they appear as columns.</div>
                                                <div class="Code"># next 5 columns are the features - funding, rounds, age, first funding, last funding</div>
                                                <div class="Code">features = dataset [:, 1:6]</div>
                                                <div class="Code">&#160;</div>
                                                <div class="Code"># The training data is used to make sure the machine recognizes patterns in the data.</div>
                                                <div class="Code"># The test data is used to see how well the machine can predict based on its training.</div>
                                                <div class="Code"># We will use 80% of the data for training and 20% for testing</div>
                                                <div class="Code">num_train = int(len(features) * 0.8)</div>
                                                <div class="Code">x_train, x_test = features[:num_train], features[num_train:]</div>
                                                <div class="Code">y_train, y_test = targets[:num_train], targets[num_train:]</div>
                                                <div class="Code">&#160;</div>
                                                <div class="Code"># Random Forest Classifier is an ensemble algorithm, part of scikit library.</div>
                                                <div class="Code"># Instantiate the RandomForestClassifier</div>
                                                <div class="Code"># The n_estimators hyperparamater controls how many individual decision trees will be built</div>
                                                <div class="Code">forest = RandomForestClassifier(n_estimators=100)</div>
                                                <div class="Code">&#160;</div>
                                                <div class="Code"># Train the model on the training data</div>
                                                <div class="Code">forest.fit(x_train, y_train)</div>
                                                <div class="Code">&#160;</div>
                                                <div class="Code"># Predict the outcome on training data</div>
                                                <div class="Code">train_preds = forest.predict(x_train)</div>
                                                <div class="Code">&#160;</div>
                                                <div class="Code"># Predict the outcome on the test data</div>
                                                <div class="Code">test_preds = forest.predict(x_test)</div>
                                                <div class="Code">&#160;</div>
                                                <div class="Code"># dump the model to the disk</div>
                                                <div class="Code">out1 = open("/mnt/xcalar/export/ml_model_obj", "wb")</div>
                                                <div class="Code">pickle.dump(forest, out1)</div>
                                                <div class="Code">out1.close()</div>
                                                <div class="Code">&#160;</div>
                                                <div class="Code"># Calculate the training accuracy and the testing accuracy</div>
                                                <div class="Code">ret_str= "Train Accuracy: %.3f, Test Accuracy: %.3f"%((train_preds == y_train).mean(), (test_preds == y_test).mean())</div>
                                                <div class="Code">&#160;</div>
                                                <div class="Code"># Yield the output string</div>
                                                <div class="Code">yield {"Result": ret_str}</div>
                                                <p>Save the UDF as ml_training.py. You can replace the code within this function with your own ML training code. Make sure that the module contains all the imports and all the helper functions.</p>
                                                <h2 class="noPageBreak">2. Applying the import UDF to train the ML model</h2>
                                                <p>Now that we have written our training code as an import UDF, we need to import the training data. From the sidebar, click the <span class="UIelement">Sources </span>icon and then the <span class="UIelement">Import Data Source</span>. Select the appropriate connector and browse the source to select the ‘/mnt/xcalar/export/ml_training_data.csv’ file saved in <span class="UIelement">Writing a machine learning application - part 1</span>.</p>
                                                <p>In the Format page select the following options to use the import UDF we wrote in the previous step:</p>
                                                <p class="CLIoutput">Format: Custom Format</p>
                                                <p class="CLIoutput">Module: ml_training</p>
                                                <p class="CLIoutput">Function: fn_training</p>
                                                <p>Click <span class="UIelement">Apply UDF</span>.</p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/ml-using-import-udf.png" />
                                                </p>
                                                <p>The file data is read and passed to the import UDF ml_training:fn_training. The function code trains the model, saves it in ‘/mnt/xcalar/export/ml_model_obj’, and outputs the training and the testing accuracy details:</p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/ml-import-udf-result.png" />
                                                </p>
                                                <p>At this point, if you are satisfied with the training and testing accuracy, you can use the saved ML model for predictive analysis. Otherwise, update your UDF code as per your needs and train the model again.</p>
                                                <h2 class="noPageBreak">3. Writing Python code for predictive analysis in Jupyter Notebook</h2>
                                                <p>Jupyter Notebook is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations, and narrative text. <span class="GeneralProductName3">Xcalar</span> includes Jupyter Notebook interactive development environment. </p>
                                                <p>To open Jupyter Notebook from <span class="GeneralProductName3">Xcalar</span>, click the Jupyter Notebook icon in the sidebar. <span class="GeneralProductName3">Xcalar</span> fills in some basic Python code in the first cell of the Jupyter Notebook to connect the current <span class="GeneralProductName3">Xcalar</span> project to the newly created Jupyter Notebook. For our purposes, we don’t need this code.</p>
                                                <p>Create an empty cell in the Jupyter Notebook and paste your machine learning code for predictive analysis in that cell.</p>
                                                <p>Here is a <span class="UIelement">sample</span> function called predict which runs the predictive analysis on a company’s funding data:</p>
                                                <p>
                                                    <img src="../../Resources/Images/Usecases/uc2-jn-code.png" />
                                                </p>
                                                <p>The predict function reads the model we trained in the previous step from a file (/mnt/xcalar/export/ml_model.obj). The code then calls the standard predict_proba function on the trained model and returns the probability of each of the three possible outcomes for a company.</p>
                                                <p>To test this function, the code calls the predict function with some random funding data and gets the following output:</p>
                                                <p><code>acquired: 0.140  closed: 0.630  ipo: 0.230</code>
                                                </p>
                                                <p>The result shows that for this company, the probability of being acquired is 14%, the probability for its closing is 63% and the probability for going public is 23%.</p>
                                                <p>The advantage of the integrated Jupyter Notebook is that you can make changes to your Python code and see the results interactively without ever leaving <span class="GeneralProductName3">Xcalar</span>. Once you are satisfied with your results we can create a Map UDF with this code.</p>
                                                <h2 class="noPageBreak">4. Creating a Map UDF for predictive analysis</h2>
                                                <p>Click the <span class="UIelement">UDF</span> icon in the sidebar to bring up the UDF panel. Copy and paste your Python code from previous step in the UDF panel. The code should be complete with all the imports and helper functions and should be able to access your trained model. Save the UDF and give it a name, for example, ml_predict.py. The function predict in this UDF module is accessible as <span class="UIelement">ml_predict:predict</span>.</p>
                                                <p>
                                                    <img src="../../Resources/Images/Usecases/uc2-udf-predict.png" />
                                                </p>
                                                <h2 class="noPageBreak">5. Using the Map UDF for predictive analysis</h2>
                                                <p>The output of Node 11 (<span class="UIelement">SQL </span>Node) contains the companies for whom we want to predict the future outcome. To apply the Map UDF for predictive analysis to the result set of Node 11, add a <span class="UIelement">Map</span> Node to the module and connect the output of Node 11 to this <span class="UIelement">Map</span> Node. Configure the Map Node as follows:</p>
                                                <p class="CLIoutput">Category: user-defined</p>
                                                <p class="CLIoutput">Function: ml_predict:predict</p>
                                                <p class="CLIoutput">total_funding:  $FUNDING_TOTAL_USD</p>
                                                <p class="CLIoutput">total_rounds: $FUNDING_ROUNDS</p>
                                                <p class="CLIoutput">age: $AGE</p>
                                                <p class="CLIoutput">months_last_funcding: $MON_SINCE_LAST_FUND</p>
                                                <p class="CLIoutput">months_first_funding: $MON_SINCE_FIRST_FUND</p>
                                                <p class="CLIoutput">New Resultant Column Name: RESULT</p>
                                                <p>
                                                    <img src="../../Resources/Images/Usecases/uc2-map-predict-udf.png" />
                                                </p>
                                                <p>Save and execute the Node. The Map UDF, containing the predictive analysis code is executed for each row and a new column named RESULT is added to the results with the probability prediction for each of the companies:</p>
                                                <p>
                                                    <img src="../../Resources/Images/Usecases/uc2-final-result.png" />
                                                </p>
                                                <h2 class="noPageBreak">Summary</h2>
                                                <p>This tutorial touched upon the following topics:</p>
                                                <ul>
                                                    <li value="1">Writing and using an import UDF</li>
                                                    <li value="2">Using Jupyter Notebook integrated with <span class="GeneralProductName3">Xcalar</span></li>
                                                    <li value="3">Writing and using a Map UDF</li>
                                                </ul>
                                                <p>For detailed information about these topics, see the online help for Xcalar.</p>
                                                <p>The <span class="UIelement">MachineLearning </span>application is available on the tutorial page of <span class="GeneralGUIName1">Xcalar Design</span>.</p>
                                                <p><a href="#top">Go to the top</a>
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </main>
                        </div>
                    </div><a data-close="true"></a>
                </div>
            </div>
        </div>
    </body>
</html>