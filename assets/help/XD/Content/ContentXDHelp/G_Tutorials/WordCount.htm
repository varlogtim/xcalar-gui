<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="_Skins_HTML5___SideNav" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../../" data-mc-has-content-body="True" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta charset="utf-8" />
        <meta name="description" content="" />
        <meta name="author" content="" /><title>Writing a word count application</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/Stylesheets/foundation.6.2.3.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/Stylesheets/Styles.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/Stylesheets/Tablet.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/Stylesheets/Mobile.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/MainStyles.css" rel="stylesheet" />
        <style>/*&lt;meta /&gt;*/

.button.previous-topic-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/navigate-previous.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.next-topic-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/navigate-next.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.separator-button
{
	-pie-background: linear-gradient(#ffffff, #ececec);
}

.button.print-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/printer.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.needs-pie
{
	behavior: url('../../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/require.config.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/foundation.6.2.3_custom.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapGlobal.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapDom.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapUtilities.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapXhr.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapTextEffects.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapSlideshow.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapFeedback.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapDefault.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapAccessibility.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapHelpSystem.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.Breadcrumbs.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.MiniToc.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.SideMenu.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapIndex.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapGlossary.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapParser.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapSearch.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapTopic.js" defer="defer">
        </script>
        <script src="../../../Skins/Default/Scripts/TopicToolBar.js">
        </script>
    </head>
    <body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-right" role="navigation" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
                    <ul class="off-canvas-accordion vertical menu off-canvas-list" data-accordion-menu="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div data-sticky-container="" class="title-bar-container">
                        <nav class="title-bar tab-bar sticky" data-sticky="" data-options="marginTop:0" style="width:100%" data-sticky-on="only screen and (max-width: 800px)" data-mc-ignore="true"><a class="skip-to-content fluid-skip showOnFocus" href="#">Skip To Main Content</a>
                            <div class="middle title-bar-section outer-row clearfix">
                                <div class="menu-icon-container relative clearfix">
                                    <button class="menu-icon" aria-label="Show Navigation Panel" data-toggle="offCanvas"><span></span>
                                    </button>
                                </div>
                            </div>
                            <div class="title-bar-layout outer-row">
                                <div class="logo-wrapper"><a class="logo" href="../../Home.htm" alt="Logo"></a>
                                </div>
                                <div class="navigation-wrapper nocontent">
                                    <ul class="navigation clearfix" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                        <li class="placeholder" style="visibility:hidden"><a>placeholder</a>
                                        </li>
                                    </ul>
                                </div>
                                <div class="nav-search-wrapper">
                                    <div class="nav-search row">
                                        <form class="search" action="#">
                                            <div class="search-bar search-bar-container needs-pie">
                                                <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search" />
                                                <div class="search-filter-wrapper"><span class="invisible-label" id="search-filters-label">Filter: </span>
                                                    <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                                    </div>
                                                    <div class="search-filter-content" id="sf-content">
                                                        <ul>
                                                            <li>
                                                                <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001"><span id="filterSelectorLabel-00001">All Files</span>
                                                                </button>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                </div>
                                                <div class="search-submit-wrapper" dir="ltr">
                                                    <div class="search-submit" title="Search" role="button" tabindex="0"><span class="invisible-label">Submit Search</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </nav>
                    </div>
                    <div class="main-section">
                        <div class="row outer-row sidenav-layout">
                            <nav class="sidenav-wrapper">
                                <div class="sidenav-container">
                                    <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                                </div>
                            </nav>
                            <main id="main" class="body-container">
                                <div data-mc-content-body="True">
                                    <div class="content">
                                        <p><a name="top"></a>
                                        </p>
                                        <div id="contentBody">
                                            <div class="row collapse">
                                                <div class="sideContent">
                                                    <div class="clearfix">
                                                        <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolBar mc-component nocontent">
                                                            <div class="button-group-container-left">
                                                                <button class="button needs-pie previous-topic-button" title="Navigate previous">
                                                                    <img alt="Navigate previous" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" class="invisible-label" />
                                                                </button>
                                                                <button class="button needs-pie next-topic-button" title="Navigate next">
                                                                    <img alt="Navigate next" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" class="invisible-label" />
                                                                </button>
                                                                <div class="button-separator">
                                                                </div>
                                                                <button class="button needs-pie print-button" title="Print">
                                                                    <img alt="Print" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" class="invisible-label" />
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="nocontent">
                                                    <div class="MCBreadcrumbsBox_0 breadcrumbs" role="navigation" aria-label="Breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="3" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">You are here: </span>
                                                    </div>
                                                </div>
                                                <h1>Writing a word count application</h1>
                                                <p>The objective of this application is to count the number of words saved in a text file. There are many ways to accomplish this in <span class="GeneralProductName3">Xcalar</span>. We will build a few variations.</p>
                                                <p>The first step in creating an application in <span class="GeneralProductName3">Xcalar</span> is to create a project. A project is a container where you create, design, troubleshoot, and execute your application. Open <span class="GeneralGUIName1">Xcalar Design</span> in a browser and log in. Create a new project called WordCount and open it by clicking on the project card.</p>
                                                <p><span class="GeneralProductName3">Xcalar</span> has two modes - the SQL Mode and the Developer Mode. In SQL Mode, you develop your applications using SQL query statements and user-defined functions (UDFs) written in Python. In Developer Mode, you develop your application using visual components, SQL query statements, and UDFs written in Python.</p>
                                                <p>We will be using visual components and Python in this application; therefore, we will work in Developer Mode. If you are not in Developer Mode, from the top menu bar of <span class="GeneralGUIName1">Xcalar Design</span>, click the mode switch to <span class="UIelement">Developer Mode</span>.</p>
                                                <h2 class="noPageBreak">Word count application using an aggregate function</h2>
                                                <p>In this variation of the word count application, we will first import the file such that each word is imported in a separate row of a dataset. Then, we will create a module and use an aggregate function to count the number of rows in the dataset to get the number of words.</p>
                                                <h3>1. Importing each word in a different row</h3>
                                                <p>To import the file word_count.txt, click on the <span class="UIelement">Sources </span>icon in the sidebar and then <span class="UIelement">Import data Source</span> in the <span class="UIelement">Datasets</span> panel. Since our file resides on <span class="GeneralProductName3">Xcalar</span>'s public S3 bucket (/xcmarketplace-us-east-1/tutorial-datasets/), for the <span class="UIelement">Connector</span>, select <span class="UIelement">Public S3</span> and for the <span class="UIelement">Data Source Path</span>, enter /xcmarketplace-us-east-1/tutorial-datasets/. Click <span class="UIelement">Browse</span> to browse the directory structure and select word_count.txt. Click <span class="UIelement">Next</span> to preview the file.</p>
                                                <p><span class="GeneralProductName3">Xcalar</span> automatically detects the format of the file and shows its preview, but it gives users the flexibility to change the options and import the file differently. For example, you can choose a record delimiter and a field delimiter, you can decide if you want to use the first row as the column names, etc. As you change these values, <span class="GeneralProductName3">Xcalar</span> changes the preview of the import for you to make an informed decision.</p>
                                                <p>Since we want to read every single word in a separate row, we will choose a space character as a record delimiter. Change the following options in the <span class="UIelement">Format</span> window:</p>
                                                <p>Dataset Name: wordcount1</p>
                                                <p>Record Delimiter: &lt;enter a space character&gt;</p>
                                                <p>Field Delimiter: &lt;remove all characters from this field&gt;</p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/wc-df1-import.png" />
                                                </p>
                                                <p>Leave the other fields with default values and click <span class="UIelement">Create Dataset</span>. The dataset called wordcount1 is created with 30 rows with each row containing precisely one word.</p>
                                                <h3>2. Creating a module and reading the dataset</h3>
                                                <p>The next step is to read the data and process it. For that, we need to create a module. In <span class="GeneralProductName3">Xcalar</span>, a module is a graphical representation of a series of operations performed on data. Each operation is represented by a graphical component called Node.</p>
                                                <p>To create a module, click on the <span class="UIelement">Application Builder</span> icon in the sidebar and click <span class="UIelement">Create new module</span>. A new module  called <span class="UIelement">Module 1</span> is created.</p>
                                                <p>Every module starts with a source Node, which brings the data into the module. Since we imported our data file into a dataset, let’s add a <span class="UIelement">Dataset</span> Node to the module and configure it to read the dataset we imported.</p>
                                                <p>Drag and drop a <span class="UIelement">Dataset</span> Node to the canvas. To configure the <span class="UIelement">Dataset </span>Node, click on it, and select <span class="UIelement">Configure</span>. Select the wordcount1 dataset in the configuration panel and click <span class="UIelement">Save</span>.</p>
                                                <p>By default, the Node gets executed unless you have changed the module settings by checking off the auto execute option. On the execution of the <span class="UIelement">Dataset</span> Node, a result set is displayed with a single column named column0:</p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/wc-df1-dataset.png" />
                                                </p>
                                                <h3>3. Using an aggregate function</h3>
                                                <p>The next step is to count the number of rows in the dataset by using an aggregate operation. From the <span class="UIelement">Aggregates</span> category of the operation Nodes, drag and drop a <span class="UIelement">Single Value</span> Node to the canvas and connect it to the <span class="UIelement">Dataset</span> Node by clicking the <span class="UIelement">Dataset</span> Node anchor and dragging and releasing it on <span class="UIelement">Single Value</span> Node.</p>
                                                <p>Configure the <span class="UIelement">Single Value</span> Node by clicking it and selecting <span class="UIelement">Configure</span>. The <span class="UIelement">Single Value</span> configuration panel opens up. Since we want to count the number of rows in column0, in the configuration panel, select the following:</p>
                                                <p class="CLIoutput">Aggregate Function: count</p>
                                                <p class="CLIoutput">Field name to count the occurrences of: wordcount1::column0</p>
                                                <p class="CLIoutput">New Resultant Aggregate Name: wordcount</p>
                                                <p>Click <span class="UIelement">Save</span>, and by default, the <span class="UIelement">Single Value</span> Node gets executed. Click on the <span class="UIelement">Single Value</span> Node and select <span class="UIelement">View Result</span>, a modal is displayed with the count of rows:</p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/wc-df1-result.png" />
                                                </p>
                                                <h2 class="noPageBreak">Word count application using Python</h2>
                                                <p>In this variation of the word count application, we will first import the file such that the whole text is imported in one single row of a dataset. Then, we will create a module and write some Python code to count the number of words in that row.</p>
                                                <p>Open the same <span class="UIelement">WordCount </span>project we created earlier.</p>
                                                <h3>1. Importing the whole file in one cell</h3>
                                                <p>To import word_count.txt into a dataset, click on the <span class="UIelement">Sources</span> icon in the sidebar and then <span class="UIelement">Import data Source</span> in the <span class="UIelement">Datasets</span> panel. Since our file resides on <span class="GeneralProductName3">Xcalar</span>'s public S3 bucket (/xcmarketplace-us-east-1/tutorial-datasets/), for the <span class="UIelement">Connector</span>, select <span class="UIelement">Public S3</span> and for the <span class="UIelement">Data Source Path</span>, enter /xcmarketplace-us-east-1/tutorial-datasets/. Click <span class="UIelement">Browse</span> to browse the directory structure and select word_count.txt. Click <span class="UIelement">Next</span> to preview the file.</p>
                                                <p><span class="GeneralProductName3">Xcalar</span> automatically detects the format of the file and shows its preview. Change the dataset name to wordcount2. Since we want to read the whole text into one single row, remove all characters from the Record and Field Delimiter fields and check the preview. It should display all text in one single cell:</p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/wc-df2-import.png" />
                                                </p>
                                                <p>Leave the other fields with default values and click <span class="UIelement">Create Dataset</span>. A dataset called wordcount2 is created with one column and one row containing all the text.</p>
                                                <p>Note: Limit for the text length for a cell is 16KB.</p>
                                                <h3>2. Creating a module  and reading the dataset</h3>
                                                <p>The next step is to read the data and process it. For that, we need to create a module. Click on the <span class="UIelement">Application Builder</span> icon in the sidebar and then click on <span class="UIelement">New module</span> tab. A new module called <span class="UIelement">Module 2</span> is created.</p>
                                                <p>To read the imported dataset, add a <span class="UIelement">Dataset</span> Node to the module. Configure it to use the wordcount2 dataset and click <span class="UIelement">Save</span>. By default, the Node gets executed, and the result set is displayed with one row containing the whole text:</p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/wc-df2-dataset.png" />
                                                </p>
                                                <h3>3. Creating a user-defined function</h3>
                                                <p>In <span class="GeneralProductName3">Xcalar</span>, the Python code is written as a user-defined function (UDF). UDFs can be of two types:</p>
                                                <p><span class="UIelement">Map UDF</span> - When you need to use Python to convert your column data into custom values, you can write a Map UDF, and specify it as a Map function in a Map Node. </p>
                                                <p><span class="UIelement">Import UDF</span> - When your source data requires custom processing during an import, you can use an import UDF to parse the data.</p>
                                                <p>Since we need to split the column value, we will write a Map UDF.</p>
                                                <div><span class="GeneralProductName3">Xcalar</span> provides a simple UDF panel to code the UDF. Click on the <span class="UIelement">UDF </span>icon in the sidebar to open the <span class="UIelement">UDF panel</span>. In the <span class="UIelement">UDF Panel</span>, select <span class="UIelement">New Module</span> in the drop-down and enter the following code:</div>
                                                <div class="Code"><pre xml:space="preserve">def split_words (paragraph):
    # split the input on white space
    data = paragraph.split()

    # initialize the word count
    count = 0
    
    # loop through the words
    for temp in data:
        # increment the word count
        count+=1
    # return the word count
    return count</pre>
                                                </div>
                                                <p>To save the UDF, click the <span class="UIelement">Save</span> icon on the <span class="UIelement">UDF panel</span>. A <span class="UIelement">Save As</span> modal is displayed. Enter the module name (wordcountudf.py) and click <span class="UIelement">Save</span>. The function split_words in the python module wordcountudf.py is now accessible as wordcountudf:split_words.</p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/wc-df2-udf-code.png" />
                                                </p>
                                                <h3>4. Using the user-defined function in the module </h3>
                                                <p>To use the user-defined function (UDF), add a <span class="UIelement">Map </span>Node to the module and connect the <span class="UIelement">Dataset </span>Node to the <span class="UIelement">Map </span>Node. Configure the <span class="UIelement">Map </span>Node to use the UDF as follows:</p>
                                                <p class="CLIoutput">Category: user-defined</p>
                                                <p class="CLIoutput">Function: wordcountudf:split_words</p>
                                                <p class="CLIoutput">Paragraph: wordcount2::column0 (this is the argument for the Python function split_words)</p>
                                                <p class="CLIoutput">New Resultant Column Name: count</p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/wc-df2-map-config.png" />
                                                </p>
                                                <p>Click <span class="UIelement">Save</span>. By default, the <span class="UIelement">Map </span>Node is executed, and the word count is displayed in a column named count:</p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/wc-df2-result.png" />
                                                </p>
                                                <h2 class="noPageBreak">Word count application using the Explode functionality</h2>
                                                <p>In this variation of the word count application, we will use the dataset in which the whole file is imported in one single row. Then, we will explode the cell value into words using a space delimiter, and count the number of rows using an aggregate function.</p>
                                                <p>In our <span class="UIelement">Word count application using Python</span> we imported the data in one cell and created a module to read that dataset. In this tutorial, let’s duplicate that module and build on top of that.</p>
                                                <h3>1. Duplicating a module</h3>
                                                <p>Open the <span class="UIelement">WordCount </span>project and then <span class="UIelement">Module 2</span>. Right click on the canvas and select <span class="UIelement">Duplicate Module</span>.</p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/wc-df3-duplicating-df.png" />
                                                </p>
                                                <p>A duplicate module with the name <span class="UIelement">Module 2(1)</span> is created. Let’s rename the module by double clicking on the module name on the tab and entering <span class="UIelement">Module 3</span>. Since we don’t need the <span class="UIelement">Map </span>Node for this tutorial, let’s delete it by clicking on it and selecting <span class="UIelement">Remove</span>:</p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/wc-df3-duplicate-df.png" />
                                                </p>
                                                <h3>2. Using an Explode Node to split the cell into a new column</h3>
                                                <p><span class="GeneralProductName3">Xcalar</span> provides many row level operations through the following Nodes:</p>
                                                <ul>
                                                    <li value="1">Sort Node, to sort the column values.</li>
                                                    <li value="2">Filter Node, to filter the row values meeting a specified criteria.</li>
                                                    <li value="3">Explode Node, to split a cell value into a column.</li>
                                                    <li value="4">Deskew Node, to redistribute the data evenly across all <span class="GeneralProductName3">Xcalar</span> cluster nodes and reduce the data skew.</li>
                                                </ul>
                                                <p>We will use the <span class="UIelement">Explode </span>Node to split a cell value into a new column.</p>
                                                <p>Add an <span class="UIelement">Explode </span>Node to the canvas and connect it to the <span class="UIelement">Dataset </span>Node. We want to explode the cells of <span class="UIelement">column0 </span>using a space character as a delimiter into a new column called <span class="UIelement">words</span>. Configure the <span class="UIelement">Explode </span>Node as follows:</p>
                                                <p class="CLIoutput">Column to explode: wordcount2::column0</p>
                                                <p class="CLIoutput">Delimiter: &lt;enter the space character&gt;</p>
                                                <p class="CLIoutput">New resultant column name: words</p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/wc-df3-explode-config.png" />
                                                </p>
                                                <p>Click <span class="UIelement">Save</span>. By default, the Node is executed and a new result set is displayed. The result set contains a new column named words with one single word in each row:</p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/wc-df3-explode-result.png" />
                                                </p>
                                                <h3>3. Using an aggregate function</h3>
                                                <p>Next, to count the number of rows we just created, add a <span class="UIelement">Single Value</span> Node to the canvas, connect it to the <span class="UIelement">Explode </span>Node, and configure it as follows:</p>
                                                <p class="CLIoutput">Aggregate Function: count</p>
                                                <p class="CLIoutput">Field name to count the occurrences of: words</p>
                                                <p class="CLIoutput">New Resultant Aggregate Name: wordcount</p>
                                                <p>Click <span class="UIelement">Save</span>, and by default, the <span class="UIelement">Single Value</span> Node is executed. To see the result, click on the <span class="UIelement">Single Value</span> Node and select <span class="UIelement">View Result</span>. A modal is displayed with the count of rows:</p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/wc-df3-final-result.png" />
                                                </p>
                                                <h3>Summary</h3>
                                                <p>This tutorial touched upon the following topics:</p>
                                                <ul>
                                                    <li value="1">Projects</li>
                                                    <li value="2">Modules</li>
                                                    <li value="3">Importing a file</li>
                                                    <li value="4">Using a dataset</li>
                                                    <li value="5">Using an aggregate function</li>
                                                    <li value="6">Using Python in <span class="GeneralProductName3">Xcalar</span> through UDF framework</li>
                                                    <li value="7">Duplicating and renaming a module</li>
                                                    <li value="8">Using an Explode Node</li>
                                                </ul>
                                                <p>For detailed information about these topics, see the online help for <span class="GeneralProductName3">Xcalar</span>.</p>
                                                <p>The <span class="UIelement">WordCount </span>application is available on the tutorial page of <span class="GeneralGUIName1">Xcalar Design</span>.</p>
                                                <p><a href="#top">Go to the top</a>
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </main>
                        </div>
                    </div><a data-close="true"></a>
                </div>
            </div>
        </div>
    </body>
</html>