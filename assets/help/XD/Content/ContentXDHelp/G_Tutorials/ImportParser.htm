<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="_Skins_HTML5___SideNav" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../../" data-mc-has-content-body="True" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta charset="utf-8" />
        <meta name="description" content="" />
        <meta name="author" content="" /><title>How to write a custom import parser</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/Stylesheets/foundation.6.2.3.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/Stylesheets/Styles.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/Stylesheets/Tablet.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/Stylesheets/Mobile.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/MainStyles.css" rel="stylesheet" />
        <style>/*&lt;meta /&gt;*/

.button.previous-topic-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/navigate-previous.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.next-topic-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/navigate-next.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.separator-button
{
	-pie-background: linear-gradient(#ffffff, #ececec);
}

.button.print-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/printer.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.needs-pie
{
	behavior: url('../../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/require.config.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/foundation.6.2.3_custom.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapGlobal.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapDom.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapUtilities.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapXhr.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapTextEffects.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapSlideshow.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapFeedback.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapDefault.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapAccessibility.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapHelpSystem.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.Breadcrumbs.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.MiniToc.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapToc.SideMenu.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapIndex.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapGlossary.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapParser.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapSearch.js" defer="defer">
        </script>
        <script src="../../../Resources/Scripts/MadCapTopic.js" defer="defer">
        </script>
        <script src="../../../Skins/Default/Scripts/TopicToolBar.js">
        </script>
    </head>
    <body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-right" role="navigation" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
                    <ul class="off-canvas-accordion vertical menu off-canvas-list" data-accordion-menu="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div data-sticky-container="" class="title-bar-container">
                        <nav class="title-bar tab-bar sticky" data-sticky="" data-options="marginTop:0" style="width:100%" data-sticky-on="only screen and (max-width: 800px)" data-mc-ignore="true"><a class="skip-to-content fluid-skip showOnFocus" href="#">Skip To Main Content</a>
                            <div class="middle title-bar-section outer-row clearfix">
                                <div class="menu-icon-container relative clearfix">
                                    <button class="menu-icon" aria-label="Show Navigation Panel" data-toggle="offCanvas"><span></span>
                                    </button>
                                </div>
                            </div>
                            <div class="title-bar-layout outer-row">
                                <div class="logo-wrapper"><a class="logo" href="../../Home.htm" alt="Logo"></a>
                                </div>
                                <div class="navigation-wrapper nocontent">
                                    <ul class="navigation clearfix" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                        <li class="placeholder" style="visibility:hidden"><a>placeholder</a>
                                        </li>
                                    </ul>
                                </div>
                                <div class="nav-search-wrapper">
                                    <div class="nav-search row">
                                        <form class="search" action="#">
                                            <div class="search-bar search-bar-container needs-pie">
                                                <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search" />
                                                <div class="search-filter-wrapper"><span class="invisible-label" id="search-filters-label">Filter: </span>
                                                    <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                                    </div>
                                                    <div class="search-filter-content" id="sf-content">
                                                        <ul>
                                                            <li>
                                                                <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001"><span id="filterSelectorLabel-00001">All Files</span>
                                                                </button>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                </div>
                                                <div class="search-submit-wrapper" dir="ltr">
                                                    <div class="search-submit" title="Search" role="button" tabindex="0"><span class="invisible-label">Submit Search</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </nav>
                    </div>
                    <div class="main-section">
                        <div class="row outer-row sidenav-layout">
                            <nav class="sidenav-wrapper">
                                <div class="sidenav-container">
                                    <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                                </div>
                            </nav>
                            <main id="main" class="body-container">
                                <div data-mc-content-body="True">
                                    <div class="content">
                                        <p><a name="top"></a>
                                        </p>
                                        <div id="contentBody">
                                            <div class="row collapse">
                                                <div class="sideContent">
                                                    <div class="clearfix">
                                                        <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolBar mc-component nocontent">
                                                            <div class="button-group-container-left">
                                                                <button class="button needs-pie previous-topic-button" title="Navigate previous">
                                                                    <img alt="Navigate previous" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" class="invisible-label" />
                                                                </button>
                                                                <button class="button needs-pie next-topic-button" title="Navigate next">
                                                                    <img alt="Navigate next" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" class="invisible-label" />
                                                                </button>
                                                                <div class="button-separator">
                                                                </div>
                                                                <button class="button needs-pie print-button" title="Print">
                                                                    <img alt="Print" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" class="invisible-label" />
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="nocontent">
                                                    <div class="MCBreadcrumbsBox_0 breadcrumbs" role="navigation" aria-label="Breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="3" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">You are here: </span>
                                                    </div>
                                                </div>
                                                <h1>How to write a custom import parser</h1>
                                                <p>If you want to import some data, which is not natively supported by <span class="GeneralProductName3">Xcalar</span>, you can write an import parser in Python to parse the data as per your requirements and use that parser during the import process. This tutorial shows you how to write a custom import parser in <span class="GeneralProductName3">Xcalar</span>. </p>
                                                <p>Suppose you have a data file with student scores in Maths, Science and English:</p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/ip-original-data.png" />
                                                </p>
                                                <p>You need to compute the GPA of the students based on their grades in the three subjects. However, if you import this file in <span class="GeneralProductName3">Xcalar</span> using the default CSV parser, the output looks like this:</p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/ip-default-import.png" />
                                                </p>
                                                <p>The third column contains all the grades. To calculate the GPA, you need to separate out the grades. There are multiple ways of doing this in <span class="GeneralProductName3">Xcalar</span> and one of the ways is to write a custom import parser, which reads each line of the file and separates out the grades. </p>
                                                <p>By the end of this tutorial, your data will look like this:</p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/ip-final-result.png" />
                                                </p>
                                                <h2 class="noPageBreak">1. Creating a project</h2>
                                                <p>The first step in creating an application in <span class="GeneralProductName3">Xcalar</span> is to create a project. A project is a container where you create, design, troubleshoot, and execute your application. Open <span class="GeneralGUIName1">Xcalar Design</span> in a browser and log in. Create a new project called <span class="UIelement">ImportParser </span>and open it by clicking on the project card.</p>
                                                <p><span class="GeneralProductName3">Xcalar</span> has two modes - the SQL Mode and the Developer Mode. In SQL Mode, you develop your applications using SQL query statements and user-defined functions (UDFs) written in Python. In Developer Mode, you develop your applications using visual components, SQL query statements, and UDFs written in Python.</p>
                                                <p>We will be using visual components and Python in this application; therefore, we will work in Developer Mode. If you are not in Developer Mode, from the top menu bar of <span class="GeneralGUIName1">Xcalar Design</span>, click the mode switch to <span class="UIelement">Developer Mode</span>.</p>
                                                <h2 class="noPageBreak">2. Writing the import parser code</h2>
                                                <p>In <span class="GeneralProductName3">Xcalar</span>, the parsers are written in Python using the user-defined function (UDF) framework. UDFs can be of two types:</p>
                                                <p><span class="UIelement">Map UDF</span> - When you need to use Python to convert your column data into custom values, you can write a Map UDF, and specify it as a Map function in a Map operation. </p>
                                                <p><span class="UIelement">Import UDF</span> - When your source data requires custom processing during an import, you can use an import UDF to process the data.</p>
                                                <p>Since we need to do a custom import, we will write an import UDF. </p>
                                                <p>In the import UDF, you can use as many parameters as needed but the first two parameters must be <span class="UIelement">fullPath</span> and <span class="UIelement">inStream</span>, where <span class="UIelement">fullPath</span> is the full pathname of the data source and <span class="UIelement">inStream</span> is the input stream of the content of the data source.</p>
                                                <p>In our example, the import UDF code logic will be:</p>
                                                <ol>
                                                    <li value="1">Create an empty dictionary.</li>
                                                    <li value="2">Read a line from <span class="UIelement">inStream</span>.</li>
                                                    <li value="3">Split the line using the | character.</li>
                                                    <li value="4">The first split value contains the school name, add that to the dictionary with <span class="UIelement">School Name</span> as the key.</li>
                                                    <li value="5">The second split value contains the student name, add that to the dictionary with <span class="UIelement">Student Name</span> as the key.</li>
                                                    <li value="6">The third split value contains all the three grades separated by space.<ol style="list-style-type: lower-alpha;"><li value="1">Split the third value again into 3 grades.</li><li value="2">Save each grade in the dictionary using the first letter as the key.</li></ol></li>
                                                    <li value="7">Repeat steps 2 to 6 till EOF.</li>
                                                </ol>
                                                <p><span class="GeneralProductName3">Xcalar</span> provides a simple UDF panel to code the UDF. Click on the <span class="UIelement">UDF</span> icon in the sidebar to open the UDF panel. In the UDF Panel, select <span class="UIelement">New Module</span> in the drop-down and enter the following code for our tutorial:</p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/ip-udf.png" />
                                                </p>
                                                <p>Click the <span class="UIelement">Save </span>icon on the <span class="UIelement">UDF panel</span>. A <span class="UIelement">Save As</span> modal is displayed. Enter the module name (import_parser.py) and click <span class="UIelement">Save</span>. The function <span class="UIelement">parse_scores</span> in the python module <span class="UIelement">import_parser.py</span> is now accessible as <span class="UIelement">import_parser:parse_scores</span>.</p>
                                                <h2 class="noPageBreak">3. Applying the import UDF</h2>
                                                <p>Let’s apply the import UDF on input data during the import. Click on the <span class="UIelement">Sources</span> tab and then the <span class="UIelement">Import Data Source</span> in the Datasets panel. Since our file resides on <span class="GeneralProductName3">Xcalar</span>’s public S3 bucket (/xcmarketplace-us-east-1/tutorial-datasets/), for the <span class="UIelement">Connector</span>, select <span class="UIelement">Public S3</span> and for the <span class="UIelement">Data Source Path</span>, enter <code>/xcmarketplace-us-east-1/tutorial-datasets/</code>. Click <span class="UIelement">Browse </span>to browse the directory structure and select <span class="UIelement">student_scores.dat</span>. Click <span class="UIelement">Next </span>to preview the file.</p>
                                                <p>In the Format window, change the following options:</p>
                                                <p class="CLIoutput">Format: Custom Format</p>
                                                <p class="CLIoutput">Module: import_parser </p>
                                                <p class="CLIoutput">Function: parse_scores</p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/ip-import.png" />
                                                </p>
                                                <p> Click <span class="UIelement">Apply UDF</span>.</p>
                                                <p>The file is read and passed through the <span class="UIelement">movie_genre:split_genres</span> UDF, creating individual column for each grade. After the process is finished, the preview of the data is displayed with a separate column for each grade:</p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/ip-final-result.png" />
                                                </p>
                                                <p>Click <span class="UIelement">Create Dataset</span> to finish importing the file and now you have a dataset with all the grades split into their own columns in a dataset named <span class="UIelement">student_scores</span>.</p>
                                                <h2 class="noPageBreak">4. Creating a module and reading the dataset</h2>
                                                <p>To read the dataset, create a module. In <span class="GeneralProductName3">Xcalar</span>, a module is a graphical representation of a series of operations performed on data. Each operation is represented by a graphical component called Node.</p>
                                                <p>To create a module, click on the <span class="UIelement">Application Builder</span> icon in the sidebar and click <span class="UIelement">Create new module</span>. A new module called <span class="UIelement">Module 1</span> is created.</p>
                                                <p>Every module starts with a source Node, which brings the data into the module. Since we imported our data file into a dataset, let’s add a <span class="UIelement">Dataset</span> Node to the module and configure it to read the dataset we imported.</p>
                                                <p>Drag and drop a <span class="UIelement">Dataset</span> Node to the canvas. To configure the dataset, click on the dataset and select <span class="UIelement">Configure</span>. Select the <span class="UIelement">student_scores</span> dataset in the configuration panel and click <span class="UIelement">Save</span>.</p>
                                                <p>By default, the Node gets executed unless you have changed the module settings by checking off the auto execute option. On the execution of the <span class="UIelement">Dataset</span> Node, a result set is displayed with 5 columns:</p>
                                                <p>
                                                    <img src="../../Resources/Images/Tutorials/ip-dataset.png" />
                                                </p>
                                                <h2 class="noPageBreak">Summary</h2>
                                                <p>This tutorial showed how you can write a custom import parser for your specific needs and touched upon the following topics:</p>
                                                <ul>
                                                    <li value="1">Projects</li>
                                                    <li value="2">Modules</li>
                                                    <li value="3">Writing and using an import parser</li>
                                                    <li value="4">Using a Dataset Node</li>
                                                </ul>
                                                <p>For detailed information about these topics, see the online help for <span class="GeneralProductName3">Xcalar</span>.</p>
                                                <p>The <span class="UIelement">ImportParser </span>tutorial is available on the tutorial page of <span class="GeneralGUIName1">Xcalar Design</span>.</p>
                                                <p><a href="#top">Go to the top</a>
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </main>
                        </div>
                    </div><a data-close="true"></a>
                </div>
            </div>
        </div>
    </body>
</html>