<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="_Skins_HTML5___Top_Navigation" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../" data-mc-has-content-body="True" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Reference">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta charset="utf-8" />
        <meta name="description" content="" />
        <meta name="author" content="" /><title>User-defined function (UDF) examples</title>
        <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" />
        <link href="../../Skins/Fluid/Stylesheets/foundation.6.2.3.css" rel="stylesheet" />
        <link href="../../Skins/Fluid/Stylesheets/Styles.css" rel="stylesheet" />
        <link href="../../Skins/Fluid/Stylesheets/Tablet.css" rel="stylesheet" />
        <link href="../../Skins/Fluid/Stylesheets/Mobile.css" rel="stylesheet" />
        <link href="../Resources/Stylesheets/MainStyles.css" rel="stylesheet" />
        <link href="../Fonts/open-sans.regular.ttf" rel="stylesheet" />
        <link href="../Fonts/OpenSans-Semibold.ttf" rel="stylesheet" />
        <link href="../Fonts/OpenSans-Light.ttf" rel="stylesheet" />
        <link href="../Fonts/OpenSans-Bold.ttf" rel="stylesheet" />
        <style>/*&lt;meta /&gt;*/

.button.previous-topic-button
{
	-pie-background: url('../../Skins/Default/Stylesheets/Images/navigate-previous.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.next-topic-button
{
	-pie-background: url('../../Skins/Default/Stylesheets/Images/navigate-next.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.topic-ratings-button
{
	-pie-background: transparent url('../../Skins/Default/Stylesheets/Images/star-full.png') no-repeat center center;
}

.button.separator-button
{
	-pie-background: linear-gradient(#ffffff, #ececec);
}

.button.edit-user-profile-button
{
	-pie-background: url('../../Skins/Default/Stylesheets/Images/edit-profile.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.print-button
{
	-pie-background: url('../../Skins/Default/Stylesheets/Images/printer.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.needs-pie
{
	behavior: url('../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <link href="../Resources/TableStyles/SimpleTable.css" rel="stylesheet" />
        <script src="../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../Resources/Scripts/foundation.6.2.3_custom.js">
        </script>
        <script src="../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../Resources/Scripts/MadCapAll.js">
        </script>
        <script src="../../Skins/Default/Scripts/TopicToolBar.js">
        </script>
    </head>
    <body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-right" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
                    <ul class="off-canvas-drilldown vertical menu off-canvas-list" data-drilldown="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-drilldown-submenu-parent" data-mc-css-tree-node-collapsed="is-drilldown-submenu-parent" data-mc-css-sub-menu="vertical menu slide-in-right is-drilldown-submenu" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="True" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.drilldown" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div>
                        <nav class="title-bar tab-bar" data-mc-ignore="true">
                            <div class="middle title-bar-section outer-row clearfix">
                                <div class="relative clearfix"><a class="logo" href="../Home.htm" alt="Logo"></a>
                                    <div class="navigation-wrapper nocontent">
                                        <ul class="navigation clearfix" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                            <li class="placeholder" style="visibility:hidden"><a>placeholder</a>
                                            </li>
                                        </ul>
                                    </div>
                                    <button class="menu-icon" data-toggle="offCanvas"><span></span>
                                    </button>
                                </div>
                            </div>
                            <div class="nav-search row outer-row">
                                <form class="search" action="#">
                                    <div class="search-bar search-bar-container needs-pie">
                                        <input class="search-field needs-pie" type="search" placeholder="Search" />
                                        <div class="search-filter-wrapper">
                                            <div class="search-filter">
                                                <div class="search-filter-content">
                                                    <ul>
                                                        <li>All Files</li>
                                                    </ul>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="search-submit-wrapper" dir="ltr">
                                            <div class="search-submit" title="Search">
                                            </div>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </nav>
                    </div>
                    <section class="main-section">
                        <div class="row outer-row" data-mc-content-body="True">
                            <div id="contentBody">
                                <div class="row collapse">
                                    <div class="sideContent">
                                        <div class="clearfix">
                                            <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolBar mc-component nocontent">
                                                <div class="button-group-container-left">
                                                    <button class="button needs-pie previous-topic-button" title="Navigate previous">
                                                        <img src="../../Skins/Default/Stylesheets/Images/transparent.gif" alt="previous topic" />
                                                    </button>
                                                    <button class="button needs-pie next-topic-button" title="Navigate next">
                                                        <img src="../../Skins/Default/Stylesheets/Images/transparent.gif" alt="next topic" />
                                                    </button>
                                                    <div class="button-group star-buttons loading feedback-topic-required">
                                                        <div class="button star-button topic-ratings-empty-button" data-state1-class="topic-ratings-empty-button" data-state2-class="topic-ratings-button" title="Click a star to rate this topic" data-state1-title="Click a star to rate this topic" data-state2-title="Click a star to rate this topic">
                                                            <img src="../../Skins/Default/Stylesheets/Images/transparent.gif" alt="topic rating" />
                                                        </div>
                                                        <div class="button star-button topic-ratings-empty-button" data-state1-class="topic-ratings-empty-button" data-state2-class="topic-ratings-button" title="Click a star to rate this topic" data-state1-title="Click a star to rate this topic" data-state2-title="Click a star to rate this topic">
                                                            <img src="../../Skins/Default/Stylesheets/Images/transparent.gif" alt="topic rating" />
                                                        </div>
                                                        <div class="button star-button topic-ratings-empty-button" data-state1-class="topic-ratings-empty-button" data-state2-class="topic-ratings-button" title="Click a star to rate this topic" data-state1-title="Click a star to rate this topic" data-state2-title="Click a star to rate this topic">
                                                            <img src="../../Skins/Default/Stylesheets/Images/transparent.gif" alt="topic rating" />
                                                        </div>
                                                        <div class="button star-button topic-ratings-empty-button" data-state1-class="topic-ratings-empty-button" data-state2-class="topic-ratings-button" title="Click a star to rate this topic" data-state1-title="Click a star to rate this topic" data-state2-title="Click a star to rate this topic">
                                                            <img src="../../Skins/Default/Stylesheets/Images/transparent.gif" alt="topic rating" />
                                                        </div>
                                                        <div class="button star-button topic-ratings-empty-button" data-state1-class="topic-ratings-empty-button" data-state2-class="topic-ratings-button" title="Click a star to rate this topic" data-state1-title="Click a star to rate this topic" data-state2-title="Click a star to rate this topic">
                                                            <img src="../../Skins/Default/Stylesheets/Images/transparent.gif" alt="topic rating" />
                                                        </div>
                                                    </div>
                                                    <div class="button-separator">
                                                    </div>
                                                    <button class="button feedback-required login-button" id="normalLoginBtn" data-state1-class="login-button" data-state2-class="edit-user-profile-button" title="Login" data-state1-title="Login">
                                                        <img src="../../Skins/Default/Stylesheets/Images/transparent.gif" alt="login" />
                                                    </button>
                                                    <button class="button needs-pie print-button" title="Print">
                                                        <img src="../../Skins/Default/Stylesheets/Images/transparent.gif" alt="print" />
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                        <ul class="nocontent menu _Skins_SideMenu mc-component" data-mc-is-context-sensitive="True" data-mc-linked-toc="Data/Tocs/XD_help.js" data-mc-side-menu="True" data-mc-max-depth="-1" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                        </ul>
                                    </div>
                                    <div class="nocontent">
                                        <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="3" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">You are here: </span>
                                        </div>
                                    </div>
                                    <div class="bodyProxyNarrow">
                                        <h1>User-defined function (UDF) examples</h1>
                                        <p>This section provides examples for these UDF&#160;typesf: </p>
                                        <ul>
                                            <li value="1"> UDF for a database operation.</li>
                                            <li value="2">UDF for importing data, which is called  an import UDF.</li>
                                            <li value="3">UDF for exporting data, which is called an export UDF.</li>
                                        </ul>
                                        <h2>Example of a UDF for a database operation</h2>
                                        <p>Suppose you have the following table in <span class="GeneralGUIName2" data-mc-conditions="General.XIHelp">Xcalar Insight</span> showing some events and their dates, and you want to add a column that shows the day of week for each event. You can write a UDF to create the Weekday column.</p>
                                        <table style="mc-table-style: url('../Resources/TableStyles/SimpleTable.css');margin-left: 0;margin-right: auto;" class="TableStyle-SimpleTable" cellspacing="0">
                                            <col class="TableStyle-SimpleTable-Column-Column1" />
                                            <col class="TableStyle-SimpleTable-Column-Column2" />
                                            <thead>
                                                <tr class="TableStyle-SimpleTable-Head-Header1">
                                                    <th class="TableStyle-SimpleTable-HeadE-Column1-Header1">Event</th>
                                                    <th class="TableStyle-SimpleTable-HeadD-Column2-Header1">Date</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <tr class="TableStyle-SimpleTable-Body-Body1">
                                                    <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Party</td>
                                                    <td class="TableStyle-SimpleTable-BodyD-Column2-Body1">2014-06-07</td>
                                                </tr>
                                                <tr class="TableStyle-SimpleTable-Body-Body2">
                                                    <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Concert</td>
                                                    <td class="TableStyle-SimpleTable-BodyD-Column2-Body2">2015-09-12</td>
                                                </tr>
                                                <tr class="TableStyle-SimpleTable-Body-Body1">
                                                    <td class="TableStyle-SimpleTable-BodyB-Column1-Body1">Conference</td>
                                                    <td class="TableStyle-SimpleTable-BodyA-Column2-Body1">2015-09-14</td>
                                                </tr>
                                            </tbody>
                                        </table>
                                        <h3>Coding the UDF</h3>
                                        <p>Write the following code in a module named <span class="UIelement">calendar</span>:</p>
                                        <div class="Code">
                                            <p class="CLIoutput">import time</p>
                                            <p class="CLIoutput">def getWeekday(column, format):</p>
                                            <p class="CLIoutput">&#160;&#160;&#160;&#160;&#160;parsedTime = time.strptime(column, format)</p>
                                            <p class="CLIoutput">&#160;&#160;&#160;&#160;&#160;weekday = time.strftime("%A", parsedTime)</p>
                                            <p class="CLIoutput">&#160;&#160;&#160;&#160;&#160;return weekday</p>
                                        </div>
                                        <p>The <span class="UIelement">getWeekday</span> function takes a column and a date-time format string as input. The Python built-in <span class="UIelement">time</span> module, which is imported into <span class="UIelement">calendar</span>, parses the input. The output from <span class="UIelement">calendar</span> is a new table with the Weekday column showing the day of week for each event.</p>
                                        <p>After you upload the <span class="UIelement">calendar</span> module, it is available for all <span class="GeneralGUIName2" data-mc-conditions="General.XIHelp">Xcalar Insight</span> users to use.</p>
                                        <h3>Running the UDF</h3>
                                        <p>In <span class="GeneralGUIName2" data-mc-conditions="General.XIHelp">Xcalar Insight</span>, start a Map operation from the <span class="UIelement">Date</span> column. Select <span class="UIelement">user-defined</span> as the category and then select <span class="UIelement">calendar:getWeekday</span> as the function. Specify the <span class="UIelement">Date</span> column ($Date)&#160;as the first argument and <span class="UIelement">"%Y-%m-%d"</span> as the second argument.</p>
                                        <p>The process for running a UDF is the same as  other database functions. For more information about the Map operation, see <a href="../B_CommonTasks/K_Map.htm" class="MCXref xref">Using the Map function to create new values</a>.</p>
                                        <h3>Result of running the UDF</h3>
                                        <p>The following table is created with an additional column showing the day of week for each date:</p>
                                        <table style="mc-table-style: url('../Resources/TableStyles/SimpleTable.css');margin-left: 0;margin-right: auto;" class="TableStyle-SimpleTable" cellspacing="0">
                                            <col class="TableStyle-SimpleTable-Column-Column1" />
                                            <col class="TableStyle-SimpleTable-Column-Column2" />
                                            <col class="TableStyle-SimpleTable-Column-Column1" />
                                            <thead>
                                                <tr class="TableStyle-SimpleTable-Head-Header1">
                                                    <th class="TableStyle-SimpleTable-HeadE-Column1-Header1">Event</th>
                                                    <th class="TableStyle-SimpleTable-HeadE-Column2-Header1">Date</th>
                                                    <th class="TableStyle-SimpleTable-HeadD-Column1-Header1">Weekday</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <tr class="TableStyle-SimpleTable-Body-Body1">
                                                    <td class="TableStyle-SimpleTable-BodyE-Column1-Body1">Party</td>
                                                    <td class="TableStyle-SimpleTable-BodyE-Column2-Body1">2014-06-07</td>
                                                    <td class="TableStyle-SimpleTable-BodyD-Column1-Body1">Saturday</td>
                                                </tr>
                                                <tr class="TableStyle-SimpleTable-Body-Body2">
                                                    <td class="TableStyle-SimpleTable-BodyE-Column1-Body2">Concert</td>
                                                    <td class="TableStyle-SimpleTable-BodyE-Column2-Body2">2015-09-12</td>
                                                    <td class="TableStyle-SimpleTable-BodyD-Column1-Body2">Saturday</td>
                                                </tr>
                                                <tr class="TableStyle-SimpleTable-Body-Body1">
                                                    <td class="TableStyle-SimpleTable-BodyB-Column1-Body1">Conference</td>
                                                    <td class="TableStyle-SimpleTable-BodyB-Column2-Body1">2015-09-14</td>
                                                    <td class="TableStyle-SimpleTable-BodyA-Column1-Body1">Monday</td>
                                                </tr>
                                            </tbody>
                                        </table>
                                        <h2>Example of using an import UDF when importing</h2>
                                        <p>If you want to import data not natively supported by <span class="GeneralProductName3">Xcalar</span>, you can run an import UDF that converts the data format as <span class="GeneralProductName3">Xcalar</span> imports the data. In the following example, the data source is an XML&#160;file, which you can convert into JSON&#160;with an import UDF.</p>
                                        <h3>Coding the import UDF</h3>
                                        <p>Write the following code in a module named <span class="UIelement">convertxmltojson</span>. The source data to be converted is shown as comments in this example to illustrate how the UDF works.</p>
                                        <div class="Code"><pre># Sample XML document

# &lt;?xml version="1.0" encoding="UTF-8"?&gt;
# &lt;bookstore&gt;
#   &lt;book category="cooking"&gt;
#     &lt;title lang="en"&gt;Everyday Italian&lt;/title&gt;
#     &lt;author&gt;Giada De Laurentiis&lt;/author&gt;
#     &lt;year&gt;2005&lt;/year&gt;
#     &lt;price&gt;30.00&lt;/price&gt;
#   &lt;/book&gt;
#   &lt;book category="children"&gt;
#     &lt;title lang="en"&gt;Harry Potter&lt;/title&gt;
#     &lt;author&gt;J K. Rowling&lt;/author&gt;
#     &lt;year&gt;2005&lt;/year&gt;
#     &lt;price&gt;29.99&lt;/price&gt;
#   &lt;/book&gt;
#   &lt;book category="web"&gt;
#     &lt;title lang="en"&gt;Learning XML&lt;/title&gt;
#     &lt;author&gt;Erik T. Ray&lt;/author&gt;
#     &lt;year&gt;2003&lt;/year&gt;
#     &lt;price&gt;39.95&lt;/price&gt;
#   &lt;/book&gt;
# &lt;/bookstore&gt;

import xmltodict
import json
def xmlToJson1(fullPath, xmlStream):
    allJson = xmltodict.parse(xmlStream.read())
    for book in allJson["bookstore"]["book"]:
        yield book</pre>
                                        </div>
                                        <p>This module imports a third-party module named <span class="UIelement">xmltodict</span> and defines a function named <span class="UIelement">xmlToJson1</span>. This function has two parameters:</p>
                                        <ul>
                                            <li value="1">The <span class="UIelement">xmlString</span> parameter is a string containing the full contents of the data source. </li>
                                            <li value="2">The <span class="UIelement">fullPath</span> parameter  is a string, which is the full pathname to the data source.</li>
                                        </ul>
                                        <p>The return value of the function will be used in the place of the actual file contents.</p>
                                        <p>Upload this module so that it is available for execution.</p>
                                        <h3>Running the import UDF</h3>
                                        <p>In the <span class="UIelement">Import Data Source</span> window, after you specify the pathname to the data source, follow these steps:</p>
                                        <ol>
                                            <li value="1">Select the <span class="UIelement">Parse Data With UDF</span> check box. </li>
                                            <li value="2">Select the <span class="UIelement">convertxmltojson</span> module.</li>
                                            <li value="3">Select the <span class="UIelement">xmlToJson1</span> function. </li>
                                        </ol>
                                        <p>For more information about importing a data source, see <a href="../A_GettingStarted/D_DetailedStepsForPointing.htm#Creating2" class="MCXref xref">Importing data from a data source</a>.</p>
                                        <h3>Result of running the import UDF</h3>
                                        <p>Suppose the data source is a file named <span class="UIelement">bookstore</span>. Its path, which you specified in the <span class="UIelement">Data Source Path</span> field, is passed to the UDF as the <span class="UIelement">fullPath</span> parameter. The contents of <span class="UIelement">bookstore</span> are passed to the UDF&#160;in <span class="UIelement">xmlString</span>. The function returns a string containing the corresponding JSON&#160;data being imported. If you create a table with all columns from the dataset, your worksheet contains the following table:</p>
                                        <p><a class="MCPopupThumbnailLink MCPopupThumbnailPopup" href="../Resources/Images/XD_screenshots/udf-streaming-example-output.png"><img class="MCPopupThumbnail img imgWideButShortImage" data-mc-width="1165" data-mc-height="185" src="../Resources/Images/XD_screenshots/udf-streaming-example-output_thumb_0_40.png" tabindex="" /></a>
                                        </p>
                                        <h2><a name="Example"></a>Example of using a UDF when exporting</h2>
                                        <p>The following example illustrates how to create and run a UDF to export a table (either from a worksheet or a batch dataflow) to Excel files instead of csv files,</p>
                                        <h3>Coding the export UDF</h3>
                                        <p>The sample code provided in this section can be saved in a module (for example, write_to_excel). The following list provides information explaining the code, which helps you write your own export UDF:</p>
                                        <ul>
                                            <li value="1">There must be a function named <span class="UIelement">main</span> in the module. This function is  run when you export data to this UDF.</li>
                                            <li value="2">The <span class="UIelement">main</span> function must take one argument, which is the stringified JSON with these fields: filePath and fileContents.</li>
                                            <p>The filePath parameter takes the export file system path specified during the export target creation and then creates an export file name based on the path. The following path is an example of an export file name:</p>
                                            <p>/nas/exports_excel/carriers/carriers-nXXXX-cXXXX-pXXXX.csv</p>
                                            <p>The following list explains the components of the path:</p>
                                            <ul>
                                                <li value="1"><span class="UIelement">/nas/exports_excel/carriers</span> is the path specified in the Additional Information section of the Create Export Target modal window. It specifies the folder containing the export files.</li>
                                                <li value="2"><span class="UIelement">carriers</span> (after the last path separator) is the same as the folder name.</li>
                                                <li value="3"><span class="UIelement">nXXXX-cXXXX-pXXXX</span> is an autogenerated string to ensure that each export file name in the folder is unique. The X in this example is replaced with a numeral in the actual name.</li>
                                                <li value="4"><span class="UIelement">csv</span> is the default file extension. The sample UDF in this section replaces the csv extension with xlsx.</li>
                                            </ul>
                                            <li value="3">The fileContents parameter is a string representing the output string as though it were to be written as a csv.</li>
                                            <p>For example, if you were to write a UDF that creates a file at filePath and writes the file contents into it without modifications, the file would be identical to the csv file exported directly without a UDF.</p>
                                            <p>The line and field delimiters in the fileContents string obey the specifications in the <span class="UIelement">Advanced Options</span> section of the <span class="UIelement">EXPORT TABLE</span> panel, which you entered before starting the export operation.</p>
                                        </ul>
                                        <div class="Code"><pre>import openpyxl
import json
import os

def main(inStruct):
    # Get the fileName and fileContents from the argument
    s = json.loads(inStruct)
    fileName = s["filePath"]
    fileContents = s["fileContents"]

    # Create excel workbook
    wb = openpyxl.Workbook()
    # File name removes the .csv and replaces it with .xlsx
    folderName = fileName[:fileName.rfind("/")];

    # Create the folder if it doesn't already exist
    if not os.path.exists(folderName):
        os.makedirs(folderName)

    fileName = fileName.replace(".csv", ".xlsx")

    ws = wb.active

    fieldDelim = "\t" # Change this to match the delimiter that you chose in
                      # the export panel
    rowNum = 0
    for row in fileContents.split("\n"):
        rowNum += 1
        colNum = 0
        for col in row.split(fieldDelim):
            colNum += 1
            ws.cell(column=colNum, row=rowNum, value=str(col))

    wb.save(filename=fileName)</pre>
                                        </div>
                                        <h3>Creating the export target</h3>
                                        <p>For detailed information about how to create an export target, see <a href="../C_AdvancedTasks/G_ExportTable.htm#Creating" class="MCXref xref">Creating an export target</a>. The following list provides an outline of the steps:</p>
                                        <ol>
                                            <li value="1">Click the <span class="UIelement">Export Targets</span> icon to display the <span class="UIelement">Export Targets</span> panel.</li>
                                            <li value="2">Type the target name. For example, you can specify ExcelTarget as the target name.</li>
                                            <li value="3">Select UDF as the export target.</li>
                                            <li value="4">In the <span class="UIelement">Additional Information</span> section, enter the path to the file system in which the UDF will write its output. For example, enter /nas/exports_excel, which is a shared directory that <span class="GeneralGUIName2" data-mc-conditions="General.XIHelp">Xcalar Insight</span> can write to.</li>
                                            <li value="5">Select the write_to_excel module, and leave the UDF function name as main.</li>
                                            <li value="6">Click <span class="UIelement">ADD</span>.</li>
                                        </ol>
                                        <h3>Running the export UDF</h3>
                                        <p>The UDF is run when you export data from <span class="GeneralProductName3">Xcalar</span> to the target named ExcelTarget.</p>
                                        <p>As a result of exporting data from <span class="GeneralProductName3">Xcalar</span> to Exceltarget, files are written to your specified file system. In this example, one or multiple files with the .xlsx file extension are created in the /nas/exports_excel folder. Each Excel file contains a number of rows from the <span class="GeneralProductName3">Xcalar</span> table. (A <span class="GeneralProductName3">Xcalar</span> table can be much larger than a typical Excel file. Splitting the table into smaller files not only speeds up the export operation, but also makes the exported data easier to read.)</p>
                                    </div>
                                    <p><a href="#Top">Go to top</a>
                                    </p>
                                </div>
                            </div>
                        </div>
                    </section><a data-close="true"></a>
                </div>
            </div>
            <script>/* <![CDATA[ */$(document).foundation();/* ]]> */</script>
        </div>
    </body>
</html>