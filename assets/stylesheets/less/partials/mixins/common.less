@import "partials/mixins/constants.less";
@import "partials/mixins/flex.less";

.box-sizing (@type: border-box) {
    -webkit-box-sizing: @type;
    -moz-box-sizing:    @type;
    box-sizing:         @type;
}

.nomargin-padding() {
    margin: 0;
    padding: 0;
}

.vertical-align() {
    .position(relative, @top: 50%);
    .transform (translateY(-50%));
}

.horizontal-align(@position: relative) {
    .position(@position, @left: 50%);
    .transform (translateX(-50%));
}

.center-align() {
    .position(relative, @top: 50%, @left: 50%);
    .transform (translate(-50%, -50%));
}


.noSelection {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

.text-selection {
  -webkit-touch-callout: default;
  -webkit-user-select: text;
  -moz-user-select: text;
  -ms-user-select: text;
  user-select: text;
  cursor: auto;
}

.clearfix:after {
   content: ".";
   visibility: hidden;
   display: block;
   height: 0;
   clear: both;
}
.clearfix() {
    &:after {
        content: ".";
        visibility: hidden;
        display: block;
        height: 0;
        clear: both;
    }
}

.no-selection {
    .noSelection;
    // no selection area should not have text curosr
    cursor: default;
}

.auto-selection {
    -webkit-touch-callout: default;
    -webkit-user-select: text;
    -moz-user-select: text;
    -ms-user-select: text;
    user-select: auto;
    cursor: auto;
}

.textOverflow {
    overflow: hidden;
    text-overflow: ellipsis;
}

.textOverflowOneLine {
    .textOverflow;
    white-space: nowrap;
}

.noTransition {
    -webkit-transition: 0s !important;
    -moz-transition: 0s !important;
    -ms-transition: 0s !important;
    -o-transition: 0s !important;
    transition: 0s !important;
}

.selectionBackground(@color) {
    // combining ::selection, ::-moz-selection won't work. Must separate them
    &::selection {
        background: @color;
    }
    &::-moz-selection {
        background: @color;
    }
}

.cursor-move() {
    cursor: move;
    cursor: -webkit-grab;
    cursor: -moz-grab;
}

.cursor-grabbing() {
    cursor: move !important;
    cursor: -webkit-grabbing !important;
    cursor: -moz-grabbing !important;
}

.cursor-resize() {
    cursor: col-resize !important;
}
.cursor-rowResize() {
    cursor: row-resize !important;
}

.image(@url, @pX:0, @pY:0, @repeat:no-repeat, @background-color: transparent) {
    background: @background-color url(@url) @repeat @pX @pY;
}

.rounded(@radius: 3px) {
  -webkit-border-radius: @radius;
  -moz-border-radius: @radius;
  border-radius: @radius;
}

.tab-size(@size: 8) {
    tab-size: @size;
    -moz-tab-size: @size; /* Code for Firefox */
    -o-tab-size: @size; /* Code for Opera 10.6-12.1 */
}

.position(@position: null, @top: null, @right: null,
          @bottom: null, @left: null) {
  .property(position, @position);
  .property(top, @top);
  .property(right, @right);
  .property(bottom, @bottom);
  .property(left, @left);

  .property(@property, @value) {
    ._getProp(position) when not (@position = null) {
      position: @value;
    }

    ._getProp(top) when not (@top = null) {
      top: @value;
    }

    ._getProp(right) when not (@right = null) {
      right: @value;
    }

    ._getProp(bottom) when not (@bottom = null) {
      bottom: @value;
    }

    ._getProp(left) when not (@left = null) {
      left: @value;
    }

    ._getProp(@property);
  };
}

.size(@width: null, @height: null,
      @min-width: null, @min-height: null,
      @max-width: null, @max-height: null) {
    .property(width, @width);
    .property(height, @height);
    .property(min-width, @min-width);
    .property(min-height, @min-height);
    .property(max-width, @max-width);
    .property(max-height, @max-height);

    .property(@property, @value) {
        ._getProp(width) when not (@width = null) {
          width: @value;
        }

        ._getProp(height) when not (@height = null) {
          height: @value;
        }

        ._getProp(min-width) when not (@min-width = null) {
          min-width: @value;
        }

        ._getProp(min-height) when not (@min-height = null) {
          min-height: @value;
        }

        ._getProp(max-width) when not (@max-width = null) {
          max-width: @value;
        }

        ._getProp(max-height) when not (@max-height = null) {
          max-height: @value;
        }

        ._getProp(@property);
    }
}

.font(@style: null, @variant: null, @weight: null, @size: null,
      @line-height: null, @family: null, @color: null, @align: null) {
    .property(font-style, @style);
    .property(font-variant, @variant);
    .property(font-weight, @weight);
    .property(font-size, @size);
    .property(line-height, @line-height);
    .property(font-family, @family);
    .property(color, @color);
    .property(text-align, @align);

    .property(@property, @value) {
        ._getProp(font-style) when not (@style = null) {
          font-style: @value;
        }

        ._getProp(font-variant) when not (@variant = null) {
          font-variant: @value;
        }

        ._getProp(font-weight) when not (@weight = null) {
          font-weight: @value;
        }

        ._getProp(font-size) when not (@size = null) {
          font-size: @value;
        }

        ._getProp(line-height) when not (@line-height = null) {
          line-height: @value;
        }

        ._getProp(font-family) when not (@family = null) {
          font-family: @value;
        }

        ._getProp(color) when not (@color = null) {
            color: @value;
        }

        ._getProp(text-align) when not (@align = null) {
            text-align: @value;
        }

        ._getProp(@property);
    }
}

.wordwrap {
    white-space: pre-wrap;
    white-space: -moz-pre-wrap;
    white-space: -pre-wrap;
    white-space: -o-pre-wrap;
    word-wrap: break-word;
}

/* BUTTON STYLING */
.btn {
    .noSelection;
    display: inline-block;
    border: 0;
    outline: 0;
    padding-top: 0px;
    padding-bottom: 0px;
    .font(@family: @font-base, @color: @color-white, @weight: 700, @size: 14px, @line-height: 36px);
    letter-spacing: 0.5px;
    .textOverflowOneLine;
    text-align: center;
    .size(150px, 36px);
    // background-color: fadeout(@color-bg-dusk-blue, 20%);
    background-color: fadeout(@color-bg-btn-hover-blue, 20%);
    cursor: pointer;
    .transition(background-color 0.1s);

    &:hover, &:focus {
        // background-color: @color-bg-dusk-blue;
        background-color: @color-bg-btn-hover-blue;
    }

    &:focus {
        outline: 1px solid rgba(0, 0, 0, 0.1);
    }

    &:active {
        box-shadow: inset 0px 1px 1px 1px rgba(0, 0, 0, 0.2);
    }
}

.btn-small {
    .size(30px, 30px);
    line-height: 30px;
    text-overflow: clip; // IE will add dots to icons ...
    i.icon {
        line-height: 30px;
    }
}

.btn-icon {
    .size(30px, 30px);
    .noSelection;
    display: inline-block;
    background-color: transparent;
    outline: 0;
    opacity: @opacity-unhover;
    padding: 0;
    border: 0;
    cursor: pointer;

    .icon {
        .font(@size: 18px, @color: @color-font-warm-grey-two);
    }

    &:hover, &:focus {
        background-color: @color-bg-white-two;
        opacity: @opacity-hover;
    }

    &:active {
        border: 1px solid rgba(0, 0, 0, 0.1);
    }
}

.btn-large {
    .size(@width: 230px);
}

.btn-cancel, .btn-secondary {
    background-color: fadeout(@color-bg-99-grey, 20%);
    &:hover, &:focus {
        background-color: @color-bg-99-grey;
    }

    &:active {
        box-shadow: inset 0px 1px 1px 1px rgba(0, 0, 0, 0.1);
    }
}

.btn-clear {
    background-color: fadeout(@color-white, 20%);
    color: @color-font-warm-grey-two;

    .icon {
        color: @color-font-warm-grey-two !important;
    }

    &:hover {
        background-color: @color-white;
    }

    &:active {
        box-shadow: inset 1px 1px 1px 0px rgba(0, 0, 0, 0.1);
    }
}

.btn-disabled {
    opacity: @opacity-disabled;
    pointer-events: none;
}

.iconBtn {
    .position(relative);
    padding: 0 30px 0 5px;
    text-align: center;

    .icon {
        display: inline-block;
        .size(@width: 25px, @height: 100%);
        color: @color-white;
        float: left;

        &:before {
            display: block;
            .vertical-align;
        }
    }
}

/* DROP DOWN COLUMN STYLING */
.dropDown() {
    .dropdownBox {
        width: 16px;
        height: 12px;
        position: absolute;
        vertical-align: middle;
        right: 3px;
        bottom: 3px;
        cursor: pointer;
        z-index: @z-index-tableHeaderGrab;
        opacity: 0;
        .transition (opacity 0.02s linear);
        .transition-delay (0.05s);
        border-top: 11px solid transparent;
        border-right: 11px solid @color-border-darkGray;
        &:hover {
            opacity: 1 !important;
        }
        &.hidden {
            opacity: 0 !important;
        }
    }

    & .flex-right > .dropdownBox {
        right: -3px;
        bottom: -4px;
        height: 34px;
        width: 26px;
        border: none;
        opacity: 0.4;

        .innerBox {
            .size(@width: 12px, @height: 7px);
            .position(absolute, @right: 6px, @bottom: 7px);
            border-top: 7px solid transparent;
            border-right: 7px solid @color-border-darkGray;
        }
    }
}

.styleDropDownList(@w, @h, @atTop: false) {
    .size(@width: @w, @height: @h);

    .text {
        .size(@width: ~"calc(100% - @{h})", @height: @h);
        line-height: @h;
    }

    .iconWrapper {
        .size(@h, @h);
    }

    .list {
        .size(@width: ~"calc(100% - @{h})");
    }

    li {
        .size(@height: @h);
        .font(@line-height: @h, @size: 13px);
    }

    ._positionList();

    ._positionList() when not(@atTop = false) {
        .list {
            .position(@top: 0);
        }

        &.open {
            box-shadow: none;
        }
    }

    ._positionList() when (@atTop = false) {
        .list {
            .position(@top: @h + 1);
        }
    }
}

.dropDownList {
    .position(relative);
    float: left;
    background-color: @color-white;
    .no-selection;

    &.open {
        .text {
            // xx consider highlighting the input
            // border-color: @color-border-softBlue;
        }
    }

    .text {
        color: @color-font-greyish-brown;
        background-color: @color-bg-white-three;
        border: 1px solid @color-border-white-five-darker;
        .font(@size: 14px);
        padding-left: 10px;
        float: left;
        .textOverflowOneLine;

        &:not(.inputable) {
            .no-selection;
        }
    }

    .iconWrapper {
        // background-color: @color-bg-select-blue;
        background-color: fadeout(@color-bg-btn-hover-blue, 20%);
        cursor: pointer;
        float: right;
        .size(30px, 30px);

        &:hover {
            // background-color: @color-bg-dusk-blue;
            background-color: @color-bg-btn-hover-blue;
            .icon {
                opacity: @opacity-hover;
            }
        }

        .icon {
            .size(@width: 8px, @height: 8px);
            .center-align;
            display: block;
            top: 50%;
            opacity: @opacity-unhover;
            font-size: 8px;
            color: @color-white;

            &:before {
                display: inline-block;
            }
        }
    }

    .list {
        .position(absolute, @left: 0, @top: 30px);
        background-color: @color-white;
        cursor: default;
        box-shadow: 0px 1px 1px 0px rgba(0,0,0,0.2);
        z-index: 10;
        display: none;
        width: ~"calc(100% - 30px)";

        li {
            padding-left: 10px;
            z-index: 10;
            .textOverflowOneLine;
            height: 30px;
            line-height: 30px;

            &:hover, &.hover {
                background-color: @color-selectedCell-light;
            }
            &.inactive {
                opacity: 0.3;
            }
            &.xcUDF {
                display: none;
            }
        }
        .scrollArea {
            z-index: 11;
        }
    }

    .hint {
        color: @color-text-lightGray;
    }
}

// style for checkbox
.checkbox {
    .size(@width: 16px, @height: 100%);
    display: inline-block;
    cursor: pointer;

    .icon {
        .size(@width: 16px, @height: 16px);
        font-size: 15px;
        color: @color-font-softBlue;
        .vertical-align;
    }

    .xi-ckbox-selected {
        display: none;
    }

    .xi-ckbox-empty {
        display: block;
    }

    &.checked {
        .xi-ckbox-empty {
            display: none;
        }

        .xi-ckbox-selected {
            display: block;
        }
    }
}

.checkboxSection {
    .size(@height: 30px);
    .font(@size: 13px, @line-height: 30px);
    .noSelection;
    cursor: pointer;

    > div {
        float: left;

        &:nth-child(2) {
            margin-left: 8px;
        }
    }
}

// style for rect selection
.rectSelection {
    .position(absolute);
    background-color: @color-bg-select-blue;
    opacity: 0.4;
    border: 1px solid rgba(0, 0, 0, 0.3);

    &#gridView-rectSelection {
        background-color: @color-bg-dark-marine
    }
}

// style for radio check
.radioButtonGroup {
    .flex-display;

    &.center {
        .align-content(center);
        .align-items(center);
    }

    .radioButton {
        .flex(1 1 auto);
        .size(@height: 20px);
        .font(@size: 13px, @line-height: 20px);
        .noSelection;
        cursor: pointer;

        &.active {
            .radio {
                .icon {
                    &.xi-radio-selected {
                        display: inline-block;
                    }

                    &.xi-radio-empty {
                        display: none;
                    }
                }
            }
        }

        .radio {
            .size(@width: 12px, @height: 12px);
            .position(relative, @top: 1px);
            float: left;
            display: inline-block;
            margin: 0 5px 0 0px;
            background-color: @color-white;
            border-radius: 100%;
            .vertical-align;

            .icon {
                font-size: 12px;
                color: @color-font-pinkish-grey2;
                vertical-align: top;
                line-height: 12px;
                display: inline-block;

                &.xi-radio-selected {
                    color: @color-font-softBlue;
                    display: none;
                }
            }
        }

        .label {
            float: left;
            padding-left: 5px;
            .size(@width:~"calc(100% - 19px)");
            text-align: left;
        }
    }
}

// sliding search input in data browser and preview file modal
.slidingSearchWrap {
    .size(257px, 33px);
    .position(absolute, @top: 30px, @right: 0px);
    overflow: hidden;
    z-index: 2;
    pointer-events: none;

    .icon {
        color: @color-white;
    }

    .searchbarArea {
        .size(@width: 254px, @height: 30px);
        .position(relative, @left: 3px);
        float: left;
        background-color: @color-bg-select-blue;
        white-space: nowrap;
        box-shadow: 0px 1px 2px 1px rgba(0,0,0,0.3);
        .transition(transform 0.3s);
        pointer-events: auto;

        &.closed {
            .transform(translate3d(222px, 0, 0));
        }

        .searchIcon {
            .size(32px, 100%);
            font-size: 18px;
            line-height: 30px;
            text-align: center;
            float: left;
            cursor: pointer;
        }

        .input-box (166px, 24px);

        input {
            .size(166px, 24px);
            margin-top: 2px;
            float: left;
            outline: none;
            .font(@size: 13px, @line-height: 24px);

            &:focus + .closeBox {
                opacity: @opacity-hover;
            }
        }
    }
}

.retinaParameter {
    background-color: @color-bg-white-five;

    .cell {
        display: inline-block;
        float: left;
        .size(@height: 30px);
        .font(@size: 14px, @line-height: 30px, @color: @color-font-greyish-brown);
        margin-left: 7px;
        padding: 0 10px;
        text-align: left;

        &:first-child {
            margin-left: 0;
        }
    }

    .tableHeader {
        .size(@width: 100%, @height: 30px);
        overflow: hidden;

        .cell {
            .font(@weight: bold);
            background-color: @color-white;
        }
    }

    .tableContainer {
        .position(relative);
        .size(@width: 100%, @height: 150px);
        margin-top: 5px;
        overflow: hidden;
        overflow-y: auto;

        .tableWrapper {
            .size(@height: 100%);
            text-align: left;

            .row {
                .size(@height: 30px);

                &:nth-child(odd) .cell {
                    background-color: rgba(255, 255, 255, 0.5);
                }

                &:nth-child(even) .cell {
                    background-color: @color-white;
                }
            }

            .cell {
                position: relative;
            }
        }
    }
}

//style for input box
.input-box(@w, @h: 30px, @focus: false) {
    input {
        .size(@width: @w, @height: @h);
        .font(@size: 14px, @weight: 600, @line-height: @h);
        border: solid 1px @color-border-white-five-darker;
        padding: 0 10px;
        text-align: left;
        background-color: @color-bg-white-three;
        .textOverflowOneLine;

        &:focus {
            outline: none;
            border-color: @color-border-softBlue;
            background-color: @color-white;
        }

        &.error {
            border-color: @color-error-border;
        }
    }
}

.xc-input {
    @width: 100%;
    @height: 30px;
    .size(@width: @width, @height: @height);
    .font(@size: 14px, @weight: 600, @line-height: @height);
    border: solid 1px @color-border-white-five-darker;
    padding: 0 10px;
    text-align: left;
    background-color: @color-bg-white-three;
    .textOverflowOneLine;

    &:focus {
        outline: none;
        border-color: @color-border-softBlue;
        background-color: @color-white;
    }

    &.error {
        border-color: @color-error-border;
    }
}

.xc-textArea {
    resize: none;
    padding: 8px;
    border: 1px solid @color-border-white-five-darker;
    &:focus {
        outline: none;
        border-color: @color-border-softBlue;
        background-color: @color-white;
    }
}


.xc-viewMode {
    &.loading {
        .xc-errorView, .xc-contentView {
            display: none !important;
        }

        .xc-loadView {
            display: block !important;
        }

        .xc-confirm {
            opacity: @opacity-disabled;
            pointer-events: none;
        }
    }

    &.error {
        .xc-contentView, .xc-loadView {
            display: none !important;
        }

        .xc-errorView {
            display: block !important;
            color: @color-table-red;
            white-space: normal;
            font-size: 14px;
        }

        .xc-confirm {
            opacity: @opacity-disabled;
            pointer-events: none;
        }
    }

    .xc-errorView, .xc-loadView {
        display: none;
        padding-left: 15px;
        padding-top: 15px;
    }
}

// style for context sensitive help icon
.csHelp {
    display: inline-block;
    .icon {
        cursor: pointer;
        color: @color-bg-select-blue;
        &.white {
            color: @color-white;
        }
    }
}

// used for datasetTableWrap in datastore.less
.typeIcon() {
    .type.icon {
        font-family: 'icomoon' !important;
        speak: none;
        font-style: normal;
        font-weight: normal;
        text-transform: normal;
        font-variant: normal;
        line-height: 1;
        font-size: 14px;
        /* Better Font Rendering =========== */
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        color: @color-white;

        display: inline-block;
        float: left;
        .center-align;
    }

    // default value is Unknown
    .type.icon:before {
      content: "\e948";
    }

    &.type-object .type.icon:before {
      content: "\e941";
    }
    &.type-array .type.icon:before {
      content: "\e942";
    }
    &.type-integer .type.icon:before {
      content: "\e943";
    }
    &.type-float .type.icon:before {
      content: "\e943";
    }
    &.type-boolean .type.icon:before {
      content: "\e945";
    }
    &.type-string .type.icon:before {
      content: "\e947";
    }
    &.type-mixed .type.icon:before {
      content: "\e946";
    }
}

.xc-hidden {
    display: none !important;
}

.xc-disabled {
    opacity: @opacity-disabled !important;
    pointer-events: none;
}

.xc-unavailable {
    cursor: default;
    opacity: 0.4;
}

.xc-action {
    cursor: pointer;
    .xc-hover;
}

.xc-hover {
    opacity: @opacity-unhover;

    &:hover {
        opacity: @opacity-hover;
    }
}

.xc-worksheetList {
    li {
        padding-right: 25px !important;
        .position(relative);

        .icon {
            .size(@width: 14px);
            .vertical-align;
            .position(absolute, @right: 10px);
            .font(@size: 14px, @color: @color-font-gray36);
        }
    }
}

.xc-expand-list {
    &.active {
        .expand {
            .icon {
                .transform(rotate(0deg));
            }
        }

        ul {
            display: block;
        }
    }

    .expand {
        margin-right: 5px;
        cursor: pointer;

        .icon {
            .transform(rotate(270deg));
        }
    }

    > span {
        display: inline-block;
        .size(@height: 20px);
    }

    .listInfo {
        font-weight: 700;
        padding: 0 15px;
    }

    ul {
        display: none;
        margin: 8px 0;

        > li {
            .size(@width: 100%, @height: 30px);
            opacity: @opacity-unhover;
            padding: 5px 15px;
            box-shadow: inset 0 1px 0 0 rgba(255, 255, 255, 0.2), inset 0 -1px 0 0 rgba(0, 0, 0, 0.2);

            &:hover {
                opacity: @opacity-hover;
            }

            &.active {
                background-color: @color-bg-light-navy;
            }

            > i, > span, > input, > div {
                display: inline-block;
                float: left;
            }

            .icon {
                .position(relative, @top: 3px);
            }
        }
    }
}

.xc-switch {
    .size(@width: 22px, @height: 10px);
    .position(relative, @top: 5px);
    .rounded(5px);
    background-color: @color-bg-pinkish-grey;
    cursor: pointer;

    .slider {
        .size(@width: 12px, @height: 12px);
        .rounded(100%);
        .position(relative, @left: 0, @top: -1px);
        background-color: @color-white;
        .transition(left 0.2s);
    }

    &.on {
        background-color: @color-bg-softBlue;
        .slider {
            left: 11px;
        }
    }

    &.alwaysBlue {
        background-color: @color-bg-softBlue;
    }
}

.xc-logo {
    background-color: @color-bg-dusk-blue;
    border: 2px solid @color-bg-softBlue;
    .innerShadow {
        height: 100%;
        width: 100%;
        position: absolute;
        z-index: 2;
        box-shadow: inset 1px 1px 0px 0px @color-inset-shadow;
    }

    .icon {
        .size(@width: 38px, @height: 38px);
        background-color: @color-bg-softBlue;
        display: block;

        font-size: 38px;
        color: @color-bg-dusk-blue;
    }
}

.xc-grid {
    .grid-unit {
        .position(relative);
    }

    &.gridView .grid-unit {
        .size(@width: @width-grid, @height: @width-grid);
        text-align: center;
        float: left;
        display: inline-block;

        > .gridIcon {
            display: inline-block;
            .size(@width: 35px, @height: @width-grid - 25px);
        }

        > .label {
            .position(relative, @top: -2px);
            .size(@width: @width-grid, @height: 20px);
            .font(@size: 9px, @weight: 600);
            line-height: 10px;
            white-space: normal;
            word-wrap: break-word;
            overflow: hidden;
            padding: 0 4px;
        }
    }

    &.listView .grid-unit {
        .size(@height: @height-grid-list);
        box-shadow: inset 0 1px 0 0 rgba(255, 255, 255, 0.2), inset 0 -1px 0 0 rgba(0, 0, 0, 0.2);
        display: block;
        clear: both;
        float: none;
        .size(@width: 100%);
        text-align: left;

        > .label {
            .size(@width: ~"calc(100% - 80px)", @height: @height-grid-list);
            .font(@size: 11px, @line-height: @height-grid-list);
            .textOverflowOneLine;
            float: left;
            padding: 0 10px;
        }

        > .gridIcon {
            display: inline-block;
            .size(@width: 25px, @height: 100%);
            .font(@size: 17px);
            margin-left: 5px;
            float: left;

            &:before {
                display: inline-block;
                .center-align;
            }
        }
    }
}

html.firefox {
    .xc-grid {
        &.gridView .grid-unit {
            > .label {
                word-wrap: break-word;
            }
        }
    }
}

.xc-query {
    &.processing {
        .queryIcon {
            &.processing {
                display: inline-block;
                color: @color-bg-softBlue;
            }
        }

        .cancelIcon {
            display: inline-block;
        }

        .deleteIcon {
            display: none;
        }
        .checkbox {
            display: none;
        }

        .progressBar {
            background-color: @color-bg-softBlue;
        }
    }

    &.canceled {
        .queryIcon {
            &.processing {
                display: inline-block;
                color: @color-bg-softBlue;
            }
        }

        .progressBar {
            background-color: @color-bg-softBlue;
        }
    }

    &.done {
        .queryIcon {
            &.done {
                display: inline-block;
                color: @color-bg-apple-green;
            }
        }

        .progressBar {
             background-color: @color-bg-apple-green;
        }
    }

    &.error {
        .queryIcon {
            &.error {
                display: inline-block;
                color: @color-bg-tahiti-gold;
            }
            &.done {
                display: none;
            }
            &.processing {
                display: none;
            }
        }

        .progressBar {
             background-color: @color-bg-tahiti-gold;
        }
    }

    .queryIcon {
        display: none;
    }

    .cancelIcon {
        display: none;
        &.disabled {
            pointer-events: none;
            opacity: @opacity-disabled;
        }
    }
}

.input-placeholder(@color) {
    &::-webkit-input-placeholder {
       color: @color;
    }

    &:-moz-placeholder { /* Firefox 18- */
       color: @color;
    }

    &::-moz-placeholder {  /* Firefox 19+ */
       color: @color;
    }

    &:-ms-input-placeholder {
       color: @color;
    }
}

.infListHidden {
    display: none !important;
}

/* ========== Transition ========== */
.transition (@argument) {
    -webkit-transition: @argument;
    -moz-transition: @argument;
    -ms-transition: @argument;
    -o-transition: @argument;
    transition: @argument;
}

.transition-duration (@argument) {
    -webkit-transition-duration: @argument;
    -moz-transition-duration: @argument;
    -ms-transition-duration: @argument;
    -o-transition-duration: @argument;
    transition-duration: @argument;
}

.transition-delay (@argument) {
    -webkit-transition-delay: @argument;
    -moz-transition-delay: @argument;
    -ms-transition-delay: @argument;
    -o-transition-delay: @argument;
    transition-delay: @argument;
}

.transform (@argument) {
    -webkit-transform: @argument;
    -moz-transform: @argument;
    -ms-transform: @argument;
    -o-transform: @argument;
    transform: @argument;
}
/* ========== End Of Transition ========== */

/* ========== Gradient Color ========== */
.linear-gradient(@origin: left, @start: @color-white, @stop: @color-black) {
    background: -webkit-linear-gradient(@origin, @start, @stop);
    background: -moz-linear-gradient(@origin, @start, @stop);
    background: -o-linear-gradient(@origin, @start, @stop);
    background: -ms-linear-gradient(@origin, @start, @stop);

    .parser(top) {
        background: linear-gradient(to bottom, @start, @stop);
    }

    .parser(left) {
        background: linear-gradient(to right, @start, @stop);
    }

    .parser(bottom) {
        background: linear-gradient(to top, @start, @stop);
    }

    .parser(right) {
        background: linear-gradient(to left, @start, @stop);
    }

    .parser(~"top left") {
        background: linear-gradient(to bottom left, @start, @stop);
    }

    .parser(@origin);
}
/* ========== End Of Gradient Color ========== */

.keyframe(@name, @arguments) {
    @-moz-keyframes @name { @arguments(); }
    @-ms-keyframes @name { @arguments(); }
    @-webkit-keyframes @name { @arguments(); }
    @-o-keyframes @name { @arguments(); }
    @keyframes @name { @arguments(); }
}

.keyframeAnim(@arguments) {
    -webkit-animation: @arguments;
    -moz-animation: @arguments;
    -ms-animation: @arguments;
    -o-animation: @arguments;
    animation: @arguments;
}
