from dax import * 
assert edate ("12/1/2013",5)=="5/1/2014"
assert eomonth ("01/01/2012",6)=="7/31/2012"
assert (hour("11/08/2010 14:21:00")) == "14"
assert (minute("11/08/2010 14:21:00")) == "21"
assert (second("11/08/2010 14:21:23")) == "23"
# assert  str(NOW()) == str(datetime.now()) # ALWAYS FAILS WITH A FEW MILLISECONDS
# assert time(15,34,20) == "15:34:20"
assert (timeValue("12:15:23 AM")) == "1900-01-01 12:15:23"
assert (timeValue("9:15 AM")) == "1900-01-01 09:15:00"
# assert TODAY() =="8/7/2018"
# print (UTCNOW())
assert month("11/4/2014") == "11"
assert weekDay("11/4/2014",1) == "3"
assert weekDay("11/4/2014",2) == "2"
assert weekDay("11/4/2014",3) == "1"
# assert WEEKNUM("11/4/2014") == "45"
assert blank() == ""
assert code ('a') =="97"
assert combineValues(",","Black","and","white") == "Black,and,white"
assert find("BMX","line of BMX racing goods",5) == "9"
assert fixed (12.56456456546,3) == "12.565"
assert left("Brown Fox Jumping off the deck",3) == "Bro"
assert len("Brown Fox Jumping off the deck") == "30"
assert lower("Brown Fox Jumping off the deck") == "brown fox jumping off the deck"
assert (mid("Brown Fox Jumping off the deck",1,2)) == "Br"
assert replace("Brown Fox Jumping off the deck",2,3,"xxxxxxx") == "Bxxxxxxxn Fox Jumping off the deck"
assert (right("Brown Fox Jumping off the deck",12)) == "off the deck"
assert substitute("Black white white black black","black","green",1) == "Black white white green black"
assert trim("   Black white white black black   ") == "Black white white black black"
assert unichar(9733) =="â˜…"
assert upper("test 123 TeSt") == "TEST 123 TEST"
assert AND (1==3, True) == "False"
assert AND (1<3, 4 <5) == "True"
assert false() == "False"
assert calendar("2/12/2009","2/18/2009") == "2/12/2009;2/13/2009;2/14/2009;2/15/2009;2/16/2009;2/17/2009;2/18/2009"
assert isNonText(blank()) == "True"
assert isNonText("test") == "False"
assert isNonText(34) == "True"
assert day("3/29/2008") == "29"
assert year("3/29/2008") == "2008"
assert (ceiling(12.11,0.25) == "12.25")
assert (ceiling(12.25,0.25) == "12.25")
assert (ceiling(12.26,0.25) == "12.5")
assert (ceiling(12.74,0.25) == "12.75")
assert  gcd(56,77,12,34) == "1"
assert gcd(24,36) == "12"
assert log(100,10) == "2.0"
assert (mod(-3,-2) == "-1.0")
assert (mod(3,2) == "1.0")
assert (mround(-10,-3) == "-9.0")
assert (permut(10,3)) == "720"
assert (power(5,2) == "25.0" )
assert (quotient(5,2) == "2" )
assert (quotient(10/2,2) == "2")
assert (int(-4.3)=="-5")
assert (int(4.3)=="4")
assert (lcm(5, 2) == "10")
assert (lcm(24, 36) == "72")
assert (sqrt(25) =="5.0")
assert (sqrt(100) =="10.0")
assert radians(270) == "4.71238898038469"
assert round(2.16,1) == "2.2"
assert roundDown(12234.234333,-2) == "12200"
assert roundDown(12234.234333,2) == "12234.23"
assert roundDown(12234.234333,32) == "12234.234333"
assert roundDown(12234,2) == "12234.0"
assert roundUp(12.3,0.5) == "12.5"
assert trunc(1234.35345345345,3) == "1234.353"
assert  beta_dist(0.01,2.34,3.3) == "0.0001799502310603815"
assert beta_inv(0.01,2.34,3.3) == "0.05756876124553044"
assert sqrtpi(1) == "1.7724538509055159"
assert tan(0.785) == "0.9992039901050427"
assert date (2002,1,1) == "1/1/2002"
# print ("DATEDIFF: ",DATEDIFF("2012-12-31 23:59:59" , "2013-01-01 00:00:00" , "days"))
assert (odd(1.5)) =="3"
assert (odd(3)) =="3"
assert (odd(2)) == "3"
assert (odd(-1)) =="-1"
assert (odd(-2)) == "-1"
assert (currency(1234.56)) == "1234.5600"
assert concatenate("Black", "White") == "BlackWhite"
assert exact("Black","Black") == "True"
assert exact("Black","White") == "False"
assert rept("Black", 3) == "BlackBlackBlack"
# assert SEARCH("Blak", "white Black BlACK green", "N/A") == "N/A"
assert true () == "True"
assert  NOT(False) == "True"
assert  OR(True, False) =="True"
assert  OR(False, False) =="False"
assert  isText("text") == "True"
assert  isText("") == "False"
assert  isText(100) == "False"
assert  isOdd(3) == "True"
assert  isOdd(4) == "False"
assert  isOdd(0) == "False"
assert  isEven(2) == "True"
assert  isEven(0) == "True"
assert  isEven(9) == "False"
assert  abs(-1) == "1.0"
assert  abs(1) == "1.0"
# assert ACOS(RADIANS(45)) == "0.667457216"
assert  even(5) == "6"
assert ln(20) == "2.995732273553991"
assert log10 (20) == "1.301029995663981"
assert acos(1) == "0.0"
assert acosh(45) == "4.499686190671499"
#assert  ASIN(67):
# def IF(logical_test,value_if_true = False, value_if_false = False):
# def IFERROR(value, value_if_error):
# def DATEVALUE(date_text):
assert (asinh(-2.5))== "-1.6472311463710958"
assert (asinh(10)) == "2.99822295029797"
assert (atan(1)) == "0.7853981633974483"
assert (atan(0)) == "0.0"
assert (atan(-1)) == "-0.7853981633974483"
assert  (atanh(0.5))== "0.5493061443340549"
assert combin(5, 3) == "10.0"
assert combinA(5,3) == "35.0"
assert cos("0.7") == "0.7648421872844885"
assert (cosh(0.48)) == "1.1174288969995172"
assert (degrees("3.14")) == "179.9087476710785"
assert (divide(4, 0 ,"ERROR")) == "ERROR"
assert (divide(4, 2 ,"ERROR")) == "2.0"
assert (exp("2")) == "7.38905609893065"
assert fact(3) == "6"
assert (floor(-45.67)) == "-46" # FIXME add signifignace
assert (floor(45.67)) == "45"
assert (floor(0.20)) == "0"
# def ISO_CEILING(number, significance):
# def CHISQ_INV(probability,deg_freedom):
assert (expon_dist(4,0.5,False)) == "0.06766764161830635"
assert (expon_dist(4,0.5,True)) == "0.8646647167633873"
assert (poisson_dist(1,2,True)) == "0.40600584970983794"
assert  (poisson_dist(1,2,False)) == "0.2706705664732254"
assert  (round(sin(pi()),5)) == "0.0"
assert (round(sin (radians(30)),5)) == "0.5"
assert (sinh("2")) == "3.6268604078470186"
assert (dateDiff("7/16/1969", "7/24/1989", "years")) == "20"
assert (dateDiff("7/16/1969", "7/24/1989", "days")) == "7313"
assert (dateDiff("7/16/1969", "7/24/1989", "quarters")) == "80.0"
assert  (dateDiff("7/16/1969", "7/24/1989", "months")) == "240"
# def YEARFRAC(startDate,endDate, basis = 0):
assert isBlank("") == "True"
assert isBlank(" ") == "False"
assert isBlank("12") == "False"
assert isLogical("sadf") == "False"
assert isLogical(True) == "True"
assert isLogical(False) == "True"
assert isLogical("True") == "True"
assert isLogical("False") == "True"
assert isLogical(10) == "False"
assert isNumber(10) == "True"
assert isNumber("10") == "True"
assert isNumber(-10) == "True"
assert isNumber("-10") == "True"
assert isNumber("a") == "False"
assert isNumber(True) == "False"
assert isNumber(False) == "False"
assert isNumber("True") == "False"
assert isNumber("test") == "False"
assert isNumber("") == "False"

assert sign(-1) == "-1"
assert sign(10) == "1"
assert sign(0) == "0"
assert sign("-1") == "-1"
assert sign("10") == "1"
assert sign("0") == "0"


