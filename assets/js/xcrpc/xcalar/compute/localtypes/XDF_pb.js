/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var xcalar_compute_localtypes_Workbook_pb = require('../../../xcalar/compute/localtypes/Workbook_pb.js');
var xcalar_compute_localtypes_FunctionCategory_pb = require('../../../xcalar/compute/localtypes/FunctionCategory_pb.js');
var xcalar_compute_localtypes_DataFormatEnums_pb = require('../../../xcalar/compute/localtypes/DataFormatEnums_pb.js');
var xcalar_compute_localtypes_XcalarEvalEnums_pb = require('../../../xcalar/compute/localtypes/XcalarEvalEnums_pb.js');
goog.exportSymbol('proto.xcalar.compute.localtypes.XDF.ListXdfsRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.XDF.ListXdfsResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.XDF.ListXdfsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.XDF.ListXdfsRequest.displayName = 'proto.xcalar.compute.localtypes.XDF.ListXdfsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.XDF.ListXdfsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.XDF.ListXdfsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f),
    fnnamePattern: jspb.Message.getFieldWithDefault(msg, 2, ""),
    categoryPattern: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.XDF.ListXdfsRequest}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.XDF.ListXdfsRequest;
  return proto.xcalar.compute.localtypes.XDF.ListXdfsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.XDF.ListXdfsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.XDF.ListXdfsRequest}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFnnamePattern(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategoryPattern(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.XDF.ListXdfsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.XDF.ListXdfsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
  f = message.getFnnamePattern();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCategoryPattern();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 1;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 1));
};


/** @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value */
proto.xcalar.compute.localtypes.XDF.ListXdfsRequest.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xcalar.compute.localtypes.XDF.ListXdfsRequest.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string fnname_pattern = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsRequest.prototype.getFnnamePattern = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.XDF.ListXdfsRequest.prototype.setFnnamePattern = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string category_pattern = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsRequest.prototype.getCategoryPattern = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.XDF.ListXdfsRequest.prototype.setCategoryPattern = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.XDF.ListXdfsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.displayName = 'proto.xcalar.compute.localtypes.XDF.ListXdfsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.XDF.ListXdfsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    numXdfs: jspb.Message.getFieldWithDefault(msg, 1, 0),
    fndescsList: jspb.Message.toObjectList(msg.getFndescsList(),
    proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.XDF.ListXdfsResponse}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.XDF.ListXdfsResponse;
  return proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.XDF.ListXdfsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.XDF.ListXdfsResponse}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumXdfs(value);
      break;
    case 2:
      var value = new proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc;
      reader.readMessage(value,proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc.deserializeBinaryFromReader);
      msg.addFndescs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.XDF.ListXdfsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumXdfs();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getFndescsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc.displayName = 'proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc.toObject = function(includeInstance, msg) {
  var f, obj = {
    argdesc: jspb.Message.getFieldWithDefault(msg, 1, ""),
    typesAccepted: jspb.Message.getFieldWithDefault(msg, 2, 0),
    isSingletonValue: jspb.Message.getFieldWithDefault(msg, 3, false),
    argType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    minArgs: jspb.Message.getFieldWithDefault(msg, 5, 0),
    maxArgs: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc;
  return proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setArgdesc(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTypesAccepted(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSingletonValue(value);
      break;
    case 4:
      var value = /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.XcalarEvalArgType} */ (reader.readEnum());
      msg.setArgType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinArgs(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArgdesc();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTypesAccepted();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getIsSingletonValue();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getArgType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getMinArgs();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getMaxArgs();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional string argdesc = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc.prototype.getArgdesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc.prototype.setArgdesc = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 types_accepted = 2;
 * @return {number}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc.prototype.getTypesAccepted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc.prototype.setTypesAccepted = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool is_singleton_value = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc.prototype.getIsSingletonValue = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc.prototype.setIsSingletonValue = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional xcalar.compute.localtypes.XcalarEnumType.XcalarEvalArgType arg_type = 4;
 * @return {!proto.xcalar.compute.localtypes.XcalarEnumType.XcalarEvalArgType}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc.prototype.getArgType = function() {
  return /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.XcalarEvalArgType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.xcalar.compute.localtypes.XcalarEnumType.XcalarEvalArgType} value */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc.prototype.setArgType = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional uint32 min_args = 5;
 * @return {number}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc.prototype.getMinArgs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc.prototype.setMinArgs = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 max_args = 6;
 * @return {number}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc.prototype.getMaxArgs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc.prototype.setMaxArgs = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc.displayName = 'proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc.toObject = function(includeInstance, msg) {
  var f, obj = {
    fnname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fndesc: jspb.Message.getFieldWithDefault(msg, 2, ""),
    category: jspb.Message.getFieldWithDefault(msg, 3, 0),
    numArgs: jspb.Message.getFieldWithDefault(msg, 4, 0),
    argdescsList: jspb.Message.toObjectList(msg.getArgdescsList(),
    proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc.toObject, includeInstance),
    isSingletonOutput: jspb.Message.getFieldWithDefault(msg, 6, false),
    outputType: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc;
  return proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFnname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFndesc(value);
      break;
    case 3:
      var value = /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.FunctionCategory} */ (reader.readEnum());
      msg.setCategory(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumArgs(value);
      break;
    case 5:
      var value = new proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc;
      reader.readMessage(value,proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc.deserializeBinaryFromReader);
      msg.addArgdescs(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSingletonOutput(value);
      break;
    case 7:
      var value = /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.DfFieldType} */ (reader.readEnum());
      msg.setOutputType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFnname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFndesc();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCategory();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getNumArgs();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getArgdescsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc.serializeBinaryToWriter
    );
  }
  f = message.getIsSingletonOutput();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getOutputType();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
};


/**
 * optional string fnname = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc.prototype.getFnname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc.prototype.setFnname = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string fndesc = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc.prototype.getFndesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc.prototype.setFndesc = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional xcalar.compute.localtypes.XcalarEnumType.FunctionCategory category = 3;
 * @return {!proto.xcalar.compute.localtypes.XcalarEnumType.FunctionCategory}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc.prototype.getCategory = function() {
  return /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.FunctionCategory} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.xcalar.compute.localtypes.XcalarEnumType.FunctionCategory} value */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc.prototype.setCategory = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional int32 num_args = 4;
 * @return {number}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc.prototype.getNumArgs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc.prototype.setNumArgs = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated XcalarEvalArgDesc argdescs = 5;
 * @return {!Array<!proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc>}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc.prototype.getArgdescsList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc, 5));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc>} value */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc.prototype.setArgdescsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc.prototype.addArgdescs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalArgDesc, opt_index);
};


proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc.prototype.clearArgdescsList = function() {
  this.setArgdescsList([]);
};


/**
 * optional bool is_singleton_output = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc.prototype.getIsSingletonOutput = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc.prototype.setIsSingletonOutput = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional xcalar.compute.localtypes.XcalarEnumType.DfFieldType output_type = 7;
 * @return {!proto.xcalar.compute.localtypes.XcalarEnumType.DfFieldType}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc.prototype.getOutputType = function() {
  return /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.DfFieldType} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.xcalar.compute.localtypes.XcalarEnumType.DfFieldType} value */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc.prototype.setOutputType = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional uint32 num_xdfs = 1;
 * @return {number}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.prototype.getNumXdfs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.prototype.setNumXdfs = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated XcalarEvalFnDesc fndescs = 2;
 * @return {!Array<!proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc>}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.prototype.getFndescsList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc, 2));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc>} value */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.prototype.setFndescsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc}
 */
proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.prototype.addFndescs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.XcalarEvalFnDesc, opt_index);
};


proto.xcalar.compute.localtypes.XDF.ListXdfsResponse.prototype.clearFndescsList = function() {
  this.setFndescsList([]);
};


goog.object.extend(exports, proto.xcalar.compute.localtypes.XDF);
