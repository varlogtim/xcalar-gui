/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.AggColInfo', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.AggregateEvalStrRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.AggregateRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.AggregateResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.FilterRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.FilterResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.GenRowNumRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.GenRowNumResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.GroupByOptions', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.GroupByRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.GroupByResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.IndexRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.IndexResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.JoinOptions', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.JoinRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.JoinResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.MapRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.MapResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.ProjectRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.ProjectResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.SortRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.SortResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.SynthesizeResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.UnionColInfo', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.UnionRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.UnionResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.FilterRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.FilterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.FilterRequest.displayName = 'proto.xcalar.compute.localtypes.Dataflow.FilterRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.FilterRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.FilterRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.FilterRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.FilterRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    filterstr: msg.getFilterstr(),
    srctablename: msg.getSrctablename(),
    dsttablename: msg.getDsttablename()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.FilterRequest}
 */
proto.xcalar.compute.localtypes.Dataflow.FilterRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.FilterRequest;
  return proto.xcalar.compute.localtypes.Dataflow.FilterRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.FilterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.FilterRequest}
 */
proto.xcalar.compute.localtypes.Dataflow.FilterRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilterstr(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrctablename(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDsttablename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.FilterRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.FilterRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.FilterRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.FilterRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFilterstr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getSrctablename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getDsttablename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.FilterRequest} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.FilterRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.FilterRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string filterStr = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.FilterRequest.prototype.getFilterstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.FilterRequest.prototype.setFilterstr = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string srcTableName = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.FilterRequest.prototype.getSrctablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.FilterRequest.prototype.setSrctablename = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string dstTableName = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.FilterRequest.prototype.getDsttablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.FilterRequest.prototype.setDsttablename = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.FilterResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.FilterResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.FilterResponse.displayName = 'proto.xcalar.compute.localtypes.Dataflow.FilterResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.FilterResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.FilterResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.FilterResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.FilterResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    querystr: msg.getQuerystr(),
    newtablename: msg.getNewtablename()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.FilterResponse}
 */
proto.xcalar.compute.localtypes.Dataflow.FilterResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.FilterResponse;
  return proto.xcalar.compute.localtypes.Dataflow.FilterResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.FilterResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.FilterResponse}
 */
proto.xcalar.compute.localtypes.Dataflow.FilterResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuerystr(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewtablename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.FilterResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.FilterResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.FilterResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.FilterResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getQuerystr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getNewtablename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.FilterResponse} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.FilterResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.FilterResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string queryStr = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.FilterResponse.prototype.getQuerystr = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.FilterResponse.prototype.setQuerystr = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string newTableName = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.FilterResponse.prototype.getNewtablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.FilterResponse.prototype.setNewtablename = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.AggregateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.AggregateRequest.displayName = 'proto.xcalar.compute.localtypes.Dataflow.AggregateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.AggregateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.AggregateRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    aggop: msg.getAggop(),
    colname: msg.getColname(),
    srctablename: msg.getSrctablename(),
    dstaggname: msg.getDstaggname()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.AggregateRequest}
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.AggregateRequest;
  return proto.xcalar.compute.localtypes.Dataflow.AggregateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.AggregateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.AggregateRequest}
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAggop(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setColname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrctablename(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDstaggname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.AggregateRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAggop();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getColname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getSrctablename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getDstaggname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.AggregateRequest} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.AggregateRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string aggOp = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateRequest.prototype.getAggop = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.AggregateRequest.prototype.setAggop = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string colName = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateRequest.prototype.getColname = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.AggregateRequest.prototype.setColname = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string srcTableName = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateRequest.prototype.getSrctablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.AggregateRequest.prototype.setSrctablename = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string dstAggName = 4;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateRequest.prototype.getDstaggname = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.AggregateRequest.prototype.setDstaggname = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateEvalStrRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.AggregateEvalStrRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.AggregateEvalStrRequest.displayName = 'proto.xcalar.compute.localtypes.Dataflow.AggregateEvalStrRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateEvalStrRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.AggregateEvalStrRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.AggregateEvalStrRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateEvalStrRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    evalstr: msg.getEvalstr(),
    srctablename: msg.getSrctablename(),
    dstaggname: msg.getDstaggname()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.AggregateEvalStrRequest}
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateEvalStrRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.AggregateEvalStrRequest;
  return proto.xcalar.compute.localtypes.Dataflow.AggregateEvalStrRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.AggregateEvalStrRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.AggregateEvalStrRequest}
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateEvalStrRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEvalstr(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrctablename(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDstaggname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.AggregateEvalStrRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateEvalStrRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateEvalStrRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateEvalStrRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEvalstr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getSrctablename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getDstaggname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.AggregateEvalStrRequest} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateEvalStrRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.AggregateEvalStrRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string evalStr = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateEvalStrRequest.prototype.getEvalstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.AggregateEvalStrRequest.prototype.setEvalstr = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string srcTableName = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateEvalStrRequest.prototype.getSrctablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.AggregateEvalStrRequest.prototype.setSrctablename = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string dstAggName = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateEvalStrRequest.prototype.getDstaggname = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.AggregateEvalStrRequest.prototype.setDstaggname = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.AggregateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.AggregateResponse.displayName = 'proto.xcalar.compute.localtypes.Dataflow.AggregateResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.AggregateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.AggregateResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    querystr: msg.getQuerystr(),
    aggval: msg.getAggval(),
    dstaggname: msg.getDstaggname(),
    todelete: msg.getTodelete()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.AggregateResponse}
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.AggregateResponse;
  return proto.xcalar.compute.localtypes.Dataflow.AggregateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.AggregateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.AggregateResponse}
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuerystr(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAggval(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDstaggname(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTodelete(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.AggregateResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getQuerystr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getAggval();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getDstaggname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getTodelete();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.AggregateResponse} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.AggregateResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string queryStr = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateResponse.prototype.getQuerystr = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.AggregateResponse.prototype.setQuerystr = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string aggVal = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateResponse.prototype.getAggval = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.AggregateResponse.prototype.setAggval = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string dstAggName = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateResponse.prototype.getDstaggname = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.AggregateResponse.prototype.setDstaggname = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool toDelete = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Dataflow.AggregateResponse.prototype.getTodelete = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 4, false));
};


/** @param {boolean} value  */
proto.xcalar.compute.localtypes.Dataflow.AggregateResponse.prototype.setTodelete = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.MapRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Dataflow.MapRequest.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.MapRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.MapRequest.displayName = 'proto.xcalar.compute.localtypes.Dataflow.MapRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Dataflow.MapRequest.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.MapRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.MapRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.MapRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.MapRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    mapstrsList: jspb.Message.getField(msg, 1),
    newcolnamesList: jspb.Message.getField(msg, 2),
    srctablename: msg.getSrctablename(),
    dsttablename: msg.getDsttablename(),
    icvmode: msg.getIcvmode()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.MapRequest}
 */
proto.xcalar.compute.localtypes.Dataflow.MapRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.MapRequest;
  return proto.xcalar.compute.localtypes.Dataflow.MapRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.MapRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.MapRequest}
 */
proto.xcalar.compute.localtypes.Dataflow.MapRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.getMapstrsList().push(value);
      msg.setMapstrsList(msg.getMapstrsList());
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.getNewcolnamesList().push(value);
      msg.setNewcolnamesList(msg.getNewcolnamesList());
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrctablename(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDsttablename(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIcvmode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.MapRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.MapRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.MapRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.MapRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMapstrsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = this.getNewcolnamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = this.getSrctablename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getDsttablename();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getIcvmode();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.MapRequest} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.MapRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.MapRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated string mapStrs = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.xcalar.compute.localtypes.Dataflow.MapRequest.prototype.getMapstrsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<string>} value  */
proto.xcalar.compute.localtypes.Dataflow.MapRequest.prototype.setMapstrsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.xcalar.compute.localtypes.Dataflow.MapRequest.prototype.clearMapstrsList = function() {
  jspb.Message.setField(this, 1, []);
};


/**
 * repeated string newColNames = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.xcalar.compute.localtypes.Dataflow.MapRequest.prototype.getNewcolnamesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {Array.<string>} value  */
proto.xcalar.compute.localtypes.Dataflow.MapRequest.prototype.setNewcolnamesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


proto.xcalar.compute.localtypes.Dataflow.MapRequest.prototype.clearNewcolnamesList = function() {
  jspb.Message.setField(this, 2, []);
};


/**
 * optional string srcTableName = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.MapRequest.prototype.getSrctablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.MapRequest.prototype.setSrctablename = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string dstTableName = 4;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.MapRequest.prototype.getDsttablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.MapRequest.prototype.setDsttablename = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool icvMode = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Dataflow.MapRequest.prototype.getIcvmode = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 5, false));
};


/** @param {boolean} value  */
proto.xcalar.compute.localtypes.Dataflow.MapRequest.prototype.setIcvmode = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.MapResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.MapResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.MapResponse.displayName = 'proto.xcalar.compute.localtypes.Dataflow.MapResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.MapResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.MapResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.MapResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.MapResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    querystr: msg.getQuerystr(),
    newtablename: msg.getNewtablename()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.MapResponse}
 */
proto.xcalar.compute.localtypes.Dataflow.MapResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.MapResponse;
  return proto.xcalar.compute.localtypes.Dataflow.MapResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.MapResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.MapResponse}
 */
proto.xcalar.compute.localtypes.Dataflow.MapResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuerystr(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewtablename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.MapResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.MapResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.MapResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.MapResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getQuerystr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getNewtablename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.MapResponse} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.MapResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.MapResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string queryStr = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.MapResponse.prototype.getQuerystr = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.MapResponse.prototype.setQuerystr = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string newTableName = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.MapResponse.prototype.getNewtablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.MapResponse.prototype.setNewtablename = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.GenRowNumRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.GenRowNumRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.GenRowNumRequest.displayName = 'proto.xcalar.compute.localtypes.Dataflow.GenRowNumRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.GenRowNumRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.GenRowNumRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.GenRowNumRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.GenRowNumRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    newcolname: msg.getNewcolname(),
    srctablename: msg.getSrctablename(),
    dsttablename: msg.getDsttablename()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.GenRowNumRequest}
 */
proto.xcalar.compute.localtypes.Dataflow.GenRowNumRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.GenRowNumRequest;
  return proto.xcalar.compute.localtypes.Dataflow.GenRowNumRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.GenRowNumRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.GenRowNumRequest}
 */
proto.xcalar.compute.localtypes.Dataflow.GenRowNumRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewcolname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrctablename(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDsttablename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.GenRowNumRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.GenRowNumRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.GenRowNumRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.GenRowNumRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getNewcolname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getSrctablename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getDsttablename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.GenRowNumRequest} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.GenRowNumRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.GenRowNumRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string newColName = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.GenRowNumRequest.prototype.getNewcolname = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.GenRowNumRequest.prototype.setNewcolname = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string srcTableName = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.GenRowNumRequest.prototype.getSrctablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.GenRowNumRequest.prototype.setSrctablename = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string dstTableName = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.GenRowNumRequest.prototype.getDsttablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.GenRowNumRequest.prototype.setDsttablename = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.GenRowNumResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.GenRowNumResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.GenRowNumResponse.displayName = 'proto.xcalar.compute.localtypes.Dataflow.GenRowNumResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.GenRowNumResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.GenRowNumResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.GenRowNumResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.GenRowNumResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    querystr: msg.getQuerystr(),
    newtablename: msg.getNewtablename()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.GenRowNumResponse}
 */
proto.xcalar.compute.localtypes.Dataflow.GenRowNumResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.GenRowNumResponse;
  return proto.xcalar.compute.localtypes.Dataflow.GenRowNumResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.GenRowNumResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.GenRowNumResponse}
 */
proto.xcalar.compute.localtypes.Dataflow.GenRowNumResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuerystr(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewtablename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.GenRowNumResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.GenRowNumResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.GenRowNumResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.GenRowNumResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getQuerystr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getNewtablename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.GenRowNumResponse} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.GenRowNumResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.GenRowNumResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string queryStr = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.GenRowNumResponse.prototype.getQuerystr = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.GenRowNumResponse.prototype.setQuerystr = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string newTableName = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.GenRowNumResponse.prototype.getNewtablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.GenRowNumResponse.prototype.setNewtablename = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.ProjectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Dataflow.ProjectRequest.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.ProjectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.ProjectRequest.displayName = 'proto.xcalar.compute.localtypes.Dataflow.ProjectRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Dataflow.ProjectRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.ProjectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.ProjectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.ProjectRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.ProjectRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    columnsList: jspb.Message.getField(msg, 1),
    srctablename: msg.getSrctablename(),
    dsttablename: msg.getDsttablename()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.ProjectRequest}
 */
proto.xcalar.compute.localtypes.Dataflow.ProjectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.ProjectRequest;
  return proto.xcalar.compute.localtypes.Dataflow.ProjectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.ProjectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.ProjectRequest}
 */
proto.xcalar.compute.localtypes.Dataflow.ProjectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.getColumnsList().push(value);
      msg.setColumnsList(msg.getColumnsList());
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrctablename(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDsttablename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.ProjectRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.ProjectRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.ProjectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.ProjectRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = this.getSrctablename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getDsttablename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.ProjectRequest} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.ProjectRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.ProjectRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated string columns = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.xcalar.compute.localtypes.Dataflow.ProjectRequest.prototype.getColumnsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<string>} value  */
proto.xcalar.compute.localtypes.Dataflow.ProjectRequest.prototype.setColumnsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.xcalar.compute.localtypes.Dataflow.ProjectRequest.prototype.clearColumnsList = function() {
  jspb.Message.setField(this, 1, []);
};


/**
 * optional string srcTableName = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.ProjectRequest.prototype.getSrctablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.ProjectRequest.prototype.setSrctablename = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string dstTableName = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.ProjectRequest.prototype.getDsttablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.ProjectRequest.prototype.setDsttablename = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.ProjectResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.ProjectResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.ProjectResponse.displayName = 'proto.xcalar.compute.localtypes.Dataflow.ProjectResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.ProjectResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.ProjectResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.ProjectResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.ProjectResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    querystr: msg.getQuerystr(),
    newtablename: msg.getNewtablename()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.ProjectResponse}
 */
proto.xcalar.compute.localtypes.Dataflow.ProjectResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.ProjectResponse;
  return proto.xcalar.compute.localtypes.Dataflow.ProjectResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.ProjectResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.ProjectResponse}
 */
proto.xcalar.compute.localtypes.Dataflow.ProjectResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuerystr(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewtablename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.ProjectResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.ProjectResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.ProjectResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.ProjectResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getQuerystr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getNewtablename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.ProjectResponse} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.ProjectResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.ProjectResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string queryStr = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.ProjectResponse.prototype.getQuerystr = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.ProjectResponse.prototype.setQuerystr = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string newTableName = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.ProjectResponse.prototype.getNewtablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.ProjectResponse.prototype.setNewtablename = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.AggColInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.AggColInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.AggColInfo.displayName = 'proto.xcalar.compute.localtypes.Dataflow.AggColInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.AggColInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.AggColInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.AggColInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.AggColInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    operator: msg.getOperator(),
    aggcolname: msg.getAggcolname(),
    newcolname: msg.getNewcolname(),
    isdistinct: msg.getIsdistinct()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.AggColInfo}
 */
proto.xcalar.compute.localtypes.Dataflow.AggColInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.AggColInfo;
  return proto.xcalar.compute.localtypes.Dataflow.AggColInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.AggColInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.AggColInfo}
 */
proto.xcalar.compute.localtypes.Dataflow.AggColInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperator(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAggcolname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewcolname(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsdistinct(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.AggColInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.AggColInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.AggColInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.AggColInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOperator();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getAggcolname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getNewcolname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getIsdistinct();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.AggColInfo} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.AggColInfo.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.AggColInfo} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string operator = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.AggColInfo.prototype.getOperator = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.AggColInfo.prototype.setOperator = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string aggColName = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.AggColInfo.prototype.getAggcolname = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.AggColInfo.prototype.setAggcolname = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string newColName = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.AggColInfo.prototype.getNewcolname = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.AggColInfo.prototype.setNewcolname = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool isDistinct = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Dataflow.AggColInfo.prototype.getIsdistinct = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 4, false));
};


/** @param {boolean} value  */
proto.xcalar.compute.localtypes.Dataflow.AggColInfo.prototype.setIsdistinct = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.GroupByOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.displayName = 'proto.xcalar.compute.localtypes.Dataflow.GroupByOptions';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.repeatedFields_ = [7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.GroupByOptions} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    newtablename: msg.getNewtablename(),
    groupall: msg.getGroupall(),
    icvmode: msg.getIcvmode(),
    dhtname: msg.getDhtname(),
    clean: msg.getClean(),
    isincsample: msg.getIsincsample(),
    samplecolsList: jspb.Message.getField(msg, 7),
    newkeysList: jspb.Message.getField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.GroupByOptions}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.GroupByOptions;
  return proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.GroupByOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.GroupByOptions}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewtablename(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGroupall(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIcvmode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDhtname(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setClean(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsincsample(value);
      break;
    case 7:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint64());
      msg.setSamplecolsList(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.getNewkeysList().push(value);
      msg.setNewkeysList(msg.getNewkeysList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.GroupByOptions} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getNewtablename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getGroupall();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = this.getIcvmode();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = this.getDhtname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getClean();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = this.getIsincsample();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = this.getSamplecolsList();
  if (f.length > 0) {
    writer.writePackedUint64(
      7,
      f
    );
  }
  f = this.getNewkeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.GroupByOptions} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.GroupByOptions} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string newTableName = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.prototype.getNewtablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.prototype.setNewtablename = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool groupAll = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.prototype.getGroupall = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 2, false));
};


/** @param {boolean} value  */
proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.prototype.setGroupall = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool icvMode = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.prototype.getIcvmode = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 3, false));
};


/** @param {boolean} value  */
proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.prototype.setIcvmode = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string dhtName = 4;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.prototype.getDhtname = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.prototype.setDhtname = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool clean = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.prototype.getClean = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 5, false));
};


/** @param {boolean} value  */
proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.prototype.setClean = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bool isIncSample = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.prototype.getIsincsample = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 6, false));
};


/** @param {boolean} value  */
proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.prototype.setIsincsample = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * repeated uint64 sampleCols = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.prototype.getSamplecolsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 7));
};


/** @param {Array.<number>} value  */
proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.prototype.setSamplecolsList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.prototype.clearSamplecolsList = function() {
  jspb.Message.setField(this, 7, []);
};


/**
 * repeated string newKeys = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.prototype.getNewkeysList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 8));
};


/** @param {Array.<string>} value  */
proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.prototype.setNewkeysList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.prototype.clearNewkeysList = function() {
  jspb.Message.setField(this, 8, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Dataflow.GroupByRequest.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.GroupByRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.GroupByRequest.displayName = 'proto.xcalar.compute.localtypes.Dataflow.GroupByRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByRequest.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.GroupByRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.GroupByRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    aggargsList: jspb.Message.toObjectList(msg.getAggargsList(),
    proto.xcalar.compute.localtypes.Dataflow.AggColInfo.toObject, includeInstance),
    groupbycolsList: jspb.Message.getField(msg, 2),
    srctablename: msg.getSrctablename(),
    options: (f = msg.getOptions()) && proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.GroupByRequest}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.GroupByRequest;
  return proto.xcalar.compute.localtypes.Dataflow.GroupByRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.GroupByRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.GroupByRequest}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.Dataflow.AggColInfo;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Dataflow.AggColInfo.deserializeBinaryFromReader);
      msg.getAggargsList().push(value);
      msg.setAggargsList(msg.getAggargsList());
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.getGroupbycolsList().push(value);
      msg.setGroupbycolsList(msg.getGroupbycolsList());
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrctablename(value);
      break;
    case 4:
      var value = new proto.xcalar.compute.localtypes.Dataflow.GroupByOptions;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.deserializeBinaryFromReader);
      msg.setOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.GroupByRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAggargsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.Dataflow.AggColInfo.serializeBinaryToWriter
    );
  }
  f = this.getGroupbycolsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = this.getSrctablename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getOptions();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.xcalar.compute.localtypes.Dataflow.GroupByOptions.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.GroupByRequest} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.GroupByRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated AggColInfo aggArgs = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.xcalar.compute.localtypes.Dataflow.AggColInfo>}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByRequest.prototype.getAggargsList = function() {
  return /** @type{!Array.<!proto.xcalar.compute.localtypes.Dataflow.AggColInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.Dataflow.AggColInfo, 1));
};


/** @param {Array.<!proto.xcalar.compute.localtypes.Dataflow.AggColInfo>} value  */
proto.xcalar.compute.localtypes.Dataflow.GroupByRequest.prototype.setAggargsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.xcalar.compute.localtypes.Dataflow.GroupByRequest.prototype.clearAggargsList = function() {
  this.setAggargsList([]);
};


/**
 * repeated string groupByCols = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByRequest.prototype.getGroupbycolsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {Array.<string>} value  */
proto.xcalar.compute.localtypes.Dataflow.GroupByRequest.prototype.setGroupbycolsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


proto.xcalar.compute.localtypes.Dataflow.GroupByRequest.prototype.clearGroupbycolsList = function() {
  jspb.Message.setField(this, 2, []);
};


/**
 * optional string srcTableName = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByRequest.prototype.getSrctablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.GroupByRequest.prototype.setSrctablename = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional GroupByOptions options = 4;
 * @return {proto.xcalar.compute.localtypes.Dataflow.GroupByOptions}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByRequest.prototype.getOptions = function() {
  return /** @type{proto.xcalar.compute.localtypes.Dataflow.GroupByOptions} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.Dataflow.GroupByOptions, 4));
};


/** @param {proto.xcalar.compute.localtypes.Dataflow.GroupByOptions|undefined} value  */
proto.xcalar.compute.localtypes.Dataflow.GroupByRequest.prototype.setOptions = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.xcalar.compute.localtypes.Dataflow.GroupByRequest.prototype.clearOptions = function() {
  this.setOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByRequest.prototype.hasOptions = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Dataflow.GroupByResponse.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.GroupByResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.GroupByResponse.displayName = 'proto.xcalar.compute.localtypes.Dataflow.GroupByResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByResponse.repeatedFields_ = [3,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.GroupByResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.GroupByResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    querystr: msg.getQuerystr(),
    newtablename: msg.getNewtablename(),
    tempcolsList: jspb.Message.getField(msg, 3),
    newkeyfieldname: msg.getNewkeyfieldname(),
    newkeysList: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.GroupByResponse}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.GroupByResponse;
  return proto.xcalar.compute.localtypes.Dataflow.GroupByResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.GroupByResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.GroupByResponse}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuerystr(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewtablename(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.getTempcolsList().push(value);
      msg.setTempcolsList(msg.getTempcolsList());
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewkeyfieldname(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.getNewkeysList().push(value);
      msg.setNewkeysList(msg.getNewkeysList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.GroupByResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getQuerystr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getNewtablename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getTempcolsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = this.getNewkeyfieldname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getNewkeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.GroupByResponse} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.GroupByResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string queryStr = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByResponse.prototype.getQuerystr = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.GroupByResponse.prototype.setQuerystr = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string newTableName = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByResponse.prototype.getNewtablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.GroupByResponse.prototype.setNewtablename = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated string tempCols = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByResponse.prototype.getTempcolsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 3));
};


/** @param {Array.<string>} value  */
proto.xcalar.compute.localtypes.Dataflow.GroupByResponse.prototype.setTempcolsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


proto.xcalar.compute.localtypes.Dataflow.GroupByResponse.prototype.clearTempcolsList = function() {
  jspb.Message.setField(this, 3, []);
};


/**
 * optional string newKeyFieldName = 4;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByResponse.prototype.getNewkeyfieldname = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.GroupByResponse.prototype.setNewkeyfieldname = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated string newKeys = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.xcalar.compute.localtypes.Dataflow.GroupByResponse.prototype.getNewkeysList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 5));
};


/** @param {Array.<string>} value  */
proto.xcalar.compute.localtypes.Dataflow.GroupByResponse.prototype.setNewkeysList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


proto.xcalar.compute.localtypes.Dataflow.GroupByResponse.prototype.clearNewkeysList = function() {
  jspb.Message.setField(this, 5, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo.displayName = 'proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    orig: msg.getOrig(),
    pb_new: msg.getNew(),
    type: msg.getType()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo}
 */
proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo;
  return proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo}
 */
proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrig(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNew(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOrig();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getNew();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string orig = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo.prototype.getOrig = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo.prototype.setOrig = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string new = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo.prototype.getNew = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo.prototype.setNew = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo.prototype.setType = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.displayName = 'proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.repeatedFields_ = [2,3,4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    tablename: msg.getTablename(),
    columnsList: jspb.Message.getField(msg, 2),
    castsList: jspb.Message.getField(msg, 3),
    pulledcolumnsList: jspb.Message.getField(msg, 4),
    renameList: jspb.Message.toObjectList(msg.getRenameList(),
    proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo.toObject, includeInstance),
    allimmediatesList: jspb.Message.getField(msg, 6),
    removenulls: msg.getRemovenulls()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo;
  return proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTablename(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.getColumnsList().push(value);
      msg.setColumnsList(msg.getColumnsList());
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.getCastsList().push(value);
      msg.setCastsList(msg.getCastsList());
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.getPulledcolumnsList().push(value);
      msg.setPulledcolumnsList(msg.getPulledcolumnsList());
      break;
    case 5:
      var value = new proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo.deserializeBinaryFromReader);
      msg.getRenameList().push(value);
      msg.setRenameList(msg.getRenameList());
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.getAllimmediatesList().push(value);
      msg.setAllimmediatesList(msg.getAllimmediatesList());
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRemovenulls(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTablename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = this.getCastsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = this.getPulledcolumnsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = this.getRenameList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo.serializeBinaryToWriter
    );
  }
  f = this.getAllimmediatesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = this.getRemovenulls();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string tableName = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.prototype.getTablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.prototype.setTablename = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated string columns = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.prototype.getColumnsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {Array.<string>} value  */
proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.prototype.setColumnsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.prototype.clearColumnsList = function() {
  jspb.Message.setField(this, 2, []);
};


/**
 * repeated string casts = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.prototype.getCastsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 3));
};


/** @param {Array.<string>} value  */
proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.prototype.setCastsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.prototype.clearCastsList = function() {
  jspb.Message.setField(this, 3, []);
};


/**
 * repeated string pulledColumns = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.prototype.getPulledcolumnsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 4));
};


/** @param {Array.<string>} value  */
proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.prototype.setPulledcolumnsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.prototype.clearPulledcolumnsList = function() {
  jspb.Message.setField(this, 4, []);
};


/**
 * repeated ColRenameInfo rename = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo>}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.prototype.getRenameList = function() {
  return /** @type{!Array.<!proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo, 5));
};


/** @param {Array.<!proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo>} value  */
proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.prototype.setRenameList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.prototype.clearRenameList = function() {
  this.setRenameList([]);
};


/**
 * repeated string allImmediates = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.prototype.getAllimmediatesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 6));
};


/** @param {Array.<string>} value  */
proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.prototype.setAllimmediatesList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.prototype.clearAllimmediatesList = function() {
  jspb.Message.setField(this, 6, []);
};


/**
 * optional bool removeNulls = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.prototype.getRemovenulls = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 7, false));
};


/** @param {boolean} value  */
proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.prototype.setRemovenulls = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.JoinOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.JoinOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.JoinOptions.displayName = 'proto.xcalar.compute.localtypes.Dataflow.JoinOptions';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.JoinOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.JoinOptions} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    newtablename: msg.getNewtablename(),
    clean: msg.getClean(),
    evalstr: msg.getEvalstr(),
    existencecol: msg.getExistencecol(),
    keepallcolumns: msg.getKeepallcolumns()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.JoinOptions}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.JoinOptions;
  return proto.xcalar.compute.localtypes.Dataflow.JoinOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.JoinOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.JoinOptions}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewtablename(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setClean(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEvalstr(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setExistencecol(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setKeepallcolumns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.JoinOptions} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.JoinOptions.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.JoinOptions.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getNewtablename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getClean();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = this.getEvalstr();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getExistencecol();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getKeepallcolumns();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.JoinOptions} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.JoinOptions.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.JoinOptions} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string newTableName = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinOptions.prototype.getNewtablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.JoinOptions.prototype.setNewtablename = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool clean = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinOptions.prototype.getClean = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 2, false));
};


/** @param {boolean} value  */
proto.xcalar.compute.localtypes.Dataflow.JoinOptions.prototype.setClean = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string evalStr = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinOptions.prototype.getEvalstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.JoinOptions.prototype.setEvalstr = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string existenceCol = 4;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinOptions.prototype.getExistencecol = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.JoinOptions.prototype.setExistencecol = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool keepAllColumns = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinOptions.prototype.getKeepallcolumns = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 5, false));
};


/** @param {boolean} value  */
proto.xcalar.compute.localtypes.Dataflow.JoinOptions.prototype.setKeepallcolumns = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.JoinRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.JoinRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.JoinRequest.displayName = 'proto.xcalar.compute.localtypes.Dataflow.JoinRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.JoinRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.JoinRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    jointype: msg.getJointype(),
    ltableinfo: (f = msg.getLtableinfo()) && proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.toObject(includeInstance, f),
    rtableinfo: (f = msg.getRtableinfo()) && proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.toObject(includeInstance, f),
    options: (f = msg.getOptions()) && proto.xcalar.compute.localtypes.Dataflow.JoinOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.JoinRequest}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.JoinRequest;
  return proto.xcalar.compute.localtypes.Dataflow.JoinRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.JoinRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.JoinRequest}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setJointype(value);
      break;
    case 2:
      var value = new proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.deserializeBinaryFromReader);
      msg.setLtableinfo(value);
      break;
    case 3:
      var value = new proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.deserializeBinaryFromReader);
      msg.setRtableinfo(value);
      break;
    case 4:
      var value = new proto.xcalar.compute.localtypes.Dataflow.JoinOptions;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Dataflow.JoinOptions.deserializeBinaryFromReader);
      msg.setOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.JoinRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.JoinRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.JoinRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getJointype();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getLtableinfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.serializeBinaryToWriter
    );
  }
  f = this.getRtableinfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo.serializeBinaryToWriter
    );
  }
  f = this.getOptions();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.xcalar.compute.localtypes.Dataflow.JoinOptions.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.JoinRequest} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.JoinRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.JoinRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 joinType = 1;
 * @return {number}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinRequest.prototype.getJointype = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.xcalar.compute.localtypes.Dataflow.JoinRequest.prototype.setJointype = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional JoinTableInfo lTableInfo = 2;
 * @return {proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinRequest.prototype.getLtableinfo = function() {
  return /** @type{proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo, 2));
};


/** @param {proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo|undefined} value  */
proto.xcalar.compute.localtypes.Dataflow.JoinRequest.prototype.setLtableinfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.xcalar.compute.localtypes.Dataflow.JoinRequest.prototype.clearLtableinfo = function() {
  this.setLtableinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinRequest.prototype.hasLtableinfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional JoinTableInfo rTableInfo = 3;
 * @return {proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinRequest.prototype.getRtableinfo = function() {
  return /** @type{proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo, 3));
};


/** @param {proto.xcalar.compute.localtypes.Dataflow.JoinTableInfo|undefined} value  */
proto.xcalar.compute.localtypes.Dataflow.JoinRequest.prototype.setRtableinfo = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.xcalar.compute.localtypes.Dataflow.JoinRequest.prototype.clearRtableinfo = function() {
  this.setRtableinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinRequest.prototype.hasRtableinfo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional JoinOptions options = 4;
 * @return {proto.xcalar.compute.localtypes.Dataflow.JoinOptions}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinRequest.prototype.getOptions = function() {
  return /** @type{proto.xcalar.compute.localtypes.Dataflow.JoinOptions} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.Dataflow.JoinOptions, 4));
};


/** @param {proto.xcalar.compute.localtypes.Dataflow.JoinOptions|undefined} value  */
proto.xcalar.compute.localtypes.Dataflow.JoinRequest.prototype.setOptions = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.xcalar.compute.localtypes.Dataflow.JoinRequest.prototype.clearOptions = function() {
  this.setOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinRequest.prototype.hasOptions = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.JoinResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Dataflow.JoinResponse.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.JoinResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.JoinResponse.displayName = 'proto.xcalar.compute.localtypes.Dataflow.JoinResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Dataflow.JoinResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.JoinResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.JoinResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    querystr: msg.getQuerystr(),
    newtablename: msg.getNewtablename(),
    tempcolsList: jspb.Message.getField(msg, 3),
    lrename: (f = msg.getLrename()) && proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo.toObject(includeInstance, f),
    rrename: (f = msg.getRrename()) && proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.JoinResponse}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.JoinResponse;
  return proto.xcalar.compute.localtypes.Dataflow.JoinResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.JoinResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.JoinResponse}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuerystr(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewtablename(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.getTempcolsList().push(value);
      msg.setTempcolsList(msg.getTempcolsList());
      break;
    case 4:
      var value = new proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo.deserializeBinaryFromReader);
      msg.setLrename(value);
      break;
    case 5:
      var value = new proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo.deserializeBinaryFromReader);
      msg.setRrename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.JoinResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.JoinResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.JoinResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getQuerystr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getNewtablename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getTempcolsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = this.getLrename();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo.serializeBinaryToWriter
    );
  }
  f = this.getRrename();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.JoinResponse} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.JoinResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.JoinResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string queryStr = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinResponse.prototype.getQuerystr = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.JoinResponse.prototype.setQuerystr = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string newTableName = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinResponse.prototype.getNewtablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.JoinResponse.prototype.setNewtablename = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated string tempCols = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinResponse.prototype.getTempcolsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 3));
};


/** @param {Array.<string>} value  */
proto.xcalar.compute.localtypes.Dataflow.JoinResponse.prototype.setTempcolsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


proto.xcalar.compute.localtypes.Dataflow.JoinResponse.prototype.clearTempcolsList = function() {
  jspb.Message.setField(this, 3, []);
};


/**
 * optional ColRenameInfo lRename = 4;
 * @return {proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinResponse.prototype.getLrename = function() {
  return /** @type{proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo, 4));
};


/** @param {proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo|undefined} value  */
proto.xcalar.compute.localtypes.Dataflow.JoinResponse.prototype.setLrename = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.xcalar.compute.localtypes.Dataflow.JoinResponse.prototype.clearLrename = function() {
  this.setLrename(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinResponse.prototype.hasLrename = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ColRenameInfo rRename = 5;
 * @return {proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinResponse.prototype.getRrename = function() {
  return /** @type{proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo, 5));
};


/** @param {proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo|undefined} value  */
proto.xcalar.compute.localtypes.Dataflow.JoinResponse.prototype.setRrename = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.xcalar.compute.localtypes.Dataflow.JoinResponse.prototype.clearRrename = function() {
  this.setRrename(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.xcalar.compute.localtypes.Dataflow.JoinResponse.prototype.hasRrename = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.UnionColInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.UnionColInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.UnionColInfo.displayName = 'proto.xcalar.compute.localtypes.Dataflow.UnionColInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionColInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.UnionColInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.UnionColInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionColInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName(),
    rename: msg.getRename(),
    type: msg.getType(),
    cast: msg.getCast()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.UnionColInfo}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionColInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.UnionColInfo;
  return proto.xcalar.compute.localtypes.Dataflow.UnionColInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.UnionColInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.UnionColInfo}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionColInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRename(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCast(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.UnionColInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.UnionColInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionColInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.UnionColInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getRename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getCast();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.UnionColInfo} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.UnionColInfo.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.UnionColInfo} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionColInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.UnionColInfo.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string rename = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionColInfo.prototype.getRename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.UnionColInfo.prototype.setRename = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionColInfo.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.UnionColInfo.prototype.setType = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool cast = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionColInfo.prototype.getCast = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 4, false));
};


/** @param {boolean} value  */
proto.xcalar.compute.localtypes.Dataflow.UnionColInfo.prototype.setCast = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo.displayName = 'proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    tablename: msg.getTablename(),
    columnsList: jspb.Message.toObjectList(msg.getColumnsList(),
    proto.xcalar.compute.localtypes.Dataflow.UnionColInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo;
  return proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTablename(value);
      break;
    case 2:
      var value = new proto.xcalar.compute.localtypes.Dataflow.UnionColInfo;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Dataflow.UnionColInfo.deserializeBinaryFromReader);
      msg.getColumnsList().push(value);
      msg.setColumnsList(msg.getColumnsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTablename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.xcalar.compute.localtypes.Dataflow.UnionColInfo.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string tableName = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo.prototype.getTablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo.prototype.setTablename = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated UnionColInfo columns = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.xcalar.compute.localtypes.Dataflow.UnionColInfo>}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo.prototype.getColumnsList = function() {
  return /** @type{!Array.<!proto.xcalar.compute.localtypes.Dataflow.UnionColInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.Dataflow.UnionColInfo, 2));
};


/** @param {Array.<!proto.xcalar.compute.localtypes.Dataflow.UnionColInfo>} value  */
proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo.prototype.setColumnsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo.prototype.clearColumnsList = function() {
  this.setColumnsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.UnionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Dataflow.UnionRequest.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.UnionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.UnionRequest.displayName = 'proto.xcalar.compute.localtypes.Dataflow.UnionRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Dataflow.UnionRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.UnionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.UnionRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableinfosList: jspb.Message.toObjectList(msg.getTableinfosList(),
    proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo.toObject, includeInstance),
    dedup: msg.getDedup(),
    newtablename: msg.getNewtablename(),
    uniontype: msg.getUniontype()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.UnionRequest}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.UnionRequest;
  return proto.xcalar.compute.localtypes.Dataflow.UnionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.UnionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.UnionRequest}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo.deserializeBinaryFromReader);
      msg.getTableinfosList().push(value);
      msg.setTableinfosList(msg.getTableinfosList());
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDedup(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewtablename(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUniontype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.UnionRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.UnionRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.UnionRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTableinfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo.serializeBinaryToWriter
    );
  }
  f = this.getDedup();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = this.getNewtablename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getUniontype();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.UnionRequest} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.UnionRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.UnionRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated UnionTableInfo tableInfos = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo>}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionRequest.prototype.getTableinfosList = function() {
  return /** @type{!Array.<!proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo, 1));
};


/** @param {Array.<!proto.xcalar.compute.localtypes.Dataflow.UnionTableInfo>} value  */
proto.xcalar.compute.localtypes.Dataflow.UnionRequest.prototype.setTableinfosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.xcalar.compute.localtypes.Dataflow.UnionRequest.prototype.clearTableinfosList = function() {
  this.setTableinfosList([]);
};


/**
 * optional bool dedup = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionRequest.prototype.getDedup = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 2, false));
};


/** @param {boolean} value  */
proto.xcalar.compute.localtypes.Dataflow.UnionRequest.prototype.setDedup = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string newTableName = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionRequest.prototype.getNewtablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.UnionRequest.prototype.setNewtablename = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 unionType = 4;
 * @return {number}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionRequest.prototype.getUniontype = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.xcalar.compute.localtypes.Dataflow.UnionRequest.prototype.setUniontype = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.UnionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Dataflow.UnionResponse.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.UnionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.UnionResponse.displayName = 'proto.xcalar.compute.localtypes.Dataflow.UnionResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Dataflow.UnionResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.UnionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.UnionResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    querystr: msg.getQuerystr(),
    newtablename: msg.getNewtablename(),
    newtablecolsList: jspb.Message.toObjectList(msg.getNewtablecolsList(),
    proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.UnionResponse}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.UnionResponse;
  return proto.xcalar.compute.localtypes.Dataflow.UnionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.UnionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.UnionResponse}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuerystr(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewtablename(value);
      break;
    case 3:
      var value = new proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo.deserializeBinaryFromReader);
      msg.getNewtablecolsList().push(value);
      msg.setNewtablecolsList(msg.getNewtablecolsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.UnionResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.UnionResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.UnionResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getQuerystr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getNewtablename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getNewtablecolsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.UnionResponse} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.UnionResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.UnionResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string queryStr = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionResponse.prototype.getQuerystr = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.UnionResponse.prototype.setQuerystr = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string newTableName = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionResponse.prototype.getNewtablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.UnionResponse.prototype.setNewtablename = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated RenameInfo newTableCols = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo>}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionResponse.prototype.getNewtablecolsList = function() {
  return /** @type{!Array.<!proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo, 3));
};


/** @param {Array.<!proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo>} value  */
proto.xcalar.compute.localtypes.Dataflow.UnionResponse.prototype.setNewtablecolsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


proto.xcalar.compute.localtypes.Dataflow.UnionResponse.prototype.clearNewtablecolsList = function() {
  this.setNewtablecolsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo.displayName = 'proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    rename: msg.getRename(),
    type: msg.getType()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo;
  return proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRename(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string rename = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo.prototype.getRename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo.prototype.setRename = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.UnionResponse.RenameInfo.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.IndexRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Dataflow.IndexRequest.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.IndexRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.IndexRequest.displayName = 'proto.xcalar.compute.localtypes.Dataflow.IndexRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Dataflow.IndexRequest.repeatedFields_ = [1,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.IndexRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.IndexRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    colnamesList: jspb.Message.getField(msg, 1),
    srctablename: msg.getSrctablename(),
    dsttablename: msg.getDsttablename(),
    newkeysList: jspb.Message.getField(msg, 4),
    dhtname: msg.getDhtname()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.IndexRequest}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.IndexRequest;
  return proto.xcalar.compute.localtypes.Dataflow.IndexRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.IndexRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.IndexRequest}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.getColnamesList().push(value);
      msg.setColnamesList(msg.getColnamesList());
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrctablename(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDsttablename(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.getNewkeysList().push(value);
      msg.setNewkeysList(msg.getNewkeysList());
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDhtname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.IndexRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.IndexRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.IndexRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getColnamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = this.getSrctablename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getDsttablename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getNewkeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = this.getDhtname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.IndexRequest} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.IndexRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.IndexRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated string colNames = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexRequest.prototype.getColnamesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<string>} value  */
proto.xcalar.compute.localtypes.Dataflow.IndexRequest.prototype.setColnamesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.xcalar.compute.localtypes.Dataflow.IndexRequest.prototype.clearColnamesList = function() {
  jspb.Message.setField(this, 1, []);
};


/**
 * optional string srcTableName = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexRequest.prototype.getSrctablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.IndexRequest.prototype.setSrctablename = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string dstTableName = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexRequest.prototype.getDsttablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.IndexRequest.prototype.setDsttablename = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated string newKeys = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexRequest.prototype.getNewkeysList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 4));
};


/** @param {Array.<string>} value  */
proto.xcalar.compute.localtypes.Dataflow.IndexRequest.prototype.setNewkeysList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


proto.xcalar.compute.localtypes.Dataflow.IndexRequest.prototype.clearNewkeysList = function() {
  jspb.Message.setField(this, 4, []);
};


/**
 * optional string dhtName = 5;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexRequest.prototype.getDhtname = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.IndexRequest.prototype.setDhtname = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.IndexResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Dataflow.IndexResponse.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.IndexResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.IndexResponse.displayName = 'proto.xcalar.compute.localtypes.Dataflow.IndexResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Dataflow.IndexResponse.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.IndexResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.IndexResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    querystr: msg.getQuerystr(),
    newtablename: msg.getNewtablename(),
    iscache: msg.getIscache(),
    newkeysList: jspb.Message.getField(msg, 4),
    tmpcolsList: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.IndexResponse}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.IndexResponse;
  return proto.xcalar.compute.localtypes.Dataflow.IndexResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.IndexResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.IndexResponse}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuerystr(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewtablename(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIscache(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.getNewkeysList().push(value);
      msg.setNewkeysList(msg.getNewkeysList());
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.getTmpcolsList().push(value);
      msg.setTmpcolsList(msg.getTmpcolsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.IndexResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.IndexResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.IndexResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getQuerystr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getNewtablename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getIscache();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = this.getNewkeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = this.getTmpcolsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.IndexResponse} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.IndexResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.IndexResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string queryStr = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexResponse.prototype.getQuerystr = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.IndexResponse.prototype.setQuerystr = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string newTableName = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexResponse.prototype.getNewtablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.IndexResponse.prototype.setNewtablename = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool isCache = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexResponse.prototype.getIscache = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 3, false));
};


/** @param {boolean} value  */
proto.xcalar.compute.localtypes.Dataflow.IndexResponse.prototype.setIscache = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated string newKeys = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexResponse.prototype.getNewkeysList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 4));
};


/** @param {Array.<string>} value  */
proto.xcalar.compute.localtypes.Dataflow.IndexResponse.prototype.setNewkeysList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


proto.xcalar.compute.localtypes.Dataflow.IndexResponse.prototype.clearNewkeysList = function() {
  jspb.Message.setField(this, 4, []);
};


/**
 * repeated string tmpCols = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexResponse.prototype.getTmpcolsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 5));
};


/** @param {Array.<string>} value  */
proto.xcalar.compute.localtypes.Dataflow.IndexResponse.prototype.setTmpcolsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


proto.xcalar.compute.localtypes.Dataflow.IndexResponse.prototype.clearTmpcolsList = function() {
  jspb.Message.setField(this, 5, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetRequest.displayName = 'proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dsname: msg.getDsname(),
    dsttablename: msg.getDsttablename(),
    prefix: msg.getPrefix()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetRequest}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetRequest;
  return proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetRequest}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDsname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDsttablename(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrefix(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDsname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getDsttablename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getPrefix();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetRequest} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string dsName = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetRequest.prototype.getDsname = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetRequest.prototype.setDsname = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string dstTableName = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetRequest.prototype.getDsttablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetRequest.prototype.setDsttablename = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string prefix = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetRequest.prototype.getPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetRequest.prototype.setPrefix = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetResponse.displayName = 'proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    querystr: msg.getQuerystr(),
    newtablename: msg.getNewtablename(),
    prefix: msg.getPrefix()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetResponse}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetResponse;
  return proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetResponse}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuerystr(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewtablename(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrefix(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getQuerystr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getNewtablename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getPrefix();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetResponse} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string queryStr = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetResponse.prototype.getQuerystr = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetResponse.prototype.setQuerystr = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string newTableName = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetResponse.prototype.getNewtablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetResponse.prototype.setNewtablename = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string prefix = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetResponse.prototype.getPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.IndexFromDatasetResponse.prototype.setPrefix = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.SortRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Dataflow.SortRequest.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.SortRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.SortRequest.displayName = 'proto.xcalar.compute.localtypes.Dataflow.SortRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.SortRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.SortRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyinfosList: jspb.Message.toObjectList(msg.getKeyinfosList(),
    proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo.toObject, includeInstance),
    srctablename: msg.getSrctablename(),
    dsttablename: msg.getDsttablename(),
    dhtname: msg.getDhtname()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.SortRequest}
 */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.SortRequest;
  return proto.xcalar.compute.localtypes.Dataflow.SortRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.SortRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.SortRequest}
 */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo.deserializeBinaryFromReader);
      msg.getKeyinfosList().push(value);
      msg.setKeyinfosList(msg.getKeyinfosList());
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrctablename(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDsttablename(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDhtname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.SortRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getKeyinfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo.serializeBinaryToWriter
    );
  }
  f = this.getSrctablename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getDsttablename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getDhtname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.SortRequest} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.SortRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated keyInfo keyInfos = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo>}
 */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.prototype.getKeyinfosList = function() {
  return /** @type{!Array.<!proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo, 1));
};


/** @param {Array.<!proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo>} value  */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.prototype.setKeyinfosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.xcalar.compute.localtypes.Dataflow.SortRequest.prototype.clearKeyinfosList = function() {
  this.setKeyinfosList([]);
};


/**
 * optional string srcTableName = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.prototype.getSrctablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.prototype.setSrctablename = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string dstTableName = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.prototype.getDsttablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.prototype.setDsttablename = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string dhtName = 4;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.prototype.getDhtname = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.prototype.setDhtname = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo.displayName = 'proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName(),
    ordering: msg.getOrdering(),
    type: msg.getType()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo}
 */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo;
  return proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo}
 */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOrdering(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getOrdering();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 ordering = 2;
 * @return {number}
 */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo.prototype.getOrdering = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo.prototype.setOrdering = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.SortRequest.keyInfo.prototype.setType = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.SortResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Dataflow.SortResponse.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.SortResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.SortResponse.displayName = 'proto.xcalar.compute.localtypes.Dataflow.SortResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Dataflow.SortResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.SortResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.SortResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.SortResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.SortResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    querystr: msg.getQuerystr(),
    newtablename: msg.getNewtablename(),
    newkeysList: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.SortResponse}
 */
proto.xcalar.compute.localtypes.Dataflow.SortResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.SortResponse;
  return proto.xcalar.compute.localtypes.Dataflow.SortResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.SortResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.SortResponse}
 */
proto.xcalar.compute.localtypes.Dataflow.SortResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuerystr(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewtablename(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.getNewkeysList().push(value);
      msg.setNewkeysList(msg.getNewkeysList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.SortResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.SortResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.SortResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.SortResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getQuerystr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getNewtablename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getNewkeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.SortResponse} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.SortResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.SortResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string queryStr = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.SortResponse.prototype.getQuerystr = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.SortResponse.prototype.setQuerystr = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string newTableName = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.SortResponse.prototype.getNewtablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.SortResponse.prototype.setNewtablename = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated string newKeys = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.xcalar.compute.localtypes.Dataflow.SortResponse.prototype.getNewkeysList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 3));
};


/** @param {Array.<string>} value  */
proto.xcalar.compute.localtypes.Dataflow.SortResponse.prototype.setNewkeysList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


proto.xcalar.compute.localtypes.Dataflow.SortResponse.prototype.clearNewkeysList = function() {
  jspb.Message.setField(this, 3, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest.displayName = 'proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    colinfosList: jspb.Message.toObjectList(msg.getColinfosList(),
    proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo.toObject, includeInstance),
    srctablename: msg.getSrctablename(),
    dsttablename: msg.getDsttablename(),
    samesession: msg.getSamesession()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest}
 */
proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest;
  return proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest}
 */
proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo.deserializeBinaryFromReader);
      msg.getColinfosList().push(value);
      msg.setColinfosList(msg.getColinfosList());
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrctablename(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDsttablename(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSamesession(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getColinfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo.serializeBinaryToWriter
    );
  }
  f = this.getSrctablename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getDsttablename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getSamesession();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated ColRenameInfo colInfos = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo>}
 */
proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest.prototype.getColinfosList = function() {
  return /** @type{!Array.<!proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo, 1));
};


/** @param {Array.<!proto.xcalar.compute.localtypes.Dataflow.ColRenameInfo>} value  */
proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest.prototype.setColinfosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest.prototype.clearColinfosList = function() {
  this.setColinfosList([]);
};


/**
 * optional string srcTableName = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest.prototype.getSrctablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest.prototype.setSrctablename = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string dstTableName = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest.prototype.getDsttablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest.prototype.setDsttablename = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool sameSession = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest.prototype.getSamesession = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 4, false));
};


/** @param {boolean} value  */
proto.xcalar.compute.localtypes.Dataflow.SynthesizeRequest.prototype.setSamesession = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Dataflow.SynthesizeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Dataflow.SynthesizeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Dataflow.SynthesizeResponse.displayName = 'proto.xcalar.compute.localtypes.Dataflow.SynthesizeResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.SynthesizeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Dataflow.SynthesizeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Dataflow.SynthesizeResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Dataflow.SynthesizeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    querystr: msg.getQuerystr(),
    newtablename: msg.getNewtablename()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.SynthesizeResponse}
 */
proto.xcalar.compute.localtypes.Dataflow.SynthesizeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Dataflow.SynthesizeResponse;
  return proto.xcalar.compute.localtypes.Dataflow.SynthesizeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.SynthesizeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.SynthesizeResponse}
 */
proto.xcalar.compute.localtypes.Dataflow.SynthesizeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuerystr(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewtablename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Dataflow.SynthesizeResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.SynthesizeResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Dataflow.SynthesizeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Dataflow.SynthesizeResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getQuerystr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getNewtablename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Dataflow.SynthesizeResponse} The clone.
 */
proto.xcalar.compute.localtypes.Dataflow.SynthesizeResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Dataflow.SynthesizeResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string queryStr = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.SynthesizeResponse.prototype.getQuerystr = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.SynthesizeResponse.prototype.setQuerystr = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string newTableName = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Dataflow.SynthesizeResponse.prototype.getNewtablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Dataflow.SynthesizeResponse.prototype.setNewtablename = function(value) {
  jspb.Message.setField(this, 2, value);
};


goog.object.extend(exports, proto.xcalar.compute.localtypes.Dataflow);
