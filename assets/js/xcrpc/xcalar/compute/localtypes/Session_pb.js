/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var xcalar_compute_localtypes_Workbook_pb = require('../../../xcalar/compute/localtypes/Workbook_pb.js');
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.exportSymbol('proto.xcalar.compute.localtypes.Session.ActivateRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Session.ActivateResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Session.CreateRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Session.CreateResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Session.DeleteRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Session.ListRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Session.ListResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Session.SessionArg', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Session.SessionGenericOutput', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Session.SessionInfoInput', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Session.SessionNewInput', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Session.SessionNewOutput', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Session.SessionUploadPayload', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Session.UploadRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Session.UploadResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Session.SessionArg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Session.SessionArg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Session.SessionArg.displayName = 'proto.xcalar.compute.localtypes.Session.SessionArg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Session.SessionArg.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Session.SessionArg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Session.SessionArg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Session.SessionArg.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    state: jspb.Message.getFieldWithDefault(msg, 3, ""),
    info: jspb.Message.getFieldWithDefault(msg, 4, ""),
    activeNode: jspb.Message.getFieldWithDefault(msg, 5, 0),
    description: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Session.SessionArg}
 */
proto.xcalar.compute.localtypes.Session.SessionArg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Session.SessionArg;
  return proto.xcalar.compute.localtypes.Session.SessionArg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Session.SessionArg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Session.SessionArg}
 */
proto.xcalar.compute.localtypes.Session.SessionArg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSessionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfo(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setActiveNode(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Session.SessionArg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Session.SessionArg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Session.SessionArg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Session.SessionArg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInfo();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getActiveNode();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional uint64 session_id = 1;
 * @return {number}
 */
proto.xcalar.compute.localtypes.Session.SessionArg.prototype.getSessionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.Session.SessionArg.prototype.setSessionId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Session.SessionArg.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Session.SessionArg.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string state = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Session.SessionArg.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Session.SessionArg.prototype.setState = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string info = 4;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Session.SessionArg.prototype.getInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Session.SessionArg.prototype.setInfo = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 active_node = 5;
 * @return {number}
 */
proto.xcalar.compute.localtypes.Session.SessionArg.prototype.getActiveNode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.Session.SessionArg.prototype.setActiveNode = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string description = 6;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Session.SessionArg.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Session.SessionArg.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Session.SessionGenericOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Session.SessionGenericOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Session.SessionGenericOutput.displayName = 'proto.xcalar.compute.localtypes.Session.SessionGenericOutput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Session.SessionGenericOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Session.SessionGenericOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Session.SessionGenericOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Session.SessionGenericOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    outputAdded: jspb.Message.getFieldWithDefault(msg, 1, false),
    nodeId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ipAddr: jspb.Message.getFieldWithDefault(msg, 3, ""),
    errorMessage: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Session.SessionGenericOutput}
 */
proto.xcalar.compute.localtypes.Session.SessionGenericOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Session.SessionGenericOutput;
  return proto.xcalar.compute.localtypes.Session.SessionGenericOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Session.SessionGenericOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Session.SessionGenericOutput}
 */
proto.xcalar.compute.localtypes.Session.SessionGenericOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOutputAdded(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNodeId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpAddr(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Session.SessionGenericOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Session.SessionGenericOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Session.SessionGenericOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Session.SessionGenericOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutputAdded();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getNodeId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getIpAddr();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional bool output_added = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Session.SessionGenericOutput.prototype.getOutputAdded = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.xcalar.compute.localtypes.Session.SessionGenericOutput.prototype.setOutputAdded = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional uint64 node_id = 2;
 * @return {number}
 */
proto.xcalar.compute.localtypes.Session.SessionGenericOutput.prototype.getNodeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.Session.SessionGenericOutput.prototype.setNodeId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string ip_addr = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Session.SessionGenericOutput.prototype.getIpAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Session.SessionGenericOutput.prototype.setIpAddr = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string error_message = 4;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Session.SessionGenericOutput.prototype.getErrorMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Session.SessionGenericOutput.prototype.setErrorMessage = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Session.SessionNewInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Session.SessionNewInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Session.SessionNewInput.displayName = 'proto.xcalar.compute.localtypes.Session.SessionNewInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Session.SessionNewInput.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Session.SessionNewInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Session.SessionNewInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Session.SessionNewInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fork: jspb.Message.getFieldWithDefault(msg, 2, false),
    forkedSessionName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Session.SessionNewInput}
 */
proto.xcalar.compute.localtypes.Session.SessionNewInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Session.SessionNewInput;
  return proto.xcalar.compute.localtypes.Session.SessionNewInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Session.SessionNewInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Session.SessionNewInput}
 */
proto.xcalar.compute.localtypes.Session.SessionNewInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFork(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setForkedSessionName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Session.SessionNewInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Session.SessionNewInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Session.SessionNewInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Session.SessionNewInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFork();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getForkedSessionName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string session_name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Session.SessionNewInput.prototype.getSessionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Session.SessionNewInput.prototype.setSessionName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool fork = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Session.SessionNewInput.prototype.getFork = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.xcalar.compute.localtypes.Session.SessionNewInput.prototype.setFork = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string forked_session_name = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Session.SessionNewInput.prototype.getForkedSessionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Session.SessionNewInput.prototype.setForkedSessionName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Session.SessionInfoInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Session.SessionInfoInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Session.SessionInfoInput.displayName = 'proto.xcalar.compute.localtypes.Session.SessionInfoInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Session.SessionInfoInput.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Session.SessionInfoInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Session.SessionInfoInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Session.SessionInfoInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sessionName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Session.SessionInfoInput}
 */
proto.xcalar.compute.localtypes.Session.SessionInfoInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Session.SessionInfoInput;
  return proto.xcalar.compute.localtypes.Session.SessionInfoInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Session.SessionInfoInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Session.SessionInfoInput}
 */
proto.xcalar.compute.localtypes.Session.SessionInfoInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSessionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Session.SessionInfoInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Session.SessionInfoInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Session.SessionInfoInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Session.SessionInfoInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getSessionName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint64 session_id = 1;
 * @return {number}
 */
proto.xcalar.compute.localtypes.Session.SessionInfoInput.prototype.getSessionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.Session.SessionInfoInput.prototype.setSessionId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string session_name = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Session.SessionInfoInput.prototype.getSessionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Session.SessionInfoInput.prototype.setSessionName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Session.SessionNewOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Session.SessionNewOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Session.SessionNewOutput.displayName = 'proto.xcalar.compute.localtypes.Session.SessionNewOutput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Session.SessionNewOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Session.SessionNewOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Session.SessionNewOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Session.SessionNewOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionGenericOutput: (f = msg.getSessionGenericOutput()) && proto.xcalar.compute.localtypes.Session.SessionGenericOutput.toObject(includeInstance, f),
    sessionId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    error: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Session.SessionNewOutput}
 */
proto.xcalar.compute.localtypes.Session.SessionNewOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Session.SessionNewOutput;
  return proto.xcalar.compute.localtypes.Session.SessionNewOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Session.SessionNewOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Session.SessionNewOutput}
 */
proto.xcalar.compute.localtypes.Session.SessionNewOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.Session.SessionGenericOutput;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Session.SessionGenericOutput.deserializeBinaryFromReader);
      msg.setSessionGenericOutput(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSessionId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Session.SessionNewOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Session.SessionNewOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Session.SessionNewOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Session.SessionNewOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionGenericOutput();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.Session.SessionGenericOutput.serializeBinaryToWriter
    );
  }
  f = message.getSessionId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional SessionGenericOutput session_generic_output = 1;
 * @return {?proto.xcalar.compute.localtypes.Session.SessionGenericOutput}
 */
proto.xcalar.compute.localtypes.Session.SessionNewOutput.prototype.getSessionGenericOutput = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Session.SessionGenericOutput} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.Session.SessionGenericOutput, 1));
};


/** @param {?proto.xcalar.compute.localtypes.Session.SessionGenericOutput|undefined} value */
proto.xcalar.compute.localtypes.Session.SessionNewOutput.prototype.setSessionGenericOutput = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xcalar.compute.localtypes.Session.SessionNewOutput.prototype.clearSessionGenericOutput = function() {
  this.setSessionGenericOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.Session.SessionNewOutput.prototype.hasSessionGenericOutput = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 session_id = 2;
 * @return {number}
 */
proto.xcalar.compute.localtypes.Session.SessionNewOutput.prototype.getSessionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.Session.SessionNewOutput.prototype.setSessionId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string error = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Session.SessionNewOutput.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Session.SessionNewOutput.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Session.SessionUploadPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Session.SessionUploadPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Session.SessionUploadPayload.displayName = 'proto.xcalar.compute.localtypes.Session.SessionUploadPayload';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Session.SessionUploadPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Session.SessionUploadPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Session.SessionUploadPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Session.SessionUploadPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathToAdditionalFiles: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sessionContent: msg.getSessionContent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Session.SessionUploadPayload}
 */
proto.xcalar.compute.localtypes.Session.SessionUploadPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Session.SessionUploadPayload;
  return proto.xcalar.compute.localtypes.Session.SessionUploadPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Session.SessionUploadPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Session.SessionUploadPayload}
 */
proto.xcalar.compute.localtypes.Session.SessionUploadPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPathToAdditionalFiles(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSessionContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Session.SessionUploadPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Session.SessionUploadPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Session.SessionUploadPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Session.SessionUploadPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathToAdditionalFiles();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSessionContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string path_to_additional_files = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Session.SessionUploadPayload.prototype.getPathToAdditionalFiles = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Session.SessionUploadPayload.prototype.setPathToAdditionalFiles = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes session_content = 2;
 * @return {!(string|Uint8Array)}
 */
proto.xcalar.compute.localtypes.Session.SessionUploadPayload.prototype.getSessionContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes session_content = 2;
 * This is a type-conversion wrapper around `getSessionContent()`
 * @return {string}
 */
proto.xcalar.compute.localtypes.Session.SessionUploadPayload.prototype.getSessionContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSessionContent()));
};


/**
 * optional bytes session_content = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSessionContent()`
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Session.SessionUploadPayload.prototype.getSessionContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSessionContent()));
};


/** @param {!(string|Uint8Array)} value */
proto.xcalar.compute.localtypes.Session.SessionUploadPayload.prototype.setSessionContent = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Session.CreateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Session.CreateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Session.CreateRequest.displayName = 'proto.xcalar.compute.localtypes.Session.CreateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Session.CreateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Session.CreateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Session.CreateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Session.CreateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f),
    sessionNewInput: (f = msg.getSessionNewInput()) && proto.xcalar.compute.localtypes.Session.SessionNewInput.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Session.CreateRequest}
 */
proto.xcalar.compute.localtypes.Session.CreateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Session.CreateRequest;
  return proto.xcalar.compute.localtypes.Session.CreateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Session.CreateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Session.CreateRequest}
 */
proto.xcalar.compute.localtypes.Session.CreateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    case 2:
      var value = new proto.xcalar.compute.localtypes.Session.SessionNewInput;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Session.SessionNewInput.deserializeBinaryFromReader);
      msg.setSessionNewInput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Session.CreateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Session.CreateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Session.CreateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Session.CreateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
  f = message.getSessionNewInput();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.xcalar.compute.localtypes.Session.SessionNewInput.serializeBinaryToWriter
    );
  }
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 1;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.Session.CreateRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 1));
};


/** @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value */
proto.xcalar.compute.localtypes.Session.CreateRequest.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xcalar.compute.localtypes.Session.CreateRequest.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.Session.CreateRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SessionNewInput session_new_input = 2;
 * @return {?proto.xcalar.compute.localtypes.Session.SessionNewInput}
 */
proto.xcalar.compute.localtypes.Session.CreateRequest.prototype.getSessionNewInput = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Session.SessionNewInput} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.Session.SessionNewInput, 2));
};


/** @param {?proto.xcalar.compute.localtypes.Session.SessionNewInput|undefined} value */
proto.xcalar.compute.localtypes.Session.CreateRequest.prototype.setSessionNewInput = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.xcalar.compute.localtypes.Session.CreateRequest.prototype.clearSessionNewInput = function() {
  this.setSessionNewInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.Session.CreateRequest.prototype.hasSessionNewInput = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Session.CreateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Session.CreateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Session.CreateResponse.displayName = 'proto.xcalar.compute.localtypes.Session.CreateResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Session.CreateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Session.CreateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Session.CreateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Session.CreateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionNewOutput: (f = msg.getSessionNewOutput()) && proto.xcalar.compute.localtypes.Session.SessionNewOutput.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Session.CreateResponse}
 */
proto.xcalar.compute.localtypes.Session.CreateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Session.CreateResponse;
  return proto.xcalar.compute.localtypes.Session.CreateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Session.CreateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Session.CreateResponse}
 */
proto.xcalar.compute.localtypes.Session.CreateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.Session.SessionNewOutput;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Session.SessionNewOutput.deserializeBinaryFromReader);
      msg.setSessionNewOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Session.CreateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Session.CreateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Session.CreateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Session.CreateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionNewOutput();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.Session.SessionNewOutput.serializeBinaryToWriter
    );
  }
};


/**
 * optional SessionNewOutput session_new_output = 1;
 * @return {?proto.xcalar.compute.localtypes.Session.SessionNewOutput}
 */
proto.xcalar.compute.localtypes.Session.CreateResponse.prototype.getSessionNewOutput = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Session.SessionNewOutput} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.Session.SessionNewOutput, 1));
};


/** @param {?proto.xcalar.compute.localtypes.Session.SessionNewOutput|undefined} value */
proto.xcalar.compute.localtypes.Session.CreateResponse.prototype.setSessionNewOutput = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xcalar.compute.localtypes.Session.CreateResponse.prototype.clearSessionNewOutput = function() {
  this.setSessionNewOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.Session.CreateResponse.prototype.hasSessionNewOutput = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Session.ActivateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Session.ActivateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Session.ActivateRequest.displayName = 'proto.xcalar.compute.localtypes.Session.ActivateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Session.ActivateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Session.ActivateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Session.ActivateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Session.ActivateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f),
    sessionInfoInput: (f = msg.getSessionInfoInput()) && proto.xcalar.compute.localtypes.Session.SessionInfoInput.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Session.ActivateRequest}
 */
proto.xcalar.compute.localtypes.Session.ActivateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Session.ActivateRequest;
  return proto.xcalar.compute.localtypes.Session.ActivateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Session.ActivateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Session.ActivateRequest}
 */
proto.xcalar.compute.localtypes.Session.ActivateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    case 2:
      var value = new proto.xcalar.compute.localtypes.Session.SessionInfoInput;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Session.SessionInfoInput.deserializeBinaryFromReader);
      msg.setSessionInfoInput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Session.ActivateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Session.ActivateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Session.ActivateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Session.ActivateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
  f = message.getSessionInfoInput();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.xcalar.compute.localtypes.Session.SessionInfoInput.serializeBinaryToWriter
    );
  }
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 1;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.Session.ActivateRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 1));
};


/** @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value */
proto.xcalar.compute.localtypes.Session.ActivateRequest.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xcalar.compute.localtypes.Session.ActivateRequest.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.Session.ActivateRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SessionInfoInput session_info_input = 2;
 * @return {?proto.xcalar.compute.localtypes.Session.SessionInfoInput}
 */
proto.xcalar.compute.localtypes.Session.ActivateRequest.prototype.getSessionInfoInput = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Session.SessionInfoInput} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.Session.SessionInfoInput, 2));
};


/** @param {?proto.xcalar.compute.localtypes.Session.SessionInfoInput|undefined} value */
proto.xcalar.compute.localtypes.Session.ActivateRequest.prototype.setSessionInfoInput = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.xcalar.compute.localtypes.Session.ActivateRequest.prototype.clearSessionInfoInput = function() {
  this.setSessionInfoInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.Session.ActivateRequest.prototype.hasSessionInfoInput = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Session.ActivateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Session.ActivateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Session.ActivateResponse.displayName = 'proto.xcalar.compute.localtypes.Session.ActivateResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Session.ActivateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Session.ActivateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Session.ActivateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Session.ActivateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionGenericOutput: (f = msg.getSessionGenericOutput()) && proto.xcalar.compute.localtypes.Session.SessionGenericOutput.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Session.ActivateResponse}
 */
proto.xcalar.compute.localtypes.Session.ActivateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Session.ActivateResponse;
  return proto.xcalar.compute.localtypes.Session.ActivateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Session.ActivateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Session.ActivateResponse}
 */
proto.xcalar.compute.localtypes.Session.ActivateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.Session.SessionGenericOutput;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Session.SessionGenericOutput.deserializeBinaryFromReader);
      msg.setSessionGenericOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Session.ActivateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Session.ActivateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Session.ActivateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Session.ActivateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionGenericOutput();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.Session.SessionGenericOutput.serializeBinaryToWriter
    );
  }
};


/**
 * optional SessionGenericOutput session_generic_output = 1;
 * @return {?proto.xcalar.compute.localtypes.Session.SessionGenericOutput}
 */
proto.xcalar.compute.localtypes.Session.ActivateResponse.prototype.getSessionGenericOutput = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Session.SessionGenericOutput} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.Session.SessionGenericOutput, 1));
};


/** @param {?proto.xcalar.compute.localtypes.Session.SessionGenericOutput|undefined} value */
proto.xcalar.compute.localtypes.Session.ActivateResponse.prototype.setSessionGenericOutput = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xcalar.compute.localtypes.Session.ActivateResponse.prototype.clearSessionGenericOutput = function() {
  this.setSessionGenericOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.Session.ActivateResponse.prototype.hasSessionGenericOutput = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Session.UploadRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Session.UploadRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Session.UploadRequest.displayName = 'proto.xcalar.compute.localtypes.Session.UploadRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Session.UploadRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Session.UploadRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Session.UploadRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Session.UploadRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f),
    sessionNewInput: (f = msg.getSessionNewInput()) && proto.xcalar.compute.localtypes.Session.SessionNewInput.toObject(includeInstance, f),
    sessionUploadPayload: (f = msg.getSessionUploadPayload()) && proto.xcalar.compute.localtypes.Session.SessionUploadPayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Session.UploadRequest}
 */
proto.xcalar.compute.localtypes.Session.UploadRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Session.UploadRequest;
  return proto.xcalar.compute.localtypes.Session.UploadRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Session.UploadRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Session.UploadRequest}
 */
proto.xcalar.compute.localtypes.Session.UploadRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    case 2:
      var value = new proto.xcalar.compute.localtypes.Session.SessionNewInput;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Session.SessionNewInput.deserializeBinaryFromReader);
      msg.setSessionNewInput(value);
      break;
    case 3:
      var value = new proto.xcalar.compute.localtypes.Session.SessionUploadPayload;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Session.SessionUploadPayload.deserializeBinaryFromReader);
      msg.setSessionUploadPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Session.UploadRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Session.UploadRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Session.UploadRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Session.UploadRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
  f = message.getSessionNewInput();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.xcalar.compute.localtypes.Session.SessionNewInput.serializeBinaryToWriter
    );
  }
  f = message.getSessionUploadPayload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.xcalar.compute.localtypes.Session.SessionUploadPayload.serializeBinaryToWriter
    );
  }
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 1;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.Session.UploadRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 1));
};


/** @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value */
proto.xcalar.compute.localtypes.Session.UploadRequest.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xcalar.compute.localtypes.Session.UploadRequest.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.Session.UploadRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SessionNewInput session_new_input = 2;
 * @return {?proto.xcalar.compute.localtypes.Session.SessionNewInput}
 */
proto.xcalar.compute.localtypes.Session.UploadRequest.prototype.getSessionNewInput = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Session.SessionNewInput} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.Session.SessionNewInput, 2));
};


/** @param {?proto.xcalar.compute.localtypes.Session.SessionNewInput|undefined} value */
proto.xcalar.compute.localtypes.Session.UploadRequest.prototype.setSessionNewInput = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.xcalar.compute.localtypes.Session.UploadRequest.prototype.clearSessionNewInput = function() {
  this.setSessionNewInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.Session.UploadRequest.prototype.hasSessionNewInput = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SessionUploadPayload session_upload_payload = 3;
 * @return {?proto.xcalar.compute.localtypes.Session.SessionUploadPayload}
 */
proto.xcalar.compute.localtypes.Session.UploadRequest.prototype.getSessionUploadPayload = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Session.SessionUploadPayload} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.Session.SessionUploadPayload, 3));
};


/** @param {?proto.xcalar.compute.localtypes.Session.SessionUploadPayload|undefined} value */
proto.xcalar.compute.localtypes.Session.UploadRequest.prototype.setSessionUploadPayload = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.xcalar.compute.localtypes.Session.UploadRequest.prototype.clearSessionUploadPayload = function() {
  this.setSessionUploadPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.Session.UploadRequest.prototype.hasSessionUploadPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Session.UploadResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Session.UploadResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Session.UploadResponse.displayName = 'proto.xcalar.compute.localtypes.Session.UploadResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Session.UploadResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Session.UploadResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Session.UploadResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Session.UploadResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionNewOutput: (f = msg.getSessionNewOutput()) && proto.xcalar.compute.localtypes.Session.SessionNewOutput.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Session.UploadResponse}
 */
proto.xcalar.compute.localtypes.Session.UploadResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Session.UploadResponse;
  return proto.xcalar.compute.localtypes.Session.UploadResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Session.UploadResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Session.UploadResponse}
 */
proto.xcalar.compute.localtypes.Session.UploadResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.Session.SessionNewOutput;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Session.SessionNewOutput.deserializeBinaryFromReader);
      msg.setSessionNewOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Session.UploadResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Session.UploadResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Session.UploadResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Session.UploadResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionNewOutput();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.Session.SessionNewOutput.serializeBinaryToWriter
    );
  }
};


/**
 * optional SessionNewOutput session_new_output = 1;
 * @return {?proto.xcalar.compute.localtypes.Session.SessionNewOutput}
 */
proto.xcalar.compute.localtypes.Session.UploadResponse.prototype.getSessionNewOutput = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Session.SessionNewOutput} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.Session.SessionNewOutput, 1));
};


/** @param {?proto.xcalar.compute.localtypes.Session.SessionNewOutput|undefined} value */
proto.xcalar.compute.localtypes.Session.UploadResponse.prototype.setSessionNewOutput = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xcalar.compute.localtypes.Session.UploadResponse.prototype.clearSessionNewOutput = function() {
  this.setSessionNewOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.Session.UploadResponse.prototype.hasSessionNewOutput = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Session.ListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Session.ListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Session.ListRequest.displayName = 'proto.xcalar.compute.localtypes.Session.ListRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Session.ListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Session.ListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Session.ListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Session.ListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f),
    pattern: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Session.ListRequest}
 */
proto.xcalar.compute.localtypes.Session.ListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Session.ListRequest;
  return proto.xcalar.compute.localtypes.Session.ListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Session.ListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Session.ListRequest}
 */
proto.xcalar.compute.localtypes.Session.ListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPattern(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Session.ListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Session.ListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Session.ListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Session.ListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
  f = message.getPattern();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 1;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.Session.ListRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 1));
};


/** @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value */
proto.xcalar.compute.localtypes.Session.ListRequest.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xcalar.compute.localtypes.Session.ListRequest.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.Session.ListRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string pattern = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Session.ListRequest.prototype.getPattern = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Session.ListRequest.prototype.setPattern = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Session.ListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Session.ListResponse.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Session.ListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Session.ListResponse.displayName = 'proto.xcalar.compute.localtypes.Session.ListResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Session.ListResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Session.ListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Session.ListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Session.ListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Session.ListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionGenericOutput: (f = msg.getSessionGenericOutput()) && proto.xcalar.compute.localtypes.Session.SessionGenericOutput.toObject(includeInstance, f),
    numSessions: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sessionsList: jspb.Message.toObjectList(msg.getSessionsList(),
    proto.xcalar.compute.localtypes.Session.SessionArg.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Session.ListResponse}
 */
proto.xcalar.compute.localtypes.Session.ListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Session.ListResponse;
  return proto.xcalar.compute.localtypes.Session.ListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Session.ListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Session.ListResponse}
 */
proto.xcalar.compute.localtypes.Session.ListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.Session.SessionGenericOutput;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Session.SessionGenericOutput.deserializeBinaryFromReader);
      msg.setSessionGenericOutput(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumSessions(value);
      break;
    case 3:
      var value = new proto.xcalar.compute.localtypes.Session.SessionArg;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Session.SessionArg.deserializeBinaryFromReader);
      msg.addSessions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Session.ListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Session.ListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Session.ListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Session.ListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionGenericOutput();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.Session.SessionGenericOutput.serializeBinaryToWriter
    );
  }
  f = message.getNumSessions();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSessionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.xcalar.compute.localtypes.Session.SessionArg.serializeBinaryToWriter
    );
  }
};


/**
 * optional SessionGenericOutput session_generic_output = 1;
 * @return {?proto.xcalar.compute.localtypes.Session.SessionGenericOutput}
 */
proto.xcalar.compute.localtypes.Session.ListResponse.prototype.getSessionGenericOutput = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Session.SessionGenericOutput} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.Session.SessionGenericOutput, 1));
};


/** @param {?proto.xcalar.compute.localtypes.Session.SessionGenericOutput|undefined} value */
proto.xcalar.compute.localtypes.Session.ListResponse.prototype.setSessionGenericOutput = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xcalar.compute.localtypes.Session.ListResponse.prototype.clearSessionGenericOutput = function() {
  this.setSessionGenericOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.Session.ListResponse.prototype.hasSessionGenericOutput = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 num_sessions = 2;
 * @return {number}
 */
proto.xcalar.compute.localtypes.Session.ListResponse.prototype.getNumSessions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.Session.ListResponse.prototype.setNumSessions = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated SessionArg sessions = 3;
 * @return {!Array<!proto.xcalar.compute.localtypes.Session.SessionArg>}
 */
proto.xcalar.compute.localtypes.Session.ListResponse.prototype.getSessionsList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.Session.SessionArg>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.Session.SessionArg, 3));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.Session.SessionArg>} value */
proto.xcalar.compute.localtypes.Session.ListResponse.prototype.setSessionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.Session.SessionArg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.Session.SessionArg}
 */
proto.xcalar.compute.localtypes.Session.ListResponse.prototype.addSessions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.xcalar.compute.localtypes.Session.SessionArg, opt_index);
};


proto.xcalar.compute.localtypes.Session.ListResponse.prototype.clearSessionsList = function() {
  this.setSessionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Session.DeleteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Session.DeleteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Session.DeleteRequest.displayName = 'proto.xcalar.compute.localtypes.Session.DeleteRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Session.DeleteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Session.DeleteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Session.DeleteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Session.DeleteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Session.DeleteRequest}
 */
proto.xcalar.compute.localtypes.Session.DeleteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Session.DeleteRequest;
  return proto.xcalar.compute.localtypes.Session.DeleteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Session.DeleteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Session.DeleteRequest}
 */
proto.xcalar.compute.localtypes.Session.DeleteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Session.DeleteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Session.DeleteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Session.DeleteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Session.DeleteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.xcalar.compute.localtypes.Session);
