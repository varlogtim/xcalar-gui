/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.xcalar.compute.localtypes.SchemaDiscover.Column', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.SchemaDiscover.InputSerialization', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.SchemaDiscover.Schema', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.SchemaDiscover.Column = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.SchemaDiscover.Column, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.SchemaDiscover.Column.displayName = 'proto.xcalar.compute.localtypes.SchemaDiscover.Column';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.Column.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.SchemaDiscover.Column.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.SchemaDiscover.Column} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.SchemaDiscover.Column.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mapping: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.SchemaDiscover.Column}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.Column.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.SchemaDiscover.Column;
  return proto.xcalar.compute.localtypes.SchemaDiscover.Column.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.SchemaDiscover.Column} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.SchemaDiscover.Column}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.Column.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMapping(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.Column.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.SchemaDiscover.Column.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.SchemaDiscover.Column} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.SchemaDiscover.Column.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMapping();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.Column.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.SchemaDiscover.Column.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string mapping = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.Column.prototype.getMapping = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.SchemaDiscover.Column.prototype.setMapping = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.Column.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.SchemaDiscover.Column.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.SchemaDiscover.Schema = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.SchemaDiscover.Schema.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.SchemaDiscover.Schema, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.SchemaDiscover.Schema.displayName = 'proto.xcalar.compute.localtypes.SchemaDiscover.Schema';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.SchemaDiscover.Schema.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.Schema.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.SchemaDiscover.Schema.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.SchemaDiscover.Schema} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.SchemaDiscover.Schema.toObject = function(includeInstance, msg) {
  var f, obj = {
    columnsList: jspb.Message.toObjectList(msg.getColumnsList(),
    proto.xcalar.compute.localtypes.SchemaDiscover.Column.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.SchemaDiscover.Schema}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.Schema.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.SchemaDiscover.Schema;
  return proto.xcalar.compute.localtypes.SchemaDiscover.Schema.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.SchemaDiscover.Schema} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.SchemaDiscover.Schema}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.Schema.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.SchemaDiscover.Column;
      reader.readMessage(value,proto.xcalar.compute.localtypes.SchemaDiscover.Column.deserializeBinaryFromReader);
      msg.addColumns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.Schema.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.SchemaDiscover.Schema.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.SchemaDiscover.Schema} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.SchemaDiscover.Schema.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.SchemaDiscover.Column.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Column columns = 1;
 * @return {!Array<!proto.xcalar.compute.localtypes.SchemaDiscover.Column>}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.Schema.prototype.getColumnsList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.SchemaDiscover.Column>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.SchemaDiscover.Column, 1));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.SchemaDiscover.Column>} value */
proto.xcalar.compute.localtypes.SchemaDiscover.Schema.prototype.setColumnsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.SchemaDiscover.Column=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.SchemaDiscover.Column}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.Schema.prototype.addColumns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.xcalar.compute.localtypes.SchemaDiscover.Column, opt_index);
};


proto.xcalar.compute.localtypes.SchemaDiscover.Schema.prototype.clearColumnsList = function() {
  this.setColumnsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema.displayName = 'proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, ""),
    success: jspb.Message.getFieldWithDefault(msg, 2, false),
    status: jspb.Message.getFieldWithDefault(msg, 3, ""),
    schema: (f = msg.getSchema()) && proto.xcalar.compute.localtypes.SchemaDiscover.Schema.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema;
  return proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 4:
      var value = new proto.xcalar.compute.localtypes.SchemaDiscover.Schema;
      reader.readMessage(value,proto.xcalar.compute.localtypes.SchemaDiscover.Schema.deserializeBinaryFromReader);
      msg.setSchema(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSchema();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.xcalar.compute.localtypes.SchemaDiscover.Schema.serializeBinaryToWriter
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema.prototype.setPath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool success = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema.prototype.setSuccess = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string status = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema.prototype.setStatus = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Schema schema = 4;
 * @return {?proto.xcalar.compute.localtypes.SchemaDiscover.Schema}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema.prototype.getSchema = function() {
  return /** @type{?proto.xcalar.compute.localtypes.SchemaDiscover.Schema} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.SchemaDiscover.Schema, 4));
};


/** @param {?proto.xcalar.compute.localtypes.SchemaDiscover.Schema|undefined} value */
proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema.prototype.setSchema = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema.prototype.clearSchema = function() {
  this.setSchema(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema.prototype.hasSchema = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.SchemaDiscover.InputSerialization = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.SchemaDiscover.InputSerialization, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.SchemaDiscover.InputSerialization.displayName = 'proto.xcalar.compute.localtypes.SchemaDiscover.InputSerialization';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.InputSerialization.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.SchemaDiscover.InputSerialization.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.SchemaDiscover.InputSerialization} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.SchemaDiscover.InputSerialization.toObject = function(includeInstance, msg) {
  var f, obj = {
    args: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.SchemaDiscover.InputSerialization}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.InputSerialization.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.SchemaDiscover.InputSerialization;
  return proto.xcalar.compute.localtypes.SchemaDiscover.InputSerialization.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.SchemaDiscover.InputSerialization} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.SchemaDiscover.InputSerialization}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.InputSerialization.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.InputSerialization.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.SchemaDiscover.InputSerialization.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.SchemaDiscover.InputSerialization} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.SchemaDiscover.InputSerialization.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArgs();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string args = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.InputSerialization.prototype.getArgs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.SchemaDiscover.InputSerialization.prototype.setArgs = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverRequest.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverRequest.displayName = 'proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputSerialization: (f = msg.getInputSerialization()) && proto.xcalar.compute.localtypes.SchemaDiscover.InputSerialization.toObject(includeInstance, f),
    pathsList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverRequest}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverRequest;
  return proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverRequest}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.SchemaDiscover.InputSerialization;
      reader.readMessage(value,proto.xcalar.compute.localtypes.SchemaDiscover.InputSerialization.deserializeBinaryFromReader);
      msg.setInputSerialization(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addPaths(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputSerialization();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.SchemaDiscover.InputSerialization.serializeBinaryToWriter
    );
  }
  f = message.getPathsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional InputSerialization input_serialization = 1;
 * @return {?proto.xcalar.compute.localtypes.SchemaDiscover.InputSerialization}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverRequest.prototype.getInputSerialization = function() {
  return /** @type{?proto.xcalar.compute.localtypes.SchemaDiscover.InputSerialization} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.SchemaDiscover.InputSerialization, 1));
};


/** @param {?proto.xcalar.compute.localtypes.SchemaDiscover.InputSerialization|undefined} value */
proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverRequest.prototype.setInputSerialization = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverRequest.prototype.clearInputSerialization = function() {
  this.setInputSerialization(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverRequest.prototype.hasInputSerialization = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string paths = 2;
 * @return {!Array<string>}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverRequest.prototype.getPathsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverRequest.prototype.setPathsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverRequest.prototype.addPaths = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverRequest.prototype.clearPathsList = function() {
  this.setPathsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverResponse.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverResponse.displayName = 'proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    fileSchemasList: jspb.Message.toObjectList(msg.getFileSchemasList(),
    proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverResponse}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverResponse;
  return proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverResponse}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema;
      reader.readMessage(value,proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema.deserializeBinaryFromReader);
      msg.addFileSchemas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFileSchemasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FileSchema file_schemas = 1;
 * @return {!Array<!proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema>}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverResponse.prototype.getFileSchemasList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema, 1));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema>} value */
proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverResponse.prototype.setFileSchemasList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema}
 */
proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverResponse.prototype.addFileSchemas = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.xcalar.compute.localtypes.SchemaDiscover.FileSchema, opt_index);
};


proto.xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverResponse.prototype.clearFileSchemasList = function() {
  this.setFileSchemasList([]);
};


goog.object.extend(exports, proto.xcalar.compute.localtypes.SchemaDiscover);
