/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.xcalar.compute.localtypes.Schema.Column', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Schema.InputSerialization', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Schema.ListObjectSchemaResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Schema.ObjectSchema', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Schema.Schema', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Schema.Column = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Schema.Column, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Schema.Column.displayName = 'proto.xcalar.compute.localtypes.Schema.Column';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Schema.Column.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Schema.Column.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Schema.Column} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Schema.Column.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mapping: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Schema.Column}
 */
proto.xcalar.compute.localtypes.Schema.Column.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Schema.Column;
  return proto.xcalar.compute.localtypes.Schema.Column.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Schema.Column} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Schema.Column}
 */
proto.xcalar.compute.localtypes.Schema.Column.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMapping(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Schema.Column.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Schema.Column.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Schema.Column} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Schema.Column.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMapping();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Schema.Column.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Schema.Column.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string mapping = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Schema.Column.prototype.getMapping = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Schema.Column.prototype.setMapping = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Schema.Column.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Schema.Column.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Schema.Schema = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Schema.Schema.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Schema.Schema, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Schema.Schema.displayName = 'proto.xcalar.compute.localtypes.Schema.Schema';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Schema.Schema.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Schema.Schema.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Schema.Schema.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Schema.Schema} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Schema.Schema.toObject = function(includeInstance, msg) {
  var f, obj = {
    numColumns: jspb.Message.getFieldWithDefault(msg, 1, 0),
    columnsList: jspb.Message.toObjectList(msg.getColumnsList(),
    proto.xcalar.compute.localtypes.Schema.Column.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Schema.Schema}
 */
proto.xcalar.compute.localtypes.Schema.Schema.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Schema.Schema;
  return proto.xcalar.compute.localtypes.Schema.Schema.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Schema.Schema} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Schema.Schema}
 */
proto.xcalar.compute.localtypes.Schema.Schema.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumColumns(value);
      break;
    case 2:
      var value = new proto.xcalar.compute.localtypes.Schema.Column;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Schema.Column.deserializeBinaryFromReader);
      msg.addColumns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Schema.Schema.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Schema.Schema.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Schema.Schema} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Schema.Schema.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumColumns();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.xcalar.compute.localtypes.Schema.Column.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 num_columns = 1;
 * @return {number}
 */
proto.xcalar.compute.localtypes.Schema.Schema.prototype.getNumColumns = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.Schema.Schema.prototype.setNumColumns = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Column columns = 2;
 * @return {!Array<!proto.xcalar.compute.localtypes.Schema.Column>}
 */
proto.xcalar.compute.localtypes.Schema.Schema.prototype.getColumnsList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.Schema.Column>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.Schema.Column, 2));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.Schema.Column>} value */
proto.xcalar.compute.localtypes.Schema.Schema.prototype.setColumnsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.Schema.Column=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.Schema.Column}
 */
proto.xcalar.compute.localtypes.Schema.Schema.prototype.addColumns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.xcalar.compute.localtypes.Schema.Column, opt_index);
};


proto.xcalar.compute.localtypes.Schema.Schema.prototype.clearColumnsList = function() {
  this.setColumnsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Schema.ObjectSchema = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Schema.ObjectSchema, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Schema.ObjectSchema.displayName = 'proto.xcalar.compute.localtypes.Schema.ObjectSchema';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Schema.ObjectSchema.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Schema.ObjectSchema.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Schema.ObjectSchema} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Schema.ObjectSchema.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, ""),
    success: jspb.Message.getFieldWithDefault(msg, 2, false),
    status: jspb.Message.getFieldWithDefault(msg, 3, ""),
    schema: (f = msg.getSchema()) && proto.xcalar.compute.localtypes.Schema.Schema.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Schema.ObjectSchema}
 */
proto.xcalar.compute.localtypes.Schema.ObjectSchema.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Schema.ObjectSchema;
  return proto.xcalar.compute.localtypes.Schema.ObjectSchema.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Schema.ObjectSchema} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Schema.ObjectSchema}
 */
proto.xcalar.compute.localtypes.Schema.ObjectSchema.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 4:
      var value = new proto.xcalar.compute.localtypes.Schema.Schema;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Schema.Schema.deserializeBinaryFromReader);
      msg.setSchema(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Schema.ObjectSchema.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Schema.ObjectSchema.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Schema.ObjectSchema} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Schema.ObjectSchema.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSchema();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.xcalar.compute.localtypes.Schema.Schema.serializeBinaryToWriter
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Schema.ObjectSchema.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Schema.ObjectSchema.prototype.setPath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool success = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Schema.ObjectSchema.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.xcalar.compute.localtypes.Schema.ObjectSchema.prototype.setSuccess = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string status = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Schema.ObjectSchema.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Schema.ObjectSchema.prototype.setStatus = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Schema schema = 4;
 * @return {?proto.xcalar.compute.localtypes.Schema.Schema}
 */
proto.xcalar.compute.localtypes.Schema.ObjectSchema.prototype.getSchema = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Schema.Schema} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.Schema.Schema, 4));
};


/** @param {?proto.xcalar.compute.localtypes.Schema.Schema|undefined} value */
proto.xcalar.compute.localtypes.Schema.ObjectSchema.prototype.setSchema = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.xcalar.compute.localtypes.Schema.ObjectSchema.prototype.clearSchema = function() {
  this.setSchema(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.Schema.ObjectSchema.prototype.hasSchema = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Schema.InputSerialization = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Schema.InputSerialization, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Schema.InputSerialization.displayName = 'proto.xcalar.compute.localtypes.Schema.InputSerialization';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Schema.InputSerialization.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Schema.InputSerialization.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Schema.InputSerialization} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Schema.InputSerialization.toObject = function(includeInstance, msg) {
  var f, obj = {
    args: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Schema.InputSerialization}
 */
proto.xcalar.compute.localtypes.Schema.InputSerialization.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Schema.InputSerialization;
  return proto.xcalar.compute.localtypes.Schema.InputSerialization.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Schema.InputSerialization} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Schema.InputSerialization}
 */
proto.xcalar.compute.localtypes.Schema.InputSerialization.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Schema.InputSerialization.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Schema.InputSerialization.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Schema.InputSerialization} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Schema.InputSerialization.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArgs();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string args = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Schema.InputSerialization.prototype.getArgs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Schema.InputSerialization.prototype.setArgs = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest.displayName = 'proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    numObjects: jspb.Message.getFieldWithDefault(msg, 1, 0),
    inputSerializationArgs: (f = msg.getInputSerializationArgs()) && proto.xcalar.compute.localtypes.Schema.InputSerialization.toObject(includeInstance, f),
    pathsList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest}
 */
proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest;
  return proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest}
 */
proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumObjects(value);
      break;
    case 2:
      var value = new proto.xcalar.compute.localtypes.Schema.InputSerialization;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Schema.InputSerialization.deserializeBinaryFromReader);
      msg.setInputSerializationArgs(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addPaths(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumObjects();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getInputSerializationArgs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.xcalar.compute.localtypes.Schema.InputSerialization.serializeBinaryToWriter
    );
  }
  f = message.getPathsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional uint64 num_objects = 1;
 * @return {number}
 */
proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest.prototype.getNumObjects = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest.prototype.setNumObjects = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional InputSerialization input_serialization_args = 2;
 * @return {?proto.xcalar.compute.localtypes.Schema.InputSerialization}
 */
proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest.prototype.getInputSerializationArgs = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Schema.InputSerialization} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.Schema.InputSerialization, 2));
};


/** @param {?proto.xcalar.compute.localtypes.Schema.InputSerialization|undefined} value */
proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest.prototype.setInputSerializationArgs = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest.prototype.clearInputSerializationArgs = function() {
  this.setInputSerializationArgs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest.prototype.hasInputSerializationArgs = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string paths = 3;
 * @return {!Array<string>}
 */
proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest.prototype.getPathsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest.prototype.setPathsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest.prototype.addPaths = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.xcalar.compute.localtypes.Schema.ListObjectSchemaRequest.prototype.clearPathsList = function() {
  this.setPathsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Schema.ListObjectSchemaResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Schema.ListObjectSchemaResponse.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Schema.ListObjectSchemaResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Schema.ListObjectSchemaResponse.displayName = 'proto.xcalar.compute.localtypes.Schema.ListObjectSchemaResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Schema.ListObjectSchemaResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Schema.ListObjectSchemaResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Schema.ListObjectSchemaResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Schema.ListObjectSchemaResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Schema.ListObjectSchemaResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    numObjectSchemas: jspb.Message.getFieldWithDefault(msg, 1, 0),
    objectSchemaList: jspb.Message.toObjectList(msg.getObjectSchemaList(),
    proto.xcalar.compute.localtypes.Schema.ObjectSchema.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Schema.ListObjectSchemaResponse}
 */
proto.xcalar.compute.localtypes.Schema.ListObjectSchemaResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Schema.ListObjectSchemaResponse;
  return proto.xcalar.compute.localtypes.Schema.ListObjectSchemaResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Schema.ListObjectSchemaResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Schema.ListObjectSchemaResponse}
 */
proto.xcalar.compute.localtypes.Schema.ListObjectSchemaResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumObjectSchemas(value);
      break;
    case 2:
      var value = new proto.xcalar.compute.localtypes.Schema.ObjectSchema;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Schema.ObjectSchema.deserializeBinaryFromReader);
      msg.addObjectSchema(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Schema.ListObjectSchemaResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Schema.ListObjectSchemaResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Schema.ListObjectSchemaResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Schema.ListObjectSchemaResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumObjectSchemas();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getObjectSchemaList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.xcalar.compute.localtypes.Schema.ObjectSchema.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 num_object_schemas = 1;
 * @return {number}
 */
proto.xcalar.compute.localtypes.Schema.ListObjectSchemaResponse.prototype.getNumObjectSchemas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.Schema.ListObjectSchemaResponse.prototype.setNumObjectSchemas = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated ObjectSchema object_schema = 2;
 * @return {!Array<!proto.xcalar.compute.localtypes.Schema.ObjectSchema>}
 */
proto.xcalar.compute.localtypes.Schema.ListObjectSchemaResponse.prototype.getObjectSchemaList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.Schema.ObjectSchema>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.Schema.ObjectSchema, 2));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.Schema.ObjectSchema>} value */
proto.xcalar.compute.localtypes.Schema.ListObjectSchemaResponse.prototype.setObjectSchemaList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.Schema.ObjectSchema=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.Schema.ObjectSchema}
 */
proto.xcalar.compute.localtypes.Schema.ListObjectSchemaResponse.prototype.addObjectSchema = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.xcalar.compute.localtypes.Schema.ObjectSchema, opt_index);
};


proto.xcalar.compute.localtypes.Schema.ListObjectSchemaResponse.prototype.clearObjectSchemaList = function() {
  this.setObjectSchemaList([]);
};


goog.object.extend(exports, proto.xcalar.compute.localtypes.Schema);
