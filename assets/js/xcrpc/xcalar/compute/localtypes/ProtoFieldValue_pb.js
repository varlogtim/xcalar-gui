/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.ProtoFieldValue', null, global);
goog.exportSymbol('proto.ProtoFieldValue.ArrayValue', null, global);
goog.exportSymbol('proto.ProtoFieldValue.NumericVal', null, global);
goog.exportSymbol('proto.ProtoFieldValue.ObjectValue', null, global);
goog.exportSymbol('proto.ProtoRow', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoFieldValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ProtoFieldValue.oneofGroups_);
};
goog.inherits(proto.ProtoFieldValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ProtoFieldValue.displayName = 'proto.ProtoFieldValue';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ProtoFieldValue.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12,13]];

/**
 * @enum {number}
 */
proto.ProtoFieldValue.DatavalueCase = {
  DATAVALUE_NOT_SET: 0,
  STRING_VAL: 1,
  BOOL_VAL: 2,
  UINT32_VAL: 3,
  INT32_VAL: 4,
  UINT64_VAL: 5,
  INT64_VAL: 6,
  FLOAT32_VAL: 7,
  FLOAT64_VAL: 8,
  BYTE_VAL: 9,
  ARRAY_VALUE: 10,
  OBJECT_VALUE: 11,
  TIME_VAL: 12,
  NUMERIC_VAL: 13
};

/**
 * @return {proto.ProtoFieldValue.DatavalueCase}
 */
proto.ProtoFieldValue.prototype.getDatavalueCase = function() {
  return /** @type {proto.ProtoFieldValue.DatavalueCase} */(jspb.Message.computeOneofCase(this, proto.ProtoFieldValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoFieldValue.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoFieldValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoFieldValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoFieldValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    stringVal: jspb.Message.getFieldWithDefault(msg, 1, ""),
    boolVal: jspb.Message.getFieldWithDefault(msg, 2, false),
    uint32Val: jspb.Message.getFieldWithDefault(msg, 3, 0),
    int32Val: jspb.Message.getFieldWithDefault(msg, 4, 0),
    uint64Val: jspb.Message.getFieldWithDefault(msg, 5, 0),
    int64Val: jspb.Message.getFieldWithDefault(msg, 6, 0),
    float32Val: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    float64Val: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    byteVal: msg.getByteVal_asB64(),
    arrayValue: (f = msg.getArrayValue()) && proto.ProtoFieldValue.ArrayValue.toObject(includeInstance, f),
    objectValue: (f = msg.getObjectValue()) && proto.ProtoFieldValue.ObjectValue.toObject(includeInstance, f),
    timeVal: (f = msg.getTimeVal()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    numericVal: (f = msg.getNumericVal()) && proto.ProtoFieldValue.NumericVal.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoFieldValue}
 */
proto.ProtoFieldValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoFieldValue;
  return proto.ProtoFieldValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoFieldValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoFieldValue}
 */
proto.ProtoFieldValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringVal(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolVal(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUint32Val(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setInt32Val(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUint64Val(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setInt64Val(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFloat32Val(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFloat64Val(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setByteVal(value);
      break;
    case 10:
      var value = new proto.ProtoFieldValue.ArrayValue;
      reader.readMessage(value,proto.ProtoFieldValue.ArrayValue.deserializeBinaryFromReader);
      msg.setArrayValue(value);
      break;
    case 11:
      var value = new proto.ProtoFieldValue.ObjectValue;
      reader.readMessage(value,proto.ProtoFieldValue.ObjectValue.deserializeBinaryFromReader);
      msg.setObjectValue(value);
      break;
    case 12:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimeVal(value);
      break;
    case 13:
      var value = new proto.ProtoFieldValue.NumericVal;
      reader.readMessage(value,proto.ProtoFieldValue.NumericVal.deserializeBinaryFromReader);
      msg.setNumericVal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoFieldValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoFieldValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoFieldValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoFieldValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeSint64(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getArrayValue();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.ProtoFieldValue.ArrayValue.serializeBinaryToWriter
    );
  }
  f = message.getObjectValue();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.ProtoFieldValue.ObjectValue.serializeBinaryToWriter
    );
  }
  f = message.getTimeVal();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getNumericVal();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.ProtoFieldValue.NumericVal.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoFieldValue.ArrayValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ProtoFieldValue.ArrayValue.repeatedFields_, null);
};
goog.inherits(proto.ProtoFieldValue.ArrayValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ProtoFieldValue.ArrayValue.displayName = 'proto.ProtoFieldValue.ArrayValue';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ProtoFieldValue.ArrayValue.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoFieldValue.ArrayValue.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoFieldValue.ArrayValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoFieldValue.ArrayValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoFieldValue.ArrayValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    elementsList: jspb.Message.toObjectList(msg.getElementsList(),
    proto.ProtoFieldValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoFieldValue.ArrayValue}
 */
proto.ProtoFieldValue.ArrayValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoFieldValue.ArrayValue;
  return proto.ProtoFieldValue.ArrayValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoFieldValue.ArrayValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoFieldValue.ArrayValue}
 */
proto.ProtoFieldValue.ArrayValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ProtoFieldValue;
      reader.readMessage(value,proto.ProtoFieldValue.deserializeBinaryFromReader);
      msg.addElements(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoFieldValue.ArrayValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoFieldValue.ArrayValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoFieldValue.ArrayValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoFieldValue.ArrayValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getElementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ProtoFieldValue.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ProtoFieldValue elements = 1;
 * @return {!Array<!proto.ProtoFieldValue>}
 */
proto.ProtoFieldValue.ArrayValue.prototype.getElementsList = function() {
  return /** @type{!Array<!proto.ProtoFieldValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ProtoFieldValue, 1));
};


/** @param {!Array<!proto.ProtoFieldValue>} value */
proto.ProtoFieldValue.ArrayValue.prototype.setElementsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ProtoFieldValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ProtoFieldValue}
 */
proto.ProtoFieldValue.ArrayValue.prototype.addElements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ProtoFieldValue, opt_index);
};


proto.ProtoFieldValue.ArrayValue.prototype.clearElementsList = function() {
  this.setElementsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoFieldValue.ObjectValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoFieldValue.ObjectValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ProtoFieldValue.ObjectValue.displayName = 'proto.ProtoFieldValue.ObjectValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoFieldValue.ObjectValue.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoFieldValue.ObjectValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoFieldValue.ObjectValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoFieldValue.ObjectValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesMap: (f = msg.getValuesMap()) ? f.toObject(includeInstance, proto.ProtoFieldValue.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoFieldValue.ObjectValue}
 */
proto.ProtoFieldValue.ObjectValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoFieldValue.ObjectValue;
  return proto.ProtoFieldValue.ObjectValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoFieldValue.ObjectValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoFieldValue.ObjectValue}
 */
proto.ProtoFieldValue.ObjectValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getValuesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.ProtoFieldValue.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoFieldValue.ObjectValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoFieldValue.ObjectValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoFieldValue.ObjectValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoFieldValue.ObjectValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.ProtoFieldValue.serializeBinaryToWriter);
  }
};


/**
 * map<string, ProtoFieldValue> values = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.ProtoFieldValue>}
 */
proto.ProtoFieldValue.ObjectValue.prototype.getValuesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.ProtoFieldValue>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.ProtoFieldValue));
};


proto.ProtoFieldValue.ObjectValue.prototype.clearValuesMap = function() {
  this.getValuesMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoFieldValue.NumericVal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ProtoFieldValue.NumericVal.repeatedFields_, null);
};
goog.inherits(proto.ProtoFieldValue.NumericVal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ProtoFieldValue.NumericVal.displayName = 'proto.ProtoFieldValue.NumericVal';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ProtoFieldValue.NumericVal.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoFieldValue.NumericVal.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoFieldValue.NumericVal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoFieldValue.NumericVal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoFieldValue.NumericVal.toObject = function(includeInstance, msg) {
  var f, obj = {
    valList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoFieldValue.NumericVal}
 */
proto.ProtoFieldValue.NumericVal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoFieldValue.NumericVal;
  return proto.ProtoFieldValue.NumericVal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoFieldValue.NumericVal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoFieldValue.NumericVal}
 */
proto.ProtoFieldValue.NumericVal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
      msg.setValList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoFieldValue.NumericVal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoFieldValue.NumericVal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoFieldValue.NumericVal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoFieldValue.NumericVal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValList();
  if (f.length > 0) {
    writer.writePackedUint64(
      1,
      f
    );
  }
};


/**
 * repeated uint64 val = 1;
 * @return {!Array<number>}
 */
proto.ProtoFieldValue.NumericVal.prototype.getValList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.ProtoFieldValue.NumericVal.prototype.setValList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.ProtoFieldValue.NumericVal.prototype.addVal = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.ProtoFieldValue.NumericVal.prototype.clearValList = function() {
  this.setValList([]);
};


/**
 * optional string string_val = 1;
 * @return {string}
 */
proto.ProtoFieldValue.prototype.getStringVal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ProtoFieldValue.prototype.setStringVal = function(value) {
  jspb.Message.setOneofField(this, 1, proto.ProtoFieldValue.oneofGroups_[0], value);
};


proto.ProtoFieldValue.prototype.clearStringVal = function() {
  jspb.Message.setOneofField(this, 1, proto.ProtoFieldValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ProtoFieldValue.prototype.hasStringVal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool bool_val = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ProtoFieldValue.prototype.getBoolVal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.ProtoFieldValue.prototype.setBoolVal = function(value) {
  jspb.Message.setOneofField(this, 2, proto.ProtoFieldValue.oneofGroups_[0], value);
};


proto.ProtoFieldValue.prototype.clearBoolVal = function() {
  jspb.Message.setOneofField(this, 2, proto.ProtoFieldValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ProtoFieldValue.prototype.hasBoolVal = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 uint32_val = 3;
 * @return {number}
 */
proto.ProtoFieldValue.prototype.getUint32Val = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ProtoFieldValue.prototype.setUint32Val = function(value) {
  jspb.Message.setOneofField(this, 3, proto.ProtoFieldValue.oneofGroups_[0], value);
};


proto.ProtoFieldValue.prototype.clearUint32Val = function() {
  jspb.Message.setOneofField(this, 3, proto.ProtoFieldValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ProtoFieldValue.prototype.hasUint32Val = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional sint32 int32_val = 4;
 * @return {number}
 */
proto.ProtoFieldValue.prototype.getInt32Val = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ProtoFieldValue.prototype.setInt32Val = function(value) {
  jspb.Message.setOneofField(this, 4, proto.ProtoFieldValue.oneofGroups_[0], value);
};


proto.ProtoFieldValue.prototype.clearInt32Val = function() {
  jspb.Message.setOneofField(this, 4, proto.ProtoFieldValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ProtoFieldValue.prototype.hasInt32Val = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 uint64_val = 5;
 * @return {number}
 */
proto.ProtoFieldValue.prototype.getUint64Val = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ProtoFieldValue.prototype.setUint64Val = function(value) {
  jspb.Message.setOneofField(this, 5, proto.ProtoFieldValue.oneofGroups_[0], value);
};


proto.ProtoFieldValue.prototype.clearUint64Val = function() {
  jspb.Message.setOneofField(this, 5, proto.ProtoFieldValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ProtoFieldValue.prototype.hasUint64Val = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional sint64 int64_val = 6;
 * @return {number}
 */
proto.ProtoFieldValue.prototype.getInt64Val = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.ProtoFieldValue.prototype.setInt64Val = function(value) {
  jspb.Message.setOneofField(this, 6, proto.ProtoFieldValue.oneofGroups_[0], value);
};


proto.ProtoFieldValue.prototype.clearInt64Val = function() {
  jspb.Message.setOneofField(this, 6, proto.ProtoFieldValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ProtoFieldValue.prototype.hasInt64Val = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float float32_val = 7;
 * @return {number}
 */
proto.ProtoFieldValue.prototype.getFloat32Val = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.ProtoFieldValue.prototype.setFloat32Val = function(value) {
  jspb.Message.setOneofField(this, 7, proto.ProtoFieldValue.oneofGroups_[0], value);
};


proto.ProtoFieldValue.prototype.clearFloat32Val = function() {
  jspb.Message.setOneofField(this, 7, proto.ProtoFieldValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ProtoFieldValue.prototype.hasFloat32Val = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double float64_val = 8;
 * @return {number}
 */
proto.ProtoFieldValue.prototype.getFloat64Val = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.ProtoFieldValue.prototype.setFloat64Val = function(value) {
  jspb.Message.setOneofField(this, 8, proto.ProtoFieldValue.oneofGroups_[0], value);
};


proto.ProtoFieldValue.prototype.clearFloat64Val = function() {
  jspb.Message.setOneofField(this, 8, proto.ProtoFieldValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ProtoFieldValue.prototype.hasFloat64Val = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bytes byte_val = 9;
 * @return {!(string|Uint8Array)}
 */
proto.ProtoFieldValue.prototype.getByteVal = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes byte_val = 9;
 * This is a type-conversion wrapper around `getByteVal()`
 * @return {string}
 */
proto.ProtoFieldValue.prototype.getByteVal_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getByteVal()));
};


/**
 * optional bytes byte_val = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getByteVal()`
 * @return {!Uint8Array}
 */
proto.ProtoFieldValue.prototype.getByteVal_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getByteVal()));
};


/** @param {!(string|Uint8Array)} value */
proto.ProtoFieldValue.prototype.setByteVal = function(value) {
  jspb.Message.setOneofField(this, 9, proto.ProtoFieldValue.oneofGroups_[0], value);
};


proto.ProtoFieldValue.prototype.clearByteVal = function() {
  jspb.Message.setOneofField(this, 9, proto.ProtoFieldValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ProtoFieldValue.prototype.hasByteVal = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ArrayValue array_value = 10;
 * @return {?proto.ProtoFieldValue.ArrayValue}
 */
proto.ProtoFieldValue.prototype.getArrayValue = function() {
  return /** @type{?proto.ProtoFieldValue.ArrayValue} */ (
    jspb.Message.getWrapperField(this, proto.ProtoFieldValue.ArrayValue, 10));
};


/** @param {?proto.ProtoFieldValue.ArrayValue|undefined} value */
proto.ProtoFieldValue.prototype.setArrayValue = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.ProtoFieldValue.oneofGroups_[0], value);
};


proto.ProtoFieldValue.prototype.clearArrayValue = function() {
  this.setArrayValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ProtoFieldValue.prototype.hasArrayValue = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional ObjectValue object_value = 11;
 * @return {?proto.ProtoFieldValue.ObjectValue}
 */
proto.ProtoFieldValue.prototype.getObjectValue = function() {
  return /** @type{?proto.ProtoFieldValue.ObjectValue} */ (
    jspb.Message.getWrapperField(this, proto.ProtoFieldValue.ObjectValue, 11));
};


/** @param {?proto.ProtoFieldValue.ObjectValue|undefined} value */
proto.ProtoFieldValue.prototype.setObjectValue = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.ProtoFieldValue.oneofGroups_[0], value);
};


proto.ProtoFieldValue.prototype.clearObjectValue = function() {
  this.setObjectValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ProtoFieldValue.prototype.hasObjectValue = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional google.protobuf.Timestamp time_val = 12;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.ProtoFieldValue.prototype.getTimeVal = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 12));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.ProtoFieldValue.prototype.setTimeVal = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.ProtoFieldValue.oneofGroups_[0], value);
};


proto.ProtoFieldValue.prototype.clearTimeVal = function() {
  this.setTimeVal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ProtoFieldValue.prototype.hasTimeVal = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional NumericVal numeric_val = 13;
 * @return {?proto.ProtoFieldValue.NumericVal}
 */
proto.ProtoFieldValue.prototype.getNumericVal = function() {
  return /** @type{?proto.ProtoFieldValue.NumericVal} */ (
    jspb.Message.getWrapperField(this, proto.ProtoFieldValue.NumericVal, 13));
};


/** @param {?proto.ProtoFieldValue.NumericVal|undefined} value */
proto.ProtoFieldValue.prototype.setNumericVal = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.ProtoFieldValue.oneofGroups_[0], value);
};


proto.ProtoFieldValue.prototype.clearNumericVal = function() {
  this.setNumericVal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ProtoFieldValue.prototype.hasNumericVal = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoRow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoRow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ProtoRow.displayName = 'proto.ProtoRow';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoRow.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoRow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoRow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoRow.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldsMap: (f = msg.getFieldsMap()) ? f.toObject(includeInstance, proto.ProtoFieldValue.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoRow}
 */
proto.ProtoRow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoRow;
  return proto.ProtoRow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoRow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoRow}
 */
proto.ProtoRow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getFieldsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.ProtoFieldValue.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoRow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoRow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoRow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoRow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.ProtoFieldValue.serializeBinaryToWriter);
  }
};


/**
 * map<string, ProtoFieldValue> fields = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.ProtoFieldValue>}
 */
proto.ProtoRow.prototype.getFieldsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.ProtoFieldValue>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.ProtoFieldValue));
};


proto.ProtoRow.prototype.clearFieldsMap = function() {
  this.getFieldsMap().clear();
};


goog.object.extend(exports, proto);
