/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ChildAppStartRequest', null, global);
goog.exportSymbol('proto.ChildAppStartRequest.XpuIdRange', null, global);
goog.exportSymbol('proto.ChildEvalRequest', null, global);
goog.exportSymbol('proto.ChildUdfInitRequest', null, global);
goog.exportSymbol('proto.ParentAppDoneRequest', null, global);
goog.exportSymbol('proto.ParentAppGetOutputBuffersRequest', null, global);
goog.exportSymbol('proto.ParentAppLoadBufferRequest', null, global);
goog.exportSymbol('proto.ParentAppLoadBufferRequest.Buffer', null, global);
goog.exportSymbol('proto.ParentAppLoadBufferRequest.DataBuffer', null, global);
goog.exportSymbol('proto.ParentAppRequest', null, global);
goog.exportSymbol('proto.ParentChildBuf', null, global);
goog.exportSymbol('proto.ParentChildShmPtr', null, global);
goog.exportSymbol('proto.ParentGetOutputBufferResponse', null, global);
goog.exportSymbol('proto.ParentGetOutputBufferResponse.Buffer', null, global);
goog.exportSymbol('proto.ParentReportFileErrorRequest', null, global);
goog.exportSymbol('proto.ParentReportNumFilesRequest', null, global);
goog.exportSymbol('proto.ProtoChildFunc', null, global);
goog.exportSymbol('proto.ProtoChildRequest', null, global);
goog.exportSymbol('proto.ProtoParentChildResponse', null, global);
goog.exportSymbol('proto.ProtoParentFunc', null, global);
goog.exportSymbol('proto.ProtoParentRequest', null, global);
goog.exportSymbol('proto.XdbGetMetaRequest', null, global);
goog.exportSymbol('proto.XdbGetMetaResponse', null, global);
goog.exportSymbol('proto.XdbGetRowsRequest', null, global);
goog.exportSymbol('proto.XdbGetRowsResponse', null, global);
goog.exportSymbol('proto.XpuReceiveBufferFromSrc', null, global);
goog.exportSymbol('proto.XpuReceiveBufferFromSrc.Buffer', null, global);
goog.exportSymbol('proto.XpuSendListToDsts', null, global);
goog.exportSymbol('proto.XpuSendListToDsts.XpuSendListBufferToDst', null, global);
goog.exportSymbol('proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ParentChildBuf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ParentChildBuf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ParentChildBuf.displayName = 'proto.ParentChildBuf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ParentChildBuf.prototype.toObject = function(opt_includeInstance) {
  return proto.ParentChildBuf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ParentChildBuf} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ParentChildBuf.toObject = function(includeInstance, msg) {
  var f, obj = {
    buf: msg.getBuf_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ParentChildBuf}
 */
proto.ParentChildBuf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ParentChildBuf;
  return proto.ParentChildBuf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ParentChildBuf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ParentChildBuf}
 */
proto.ParentChildBuf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBuf(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ParentChildBuf} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ParentChildBuf.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ParentChildBuf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ParentChildBuf.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBuf_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ParentChildBuf} The clone.
 */
proto.ParentChildBuf.prototype.cloneMessage = function() {
  return /** @type {!proto.ParentChildBuf} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes buf = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ParentChildBuf.prototype.getBuf = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes buf = 1;
 * This is a type-conversion wrapper around `getBuf()`
 * @return {string}
 */
proto.ParentChildBuf.prototype.getBuf_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBuf()));
};


/**
 * optional bytes buf = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBuf()`
 * @return {!Uint8Array}
 */
proto.ParentChildBuf.prototype.getBuf_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBuf()));
};


/** @param {!(string|Uint8Array)} value  */
proto.ParentChildBuf.prototype.setBuf = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ParentChildShmPtr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ParentChildShmPtr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ParentChildShmPtr.displayName = 'proto.ParentChildShmPtr';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ParentChildShmPtr.prototype.toObject = function(opt_includeInstance) {
  return proto.ParentChildShmPtr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ParentChildShmPtr} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ParentChildShmPtr.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: msg.getIndex(),
    offset: msg.getOffset(),
    bufcacheoffset: msg.getBufcacheoffset()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ParentChildShmPtr}
 */
proto.ParentChildShmPtr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ParentChildShmPtr;
  return proto.ParentChildShmPtr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ParentChildShmPtr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ParentChildShmPtr}
 */
proto.ParentChildShmPtr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOffset(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBufcacheoffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ParentChildShmPtr} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ParentChildShmPtr.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ParentChildShmPtr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ParentChildShmPtr.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getOffset();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = this.getBufcacheoffset();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ParentChildShmPtr} The clone.
 */
proto.ParentChildShmPtr.prototype.cloneMessage = function() {
  return /** @type {!proto.ParentChildShmPtr} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 index = 1;
 * @return {number}
 */
proto.ParentChildShmPtr.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.ParentChildShmPtr.prototype.setIndex = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 offset = 2;
 * @return {number}
 */
proto.ParentChildShmPtr.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.ParentChildShmPtr.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 bufCacheOffset = 3;
 * @return {number}
 */
proto.ParentChildShmPtr.prototype.getBufcacheoffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.ParentChildShmPtr.prototype.setBufcacheoffset = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChildUdfInitRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChildUdfInitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ChildUdfInitRequest.displayName = 'proto.ChildUdfInitRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChildUdfInitRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ChildUdfInitRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChildUdfInitRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ChildUdfInitRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: msg.getUsername()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChildUdfInitRequest}
 */
proto.ChildUdfInitRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChildUdfInitRequest;
  return proto.ChildUdfInitRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChildUdfInitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChildUdfInitRequest}
 */
proto.ChildUdfInitRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ChildUdfInitRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ChildUdfInitRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChildUdfInitRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ChildUdfInitRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ChildUdfInitRequest} The clone.
 */
proto.ChildUdfInitRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.ChildUdfInitRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string userName = 1;
 * @return {string}
 */
proto.ChildUdfInitRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.ChildUdfInitRequest.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChildEvalRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChildEvalRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ChildEvalRequest.displayName = 'proto.ChildEvalRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChildEvalRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ChildEvalRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChildEvalRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ChildEvalRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ptrinput: (f = msg.getPtrinput()) && proto.ParentChildShmPtr.toObject(includeInstance, f),
    ptroutput: (f = msg.getPtroutput()) && proto.ParentChildShmPtr.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChildEvalRequest}
 */
proto.ChildEvalRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChildEvalRequest;
  return proto.ChildEvalRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChildEvalRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChildEvalRequest}
 */
proto.ChildEvalRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ParentChildShmPtr;
      reader.readMessage(value,proto.ParentChildShmPtr.deserializeBinaryFromReader);
      msg.setPtrinput(value);
      break;
    case 2:
      var value = new proto.ParentChildShmPtr;
      reader.readMessage(value,proto.ParentChildShmPtr.deserializeBinaryFromReader);
      msg.setPtroutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ChildEvalRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ChildEvalRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChildEvalRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ChildEvalRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPtrinput();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ParentChildShmPtr.serializeBinaryToWriter
    );
  }
  f = this.getPtroutput();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ParentChildShmPtr.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ChildEvalRequest} The clone.
 */
proto.ChildEvalRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.ChildEvalRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional ParentChildShmPtr ptrInput = 1;
 * @return {proto.ParentChildShmPtr}
 */
proto.ChildEvalRequest.prototype.getPtrinput = function() {
  return /** @type{proto.ParentChildShmPtr} */ (
    jspb.Message.getWrapperField(this, proto.ParentChildShmPtr, 1));
};


/** @param {proto.ParentChildShmPtr|undefined} value  */
proto.ChildEvalRequest.prototype.setPtrinput = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ChildEvalRequest.prototype.clearPtrinput = function() {
  this.setPtrinput(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ChildEvalRequest.prototype.hasPtrinput = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ParentChildShmPtr ptrOutput = 2;
 * @return {proto.ParentChildShmPtr}
 */
proto.ChildEvalRequest.prototype.getPtroutput = function() {
  return /** @type{proto.ParentChildShmPtr} */ (
    jspb.Message.getWrapperField(this, proto.ParentChildShmPtr, 2));
};


/** @param {proto.ParentChildShmPtr|undefined} value  */
proto.ChildEvalRequest.prototype.setPtroutput = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ChildEvalRequest.prototype.clearPtroutput = function() {
  this.setPtroutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ChildEvalRequest.prototype.hasPtroutput = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChildAppStartRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ChildAppStartRequest.repeatedFields_, null);
};
goog.inherits(proto.ChildAppStartRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ChildAppStartRequest.displayName = 'proto.ChildAppStartRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ChildAppStartRequest.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChildAppStartRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ChildAppStartRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChildAppStartRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ChildAppStartRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    hosttype: msg.getHosttype(),
    exec: msg.getExec_asB64(),
    instr: msg.getInstr(),
    appname: msg.getAppname(),
    username: msg.getUsername(),
    xpuid: msg.getXpuid(),
    xpuclustersize: msg.getXpuclustersize(),
    xpuidrangeList: jspb.Message.toObjectList(msg.getXpuidrangeList(),
    proto.ChildAppStartRequest.XpuIdRange.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChildAppStartRequest}
 */
proto.ChildAppStartRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChildAppStartRequest;
  return proto.ChildAppStartRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChildAppStartRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChildAppStartRequest}
 */
proto.ChildAppStartRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHosttype(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExec(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstr(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppname(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setXpuid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setXpuclustersize(value);
      break;
    case 8:
      var value = new proto.ChildAppStartRequest.XpuIdRange;
      reader.readMessage(value,proto.ChildAppStartRequest.XpuIdRange.deserializeBinaryFromReader);
      msg.getXpuidrangeList().push(value);
      msg.setXpuidrangeList(msg.getXpuidrangeList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ChildAppStartRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ChildAppStartRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChildAppStartRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ChildAppStartRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getHosttype();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getExec_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getInstr();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getAppname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getUsername();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getXpuid();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = this.getXpuclustersize();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = this.getXpuidrangeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.ChildAppStartRequest.XpuIdRange.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ChildAppStartRequest} The clone.
 */
proto.ChildAppStartRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.ChildAppStartRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 hostType = 1;
 * @return {number}
 */
proto.ChildAppStartRequest.prototype.getHosttype = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.ChildAppStartRequest.prototype.setHosttype = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes exec = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ChildAppStartRequest.prototype.getExec = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes exec = 2;
 * This is a type-conversion wrapper around `getExec()`
 * @return {string}
 */
proto.ChildAppStartRequest.prototype.getExec_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExec()));
};


/**
 * optional bytes exec = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExec()`
 * @return {!Uint8Array}
 */
proto.ChildAppStartRequest.prototype.getExec_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExec()));
};


/** @param {!(string|Uint8Array)} value  */
proto.ChildAppStartRequest.prototype.setExec = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string inStr = 3;
 * @return {string}
 */
proto.ChildAppStartRequest.prototype.getInstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.ChildAppStartRequest.prototype.setInstr = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string appName = 4;
 * @return {string}
 */
proto.ChildAppStartRequest.prototype.getAppname = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.ChildAppStartRequest.prototype.setAppname = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string userName = 5;
 * @return {string}
 */
proto.ChildAppStartRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.ChildAppStartRequest.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 xpuId = 6;
 * @return {number}
 */
proto.ChildAppStartRequest.prototype.getXpuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.ChildAppStartRequest.prototype.setXpuid = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional uint32 xpuClusterSize = 7;
 * @return {number}
 */
proto.ChildAppStartRequest.prototype.getXpuclustersize = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {number} value  */
proto.ChildAppStartRequest.prototype.setXpuclustersize = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * repeated XpuIdRange xpuIdRange = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.ChildAppStartRequest.XpuIdRange>}
 */
proto.ChildAppStartRequest.prototype.getXpuidrangeList = function() {
  return /** @type{!Array.<!proto.ChildAppStartRequest.XpuIdRange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ChildAppStartRequest.XpuIdRange, 8));
};


/** @param {Array.<!proto.ChildAppStartRequest.XpuIdRange>} value  */
proto.ChildAppStartRequest.prototype.setXpuidrangeList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


proto.ChildAppStartRequest.prototype.clearXpuidrangeList = function() {
  this.setXpuidrangeList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChildAppStartRequest.XpuIdRange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChildAppStartRequest.XpuIdRange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ChildAppStartRequest.XpuIdRange.displayName = 'proto.ChildAppStartRequest.XpuIdRange';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChildAppStartRequest.XpuIdRange.prototype.toObject = function(opt_includeInstance) {
  return proto.ChildAppStartRequest.XpuIdRange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChildAppStartRequest.XpuIdRange} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ChildAppStartRequest.XpuIdRange.toObject = function(includeInstance, msg) {
  var f, obj = {
    xpuidstart: msg.getXpuidstart(),
    xpuidend: msg.getXpuidend()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChildAppStartRequest.XpuIdRange}
 */
proto.ChildAppStartRequest.XpuIdRange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChildAppStartRequest.XpuIdRange;
  return proto.ChildAppStartRequest.XpuIdRange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChildAppStartRequest.XpuIdRange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChildAppStartRequest.XpuIdRange}
 */
proto.ChildAppStartRequest.XpuIdRange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setXpuidstart(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setXpuidend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ChildAppStartRequest.XpuIdRange} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ChildAppStartRequest.XpuIdRange.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChildAppStartRequest.XpuIdRange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ChildAppStartRequest.XpuIdRange.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getXpuidstart();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getXpuidend();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ChildAppStartRequest.XpuIdRange} The clone.
 */
proto.ChildAppStartRequest.XpuIdRange.prototype.cloneMessage = function() {
  return /** @type {!proto.ChildAppStartRequest.XpuIdRange} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 xpuIdStart = 1;
 * @return {number}
 */
proto.ChildAppStartRequest.XpuIdRange.prototype.getXpuidstart = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.ChildAppStartRequest.XpuIdRange.prototype.setXpuidstart = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 xpuIdEnd = 2;
 * @return {number}
 */
proto.ChildAppStartRequest.XpuIdRange.prototype.getXpuidend = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.ChildAppStartRequest.XpuIdRange.prototype.setXpuidend = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.XpuReceiveBufferFromSrc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.XpuReceiveBufferFromSrc.repeatedFields_, null);
};
goog.inherits(proto.XpuReceiveBufferFromSrc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.XpuReceiveBufferFromSrc.displayName = 'proto.XpuReceiveBufferFromSrc';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.XpuReceiveBufferFromSrc.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.XpuReceiveBufferFromSrc.prototype.toObject = function(opt_includeInstance) {
  return proto.XpuReceiveBufferFromSrc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.XpuReceiveBufferFromSrc} msg The msg instance to transform.
 * @return {!Object}
 */
proto.XpuReceiveBufferFromSrc.toObject = function(includeInstance, msg) {
  var f, obj = {
    srcxpuid: msg.getSrcxpuid(),
    dstxpuid: msg.getDstxpuid(),
    buffersList: jspb.Message.toObjectList(msg.getBuffersList(),
    proto.XpuReceiveBufferFromSrc.Buffer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.XpuReceiveBufferFromSrc}
 */
proto.XpuReceiveBufferFromSrc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.XpuReceiveBufferFromSrc;
  return proto.XpuReceiveBufferFromSrc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.XpuReceiveBufferFromSrc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.XpuReceiveBufferFromSrc}
 */
proto.XpuReceiveBufferFromSrc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSrcxpuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDstxpuid(value);
      break;
    case 3:
      var value = new proto.XpuReceiveBufferFromSrc.Buffer;
      reader.readMessage(value,proto.XpuReceiveBufferFromSrc.Buffer.deserializeBinaryFromReader);
      msg.getBuffersList().push(value);
      msg.setBuffersList(msg.getBuffersList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.XpuReceiveBufferFromSrc} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.XpuReceiveBufferFromSrc.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.XpuReceiveBufferFromSrc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.XpuReceiveBufferFromSrc.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSrcxpuid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getDstxpuid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getBuffersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.XpuReceiveBufferFromSrc.Buffer.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.XpuReceiveBufferFromSrc} The clone.
 */
proto.XpuReceiveBufferFromSrc.prototype.cloneMessage = function() {
  return /** @type {!proto.XpuReceiveBufferFromSrc} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 srcXpuId = 1;
 * @return {number}
 */
proto.XpuReceiveBufferFromSrc.prototype.getSrcxpuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.XpuReceiveBufferFromSrc.prototype.setSrcxpuid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 dstXpuId = 2;
 * @return {number}
 */
proto.XpuReceiveBufferFromSrc.prototype.getDstxpuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.XpuReceiveBufferFromSrc.prototype.setDstxpuid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated Buffer buffers = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.XpuReceiveBufferFromSrc.Buffer>}
 */
proto.XpuReceiveBufferFromSrc.prototype.getBuffersList = function() {
  return /** @type{!Array.<!proto.XpuReceiveBufferFromSrc.Buffer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.XpuReceiveBufferFromSrc.Buffer, 3));
};


/** @param {Array.<!proto.XpuReceiveBufferFromSrc.Buffer>} value  */
proto.XpuReceiveBufferFromSrc.prototype.setBuffersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


proto.XpuReceiveBufferFromSrc.prototype.clearBuffersList = function() {
  this.setBuffersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.XpuReceiveBufferFromSrc.Buffer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.XpuReceiveBufferFromSrc.Buffer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.XpuReceiveBufferFromSrc.Buffer.displayName = 'proto.XpuReceiveBufferFromSrc.Buffer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.XpuReceiveBufferFromSrc.Buffer.prototype.toObject = function(opt_includeInstance) {
  return proto.XpuReceiveBufferFromSrc.Buffer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.XpuReceiveBufferFromSrc.Buffer} msg The msg instance to transform.
 * @return {!Object}
 */
proto.XpuReceiveBufferFromSrc.Buffer.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: msg.getOffset(),
    length: msg.getLength()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.XpuReceiveBufferFromSrc.Buffer}
 */
proto.XpuReceiveBufferFromSrc.Buffer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.XpuReceiveBufferFromSrc.Buffer;
  return proto.XpuReceiveBufferFromSrc.Buffer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.XpuReceiveBufferFromSrc.Buffer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.XpuReceiveBufferFromSrc.Buffer}
 */
proto.XpuReceiveBufferFromSrc.Buffer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOffset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.XpuReceiveBufferFromSrc.Buffer} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.XpuReceiveBufferFromSrc.Buffer.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.XpuReceiveBufferFromSrc.Buffer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.XpuReceiveBufferFromSrc.Buffer.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOffset();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = this.getLength();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.XpuReceiveBufferFromSrc.Buffer} The clone.
 */
proto.XpuReceiveBufferFromSrc.Buffer.prototype.cloneMessage = function() {
  return /** @type {!proto.XpuReceiveBufferFromSrc.Buffer} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint64 offset = 1;
 * @return {number}
 */
proto.XpuReceiveBufferFromSrc.Buffer.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.XpuReceiveBufferFromSrc.Buffer.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 length = 2;
 * @return {number}
 */
proto.XpuReceiveBufferFromSrc.Buffer.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.XpuReceiveBufferFromSrc.Buffer.prototype.setLength = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoChildRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ProtoChildRequest.oneofGroups_);
};
goog.inherits(proto.ProtoChildRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ProtoChildRequest.displayName = 'proto.ProtoChildRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ProtoChildRequest.oneofGroups_ = [[2,3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.ProtoChildRequest.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  SHMPTR: 2,
  PCBUF: 3,
  CHILDEVAL: 4,
  APPSTART: 5,
  RECVBUFFERFROMSRC: 6,
  CHILDUDFINIT: 7
};

/**
 * @return {proto.ProtoChildRequest.PayloadCase}
 */
proto.ProtoChildRequest.prototype.getPayloadCase = function() {
  return /** @type {proto.ProtoChildRequest.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.ProtoChildRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoChildRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoChildRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoChildRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ProtoChildRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    func: msg.getFunc(),
    shmptr: (f = msg.getShmptr()) && proto.ParentChildShmPtr.toObject(includeInstance, f),
    pcbuf: (f = msg.getPcbuf()) && proto.ParentChildBuf.toObject(includeInstance, f),
    childeval: (f = msg.getChildeval()) && proto.ChildEvalRequest.toObject(includeInstance, f),
    appstart: (f = msg.getAppstart()) && proto.ChildAppStartRequest.toObject(includeInstance, f),
    recvbufferfromsrc: (f = msg.getRecvbufferfromsrc()) && proto.XpuReceiveBufferFromSrc.toObject(includeInstance, f),
    childudfinit: (f = msg.getChildudfinit()) && proto.ChildUdfInitRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoChildRequest}
 */
proto.ProtoChildRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoChildRequest;
  return proto.ProtoChildRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoChildRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoChildRequest}
 */
proto.ProtoChildRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ProtoChildFunc} */ (reader.readEnum());
      msg.setFunc(value);
      break;
    case 2:
      var value = new proto.ParentChildShmPtr;
      reader.readMessage(value,proto.ParentChildShmPtr.deserializeBinaryFromReader);
      msg.setShmptr(value);
      break;
    case 3:
      var value = new proto.ParentChildBuf;
      reader.readMessage(value,proto.ParentChildBuf.deserializeBinaryFromReader);
      msg.setPcbuf(value);
      break;
    case 4:
      var value = new proto.ChildEvalRequest;
      reader.readMessage(value,proto.ChildEvalRequest.deserializeBinaryFromReader);
      msg.setChildeval(value);
      break;
    case 5:
      var value = new proto.ChildAppStartRequest;
      reader.readMessage(value,proto.ChildAppStartRequest.deserializeBinaryFromReader);
      msg.setAppstart(value);
      break;
    case 6:
      var value = new proto.XpuReceiveBufferFromSrc;
      reader.readMessage(value,proto.XpuReceiveBufferFromSrc.deserializeBinaryFromReader);
      msg.setRecvbufferfromsrc(value);
      break;
    case 7:
      var value = new proto.ChildUdfInitRequest;
      reader.readMessage(value,proto.ChildUdfInitRequest.deserializeBinaryFromReader);
      msg.setChildudfinit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ProtoChildRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ProtoChildRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoChildRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ProtoChildRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFunc();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getShmptr();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ParentChildShmPtr.serializeBinaryToWriter
    );
  }
  f = this.getPcbuf();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ParentChildBuf.serializeBinaryToWriter
    );
  }
  f = this.getChildeval();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ChildEvalRequest.serializeBinaryToWriter
    );
  }
  f = this.getAppstart();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ChildAppStartRequest.serializeBinaryToWriter
    );
  }
  f = this.getRecvbufferfromsrc();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.XpuReceiveBufferFromSrc.serializeBinaryToWriter
    );
  }
  f = this.getChildudfinit();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ChildUdfInitRequest.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ProtoChildRequest} The clone.
 */
proto.ProtoChildRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.ProtoChildRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional ProtoChildFunc func = 1;
 * @return {!proto.ProtoChildFunc}
 */
proto.ProtoChildRequest.prototype.getFunc = function() {
  return /** @type {!proto.ProtoChildFunc} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {!proto.ProtoChildFunc} value  */
proto.ProtoChildRequest.prototype.setFunc = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ParentChildShmPtr shmPtr = 2;
 * @return {proto.ParentChildShmPtr}
 */
proto.ProtoChildRequest.prototype.getShmptr = function() {
  return /** @type{proto.ParentChildShmPtr} */ (
    jspb.Message.getWrapperField(this, proto.ParentChildShmPtr, 2));
};


/** @param {proto.ParentChildShmPtr|undefined} value  */
proto.ProtoChildRequest.prototype.setShmptr = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.ProtoChildRequest.oneofGroups_[0], value);
};


proto.ProtoChildRequest.prototype.clearShmptr = function() {
  this.setShmptr(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ProtoChildRequest.prototype.hasShmptr = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ParentChildBuf pcBuf = 3;
 * @return {proto.ParentChildBuf}
 */
proto.ProtoChildRequest.prototype.getPcbuf = function() {
  return /** @type{proto.ParentChildBuf} */ (
    jspb.Message.getWrapperField(this, proto.ParentChildBuf, 3));
};


/** @param {proto.ParentChildBuf|undefined} value  */
proto.ProtoChildRequest.prototype.setPcbuf = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.ProtoChildRequest.oneofGroups_[0], value);
};


proto.ProtoChildRequest.prototype.clearPcbuf = function() {
  this.setPcbuf(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ProtoChildRequest.prototype.hasPcbuf = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ChildEvalRequest childEval = 4;
 * @return {proto.ChildEvalRequest}
 */
proto.ProtoChildRequest.prototype.getChildeval = function() {
  return /** @type{proto.ChildEvalRequest} */ (
    jspb.Message.getWrapperField(this, proto.ChildEvalRequest, 4));
};


/** @param {proto.ChildEvalRequest|undefined} value  */
proto.ProtoChildRequest.prototype.setChildeval = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.ProtoChildRequest.oneofGroups_[0], value);
};


proto.ProtoChildRequest.prototype.clearChildeval = function() {
  this.setChildeval(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ProtoChildRequest.prototype.hasChildeval = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ChildAppStartRequest appStart = 5;
 * @return {proto.ChildAppStartRequest}
 */
proto.ProtoChildRequest.prototype.getAppstart = function() {
  return /** @type{proto.ChildAppStartRequest} */ (
    jspb.Message.getWrapperField(this, proto.ChildAppStartRequest, 5));
};


/** @param {proto.ChildAppStartRequest|undefined} value  */
proto.ProtoChildRequest.prototype.setAppstart = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.ProtoChildRequest.oneofGroups_[0], value);
};


proto.ProtoChildRequest.prototype.clearAppstart = function() {
  this.setAppstart(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ProtoChildRequest.prototype.hasAppstart = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional XpuReceiveBufferFromSrc recvBufferFromSrc = 6;
 * @return {proto.XpuReceiveBufferFromSrc}
 */
proto.ProtoChildRequest.prototype.getRecvbufferfromsrc = function() {
  return /** @type{proto.XpuReceiveBufferFromSrc} */ (
    jspb.Message.getWrapperField(this, proto.XpuReceiveBufferFromSrc, 6));
};


/** @param {proto.XpuReceiveBufferFromSrc|undefined} value  */
proto.ProtoChildRequest.prototype.setRecvbufferfromsrc = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.ProtoChildRequest.oneofGroups_[0], value);
};


proto.ProtoChildRequest.prototype.clearRecvbufferfromsrc = function() {
  this.setRecvbufferfromsrc(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ProtoChildRequest.prototype.hasRecvbufferfromsrc = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ChildUdfInitRequest childUdfInit = 7;
 * @return {proto.ChildUdfInitRequest}
 */
proto.ProtoChildRequest.prototype.getChildudfinit = function() {
  return /** @type{proto.ChildUdfInitRequest} */ (
    jspb.Message.getWrapperField(this, proto.ChildUdfInitRequest, 7));
};


/** @param {proto.ChildUdfInitRequest|undefined} value  */
proto.ProtoChildRequest.prototype.setChildudfinit = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.ProtoChildRequest.oneofGroups_[0], value);
};


proto.ProtoChildRequest.prototype.clearChildudfinit = function() {
  this.setChildudfinit(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ProtoChildRequest.prototype.hasChildudfinit = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ParentAppGetOutputBuffersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ParentAppGetOutputBuffersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ParentAppGetOutputBuffersRequest.displayName = 'proto.ParentAppGetOutputBuffersRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ParentAppGetOutputBuffersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ParentAppGetOutputBuffersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ParentAppGetOutputBuffersRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ParentAppGetOutputBuffersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    numbuffers: msg.getNumbuffers()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ParentAppGetOutputBuffersRequest}
 */
proto.ParentAppGetOutputBuffersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ParentAppGetOutputBuffersRequest;
  return proto.ParentAppGetOutputBuffersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ParentAppGetOutputBuffersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ParentAppGetOutputBuffersRequest}
 */
proto.ParentAppGetOutputBuffersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumbuffers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ParentAppGetOutputBuffersRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ParentAppGetOutputBuffersRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ParentAppGetOutputBuffersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ParentAppGetOutputBuffersRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getNumbuffers();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ParentAppGetOutputBuffersRequest} The clone.
 */
proto.ParentAppGetOutputBuffersRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.ParentAppGetOutputBuffersRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 numBuffers = 1;
 * @return {number}
 */
proto.ParentAppGetOutputBuffersRequest.prototype.getNumbuffers = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.ParentAppGetOutputBuffersRequest.prototype.setNumbuffers = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ParentAppDoneRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ParentAppDoneRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ParentAppDoneRequest.displayName = 'proto.ParentAppDoneRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ParentAppDoneRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ParentAppDoneRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ParentAppDoneRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ParentAppDoneRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: msg.getStatus(),
    outstr: msg.getOutstr(),
    errstr: msg.getErrstr()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ParentAppDoneRequest}
 */
proto.ParentAppDoneRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ParentAppDoneRequest;
  return proto.ParentAppDoneRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ParentAppDoneRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ParentAppDoneRequest}
 */
proto.ParentAppDoneRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutstr(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrstr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ParentAppDoneRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ParentAppDoneRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ParentAppDoneRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ParentAppDoneRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getStatus();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getOutstr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getErrstr();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ParentAppDoneRequest} The clone.
 */
proto.ParentAppDoneRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.ParentAppDoneRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 status = 1;
 * @return {number}
 */
proto.ParentAppDoneRequest.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.ParentAppDoneRequest.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string outStr = 2;
 * @return {string}
 */
proto.ParentAppDoneRequest.prototype.getOutstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.ParentAppDoneRequest.prototype.setOutstr = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string errStr = 3;
 * @return {string}
 */
proto.ParentAppDoneRequest.prototype.getErrstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.ParentAppDoneRequest.prototype.setErrstr = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ParentReportNumFilesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ParentReportNumFilesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ParentReportNumFilesRequest.displayName = 'proto.ParentReportNumFilesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ParentReportNumFilesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ParentReportNumFilesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ParentReportNumFilesRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ParentReportNumFilesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    filessampled: msg.getFilessampled(),
    totalfilebytes: msg.getTotalfilebytes(),
    downsampled: msg.getDownsampled()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ParentReportNumFilesRequest}
 */
proto.ParentReportNumFilesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ParentReportNumFilesRequest;
  return proto.ParentReportNumFilesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ParentReportNumFilesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ParentReportNumFilesRequest}
 */
proto.ParentReportNumFilesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFilessampled(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalfilebytes(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDownsampled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ParentReportNumFilesRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ParentReportNumFilesRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ParentReportNumFilesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ParentReportNumFilesRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFilessampled();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getTotalfilebytes();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = this.getDownsampled();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ParentReportNumFilesRequest} The clone.
 */
proto.ParentReportNumFilesRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.ParentReportNumFilesRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 filesSampled = 1;
 * @return {number}
 */
proto.ParentReportNumFilesRequest.prototype.getFilessampled = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.ParentReportNumFilesRequest.prototype.setFilessampled = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 totalFileBytes = 2;
 * @return {number}
 */
proto.ParentReportNumFilesRequest.prototype.getTotalfilebytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.ParentReportNumFilesRequest.prototype.setTotalfilebytes = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool downSampled = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ParentReportNumFilesRequest.prototype.getDownsampled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 3, false));
};


/** @param {boolean} value  */
proto.ParentReportNumFilesRequest.prototype.setDownsampled = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ParentAppLoadBufferRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ParentAppLoadBufferRequest.repeatedFields_, null);
};
goog.inherits(proto.ParentAppLoadBufferRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ParentAppLoadBufferRequest.displayName = 'proto.ParentAppLoadBufferRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ParentAppLoadBufferRequest.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ParentAppLoadBufferRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ParentAppLoadBufferRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ParentAppLoadBufferRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ParentAppLoadBufferRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    numfiles: msg.getNumfiles(),
    numfilebytes: msg.getNumfilebytes(),
    numerrors: msg.getNumerrors(),
    databuffersList: jspb.Message.toObjectList(msg.getDatabuffersList(),
    proto.ParentAppLoadBufferRequest.DataBuffer.toObject, includeInstance),
    unusedbuffersList: jspb.Message.toObjectList(msg.getUnusedbuffersList(),
    proto.ParentAppLoadBufferRequest.Buffer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ParentAppLoadBufferRequest}
 */
proto.ParentAppLoadBufferRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ParentAppLoadBufferRequest;
  return proto.ParentAppLoadBufferRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ParentAppLoadBufferRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ParentAppLoadBufferRequest}
 */
proto.ParentAppLoadBufferRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumfiles(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumfilebytes(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumerrors(value);
      break;
    case 4:
      var value = new proto.ParentAppLoadBufferRequest.DataBuffer;
      reader.readMessage(value,proto.ParentAppLoadBufferRequest.DataBuffer.deserializeBinaryFromReader);
      msg.getDatabuffersList().push(value);
      msg.setDatabuffersList(msg.getDatabuffersList());
      break;
    case 5:
      var value = new proto.ParentAppLoadBufferRequest.Buffer;
      reader.readMessage(value,proto.ParentAppLoadBufferRequest.Buffer.deserializeBinaryFromReader);
      msg.getUnusedbuffersList().push(value);
      msg.setUnusedbuffersList(msg.getUnusedbuffersList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ParentAppLoadBufferRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ParentAppLoadBufferRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ParentAppLoadBufferRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ParentAppLoadBufferRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getNumfiles();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getNumfilebytes();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = this.getNumerrors();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = this.getDatabuffersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.ParentAppLoadBufferRequest.DataBuffer.serializeBinaryToWriter
    );
  }
  f = this.getUnusedbuffersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.ParentAppLoadBufferRequest.Buffer.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ParentAppLoadBufferRequest} The clone.
 */
proto.ParentAppLoadBufferRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.ParentAppLoadBufferRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 numFiles = 1;
 * @return {number}
 */
proto.ParentAppLoadBufferRequest.prototype.getNumfiles = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.ParentAppLoadBufferRequest.prototype.setNumfiles = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 numFileBytes = 2;
 * @return {number}
 */
proto.ParentAppLoadBufferRequest.prototype.getNumfilebytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.ParentAppLoadBufferRequest.prototype.setNumfilebytes = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 numErrors = 3;
 * @return {number}
 */
proto.ParentAppLoadBufferRequest.prototype.getNumerrors = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.ParentAppLoadBufferRequest.prototype.setNumerrors = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated DataBuffer dataBuffers = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.ParentAppLoadBufferRequest.DataBuffer>}
 */
proto.ParentAppLoadBufferRequest.prototype.getDatabuffersList = function() {
  return /** @type{!Array.<!proto.ParentAppLoadBufferRequest.DataBuffer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ParentAppLoadBufferRequest.DataBuffer, 4));
};


/** @param {Array.<!proto.ParentAppLoadBufferRequest.DataBuffer>} value  */
proto.ParentAppLoadBufferRequest.prototype.setDatabuffersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


proto.ParentAppLoadBufferRequest.prototype.clearDatabuffersList = function() {
  this.setDatabuffersList([]);
};


/**
 * repeated Buffer unusedBuffers = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.ParentAppLoadBufferRequest.Buffer>}
 */
proto.ParentAppLoadBufferRequest.prototype.getUnusedbuffersList = function() {
  return /** @type{!Array.<!proto.ParentAppLoadBufferRequest.Buffer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ParentAppLoadBufferRequest.Buffer, 5));
};


/** @param {Array.<!proto.ParentAppLoadBufferRequest.Buffer>} value  */
proto.ParentAppLoadBufferRequest.prototype.setUnusedbuffersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


proto.ParentAppLoadBufferRequest.prototype.clearUnusedbuffersList = function() {
  this.setUnusedbuffersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ParentAppLoadBufferRequest.Buffer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ParentAppLoadBufferRequest.Buffer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ParentAppLoadBufferRequest.Buffer.displayName = 'proto.ParentAppLoadBufferRequest.Buffer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ParentAppLoadBufferRequest.Buffer.prototype.toObject = function(opt_includeInstance) {
  return proto.ParentAppLoadBufferRequest.Buffer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ParentAppLoadBufferRequest.Buffer} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ParentAppLoadBufferRequest.Buffer.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: msg.getOffset()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ParentAppLoadBufferRequest.Buffer}
 */
proto.ParentAppLoadBufferRequest.Buffer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ParentAppLoadBufferRequest.Buffer;
  return proto.ParentAppLoadBufferRequest.Buffer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ParentAppLoadBufferRequest.Buffer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ParentAppLoadBufferRequest.Buffer}
 */
proto.ParentAppLoadBufferRequest.Buffer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ParentAppLoadBufferRequest.Buffer} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ParentAppLoadBufferRequest.Buffer.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ParentAppLoadBufferRequest.Buffer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ParentAppLoadBufferRequest.Buffer.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOffset();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ParentAppLoadBufferRequest.Buffer} The clone.
 */
proto.ParentAppLoadBufferRequest.Buffer.prototype.cloneMessage = function() {
  return /** @type {!proto.ParentAppLoadBufferRequest.Buffer} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint64 offset = 1;
 * @return {number}
 */
proto.ParentAppLoadBufferRequest.Buffer.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.ParentAppLoadBufferRequest.Buffer.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ParentAppLoadBufferRequest.DataBuffer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ParentAppLoadBufferRequest.DataBuffer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ParentAppLoadBufferRequest.DataBuffer.displayName = 'proto.ParentAppLoadBufferRequest.DataBuffer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ParentAppLoadBufferRequest.DataBuffer.prototype.toObject = function(opt_includeInstance) {
  return proto.ParentAppLoadBufferRequest.DataBuffer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ParentAppLoadBufferRequest.DataBuffer} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ParentAppLoadBufferRequest.DataBuffer.toObject = function(includeInstance, msg) {
  var f, obj = {
    haserrors: msg.getHaserrors(),
    buffer: (f = msg.getBuffer()) && proto.ParentAppLoadBufferRequest.Buffer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ParentAppLoadBufferRequest.DataBuffer}
 */
proto.ParentAppLoadBufferRequest.DataBuffer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ParentAppLoadBufferRequest.DataBuffer;
  return proto.ParentAppLoadBufferRequest.DataBuffer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ParentAppLoadBufferRequest.DataBuffer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ParentAppLoadBufferRequest.DataBuffer}
 */
proto.ParentAppLoadBufferRequest.DataBuffer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHaserrors(value);
      break;
    case 2:
      var value = new proto.ParentAppLoadBufferRequest.Buffer;
      reader.readMessage(value,proto.ParentAppLoadBufferRequest.Buffer.deserializeBinaryFromReader);
      msg.setBuffer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ParentAppLoadBufferRequest.DataBuffer} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ParentAppLoadBufferRequest.DataBuffer.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ParentAppLoadBufferRequest.DataBuffer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ParentAppLoadBufferRequest.DataBuffer.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getHaserrors();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = this.getBuffer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ParentAppLoadBufferRequest.Buffer.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ParentAppLoadBufferRequest.DataBuffer} The clone.
 */
proto.ParentAppLoadBufferRequest.DataBuffer.prototype.cloneMessage = function() {
  return /** @type {!proto.ParentAppLoadBufferRequest.DataBuffer} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bool hasErrors = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ParentAppLoadBufferRequest.DataBuffer.prototype.getHaserrors = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 1, false));
};


/** @param {boolean} value  */
proto.ParentAppLoadBufferRequest.DataBuffer.prototype.setHaserrors = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Buffer buffer = 2;
 * @return {proto.ParentAppLoadBufferRequest.Buffer}
 */
proto.ParentAppLoadBufferRequest.DataBuffer.prototype.getBuffer = function() {
  return /** @type{proto.ParentAppLoadBufferRequest.Buffer} */ (
    jspb.Message.getWrapperField(this, proto.ParentAppLoadBufferRequest.Buffer, 2));
};


/** @param {proto.ParentAppLoadBufferRequest.Buffer|undefined} value  */
proto.ParentAppLoadBufferRequest.DataBuffer.prototype.setBuffer = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ParentAppLoadBufferRequest.DataBuffer.prototype.clearBuffer = function() {
  this.setBuffer(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ParentAppLoadBufferRequest.DataBuffer.prototype.hasBuffer = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.XpuSendListToDsts = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.XpuSendListToDsts.repeatedFields_, null);
};
goog.inherits(proto.XpuSendListToDsts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.XpuSendListToDsts.displayName = 'proto.XpuSendListToDsts';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.XpuSendListToDsts.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.XpuSendListToDsts.prototype.toObject = function(opt_includeInstance) {
  return proto.XpuSendListToDsts.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.XpuSendListToDsts} msg The msg instance to transform.
 * @return {!Object}
 */
proto.XpuSendListToDsts.toObject = function(includeInstance, msg) {
  var f, obj = {
    srcxpuid: msg.getSrcxpuid(),
    sendlistList: jspb.Message.toObjectList(msg.getSendlistList(),
    proto.XpuSendListToDsts.XpuSendListBufferToDst.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.XpuSendListToDsts}
 */
proto.XpuSendListToDsts.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.XpuSendListToDsts;
  return proto.XpuSendListToDsts.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.XpuSendListToDsts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.XpuSendListToDsts}
 */
proto.XpuSendListToDsts.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSrcxpuid(value);
      break;
    case 2:
      var value = new proto.XpuSendListToDsts.XpuSendListBufferToDst;
      reader.readMessage(value,proto.XpuSendListToDsts.XpuSendListBufferToDst.deserializeBinaryFromReader);
      msg.getSendlistList().push(value);
      msg.setSendlistList(msg.getSendlistList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.XpuSendListToDsts} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.XpuSendListToDsts.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.XpuSendListToDsts.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.XpuSendListToDsts.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSrcxpuid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getSendlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.XpuSendListToDsts.XpuSendListBufferToDst.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.XpuSendListToDsts} The clone.
 */
proto.XpuSendListToDsts.prototype.cloneMessage = function() {
  return /** @type {!proto.XpuSendListToDsts} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 srcXpuId = 1;
 * @return {number}
 */
proto.XpuSendListToDsts.prototype.getSrcxpuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.XpuSendListToDsts.prototype.setSrcxpuid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated XpuSendListBufferToDst sendList = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.XpuSendListToDsts.XpuSendListBufferToDst>}
 */
proto.XpuSendListToDsts.prototype.getSendlistList = function() {
  return /** @type{!Array.<!proto.XpuSendListToDsts.XpuSendListBufferToDst>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.XpuSendListToDsts.XpuSendListBufferToDst, 2));
};


/** @param {Array.<!proto.XpuSendListToDsts.XpuSendListBufferToDst>} value  */
proto.XpuSendListToDsts.prototype.setSendlistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.XpuSendListToDsts.prototype.clearSendlistList = function() {
  this.setSendlistList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.XpuSendListToDsts.XpuSendListBufferToDst = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.XpuSendListToDsts.XpuSendListBufferToDst.repeatedFields_, null);
};
goog.inherits(proto.XpuSendListToDsts.XpuSendListBufferToDst, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.XpuSendListToDsts.XpuSendListBufferToDst.displayName = 'proto.XpuSendListToDsts.XpuSendListBufferToDst';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.XpuSendListToDsts.XpuSendListBufferToDst.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.XpuSendListToDsts.XpuSendListBufferToDst.prototype.toObject = function(opt_includeInstance) {
  return proto.XpuSendListToDsts.XpuSendListBufferToDst.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.XpuSendListToDsts.XpuSendListBufferToDst} msg The msg instance to transform.
 * @return {!Object}
 */
proto.XpuSendListToDsts.XpuSendListBufferToDst.toObject = function(includeInstance, msg) {
  var f, obj = {
    dstxpuid: msg.getDstxpuid(),
    buffersList: jspb.Message.toObjectList(msg.getBuffersList(),
    proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.XpuSendListToDsts.XpuSendListBufferToDst}
 */
proto.XpuSendListToDsts.XpuSendListBufferToDst.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.XpuSendListToDsts.XpuSendListBufferToDst;
  return proto.XpuSendListToDsts.XpuSendListBufferToDst.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.XpuSendListToDsts.XpuSendListBufferToDst} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.XpuSendListToDsts.XpuSendListBufferToDst}
 */
proto.XpuSendListToDsts.XpuSendListBufferToDst.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDstxpuid(value);
      break;
    case 2:
      var value = new proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer;
      reader.readMessage(value,proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer.deserializeBinaryFromReader);
      msg.getBuffersList().push(value);
      msg.setBuffersList(msg.getBuffersList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.XpuSendListToDsts.XpuSendListBufferToDst} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.XpuSendListToDsts.XpuSendListBufferToDst.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.XpuSendListToDsts.XpuSendListBufferToDst.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.XpuSendListToDsts.XpuSendListBufferToDst.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDstxpuid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getBuffersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.XpuSendListToDsts.XpuSendListBufferToDst} The clone.
 */
proto.XpuSendListToDsts.XpuSendListBufferToDst.prototype.cloneMessage = function() {
  return /** @type {!proto.XpuSendListToDsts.XpuSendListBufferToDst} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 dstXpuId = 1;
 * @return {number}
 */
proto.XpuSendListToDsts.XpuSendListBufferToDst.prototype.getDstxpuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.XpuSendListToDsts.XpuSendListBufferToDst.prototype.setDstxpuid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated Buffer buffers = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer>}
 */
proto.XpuSendListToDsts.XpuSendListBufferToDst.prototype.getBuffersList = function() {
  return /** @type{!Array.<!proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer, 2));
};


/** @param {Array.<!proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer>} value  */
proto.XpuSendListToDsts.XpuSendListBufferToDst.prototype.setBuffersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.XpuSendListToDsts.XpuSendListBufferToDst.prototype.clearBuffersList = function() {
  this.setBuffersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer.displayName = 'proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer.prototype.toObject = function(opt_includeInstance) {
  return proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer} msg The msg instance to transform.
 * @return {!Object}
 */
proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: msg.getOffset(),
    length: msg.getLength()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer}
 */
proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer;
  return proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer}
 */
proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOffset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOffset();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = this.getLength();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer} The clone.
 */
proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer.prototype.cloneMessage = function() {
  return /** @type {!proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint64 offset = 1;
 * @return {number}
 */
proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 length = 2;
 * @return {number}
 */
proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.XpuSendListToDsts.XpuSendListBufferToDst.Buffer.prototype.setLength = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ParentReportFileErrorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ParentReportFileErrorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ParentReportFileErrorRequest.displayName = 'proto.ParentReportFileErrorRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ParentReportFileErrorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ParentReportFileErrorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ParentReportFileErrorRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ParentReportFileErrorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    filename: msg.getFilename(),
    fileerror: msg.getFileerror()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ParentReportFileErrorRequest}
 */
proto.ParentReportFileErrorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ParentReportFileErrorRequest;
  return proto.ParentReportFileErrorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ParentReportFileErrorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ParentReportFileErrorRequest}
 */
proto.ParentReportFileErrorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileerror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ParentReportFileErrorRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ParentReportFileErrorRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ParentReportFileErrorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ParentReportFileErrorRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFilename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getFileerror();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ParentReportFileErrorRequest} The clone.
 */
proto.ParentReportFileErrorRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.ParentReportFileErrorRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string fileName = 1;
 * @return {string}
 */
proto.ParentReportFileErrorRequest.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.ParentReportFileErrorRequest.prototype.setFilename = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string fileError = 2;
 * @return {string}
 */
proto.ParentReportFileErrorRequest.prototype.getFileerror = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.ParentReportFileErrorRequest.prototype.setFileerror = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.XdbGetMetaRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.XdbGetMetaRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.XdbGetMetaRequest.displayName = 'proto.XdbGetMetaRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.XdbGetMetaRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.XdbGetMetaRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.XdbGetMetaRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.XdbGetMetaRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    xdbid: msg.getXdbid()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.XdbGetMetaRequest}
 */
proto.XdbGetMetaRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.XdbGetMetaRequest;
  return proto.XdbGetMetaRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.XdbGetMetaRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.XdbGetMetaRequest}
 */
proto.XdbGetMetaRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setXdbid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.XdbGetMetaRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.XdbGetMetaRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.XdbGetMetaRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.XdbGetMetaRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getXdbid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.XdbGetMetaRequest} The clone.
 */
proto.XdbGetMetaRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.XdbGetMetaRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 xdbId = 1;
 * @return {number}
 */
proto.XdbGetMetaRequest.prototype.getXdbid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.XdbGetMetaRequest.prototype.setXdbid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.XdbGetMetaResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.XdbGetMetaResponse.repeatedFields_, null);
};
goog.inherits(proto.XdbGetMetaResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.XdbGetMetaResponse.displayName = 'proto.XdbGetMetaResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.XdbGetMetaResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.XdbGetMetaResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.XdbGetMetaResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.XdbGetMetaResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.XdbGetMetaResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    xdbid: msg.getXdbid(),
    numrowspernodeList: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.XdbGetMetaResponse}
 */
proto.XdbGetMetaResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.XdbGetMetaResponse;
  return proto.XdbGetMetaResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.XdbGetMetaResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.XdbGetMetaResponse}
 */
proto.XdbGetMetaResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setXdbid(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt64());
      msg.setNumrowspernodeList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.XdbGetMetaResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.XdbGetMetaResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.XdbGetMetaResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.XdbGetMetaResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getXdbid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getNumrowspernodeList();
  if (f.length > 0) {
    writer.writePackedInt64(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.XdbGetMetaResponse} The clone.
 */
proto.XdbGetMetaResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.XdbGetMetaResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 xdbId = 1;
 * @return {number}
 */
proto.XdbGetMetaResponse.prototype.getXdbid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.XdbGetMetaResponse.prototype.setXdbid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated int64 numRowsPerNode = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.XdbGetMetaResponse.prototype.getNumrowspernodeList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 2));
};


/** @param {Array.<number>} value  */
proto.XdbGetMetaResponse.prototype.setNumrowspernodeList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


proto.XdbGetMetaResponse.prototype.clearNumrowspernodeList = function() {
  jspb.Message.setField(this, 2, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.XdbGetRowsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.XdbGetRowsRequest.repeatedFields_, null);
};
goog.inherits(proto.XdbGetRowsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.XdbGetRowsRequest.displayName = 'proto.XdbGetRowsRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.XdbGetRowsRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.XdbGetRowsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.XdbGetRowsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.XdbGetRowsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.XdbGetRowsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    xdbid: msg.getXdbid(),
    startrow: msg.getStartrow(),
    numrows: msg.getNumrows(),
    keysList: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.XdbGetRowsRequest}
 */
proto.XdbGetRowsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.XdbGetRowsRequest;
  return proto.XdbGetRowsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.XdbGetRowsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.XdbGetRowsRequest}
 */
proto.XdbGetRowsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setXdbid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartrow(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumrows(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.getKeysList().push(value);
      msg.setKeysList(msg.getKeysList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.XdbGetRowsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.XdbGetRowsRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.XdbGetRowsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.XdbGetRowsRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getXdbid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getStartrow();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = this.getNumrows();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = this.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.XdbGetRowsRequest} The clone.
 */
proto.XdbGetRowsRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.XdbGetRowsRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 xdbId = 1;
 * @return {number}
 */
proto.XdbGetRowsRequest.prototype.getXdbid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.XdbGetRowsRequest.prototype.setXdbid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 startRow = 2;
 * @return {number}
 */
proto.XdbGetRowsRequest.prototype.getStartrow = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.XdbGetRowsRequest.prototype.setStartrow = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 numRows = 3;
 * @return {number}
 */
proto.XdbGetRowsRequest.prototype.getNumrows = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.XdbGetRowsRequest.prototype.setNumrows = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated string keys = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.XdbGetRowsRequest.prototype.getKeysList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 4));
};


/** @param {Array.<string>} value  */
proto.XdbGetRowsRequest.prototype.setKeysList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


proto.XdbGetRowsRequest.prototype.clearKeysList = function() {
  jspb.Message.setField(this, 4, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.XdbGetRowsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.XdbGetRowsResponse.repeatedFields_, null);
};
goog.inherits(proto.XdbGetRowsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.XdbGetRowsResponse.displayName = 'proto.XdbGetRowsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.XdbGetRowsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.XdbGetRowsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.XdbGetRowsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.XdbGetRowsResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.XdbGetRowsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.XdbGetRowsResponse}
 */
proto.XdbGetRowsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.XdbGetRowsResponse;
  return proto.XdbGetRowsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.XdbGetRowsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.XdbGetRowsResponse}
 */
proto.XdbGetRowsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.getValuesList().push(value);
      msg.setValuesList(msg.getValuesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.XdbGetRowsResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.XdbGetRowsResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.XdbGetRowsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.XdbGetRowsResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.XdbGetRowsResponse} The clone.
 */
proto.XdbGetRowsResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.XdbGetRowsResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated string values = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.XdbGetRowsResponse.prototype.getValuesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<string>} value  */
proto.XdbGetRowsResponse.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.XdbGetRowsResponse.prototype.clearValuesList = function() {
  jspb.Message.setField(this, 1, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ParentAppRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ParentAppRequest.oneofGroups_);
};
goog.inherits(proto.ParentAppRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ParentAppRequest.displayName = 'proto.ParentAppRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ParentAppRequest.oneofGroups_ = [[1,2,3,4,5,6,7,8]];

/**
 * @enum {number}
 */
proto.ParentAppRequest.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  GETBUFFERS: 1,
  DONE: 2,
  REPORTNUMFILES: 3,
  LOADBUFFERS: 4,
  FILEERROR: 5,
  SENDLISTTODSTS: 6,
  XDBGETMETA: 7,
  XDBGETROWS: 8
};

/**
 * @return {proto.ParentAppRequest.PayloadCase}
 */
proto.ParentAppRequest.prototype.getPayloadCase = function() {
  return /** @type {proto.ParentAppRequest.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.ParentAppRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ParentAppRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ParentAppRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ParentAppRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ParentAppRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    getbuffers: (f = msg.getGetbuffers()) && proto.ParentAppGetOutputBuffersRequest.toObject(includeInstance, f),
    done: (f = msg.getDone()) && proto.ParentAppDoneRequest.toObject(includeInstance, f),
    reportnumfiles: (f = msg.getReportnumfiles()) && proto.ParentReportNumFilesRequest.toObject(includeInstance, f),
    loadbuffers: (f = msg.getLoadbuffers()) && proto.ParentAppLoadBufferRequest.toObject(includeInstance, f),
    fileerror: (f = msg.getFileerror()) && proto.ParentReportFileErrorRequest.toObject(includeInstance, f),
    sendlisttodsts: (f = msg.getSendlisttodsts()) && proto.XpuSendListToDsts.toObject(includeInstance, f),
    xdbgetmeta: (f = msg.getXdbgetmeta()) && proto.XdbGetMetaRequest.toObject(includeInstance, f),
    xdbgetrows: (f = msg.getXdbgetrows()) && proto.XdbGetRowsRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ParentAppRequest}
 */
proto.ParentAppRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ParentAppRequest;
  return proto.ParentAppRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ParentAppRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ParentAppRequest}
 */
proto.ParentAppRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ParentAppGetOutputBuffersRequest;
      reader.readMessage(value,proto.ParentAppGetOutputBuffersRequest.deserializeBinaryFromReader);
      msg.setGetbuffers(value);
      break;
    case 2:
      var value = new proto.ParentAppDoneRequest;
      reader.readMessage(value,proto.ParentAppDoneRequest.deserializeBinaryFromReader);
      msg.setDone(value);
      break;
    case 3:
      var value = new proto.ParentReportNumFilesRequest;
      reader.readMessage(value,proto.ParentReportNumFilesRequest.deserializeBinaryFromReader);
      msg.setReportnumfiles(value);
      break;
    case 4:
      var value = new proto.ParentAppLoadBufferRequest;
      reader.readMessage(value,proto.ParentAppLoadBufferRequest.deserializeBinaryFromReader);
      msg.setLoadbuffers(value);
      break;
    case 5:
      var value = new proto.ParentReportFileErrorRequest;
      reader.readMessage(value,proto.ParentReportFileErrorRequest.deserializeBinaryFromReader);
      msg.setFileerror(value);
      break;
    case 6:
      var value = new proto.XpuSendListToDsts;
      reader.readMessage(value,proto.XpuSendListToDsts.deserializeBinaryFromReader);
      msg.setSendlisttodsts(value);
      break;
    case 7:
      var value = new proto.XdbGetMetaRequest;
      reader.readMessage(value,proto.XdbGetMetaRequest.deserializeBinaryFromReader);
      msg.setXdbgetmeta(value);
      break;
    case 8:
      var value = new proto.XdbGetRowsRequest;
      reader.readMessage(value,proto.XdbGetRowsRequest.deserializeBinaryFromReader);
      msg.setXdbgetrows(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ParentAppRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ParentAppRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ParentAppRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ParentAppRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getGetbuffers();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ParentAppGetOutputBuffersRequest.serializeBinaryToWriter
    );
  }
  f = this.getDone();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ParentAppDoneRequest.serializeBinaryToWriter
    );
  }
  f = this.getReportnumfiles();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ParentReportNumFilesRequest.serializeBinaryToWriter
    );
  }
  f = this.getLoadbuffers();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ParentAppLoadBufferRequest.serializeBinaryToWriter
    );
  }
  f = this.getFileerror();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ParentReportFileErrorRequest.serializeBinaryToWriter
    );
  }
  f = this.getSendlisttodsts();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.XpuSendListToDsts.serializeBinaryToWriter
    );
  }
  f = this.getXdbgetmeta();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.XdbGetMetaRequest.serializeBinaryToWriter
    );
  }
  f = this.getXdbgetrows();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.XdbGetRowsRequest.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ParentAppRequest} The clone.
 */
proto.ParentAppRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.ParentAppRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional ParentAppGetOutputBuffersRequest getBuffers = 1;
 * @return {proto.ParentAppGetOutputBuffersRequest}
 */
proto.ParentAppRequest.prototype.getGetbuffers = function() {
  return /** @type{proto.ParentAppGetOutputBuffersRequest} */ (
    jspb.Message.getWrapperField(this, proto.ParentAppGetOutputBuffersRequest, 1));
};


/** @param {proto.ParentAppGetOutputBuffersRequest|undefined} value  */
proto.ParentAppRequest.prototype.setGetbuffers = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.ParentAppRequest.oneofGroups_[0], value);
};


proto.ParentAppRequest.prototype.clearGetbuffers = function() {
  this.setGetbuffers(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ParentAppRequest.prototype.hasGetbuffers = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ParentAppDoneRequest done = 2;
 * @return {proto.ParentAppDoneRequest}
 */
proto.ParentAppRequest.prototype.getDone = function() {
  return /** @type{proto.ParentAppDoneRequest} */ (
    jspb.Message.getWrapperField(this, proto.ParentAppDoneRequest, 2));
};


/** @param {proto.ParentAppDoneRequest|undefined} value  */
proto.ParentAppRequest.prototype.setDone = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.ParentAppRequest.oneofGroups_[0], value);
};


proto.ParentAppRequest.prototype.clearDone = function() {
  this.setDone(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ParentAppRequest.prototype.hasDone = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ParentReportNumFilesRequest reportNumFiles = 3;
 * @return {proto.ParentReportNumFilesRequest}
 */
proto.ParentAppRequest.prototype.getReportnumfiles = function() {
  return /** @type{proto.ParentReportNumFilesRequest} */ (
    jspb.Message.getWrapperField(this, proto.ParentReportNumFilesRequest, 3));
};


/** @param {proto.ParentReportNumFilesRequest|undefined} value  */
proto.ParentAppRequest.prototype.setReportnumfiles = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.ParentAppRequest.oneofGroups_[0], value);
};


proto.ParentAppRequest.prototype.clearReportnumfiles = function() {
  this.setReportnumfiles(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ParentAppRequest.prototype.hasReportnumfiles = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ParentAppLoadBufferRequest loadBuffers = 4;
 * @return {proto.ParentAppLoadBufferRequest}
 */
proto.ParentAppRequest.prototype.getLoadbuffers = function() {
  return /** @type{proto.ParentAppLoadBufferRequest} */ (
    jspb.Message.getWrapperField(this, proto.ParentAppLoadBufferRequest, 4));
};


/** @param {proto.ParentAppLoadBufferRequest|undefined} value  */
proto.ParentAppRequest.prototype.setLoadbuffers = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.ParentAppRequest.oneofGroups_[0], value);
};


proto.ParentAppRequest.prototype.clearLoadbuffers = function() {
  this.setLoadbuffers(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ParentAppRequest.prototype.hasLoadbuffers = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ParentReportFileErrorRequest fileError = 5;
 * @return {proto.ParentReportFileErrorRequest}
 */
proto.ParentAppRequest.prototype.getFileerror = function() {
  return /** @type{proto.ParentReportFileErrorRequest} */ (
    jspb.Message.getWrapperField(this, proto.ParentReportFileErrorRequest, 5));
};


/** @param {proto.ParentReportFileErrorRequest|undefined} value  */
proto.ParentAppRequest.prototype.setFileerror = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.ParentAppRequest.oneofGroups_[0], value);
};


proto.ParentAppRequest.prototype.clearFileerror = function() {
  this.setFileerror(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ParentAppRequest.prototype.hasFileerror = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional XpuSendListToDsts sendListToDsts = 6;
 * @return {proto.XpuSendListToDsts}
 */
proto.ParentAppRequest.prototype.getSendlisttodsts = function() {
  return /** @type{proto.XpuSendListToDsts} */ (
    jspb.Message.getWrapperField(this, proto.XpuSendListToDsts, 6));
};


/** @param {proto.XpuSendListToDsts|undefined} value  */
proto.ParentAppRequest.prototype.setSendlisttodsts = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.ParentAppRequest.oneofGroups_[0], value);
};


proto.ParentAppRequest.prototype.clearSendlisttodsts = function() {
  this.setSendlisttodsts(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ParentAppRequest.prototype.hasSendlisttodsts = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional XdbGetMetaRequest xdbGetMeta = 7;
 * @return {proto.XdbGetMetaRequest}
 */
proto.ParentAppRequest.prototype.getXdbgetmeta = function() {
  return /** @type{proto.XdbGetMetaRequest} */ (
    jspb.Message.getWrapperField(this, proto.XdbGetMetaRequest, 7));
};


/** @param {proto.XdbGetMetaRequest|undefined} value  */
proto.ParentAppRequest.prototype.setXdbgetmeta = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.ParentAppRequest.oneofGroups_[0], value);
};


proto.ParentAppRequest.prototype.clearXdbgetmeta = function() {
  this.setXdbgetmeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ParentAppRequest.prototype.hasXdbgetmeta = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional XdbGetRowsRequest xdbGetRows = 8;
 * @return {proto.XdbGetRowsRequest}
 */
proto.ParentAppRequest.prototype.getXdbgetrows = function() {
  return /** @type{proto.XdbGetRowsRequest} */ (
    jspb.Message.getWrapperField(this, proto.XdbGetRowsRequest, 8));
};


/** @param {proto.XdbGetRowsRequest|undefined} value  */
proto.ParentAppRequest.prototype.setXdbgetrows = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.ParentAppRequest.oneofGroups_[0], value);
};


proto.ParentAppRequest.prototype.clearXdbgetrows = function() {
  this.setXdbgetrows(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ParentAppRequest.prototype.hasXdbgetrows = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoParentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ProtoParentRequest.oneofGroups_);
};
goog.inherits(proto.ProtoParentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ProtoParentRequest.displayName = 'proto.ProtoParentRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ProtoParentRequest.oneofGroups_ = [[2]];

/**
 * @enum {number}
 */
proto.ProtoParentRequest.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  APP: 2
};

/**
 * @return {proto.ProtoParentRequest.PayloadCase}
 */
proto.ProtoParentRequest.prototype.getPayloadCase = function() {
  return /** @type {proto.ProtoParentRequest.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.ProtoParentRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoParentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoParentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoParentRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ProtoParentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    func: msg.getFunc(),
    app: (f = msg.getApp()) && proto.ParentAppRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoParentRequest}
 */
proto.ProtoParentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoParentRequest;
  return proto.ProtoParentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoParentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoParentRequest}
 */
proto.ProtoParentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ProtoParentFunc} */ (reader.readEnum());
      msg.setFunc(value);
      break;
    case 2:
      var value = new proto.ParentAppRequest;
      reader.readMessage(value,proto.ParentAppRequest.deserializeBinaryFromReader);
      msg.setApp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ProtoParentRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ProtoParentRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoParentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ProtoParentRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFunc();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getApp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ParentAppRequest.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ProtoParentRequest} The clone.
 */
proto.ProtoParentRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.ProtoParentRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional ProtoParentFunc func = 1;
 * @return {!proto.ProtoParentFunc}
 */
proto.ProtoParentRequest.prototype.getFunc = function() {
  return /** @type {!proto.ProtoParentFunc} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {!proto.ProtoParentFunc} value  */
proto.ProtoParentRequest.prototype.setFunc = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ParentAppRequest app = 2;
 * @return {proto.ParentAppRequest}
 */
proto.ProtoParentRequest.prototype.getApp = function() {
  return /** @type{proto.ParentAppRequest} */ (
    jspb.Message.getWrapperField(this, proto.ParentAppRequest, 2));
};


/** @param {proto.ParentAppRequest|undefined} value  */
proto.ProtoParentRequest.prototype.setApp = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.ProtoParentRequest.oneofGroups_[0], value);
};


proto.ProtoParentRequest.prototype.clearApp = function() {
  this.setApp(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ProtoParentRequest.prototype.hasApp = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ParentGetOutputBufferResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ParentGetOutputBufferResponse.repeatedFields_, null);
};
goog.inherits(proto.ParentGetOutputBufferResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ParentGetOutputBufferResponse.displayName = 'proto.ParentGetOutputBufferResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ParentGetOutputBufferResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ParentGetOutputBufferResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ParentGetOutputBufferResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ParentGetOutputBufferResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ParentGetOutputBufferResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    bufsList: jspb.Message.toObjectList(msg.getBufsList(),
    proto.ParentGetOutputBufferResponse.Buffer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ParentGetOutputBufferResponse}
 */
proto.ParentGetOutputBufferResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ParentGetOutputBufferResponse;
  return proto.ParentGetOutputBufferResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ParentGetOutputBufferResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ParentGetOutputBufferResponse}
 */
proto.ParentGetOutputBufferResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ParentGetOutputBufferResponse.Buffer;
      reader.readMessage(value,proto.ParentGetOutputBufferResponse.Buffer.deserializeBinaryFromReader);
      msg.getBufsList().push(value);
      msg.setBufsList(msg.getBufsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ParentGetOutputBufferResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ParentGetOutputBufferResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ParentGetOutputBufferResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ParentGetOutputBufferResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBufsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ParentGetOutputBufferResponse.Buffer.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ParentGetOutputBufferResponse} The clone.
 */
proto.ParentGetOutputBufferResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.ParentGetOutputBufferResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Buffer bufs = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.ParentGetOutputBufferResponse.Buffer>}
 */
proto.ParentGetOutputBufferResponse.prototype.getBufsList = function() {
  return /** @type{!Array.<!proto.ParentGetOutputBufferResponse.Buffer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ParentGetOutputBufferResponse.Buffer, 1));
};


/** @param {Array.<!proto.ParentGetOutputBufferResponse.Buffer>} value  */
proto.ParentGetOutputBufferResponse.prototype.setBufsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.ParentGetOutputBufferResponse.prototype.clearBufsList = function() {
  this.setBufsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ParentGetOutputBufferResponse.Buffer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ParentGetOutputBufferResponse.Buffer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ParentGetOutputBufferResponse.Buffer.displayName = 'proto.ParentGetOutputBufferResponse.Buffer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ParentGetOutputBufferResponse.Buffer.prototype.toObject = function(opt_includeInstance) {
  return proto.ParentGetOutputBufferResponse.Buffer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ParentGetOutputBufferResponse.Buffer} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ParentGetOutputBufferResponse.Buffer.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: msg.getOffset()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ParentGetOutputBufferResponse.Buffer}
 */
proto.ParentGetOutputBufferResponse.Buffer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ParentGetOutputBufferResponse.Buffer;
  return proto.ParentGetOutputBufferResponse.Buffer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ParentGetOutputBufferResponse.Buffer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ParentGetOutputBufferResponse.Buffer}
 */
proto.ParentGetOutputBufferResponse.Buffer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ParentGetOutputBufferResponse.Buffer} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ParentGetOutputBufferResponse.Buffer.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ParentGetOutputBufferResponse.Buffer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ParentGetOutputBufferResponse.Buffer.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOffset();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ParentGetOutputBufferResponse.Buffer} The clone.
 */
proto.ParentGetOutputBufferResponse.Buffer.prototype.cloneMessage = function() {
  return /** @type {!proto.ParentGetOutputBufferResponse.Buffer} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint64 offset = 1;
 * @return {number}
 */
proto.ParentGetOutputBufferResponse.Buffer.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.ParentGetOutputBufferResponse.Buffer.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoParentChildResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ProtoParentChildResponse.oneofGroups_);
};
goog.inherits(proto.ProtoParentChildResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ProtoParentChildResponse.displayName = 'proto.ProtoParentChildResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ProtoParentChildResponse.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.ProtoParentChildResponse.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  OUTPUTBUFFERS: 1,
  GROUPID: 2,
  PCBUF: 3,
  XDBGETMETA: 4,
  XDBGETROWS: 5
};

/**
 * @return {proto.ProtoParentChildResponse.PayloadCase}
 */
proto.ProtoParentChildResponse.prototype.getPayloadCase = function() {
  return /** @type {proto.ProtoParentChildResponse.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.ProtoParentChildResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoParentChildResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoParentChildResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoParentChildResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ProtoParentChildResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    outputbuffers: (f = msg.getOutputbuffers()) && proto.ParentGetOutputBufferResponse.toObject(includeInstance, f),
    groupid: jspb.Message.getField(msg, 2),
    pcbuf: (f = msg.getPcbuf()) && proto.ParentChildBuf.toObject(includeInstance, f),
    xdbgetmeta: (f = msg.getXdbgetmeta()) && proto.XdbGetMetaResponse.toObject(includeInstance, f),
    xdbgetrows: (f = msg.getXdbgetrows()) && proto.XdbGetRowsResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoParentChildResponse}
 */
proto.ProtoParentChildResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoParentChildResponse;
  return proto.ProtoParentChildResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoParentChildResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoParentChildResponse}
 */
proto.ProtoParentChildResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ParentGetOutputBufferResponse;
      reader.readMessage(value,proto.ParentGetOutputBufferResponse.deserializeBinaryFromReader);
      msg.setOutputbuffers(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    case 3:
      var value = new proto.ParentChildBuf;
      reader.readMessage(value,proto.ParentChildBuf.deserializeBinaryFromReader);
      msg.setPcbuf(value);
      break;
    case 4:
      var value = new proto.XdbGetMetaResponse;
      reader.readMessage(value,proto.XdbGetMetaResponse.deserializeBinaryFromReader);
      msg.setXdbgetmeta(value);
      break;
    case 5:
      var value = new proto.XdbGetRowsResponse;
      reader.readMessage(value,proto.XdbGetRowsResponse.deserializeBinaryFromReader);
      msg.setXdbgetrows(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ProtoParentChildResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ProtoParentChildResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoParentChildResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ProtoParentChildResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOutputbuffers();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ParentGetOutputBufferResponse.serializeBinaryToWriter
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getPcbuf();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ParentChildBuf.serializeBinaryToWriter
    );
  }
  f = this.getXdbgetmeta();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.XdbGetMetaResponse.serializeBinaryToWriter
    );
  }
  f = this.getXdbgetrows();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.XdbGetRowsResponse.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ProtoParentChildResponse} The clone.
 */
proto.ProtoParentChildResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.ProtoParentChildResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional ParentGetOutputBufferResponse outputBuffers = 1;
 * @return {proto.ParentGetOutputBufferResponse}
 */
proto.ProtoParentChildResponse.prototype.getOutputbuffers = function() {
  return /** @type{proto.ParentGetOutputBufferResponse} */ (
    jspb.Message.getWrapperField(this, proto.ParentGetOutputBufferResponse, 1));
};


/** @param {proto.ParentGetOutputBufferResponse|undefined} value  */
proto.ProtoParentChildResponse.prototype.setOutputbuffers = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.ProtoParentChildResponse.oneofGroups_[0], value);
};


proto.ProtoParentChildResponse.prototype.clearOutputbuffers = function() {
  this.setOutputbuffers(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ProtoParentChildResponse.prototype.hasOutputbuffers = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string groupId = 2;
 * @return {string}
 */
proto.ProtoParentChildResponse.prototype.getGroupid = function() {
  return /** @type {string} */ (!this.hasGroupid() ? "" : jspb.Message.getField(this, 2));
};


/** @param {string?|undefined} value  */
proto.ProtoParentChildResponse.prototype.setGroupid = function(value) {
  jspb.Message.setOneofField(this, 2, proto.ProtoParentChildResponse.oneofGroups_[0], value);
};


proto.ProtoParentChildResponse.prototype.clearGroupid = function() {
  jspb.Message.setOneofField(this, 2, proto.ProtoParentChildResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ProtoParentChildResponse.prototype.hasGroupid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ParentChildBuf pcBuf = 3;
 * @return {proto.ParentChildBuf}
 */
proto.ProtoParentChildResponse.prototype.getPcbuf = function() {
  return /** @type{proto.ParentChildBuf} */ (
    jspb.Message.getWrapperField(this, proto.ParentChildBuf, 3));
};


/** @param {proto.ParentChildBuf|undefined} value  */
proto.ProtoParentChildResponse.prototype.setPcbuf = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.ProtoParentChildResponse.oneofGroups_[0], value);
};


proto.ProtoParentChildResponse.prototype.clearPcbuf = function() {
  this.setPcbuf(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ProtoParentChildResponse.prototype.hasPcbuf = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional XdbGetMetaResponse xdbGetMeta = 4;
 * @return {proto.XdbGetMetaResponse}
 */
proto.ProtoParentChildResponse.prototype.getXdbgetmeta = function() {
  return /** @type{proto.XdbGetMetaResponse} */ (
    jspb.Message.getWrapperField(this, proto.XdbGetMetaResponse, 4));
};


/** @param {proto.XdbGetMetaResponse|undefined} value  */
proto.ProtoParentChildResponse.prototype.setXdbgetmeta = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.ProtoParentChildResponse.oneofGroups_[0], value);
};


proto.ProtoParentChildResponse.prototype.clearXdbgetmeta = function() {
  this.setXdbgetmeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ProtoParentChildResponse.prototype.hasXdbgetmeta = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional XdbGetRowsResponse xdbGetRows = 5;
 * @return {proto.XdbGetRowsResponse}
 */
proto.ProtoParentChildResponse.prototype.getXdbgetrows = function() {
  return /** @type{proto.XdbGetRowsResponse} */ (
    jspb.Message.getWrapperField(this, proto.XdbGetRowsResponse, 5));
};


/** @param {proto.XdbGetRowsResponse|undefined} value  */
proto.ProtoParentChildResponse.prototype.setXdbgetrows = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.ProtoParentChildResponse.oneofGroups_[0], value);
};


proto.ProtoParentChildResponse.prototype.clearXdbgetrows = function() {
  this.setXdbgetrows(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ProtoParentChildResponse.prototype.hasXdbgetrows = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * @enum {number}
 */
proto.ProtoChildFunc = {
  CHILDFUNCSHUTDOWN: 0,
  CHILDFUNCUDFEVAL: 1,
  CHILDFUNCAPPSTART: 2,
  CHILDFUNCUDFADD: 3,
  CHILDFUNCUDFUPDATE: 4,
  CHILDFUNCUDFLISTFUNCTIONS: 5,
  CHILDFUNCRECVBUFFERFROMSRC: 6,
  CHILDFUNCUDFINIT: 7
};

/**
 * @enum {number}
 */
proto.ProtoParentFunc = {
  PARENTFUNCCONNECT: 0,
  PARENTFUNCAPPDONE: 1,
  PARENTFUNCAPPGETGROUPID: 2,
  PARENTFUNCAPPREPORTNUMFILES: 3,
  PARENTFUNCAPPLOADBUFFER: 4,
  PARENTFUNCAPPGETOUTPUTBUFFER: 5,
  PARENTFUNCAPPREPORTFILEERROR: 6,
  PARENTFUNCXPUSENDLISTTODSTS: 7,
  PARENTFUNCXDBGETMETA: 8,
  PARENTFUNCXDBGETROWS: 9
};

goog.object.extend(exports, proto);
