/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var xcalar_compute_localtypes_Workbook_pb = require('../../../xcalar/compute/localtypes/Workbook_pb.js');
var xcalar_compute_localtypes_DataFormatEnums_pb = require('../../../xcalar/compute/localtypes/DataFormatEnums_pb.js');
var xcalar_compute_localtypes_OrderingEnums_pb = require('../../../xcalar/compute/localtypes/OrderingEnums_pb.js');
var xcalar_compute_localtypes_JoinOpEnums_pb = require('../../../xcalar/compute/localtypes/JoinOpEnums_pb.js');
var xcalar_compute_localtypes_UnionOpEnums_pb = require('../../../xcalar/compute/localtypes/UnionOpEnums_pb.js');
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.AggRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.AggResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.BulkLoadRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.BulkLoadResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.Columns', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.DataSourceArgs', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.DfLoadArgs', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.ExportRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.ExportResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.FilterRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.FilterResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.GetRowNumRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.GetRowNumResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.GroupByRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.GroupByResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.IndexRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.IndexResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.JoinRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.JoinResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.MapRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.MapResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.ParseArgs', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.ProjectRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.ProjectResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.SynthesizeRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.SynthesizeResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.UnionRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.UnionResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.XcalarApiColumn', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.XcalarApiEval', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.XcalarApiKey', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.XcalarDataSet', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiEval = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.XcalarApiEval, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.XcalarApiEval.displayName = 'proto.xcalar.compute.localtypes.Operator.XcalarApiEval';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiEval.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.XcalarApiEval.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiEval} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiEval.toObject = function(includeInstance, msg) {
  var f, obj = {
    evalString: jspb.Message.getFieldWithDefault(msg, 1, ""),
    newField: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarApiEval}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiEval.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.XcalarApiEval;
  return proto.xcalar.compute.localtypes.Operator.XcalarApiEval.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiEval} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarApiEval}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiEval.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEvalString(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewField(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiEval.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.XcalarApiEval.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiEval} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiEval.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvalString();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNewField();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string eval_string = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiEval.prototype.getEvalString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.XcalarApiEval.prototype.setEvalString = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string new_field = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiEval.prototype.getNewField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.XcalarApiEval.prototype.setNewField = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.AggRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Operator.AggRequest.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.AggRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.AggRequest.displayName = 'proto.xcalar.compute.localtypes.Operator.AggRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Operator.AggRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.AggRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.AggRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.AggRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.AggRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dest: jspb.Message.getFieldWithDefault(msg, 2, ""),
    evalList: jspb.Message.toObjectList(msg.getEvalList(),
    proto.xcalar.compute.localtypes.Operator.XcalarApiEval.toObject, includeInstance),
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.AggRequest}
 */
proto.xcalar.compute.localtypes.Operator.AggRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.AggRequest;
  return proto.xcalar.compute.localtypes.Operator.AggRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.AggRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.AggRequest}
 */
proto.xcalar.compute.localtypes.Operator.AggRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDest(value);
      break;
    case 3:
      var value = new proto.xcalar.compute.localtypes.Operator.XcalarApiEval;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Operator.XcalarApiEval.deserializeBinaryFromReader);
      msg.addEval(value);
      break;
    case 4:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.AggRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.AggRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.AggRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.AggRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDest();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEvalList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.xcalar.compute.localtypes.Operator.XcalarApiEval.serializeBinaryToWriter
    );
  }
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.AggRequest.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.AggRequest.prototype.setSource = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string dest = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.AggRequest.prototype.getDest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.AggRequest.prototype.setDest = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated XcalarApiEval eval = 3;
 * @return {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiEval>}
 */
proto.xcalar.compute.localtypes.Operator.AggRequest.prototype.getEvalList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiEval>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.Operator.XcalarApiEval, 3));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiEval>} value */
proto.xcalar.compute.localtypes.Operator.AggRequest.prototype.setEvalList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiEval=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarApiEval}
 */
proto.xcalar.compute.localtypes.Operator.AggRequest.prototype.addEval = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.xcalar.compute.localtypes.Operator.XcalarApiEval, opt_index);
};


proto.xcalar.compute.localtypes.Operator.AggRequest.prototype.clearEvalList = function() {
  this.setEvalList([]);
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 4;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.Operator.AggRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 4));
};


/** @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value */
proto.xcalar.compute.localtypes.Operator.AggRequest.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.xcalar.compute.localtypes.Operator.AggRequest.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.Operator.AggRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.AggResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.AggResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.AggResponse.displayName = 'proto.xcalar.compute.localtypes.Operator.AggResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.AggResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.AggResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.AggResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.AggResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    jsonAnswer: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.AggResponse}
 */
proto.xcalar.compute.localtypes.Operator.AggResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.AggResponse;
  return proto.xcalar.compute.localtypes.Operator.AggResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.AggResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.AggResponse}
 */
proto.xcalar.compute.localtypes.Operator.AggResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonAnswer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.AggResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.AggResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.AggResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.AggResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getJsonAnswer();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string table_name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.AggResponse.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.AggResponse.prototype.setTableName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string json_answer = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.AggResponse.prototype.getJsonAnswer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.AggResponse.prototype.setJsonAnswer = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.XcalarApiKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.XcalarApiKey.displayName = 'proto.xcalar.compute.localtypes.Operator.XcalarApiKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiKey.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.XcalarApiKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    keyFieldName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    ordering: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarApiKey}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.XcalarApiKey;
  return proto.xcalar.compute.localtypes.Operator.XcalarApiKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarApiKey}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.DfFieldType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyFieldName(value);
      break;
    case 4:
      var value = /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.XcalarOrdering} */ (reader.readEnum());
      msg.setOrdering(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.XcalarApiKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getKeyFieldName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOrdering();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiKey.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.XcalarApiKey.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional xcalar.compute.localtypes.XcalarEnumType.DfFieldType type = 2;
 * @return {!proto.xcalar.compute.localtypes.XcalarEnumType.DfFieldType}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiKey.prototype.getType = function() {
  return /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.DfFieldType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.xcalar.compute.localtypes.XcalarEnumType.DfFieldType} value */
proto.xcalar.compute.localtypes.Operator.XcalarApiKey.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string key_field_name = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiKey.prototype.getKeyFieldName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.XcalarApiKey.prototype.setKeyFieldName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional xcalar.compute.localtypes.XcalarEnumType.XcalarOrdering ordering = 4;
 * @return {!proto.xcalar.compute.localtypes.XcalarEnumType.XcalarOrdering}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiKey.prototype.getOrdering = function() {
  return /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.XcalarOrdering} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.xcalar.compute.localtypes.XcalarEnumType.XcalarOrdering} value */
proto.xcalar.compute.localtypes.Operator.XcalarApiKey.prototype.setOrdering = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.IndexRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Operator.IndexRequest.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.IndexRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.IndexRequest.displayName = 'proto.xcalar.compute.localtypes.Operator.IndexRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Operator.IndexRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.IndexRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.IndexRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.IndexRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.IndexRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dest: jspb.Message.getFieldWithDefault(msg, 2, ""),
    keyList: jspb.Message.toObjectList(msg.getKeyList(),
    proto.xcalar.compute.localtypes.Operator.XcalarApiKey.toObject, includeInstance),
    prefix: jspb.Message.getFieldWithDefault(msg, 4, ""),
    dhtName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    delaySort: jspb.Message.getFieldWithDefault(msg, 6, false),
    broadcast: jspb.Message.getFieldWithDefault(msg, 7, false),
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.IndexRequest}
 */
proto.xcalar.compute.localtypes.Operator.IndexRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.IndexRequest;
  return proto.xcalar.compute.localtypes.Operator.IndexRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.IndexRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.IndexRequest}
 */
proto.xcalar.compute.localtypes.Operator.IndexRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDest(value);
      break;
    case 3:
      var value = new proto.xcalar.compute.localtypes.Operator.XcalarApiKey;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Operator.XcalarApiKey.deserializeBinaryFromReader);
      msg.addKey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrefix(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDhtName(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDelaySort(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBroadcast(value);
      break;
    case 8:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.IndexRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.IndexRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.IndexRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.IndexRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDest();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKeyList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.xcalar.compute.localtypes.Operator.XcalarApiKey.serializeBinaryToWriter
    );
  }
  f = message.getPrefix();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDhtName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDelaySort();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getBroadcast();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.IndexRequest.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.IndexRequest.prototype.setSource = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string dest = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.IndexRequest.prototype.getDest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.IndexRequest.prototype.setDest = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated XcalarApiKey key = 3;
 * @return {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiKey>}
 */
proto.xcalar.compute.localtypes.Operator.IndexRequest.prototype.getKeyList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiKey>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.Operator.XcalarApiKey, 3));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiKey>} value */
proto.xcalar.compute.localtypes.Operator.IndexRequest.prototype.setKeyList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiKey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarApiKey}
 */
proto.xcalar.compute.localtypes.Operator.IndexRequest.prototype.addKey = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.xcalar.compute.localtypes.Operator.XcalarApiKey, opt_index);
};


proto.xcalar.compute.localtypes.Operator.IndexRequest.prototype.clearKeyList = function() {
  this.setKeyList([]);
};


/**
 * optional string prefix = 4;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.IndexRequest.prototype.getPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.IndexRequest.prototype.setPrefix = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string dht_name = 5;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.IndexRequest.prototype.getDhtName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.IndexRequest.prototype.setDhtName = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool delay_sort = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Operator.IndexRequest.prototype.getDelaySort = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.xcalar.compute.localtypes.Operator.IndexRequest.prototype.setDelaySort = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool broadcast = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Operator.IndexRequest.prototype.getBroadcast = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.xcalar.compute.localtypes.Operator.IndexRequest.prototype.setBroadcast = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 8;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.Operator.IndexRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 8));
};


/** @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value */
proto.xcalar.compute.localtypes.Operator.IndexRequest.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.xcalar.compute.localtypes.Operator.IndexRequest.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.Operator.IndexRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.IndexResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.IndexResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.IndexResponse.displayName = 'proto.xcalar.compute.localtypes.Operator.IndexResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.IndexResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.IndexResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.IndexResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.IndexResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.IndexResponse}
 */
proto.xcalar.compute.localtypes.Operator.IndexResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.IndexResponse;
  return proto.xcalar.compute.localtypes.Operator.IndexResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.IndexResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.IndexResponse}
 */
proto.xcalar.compute.localtypes.Operator.IndexResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.IndexResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.IndexResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.IndexResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.IndexResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string table_name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.IndexResponse.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.IndexResponse.prototype.setTableName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.ProjectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Operator.ProjectRequest.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.ProjectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.ProjectRequest.displayName = 'proto.xcalar.compute.localtypes.Operator.ProjectRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Operator.ProjectRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.ProjectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.ProjectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.ProjectRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.ProjectRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dest: jspb.Message.getFieldWithDefault(msg, 2, ""),
    columnsList: jspb.Message.getRepeatedField(msg, 3),
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.ProjectRequest}
 */
proto.xcalar.compute.localtypes.Operator.ProjectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.ProjectRequest;
  return proto.xcalar.compute.localtypes.Operator.ProjectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.ProjectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.ProjectRequest}
 */
proto.xcalar.compute.localtypes.Operator.ProjectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDest(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addColumns(value);
      break;
    case 4:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.ProjectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.ProjectRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.ProjectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.ProjectRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDest();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.ProjectRequest.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.ProjectRequest.prototype.setSource = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string dest = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.ProjectRequest.prototype.getDest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.ProjectRequest.prototype.setDest = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string columns = 3;
 * @return {!Array<string>}
 */
proto.xcalar.compute.localtypes.Operator.ProjectRequest.prototype.getColumnsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.xcalar.compute.localtypes.Operator.ProjectRequest.prototype.setColumnsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.xcalar.compute.localtypes.Operator.ProjectRequest.prototype.addColumns = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.xcalar.compute.localtypes.Operator.ProjectRequest.prototype.clearColumnsList = function() {
  this.setColumnsList([]);
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 4;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.Operator.ProjectRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 4));
};


/** @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value */
proto.xcalar.compute.localtypes.Operator.ProjectRequest.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.xcalar.compute.localtypes.Operator.ProjectRequest.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.Operator.ProjectRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.ProjectResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.ProjectResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.ProjectResponse.displayName = 'proto.xcalar.compute.localtypes.Operator.ProjectResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.ProjectResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.ProjectResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.ProjectResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.ProjectResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.ProjectResponse}
 */
proto.xcalar.compute.localtypes.Operator.ProjectResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.ProjectResponse;
  return proto.xcalar.compute.localtypes.Operator.ProjectResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.ProjectResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.ProjectResponse}
 */
proto.xcalar.compute.localtypes.Operator.ProjectResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.ProjectResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.ProjectResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.ProjectResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.ProjectResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string table_name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.ProjectResponse.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.ProjectResponse.prototype.setTableName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.GetRowNumRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.GetRowNumRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.GetRowNumRequest.displayName = 'proto.xcalar.compute.localtypes.Operator.GetRowNumRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.GetRowNumRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.GetRowNumRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.GetRowNumRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.GetRowNumRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dest: jspb.Message.getFieldWithDefault(msg, 2, ""),
    newField: jspb.Message.getFieldWithDefault(msg, 3, ""),
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.GetRowNumRequest}
 */
proto.xcalar.compute.localtypes.Operator.GetRowNumRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.GetRowNumRequest;
  return proto.xcalar.compute.localtypes.Operator.GetRowNumRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.GetRowNumRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.GetRowNumRequest}
 */
proto.xcalar.compute.localtypes.Operator.GetRowNumRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDest(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewField(value);
      break;
    case 4:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.GetRowNumRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.GetRowNumRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.GetRowNumRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.GetRowNumRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDest();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNewField();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.GetRowNumRequest.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.GetRowNumRequest.prototype.setSource = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string dest = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.GetRowNumRequest.prototype.getDest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.GetRowNumRequest.prototype.setDest = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string new_field = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.GetRowNumRequest.prototype.getNewField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.GetRowNumRequest.prototype.setNewField = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 4;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.Operator.GetRowNumRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 4));
};


/** @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value */
proto.xcalar.compute.localtypes.Operator.GetRowNumRequest.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.xcalar.compute.localtypes.Operator.GetRowNumRequest.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.Operator.GetRowNumRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.GetRowNumResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.GetRowNumResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.GetRowNumResponse.displayName = 'proto.xcalar.compute.localtypes.Operator.GetRowNumResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.GetRowNumResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.GetRowNumResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.GetRowNumResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.GetRowNumResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.GetRowNumResponse}
 */
proto.xcalar.compute.localtypes.Operator.GetRowNumResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.GetRowNumResponse;
  return proto.xcalar.compute.localtypes.Operator.GetRowNumResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.GetRowNumResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.GetRowNumResponse}
 */
proto.xcalar.compute.localtypes.Operator.GetRowNumResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.GetRowNumResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.GetRowNumResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.GetRowNumResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.GetRowNumResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string table_name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.GetRowNumResponse.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.GetRowNumResponse.prototype.setTableName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.FilterRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Operator.FilterRequest.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.FilterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.FilterRequest.displayName = 'proto.xcalar.compute.localtypes.Operator.FilterRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Operator.FilterRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.FilterRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.FilterRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.FilterRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.FilterRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dest: jspb.Message.getFieldWithDefault(msg, 2, ""),
    evalList: jspb.Message.toObjectList(msg.getEvalList(),
    proto.xcalar.compute.localtypes.Operator.XcalarApiEval.toObject, includeInstance),
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.FilterRequest}
 */
proto.xcalar.compute.localtypes.Operator.FilterRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.FilterRequest;
  return proto.xcalar.compute.localtypes.Operator.FilterRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.FilterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.FilterRequest}
 */
proto.xcalar.compute.localtypes.Operator.FilterRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDest(value);
      break;
    case 3:
      var value = new proto.xcalar.compute.localtypes.Operator.XcalarApiEval;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Operator.XcalarApiEval.deserializeBinaryFromReader);
      msg.addEval(value);
      break;
    case 4:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.FilterRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.FilterRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.FilterRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.FilterRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDest();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEvalList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.xcalar.compute.localtypes.Operator.XcalarApiEval.serializeBinaryToWriter
    );
  }
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.FilterRequest.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.FilterRequest.prototype.setSource = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string dest = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.FilterRequest.prototype.getDest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.FilterRequest.prototype.setDest = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated XcalarApiEval eval = 3;
 * @return {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiEval>}
 */
proto.xcalar.compute.localtypes.Operator.FilterRequest.prototype.getEvalList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiEval>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.Operator.XcalarApiEval, 3));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiEval>} value */
proto.xcalar.compute.localtypes.Operator.FilterRequest.prototype.setEvalList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiEval=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarApiEval}
 */
proto.xcalar.compute.localtypes.Operator.FilterRequest.prototype.addEval = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.xcalar.compute.localtypes.Operator.XcalarApiEval, opt_index);
};


proto.xcalar.compute.localtypes.Operator.FilterRequest.prototype.clearEvalList = function() {
  this.setEvalList([]);
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 4;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.Operator.FilterRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 4));
};


/** @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value */
proto.xcalar.compute.localtypes.Operator.FilterRequest.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.xcalar.compute.localtypes.Operator.FilterRequest.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.Operator.FilterRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.FilterResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.FilterResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.FilterResponse.displayName = 'proto.xcalar.compute.localtypes.Operator.FilterResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.FilterResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.FilterResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.FilterResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.FilterResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.FilterResponse}
 */
proto.xcalar.compute.localtypes.Operator.FilterResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.FilterResponse;
  return proto.xcalar.compute.localtypes.Operator.FilterResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.FilterResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.FilterResponse}
 */
proto.xcalar.compute.localtypes.Operator.FilterResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.FilterResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.FilterResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.FilterResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.FilterResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string table_name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.FilterResponse.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.FilterResponse.prototype.setTableName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.JoinRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Operator.JoinRequest.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.JoinRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.JoinRequest.displayName = 'proto.xcalar.compute.localtypes.Operator.JoinRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Operator.JoinRequest.repeatedFields_ = [1,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.JoinRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.JoinRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.JoinRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.JoinRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceList: jspb.Message.getRepeatedField(msg, 1),
    dest: jspb.Message.getFieldWithDefault(msg, 2, ""),
    joinType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    columnsList: jspb.Message.toObjectList(msg.getColumnsList(),
    proto.xcalar.compute.localtypes.Operator.Columns.toObject, includeInstance),
    evalString: jspb.Message.getFieldWithDefault(msg, 5, ""),
    keepAllColumns: jspb.Message.getFieldWithDefault(msg, 6, false),
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.JoinRequest}
 */
proto.xcalar.compute.localtypes.Operator.JoinRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.JoinRequest;
  return proto.xcalar.compute.localtypes.Operator.JoinRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.JoinRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.JoinRequest}
 */
proto.xcalar.compute.localtypes.Operator.JoinRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addSource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDest(value);
      break;
    case 3:
      var value = /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.JoinOperator} */ (reader.readEnum());
      msg.setJoinType(value);
      break;
    case 4:
      var value = new proto.xcalar.compute.localtypes.Operator.Columns;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Operator.Columns.deserializeBinaryFromReader);
      msg.addColumns(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEvalString(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setKeepAllColumns(value);
      break;
    case 7:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.JoinRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.JoinRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.JoinRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.JoinRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getDest();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getJoinType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.xcalar.compute.localtypes.Operator.Columns.serializeBinaryToWriter
    );
  }
  f = message.getEvalString();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getKeepAllColumns();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string source = 1;
 * @return {!Array<string>}
 */
proto.xcalar.compute.localtypes.Operator.JoinRequest.prototype.getSourceList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.xcalar.compute.localtypes.Operator.JoinRequest.prototype.setSourceList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.xcalar.compute.localtypes.Operator.JoinRequest.prototype.addSource = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.xcalar.compute.localtypes.Operator.JoinRequest.prototype.clearSourceList = function() {
  this.setSourceList([]);
};


/**
 * optional string dest = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.JoinRequest.prototype.getDest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.JoinRequest.prototype.setDest = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional xcalar.compute.localtypes.XcalarEnumType.JoinOperator join_type = 3;
 * @return {!proto.xcalar.compute.localtypes.XcalarEnumType.JoinOperator}
 */
proto.xcalar.compute.localtypes.Operator.JoinRequest.prototype.getJoinType = function() {
  return /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.JoinOperator} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.xcalar.compute.localtypes.XcalarEnumType.JoinOperator} value */
proto.xcalar.compute.localtypes.Operator.JoinRequest.prototype.setJoinType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated Columns columns = 4;
 * @return {!Array<!proto.xcalar.compute.localtypes.Operator.Columns>}
 */
proto.xcalar.compute.localtypes.Operator.JoinRequest.prototype.getColumnsList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.Operator.Columns>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.Operator.Columns, 4));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.Operator.Columns>} value */
proto.xcalar.compute.localtypes.Operator.JoinRequest.prototype.setColumnsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.Operator.Columns=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.Operator.Columns}
 */
proto.xcalar.compute.localtypes.Operator.JoinRequest.prototype.addColumns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.xcalar.compute.localtypes.Operator.Columns, opt_index);
};


proto.xcalar.compute.localtypes.Operator.JoinRequest.prototype.clearColumnsList = function() {
  this.setColumnsList([]);
};


/**
 * optional string eval_string = 5;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.JoinRequest.prototype.getEvalString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.JoinRequest.prototype.setEvalString = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool keep_all_columns = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Operator.JoinRequest.prototype.getKeepAllColumns = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.xcalar.compute.localtypes.Operator.JoinRequest.prototype.setKeepAllColumns = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 7;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.Operator.JoinRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 7));
};


/** @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value */
proto.xcalar.compute.localtypes.Operator.JoinRequest.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.xcalar.compute.localtypes.Operator.JoinRequest.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.Operator.JoinRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.JoinResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.JoinResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.JoinResponse.displayName = 'proto.xcalar.compute.localtypes.Operator.JoinResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.JoinResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.JoinResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.JoinResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.JoinResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.JoinResponse}
 */
proto.xcalar.compute.localtypes.Operator.JoinResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.JoinResponse;
  return proto.xcalar.compute.localtypes.Operator.JoinResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.JoinResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.JoinResponse}
 */
proto.xcalar.compute.localtypes.Operator.JoinResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.JoinResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.JoinResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.JoinResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.JoinResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string table_name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.JoinResponse.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.JoinResponse.prototype.setTableName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.MapRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Operator.MapRequest.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.MapRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.MapRequest.displayName = 'proto.xcalar.compute.localtypes.Operator.MapRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Operator.MapRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.MapRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.MapRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.MapRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.MapRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dest: jspb.Message.getFieldWithDefault(msg, 2, ""),
    evalsList: jspb.Message.toObjectList(msg.getEvalsList(),
    proto.xcalar.compute.localtypes.Operator.XcalarApiEval.toObject, includeInstance),
    icv: jspb.Message.getFieldWithDefault(msg, 4, false),
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.MapRequest}
 */
proto.xcalar.compute.localtypes.Operator.MapRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.MapRequest;
  return proto.xcalar.compute.localtypes.Operator.MapRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.MapRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.MapRequest}
 */
proto.xcalar.compute.localtypes.Operator.MapRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDest(value);
      break;
    case 3:
      var value = new proto.xcalar.compute.localtypes.Operator.XcalarApiEval;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Operator.XcalarApiEval.deserializeBinaryFromReader);
      msg.addEvals(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIcv(value);
      break;
    case 5:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.MapRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.MapRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.MapRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.MapRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDest();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEvalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.xcalar.compute.localtypes.Operator.XcalarApiEval.serializeBinaryToWriter
    );
  }
  f = message.getIcv();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.MapRequest.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.MapRequest.prototype.setSource = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string dest = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.MapRequest.prototype.getDest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.MapRequest.prototype.setDest = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated XcalarApiEval evals = 3;
 * @return {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiEval>}
 */
proto.xcalar.compute.localtypes.Operator.MapRequest.prototype.getEvalsList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiEval>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.Operator.XcalarApiEval, 3));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiEval>} value */
proto.xcalar.compute.localtypes.Operator.MapRequest.prototype.setEvalsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiEval=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarApiEval}
 */
proto.xcalar.compute.localtypes.Operator.MapRequest.prototype.addEvals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.xcalar.compute.localtypes.Operator.XcalarApiEval, opt_index);
};


proto.xcalar.compute.localtypes.Operator.MapRequest.prototype.clearEvalsList = function() {
  this.setEvalsList([]);
};


/**
 * optional bool icv = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Operator.MapRequest.prototype.getIcv = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.xcalar.compute.localtypes.Operator.MapRequest.prototype.setIcv = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 5;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.Operator.MapRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 5));
};


/** @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value */
proto.xcalar.compute.localtypes.Operator.MapRequest.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.xcalar.compute.localtypes.Operator.MapRequest.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.Operator.MapRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.MapResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.MapResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.MapResponse.displayName = 'proto.xcalar.compute.localtypes.Operator.MapResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.MapResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.MapResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.MapResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.MapResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.MapResponse}
 */
proto.xcalar.compute.localtypes.Operator.MapResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.MapResponse;
  return proto.xcalar.compute.localtypes.Operator.MapResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.MapResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.MapResponse}
 */
proto.xcalar.compute.localtypes.Operator.MapResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.MapResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.MapResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.MapResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.MapResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string table_name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.MapResponse.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.MapResponse.prototype.setTableName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Operator.GroupByRequest.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.GroupByRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.GroupByRequest.displayName = 'proto.xcalar.compute.localtypes.Operator.GroupByRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.GroupByRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.GroupByRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dest: jspb.Message.getFieldWithDefault(msg, 2, ""),
    evalsList: jspb.Message.toObjectList(msg.getEvalsList(),
    proto.xcalar.compute.localtypes.Operator.XcalarApiEval.toObject, includeInstance),
    newKeyField: jspb.Message.getFieldWithDefault(msg, 4, ""),
    includeSample: jspb.Message.getFieldWithDefault(msg, 5, false),
    icv: jspb.Message.getFieldWithDefault(msg, 6, false),
    groupAll: jspb.Message.getFieldWithDefault(msg, 7, false),
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.GroupByRequest}
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.GroupByRequest;
  return proto.xcalar.compute.localtypes.Operator.GroupByRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.GroupByRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.GroupByRequest}
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDest(value);
      break;
    case 3:
      var value = new proto.xcalar.compute.localtypes.Operator.XcalarApiEval;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Operator.XcalarApiEval.deserializeBinaryFromReader);
      msg.addEvals(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewKeyField(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeSample(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIcv(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGroupAll(value);
      break;
    case 8:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.GroupByRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.GroupByRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDest();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEvalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.xcalar.compute.localtypes.Operator.XcalarApiEval.serializeBinaryToWriter
    );
  }
  f = message.getNewKeyField();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIncludeSample();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getIcv();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getGroupAll();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.setSource = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string dest = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.getDest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.setDest = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated XcalarApiEval evals = 3;
 * @return {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiEval>}
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.getEvalsList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiEval>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.Operator.XcalarApiEval, 3));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiEval>} value */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.setEvalsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiEval=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarApiEval}
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.addEvals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.xcalar.compute.localtypes.Operator.XcalarApiEval, opt_index);
};


proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.clearEvalsList = function() {
  this.setEvalsList([]);
};


/**
 * optional string new_key_field = 4;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.getNewKeyField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.setNewKeyField = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool include_sample = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.getIncludeSample = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.setIncludeSample = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool icv = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.getIcv = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.setIcv = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool group_all = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.getGroupAll = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.setGroupAll = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 8;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 8));
};


/** @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.GroupByResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.GroupByResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.GroupByResponse.displayName = 'proto.xcalar.compute.localtypes.Operator.GroupByResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.GroupByResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.GroupByResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.GroupByResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.GroupByResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.GroupByResponse}
 */
proto.xcalar.compute.localtypes.Operator.GroupByResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.GroupByResponse;
  return proto.xcalar.compute.localtypes.Operator.GroupByResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.GroupByResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.GroupByResponse}
 */
proto.xcalar.compute.localtypes.Operator.GroupByResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.GroupByResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.GroupByResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.GroupByResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.GroupByResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string table_name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.GroupByResponse.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.GroupByResponse.prototype.setTableName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiColumn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.XcalarApiColumn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.displayName = 'proto.xcalar.compute.localtypes.Operator.XcalarApiColumn';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceColumn: jspb.Message.getFieldWithDefault(msg, 1, ""),
    destColumn: jspb.Message.getFieldWithDefault(msg, 2, ""),
    columnType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.XcalarApiColumn;
  return proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceColumn(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestColumn(value);
      break;
    case 3:
      var value = /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.DfFieldType} */ (reader.readEnum());
      msg.setColumnType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceColumn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDestColumn();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getColumnType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string source_column = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.prototype.getSourceColumn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.prototype.setSourceColumn = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string dest_column = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.prototype.getDestColumn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.prototype.setDestColumn = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional xcalar.compute.localtypes.XcalarEnumType.DfFieldType column_type = 3;
 * @return {!proto.xcalar.compute.localtypes.XcalarEnumType.DfFieldType}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.prototype.getColumnType = function() {
  return /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.DfFieldType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.xcalar.compute.localtypes.XcalarEnumType.DfFieldType} value */
proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.prototype.setColumnType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.Columns = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Operator.Columns.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.Columns, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.Columns.displayName = 'proto.xcalar.compute.localtypes.Operator.Columns';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Operator.Columns.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.Columns.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.Columns.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.Columns} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.Columns.toObject = function(includeInstance, msg) {
  var f, obj = {
    colsList: jspb.Message.toObjectList(msg.getColsList(),
    proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.Columns}
 */
proto.xcalar.compute.localtypes.Operator.Columns.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.Columns;
  return proto.xcalar.compute.localtypes.Operator.Columns.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.Columns} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.Columns}
 */
proto.xcalar.compute.localtypes.Operator.Columns.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.Operator.XcalarApiColumn;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.deserializeBinaryFromReader);
      msg.addCols(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.Columns.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.Columns.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.Columns} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.Columns.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.serializeBinaryToWriter
    );
  }
};


/**
 * repeated XcalarApiColumn cols = 1;
 * @return {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn>}
 */
proto.xcalar.compute.localtypes.Operator.Columns.prototype.getColsList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.Operator.XcalarApiColumn, 1));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn>} value */
proto.xcalar.compute.localtypes.Operator.Columns.prototype.setColsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn}
 */
proto.xcalar.compute.localtypes.Operator.Columns.prototype.addCols = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.xcalar.compute.localtypes.Operator.XcalarApiColumn, opt_index);
};


proto.xcalar.compute.localtypes.Operator.Columns.prototype.clearColsList = function() {
  this.setColsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Operator.UnionRequest.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.UnionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.UnionRequest.displayName = 'proto.xcalar.compute.localtypes.Operator.UnionRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest.repeatedFields_ = [1,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.UnionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.UnionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceList: jspb.Message.getRepeatedField(msg, 1),
    dest: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dedup: jspb.Message.getFieldWithDefault(msg, 3, false),
    columnsList: jspb.Message.toObjectList(msg.getColumnsList(),
    proto.xcalar.compute.localtypes.Operator.Columns.toObject, includeInstance),
    unionType: jspb.Message.getFieldWithDefault(msg, 5, 0),
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.UnionRequest}
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.UnionRequest;
  return proto.xcalar.compute.localtypes.Operator.UnionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.UnionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.UnionRequest}
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addSource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDest(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDedup(value);
      break;
    case 4:
      var value = new proto.xcalar.compute.localtypes.Operator.Columns;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Operator.Columns.deserializeBinaryFromReader);
      msg.addColumns(value);
      break;
    case 5:
      var value = /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.UnionOperator} */ (reader.readEnum());
      msg.setUnionType(value);
      break;
    case 6:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.UnionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.UnionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getDest();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDedup();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.xcalar.compute.localtypes.Operator.Columns.serializeBinaryToWriter
    );
  }
  f = message.getUnionType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string source = 1;
 * @return {!Array<string>}
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.getSourceList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.setSourceList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.addSource = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.clearSourceList = function() {
  this.setSourceList([]);
};


/**
 * optional string dest = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.getDest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.setDest = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool dedup = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.getDedup = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.setDedup = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * repeated Columns columns = 4;
 * @return {!Array<!proto.xcalar.compute.localtypes.Operator.Columns>}
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.getColumnsList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.Operator.Columns>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.Operator.Columns, 4));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.Operator.Columns>} value */
proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.setColumnsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.Operator.Columns=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.Operator.Columns}
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.addColumns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.xcalar.compute.localtypes.Operator.Columns, opt_index);
};


proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.clearColumnsList = function() {
  this.setColumnsList([]);
};


/**
 * optional xcalar.compute.localtypes.XcalarEnumType.UnionOperator union_type = 5;
 * @return {!proto.xcalar.compute.localtypes.XcalarEnumType.UnionOperator}
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.getUnionType = function() {
  return /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.UnionOperator} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.xcalar.compute.localtypes.XcalarEnumType.UnionOperator} value */
proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.setUnionType = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 6;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 6));
};


/** @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value */
proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.UnionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.UnionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.UnionResponse.displayName = 'proto.xcalar.compute.localtypes.Operator.UnionResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.UnionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.UnionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.UnionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.UnionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.UnionResponse}
 */
proto.xcalar.compute.localtypes.Operator.UnionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.UnionResponse;
  return proto.xcalar.compute.localtypes.Operator.UnionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.UnionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.UnionResponse}
 */
proto.xcalar.compute.localtypes.Operator.UnionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.UnionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.UnionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.UnionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.UnionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string table_name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.UnionResponse.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.UnionResponse.prototype.setTableName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn.displayName = 'proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn.toObject = function(includeInstance, msg) {
  var f, obj = {
    columnName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    headerName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn;
  return proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setColumnName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeaderName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColumnName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeaderName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string column_name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn.prototype.getColumnName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn.prototype.setColumnName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string header_name = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn.prototype.getHeaderName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn.prototype.setHeaderName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.ExportRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Operator.ExportRequest.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.ExportRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.ExportRequest.displayName = 'proto.xcalar.compute.localtypes.Operator.ExportRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Operator.ExportRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.ExportRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.ExportRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.ExportRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.ExportRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dest: jspb.Message.getFieldWithDefault(msg, 2, ""),
    columnsList: jspb.Message.toObjectList(msg.getColumnsList(),
    proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn.toObject, includeInstance),
    driverName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    driverParams: jspb.Message.getFieldWithDefault(msg, 5, ""),
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.ExportRequest}
 */
proto.xcalar.compute.localtypes.Operator.ExportRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.ExportRequest;
  return proto.xcalar.compute.localtypes.Operator.ExportRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.ExportRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.ExportRequest}
 */
proto.xcalar.compute.localtypes.Operator.ExportRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDest(value);
      break;
    case 3:
      var value = new proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn.deserializeBinaryFromReader);
      msg.addColumns(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDriverName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDriverParams(value);
      break;
    case 6:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.ExportRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.ExportRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.ExportRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.ExportRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDest();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn.serializeBinaryToWriter
    );
  }
  f = message.getDriverName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDriverParams();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.ExportRequest.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.ExportRequest.prototype.setSource = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string dest = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.ExportRequest.prototype.getDest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.ExportRequest.prototype.setDest = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated XcalarApiExportColumn columns = 3;
 * @return {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn>}
 */
proto.xcalar.compute.localtypes.Operator.ExportRequest.prototype.getColumnsList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn, 3));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn>} value */
proto.xcalar.compute.localtypes.Operator.ExportRequest.prototype.setColumnsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn}
 */
proto.xcalar.compute.localtypes.Operator.ExportRequest.prototype.addColumns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.xcalar.compute.localtypes.Operator.XcalarApiExportColumn, opt_index);
};


proto.xcalar.compute.localtypes.Operator.ExportRequest.prototype.clearColumnsList = function() {
  this.setColumnsList([]);
};


/**
 * optional string driver_name = 4;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.ExportRequest.prototype.getDriverName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.ExportRequest.prototype.setDriverName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string driver_params = 5;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.ExportRequest.prototype.getDriverParams = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.ExportRequest.prototype.setDriverParams = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 6;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.Operator.ExportRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 6));
};


/** @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value */
proto.xcalar.compute.localtypes.Operator.ExportRequest.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.xcalar.compute.localtypes.Operator.ExportRequest.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.Operator.ExportRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.ExportResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.ExportResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.ExportResponse.displayName = 'proto.xcalar.compute.localtypes.Operator.ExportResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.ExportResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.ExportResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.ExportResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.ExportResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.ExportResponse}
 */
proto.xcalar.compute.localtypes.Operator.ExportResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.ExportResponse;
  return proto.xcalar.compute.localtypes.Operator.ExportResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.ExportResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.ExportResponse}
 */
proto.xcalar.compute.localtypes.Operator.ExportResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.ExportResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.ExportResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.ExportResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.ExportResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.SynthesizeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Operator.SynthesizeRequest.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.SynthesizeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.SynthesizeRequest.displayName = 'proto.xcalar.compute.localtypes.Operator.SynthesizeRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Operator.SynthesizeRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.SynthesizeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.SynthesizeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.SynthesizeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.SynthesizeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dest: jspb.Message.getFieldWithDefault(msg, 2, ""),
    columnsList: jspb.Message.toObjectList(msg.getColumnsList(),
    proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.toObject, includeInstance),
    sameSession: jspb.Message.getFieldWithDefault(msg, 4, false),
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.SynthesizeRequest}
 */
proto.xcalar.compute.localtypes.Operator.SynthesizeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.SynthesizeRequest;
  return proto.xcalar.compute.localtypes.Operator.SynthesizeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.SynthesizeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.SynthesizeRequest}
 */
proto.xcalar.compute.localtypes.Operator.SynthesizeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDest(value);
      break;
    case 3:
      var value = new proto.xcalar.compute.localtypes.Operator.XcalarApiColumn;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.deserializeBinaryFromReader);
      msg.addColumns(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSameSession(value);
      break;
    case 5:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.SynthesizeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.SynthesizeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.SynthesizeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.SynthesizeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDest();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.serializeBinaryToWriter
    );
  }
  f = message.getSameSession();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.SynthesizeRequest.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.SynthesizeRequest.prototype.setSource = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string dest = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.SynthesizeRequest.prototype.getDest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.SynthesizeRequest.prototype.setDest = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated XcalarApiColumn columns = 3;
 * @return {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn>}
 */
proto.xcalar.compute.localtypes.Operator.SynthesizeRequest.prototype.getColumnsList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.Operator.XcalarApiColumn, 3));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn>} value */
proto.xcalar.compute.localtypes.Operator.SynthesizeRequest.prototype.setColumnsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn}
 */
proto.xcalar.compute.localtypes.Operator.SynthesizeRequest.prototype.addColumns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.xcalar.compute.localtypes.Operator.XcalarApiColumn, opt_index);
};


proto.xcalar.compute.localtypes.Operator.SynthesizeRequest.prototype.clearColumnsList = function() {
  this.setColumnsList([]);
};


/**
 * optional bool same_session = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Operator.SynthesizeRequest.prototype.getSameSession = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.xcalar.compute.localtypes.Operator.SynthesizeRequest.prototype.setSameSession = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 5;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.Operator.SynthesizeRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 5));
};


/** @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value */
proto.xcalar.compute.localtypes.Operator.SynthesizeRequest.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.xcalar.compute.localtypes.Operator.SynthesizeRequest.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.Operator.SynthesizeRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.SynthesizeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.SynthesizeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.SynthesizeResponse.displayName = 'proto.xcalar.compute.localtypes.Operator.SynthesizeResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.SynthesizeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.SynthesizeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.SynthesizeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.SynthesizeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.SynthesizeResponse}
 */
proto.xcalar.compute.localtypes.Operator.SynthesizeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.SynthesizeResponse;
  return proto.xcalar.compute.localtypes.Operator.SynthesizeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.SynthesizeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.SynthesizeResponse}
 */
proto.xcalar.compute.localtypes.Operator.SynthesizeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.SynthesizeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.SynthesizeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.SynthesizeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.SynthesizeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string table_name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.SynthesizeResponse.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.SynthesizeResponse.prototype.setTableName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.DataSourceArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.DataSourceArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.DataSourceArgs.displayName = 'proto.xcalar.compute.localtypes.Operator.DataSourceArgs';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.DataSourceArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.DataSourceArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.DataSourceArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.DataSourceArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    path: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fileNamePattern: jspb.Message.getFieldWithDefault(msg, 3, ""),
    recursive: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.DataSourceArgs}
 */
proto.xcalar.compute.localtypes.Operator.DataSourceArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.DataSourceArgs;
  return proto.xcalar.compute.localtypes.Operator.DataSourceArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.DataSourceArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.DataSourceArgs}
 */
proto.xcalar.compute.localtypes.Operator.DataSourceArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileNamePattern(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRecursive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.DataSourceArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.DataSourceArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.DataSourceArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.DataSourceArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargetName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFileNamePattern();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRecursive();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string target_name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.DataSourceArgs.prototype.getTargetName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.DataSourceArgs.prototype.setTargetName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string path = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.DataSourceArgs.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.DataSourceArgs.prototype.setPath = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string file_name_pattern = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.DataSourceArgs.prototype.getFileNamePattern = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.DataSourceArgs.prototype.setFileNamePattern = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool recursive = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Operator.DataSourceArgs.prototype.getRecursive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.xcalar.compute.localtypes.Operator.DataSourceArgs.prototype.setRecursive = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.ParseArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Operator.ParseArgs.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.ParseArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.ParseArgs.displayName = 'proto.xcalar.compute.localtypes.Operator.ParseArgs';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Operator.ParseArgs.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.ParseArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.ParseArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.ParseArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.ParseArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    parserFnName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    parserArgJson: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fileNameFieldName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    recordNumFieldName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    allowRecordErrors: jspb.Message.getFieldWithDefault(msg, 5, false),
    allowFileErrors: jspb.Message.getFieldWithDefault(msg, 6, false),
    schemaList: jspb.Message.toObjectList(msg.getSchemaList(),
    proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.ParseArgs}
 */
proto.xcalar.compute.localtypes.Operator.ParseArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.ParseArgs;
  return proto.xcalar.compute.localtypes.Operator.ParseArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.ParseArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.ParseArgs}
 */
proto.xcalar.compute.localtypes.Operator.ParseArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParserFnName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setParserArgJson(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileNameFieldName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecordNumFieldName(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowRecordErrors(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowFileErrors(value);
      break;
    case 7:
      var value = new proto.xcalar.compute.localtypes.Operator.XcalarApiColumn;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.deserializeBinaryFromReader);
      msg.addSchema(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.ParseArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.ParseArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.ParseArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.ParseArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParserFnName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParserArgJson();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFileNameFieldName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRecordNumFieldName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAllowRecordErrors();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getAllowFileErrors();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getSchemaList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.serializeBinaryToWriter
    );
  }
};


/**
 * optional string parser_fn_name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.ParseArgs.prototype.getParserFnName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.ParseArgs.prototype.setParserFnName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string parser_arg_json = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.ParseArgs.prototype.getParserArgJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.ParseArgs.prototype.setParserArgJson = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string file_name_field_name = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.ParseArgs.prototype.getFileNameFieldName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.ParseArgs.prototype.setFileNameFieldName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string record_num_field_name = 4;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.ParseArgs.prototype.getRecordNumFieldName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.ParseArgs.prototype.setRecordNumFieldName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool allow_record_errors = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Operator.ParseArgs.prototype.getAllowRecordErrors = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.xcalar.compute.localtypes.Operator.ParseArgs.prototype.setAllowRecordErrors = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool allow_file_errors = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Operator.ParseArgs.prototype.getAllowFileErrors = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.xcalar.compute.localtypes.Operator.ParseArgs.prototype.setAllowFileErrors = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * repeated XcalarApiColumn schema = 7;
 * @return {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn>}
 */
proto.xcalar.compute.localtypes.Operator.ParseArgs.prototype.getSchemaList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.Operator.XcalarApiColumn, 7));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn>} value */
proto.xcalar.compute.localtypes.Operator.ParseArgs.prototype.setSchemaList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn}
 */
proto.xcalar.compute.localtypes.Operator.ParseArgs.prototype.addSchema = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.xcalar.compute.localtypes.Operator.XcalarApiColumn, opt_index);
};


proto.xcalar.compute.localtypes.Operator.ParseArgs.prototype.clearSchemaList = function() {
  this.setSchemaList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.DfLoadArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Operator.DfLoadArgs.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.DfLoadArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.DfLoadArgs.displayName = 'proto.xcalar.compute.localtypes.Operator.DfLoadArgs';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Operator.DfLoadArgs.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.DfLoadArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.DfLoadArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.DfLoadArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.DfLoadArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceArgsListList: jspb.Message.toObjectList(msg.getSourceArgsListList(),
    proto.xcalar.compute.localtypes.Operator.DataSourceArgs.toObject, includeInstance),
    parseArgs: (f = msg.getParseArgs()) && proto.xcalar.compute.localtypes.Operator.ParseArgs.toObject(includeInstance, f),
    size: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.DfLoadArgs}
 */
proto.xcalar.compute.localtypes.Operator.DfLoadArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.DfLoadArgs;
  return proto.xcalar.compute.localtypes.Operator.DfLoadArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.DfLoadArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.DfLoadArgs}
 */
proto.xcalar.compute.localtypes.Operator.DfLoadArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.Operator.DataSourceArgs;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Operator.DataSourceArgs.deserializeBinaryFromReader);
      msg.addSourceArgsList(value);
      break;
    case 2:
      var value = new proto.xcalar.compute.localtypes.Operator.ParseArgs;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Operator.ParseArgs.deserializeBinaryFromReader);
      msg.setParseArgs(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.DfLoadArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.DfLoadArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.DfLoadArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.DfLoadArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceArgsListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.Operator.DataSourceArgs.serializeBinaryToWriter
    );
  }
  f = message.getParseArgs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.xcalar.compute.localtypes.Operator.ParseArgs.serializeBinaryToWriter
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * repeated DataSourceArgs source_args_list = 1;
 * @return {!Array<!proto.xcalar.compute.localtypes.Operator.DataSourceArgs>}
 */
proto.xcalar.compute.localtypes.Operator.DfLoadArgs.prototype.getSourceArgsListList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.Operator.DataSourceArgs>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.Operator.DataSourceArgs, 1));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.Operator.DataSourceArgs>} value */
proto.xcalar.compute.localtypes.Operator.DfLoadArgs.prototype.setSourceArgsListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.Operator.DataSourceArgs=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.Operator.DataSourceArgs}
 */
proto.xcalar.compute.localtypes.Operator.DfLoadArgs.prototype.addSourceArgsList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.xcalar.compute.localtypes.Operator.DataSourceArgs, opt_index);
};


proto.xcalar.compute.localtypes.Operator.DfLoadArgs.prototype.clearSourceArgsListList = function() {
  this.setSourceArgsListList([]);
};


/**
 * optional ParseArgs parse_args = 2;
 * @return {?proto.xcalar.compute.localtypes.Operator.ParseArgs}
 */
proto.xcalar.compute.localtypes.Operator.DfLoadArgs.prototype.getParseArgs = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Operator.ParseArgs} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.Operator.ParseArgs, 2));
};


/** @param {?proto.xcalar.compute.localtypes.Operator.ParseArgs|undefined} value */
proto.xcalar.compute.localtypes.Operator.DfLoadArgs.prototype.setParseArgs = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.xcalar.compute.localtypes.Operator.DfLoadArgs.prototype.clearParseArgs = function() {
  this.setParseArgs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.Operator.DfLoadArgs.prototype.hasParseArgs = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 size = 3;
 * @return {number}
 */
proto.xcalar.compute.localtypes.Operator.DfLoadArgs.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.Operator.DfLoadArgs.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.BulkLoadRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.BulkLoadRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.BulkLoadRequest.displayName = 'proto.xcalar.compute.localtypes.Operator.BulkLoadRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.BulkLoadRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.BulkLoadRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.BulkLoadRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.BulkLoadRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f),
    dest: jspb.Message.getFieldWithDefault(msg, 2, ""),
    loadArgs: (f = msg.getLoadArgs()) && proto.xcalar.compute.localtypes.Operator.DfLoadArgs.toObject(includeInstance, f),
    dagNodeId: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.BulkLoadRequest}
 */
proto.xcalar.compute.localtypes.Operator.BulkLoadRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.BulkLoadRequest;
  return proto.xcalar.compute.localtypes.Operator.BulkLoadRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.BulkLoadRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.BulkLoadRequest}
 */
proto.xcalar.compute.localtypes.Operator.BulkLoadRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDest(value);
      break;
    case 3:
      var value = new proto.xcalar.compute.localtypes.Operator.DfLoadArgs;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Operator.DfLoadArgs.deserializeBinaryFromReader);
      msg.setLoadArgs(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDagNodeId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.BulkLoadRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.BulkLoadRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.BulkLoadRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.BulkLoadRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
  f = message.getDest();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLoadArgs();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.xcalar.compute.localtypes.Operator.DfLoadArgs.serializeBinaryToWriter
    );
  }
  f = message.getDagNodeId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 1;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.Operator.BulkLoadRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 1));
};


/** @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value */
proto.xcalar.compute.localtypes.Operator.BulkLoadRequest.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xcalar.compute.localtypes.Operator.BulkLoadRequest.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.Operator.BulkLoadRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string dest = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.BulkLoadRequest.prototype.getDest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.BulkLoadRequest.prototype.setDest = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional DfLoadArgs load_args = 3;
 * @return {?proto.xcalar.compute.localtypes.Operator.DfLoadArgs}
 */
proto.xcalar.compute.localtypes.Operator.BulkLoadRequest.prototype.getLoadArgs = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Operator.DfLoadArgs} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.Operator.DfLoadArgs, 3));
};


/** @param {?proto.xcalar.compute.localtypes.Operator.DfLoadArgs|undefined} value */
proto.xcalar.compute.localtypes.Operator.BulkLoadRequest.prototype.setLoadArgs = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.xcalar.compute.localtypes.Operator.BulkLoadRequest.prototype.clearLoadArgs = function() {
  this.setLoadArgs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.Operator.BulkLoadRequest.prototype.hasLoadArgs = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string dag_node_id = 4;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.BulkLoadRequest.prototype.getDagNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.BulkLoadRequest.prototype.setDagNodeId = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.XcalarDataSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.XcalarDataSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.XcalarDataSet.displayName = 'proto.xcalar.compute.localtypes.Operator.XcalarDataSet';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.XcalarDataSet.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.XcalarDataSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarDataSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.XcalarDataSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    loadArgs: (f = msg.getLoadArgs()) && proto.xcalar.compute.localtypes.Operator.DfLoadArgs.toObject(includeInstance, f),
    datasetId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    loadIsComplete: jspb.Message.getFieldWithDefault(msg, 4, false),
    isListable: jspb.Message.getFieldWithDefault(msg, 5, false),
    udfName: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarDataSet}
 */
proto.xcalar.compute.localtypes.Operator.XcalarDataSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.XcalarDataSet;
  return proto.xcalar.compute.localtypes.Operator.XcalarDataSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarDataSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarDataSet}
 */
proto.xcalar.compute.localtypes.Operator.XcalarDataSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.Operator.DfLoadArgs;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Operator.DfLoadArgs.deserializeBinaryFromReader);
      msg.setLoadArgs(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatasetId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLoadIsComplete(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsListable(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUdfName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.XcalarDataSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.XcalarDataSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarDataSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.XcalarDataSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoadArgs();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.Operator.DfLoadArgs.serializeBinaryToWriter
    );
  }
  f = message.getDatasetId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLoadIsComplete();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getIsListable();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getUdfName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional DfLoadArgs load_args = 1;
 * @return {?proto.xcalar.compute.localtypes.Operator.DfLoadArgs}
 */
proto.xcalar.compute.localtypes.Operator.XcalarDataSet.prototype.getLoadArgs = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Operator.DfLoadArgs} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.Operator.DfLoadArgs, 1));
};


/** @param {?proto.xcalar.compute.localtypes.Operator.DfLoadArgs|undefined} value */
proto.xcalar.compute.localtypes.Operator.XcalarDataSet.prototype.setLoadArgs = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xcalar.compute.localtypes.Operator.XcalarDataSet.prototype.clearLoadArgs = function() {
  this.setLoadArgs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.Operator.XcalarDataSet.prototype.hasLoadArgs = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string dataset_id = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.XcalarDataSet.prototype.getDatasetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.XcalarDataSet.prototype.setDatasetId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.XcalarDataSet.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.XcalarDataSet.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool load_is_complete = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Operator.XcalarDataSet.prototype.getLoadIsComplete = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.xcalar.compute.localtypes.Operator.XcalarDataSet.prototype.setLoadIsComplete = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool is_listable = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Operator.XcalarDataSet.prototype.getIsListable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.xcalar.compute.localtypes.Operator.XcalarDataSet.prototype.setIsListable = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string udf_name = 6;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.XcalarDataSet.prototype.getUdfName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.XcalarDataSet.prototype.setUdfName = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.BulkLoadResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.BulkLoadResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.BulkLoadResponse.displayName = 'proto.xcalar.compute.localtypes.Operator.BulkLoadResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.BulkLoadResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.BulkLoadResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.BulkLoadResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.BulkLoadResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataset: (f = msg.getDataset()) && proto.xcalar.compute.localtypes.Operator.XcalarDataSet.toObject(includeInstance, f),
    numFiles: jspb.Message.getFieldWithDefault(msg, 2, 0),
    numBytes: jspb.Message.getFieldWithDefault(msg, 3, 0),
    errorString: jspb.Message.getFieldWithDefault(msg, 4, ""),
    errorFile: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.BulkLoadResponse}
 */
proto.xcalar.compute.localtypes.Operator.BulkLoadResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.BulkLoadResponse;
  return proto.xcalar.compute.localtypes.Operator.BulkLoadResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.BulkLoadResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.BulkLoadResponse}
 */
proto.xcalar.compute.localtypes.Operator.BulkLoadResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.Operator.XcalarDataSet;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Operator.XcalarDataSet.deserializeBinaryFromReader);
      msg.setDataset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumFiles(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumBytes(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorString(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorFile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.BulkLoadResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.BulkLoadResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.BulkLoadResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.BulkLoadResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataset();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.Operator.XcalarDataSet.serializeBinaryToWriter
    );
  }
  f = message.getNumFiles();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getNumBytes();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getErrorString();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getErrorFile();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional XcalarDataSet dataset = 1;
 * @return {?proto.xcalar.compute.localtypes.Operator.XcalarDataSet}
 */
proto.xcalar.compute.localtypes.Operator.BulkLoadResponse.prototype.getDataset = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Operator.XcalarDataSet} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.Operator.XcalarDataSet, 1));
};


/** @param {?proto.xcalar.compute.localtypes.Operator.XcalarDataSet|undefined} value */
proto.xcalar.compute.localtypes.Operator.BulkLoadResponse.prototype.setDataset = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xcalar.compute.localtypes.Operator.BulkLoadResponse.prototype.clearDataset = function() {
  this.setDataset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.Operator.BulkLoadResponse.prototype.hasDataset = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 num_files = 2;
 * @return {number}
 */
proto.xcalar.compute.localtypes.Operator.BulkLoadResponse.prototype.getNumFiles = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.Operator.BulkLoadResponse.prototype.setNumFiles = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 num_bytes = 3;
 * @return {number}
 */
proto.xcalar.compute.localtypes.Operator.BulkLoadResponse.prototype.getNumBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.Operator.BulkLoadResponse.prototype.setNumBytes = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string error_string = 4;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.BulkLoadResponse.prototype.getErrorString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.BulkLoadResponse.prototype.setErrorString = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string error_file = 5;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.BulkLoadResponse.prototype.getErrorFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.BulkLoadResponse.prototype.setErrorFile = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


goog.object.extend(exports, proto.xcalar.compute.localtypes.Operator);
