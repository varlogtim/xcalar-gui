/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
var xcalar_compute_localtypes_ColumnAttribute_pb = require('../../../xcalar/compute/localtypes/ColumnAttribute_pb.js');
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.Columns', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.ExecuteRetinaResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.GroupByRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.GroupByResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.MapRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.MapResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.UnionRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.UnionResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.XcalarApiColumn', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.XcalarApiEval', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.XcalarApiParameter', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiEval = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.XcalarApiEval, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.XcalarApiEval.displayName = 'proto.xcalar.compute.localtypes.Operator.XcalarApiEval';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiEval.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.XcalarApiEval.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiEval} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiEval.toObject = function(includeInstance, msg) {
  var f, obj = {
    evalString: jspb.Message.getFieldWithDefault(msg, 1, ""),
    newField: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarApiEval}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiEval.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.XcalarApiEval;
  return proto.xcalar.compute.localtypes.Operator.XcalarApiEval.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiEval} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarApiEval}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiEval.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEvalString(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewField(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiEval.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.XcalarApiEval.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiEval} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiEval.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvalString();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNewField();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string eval_string = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiEval.prototype.getEvalString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.XcalarApiEval.prototype.setEvalString = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string new_field = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiEval.prototype.getNewField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.XcalarApiEval.prototype.setNewField = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.MapRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Operator.MapRequest.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.MapRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.MapRequest.displayName = 'proto.xcalar.compute.localtypes.Operator.MapRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Operator.MapRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.MapRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.MapRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.MapRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.MapRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dest: jspb.Message.getFieldWithDefault(msg, 2, ""),
    evalsList: jspb.Message.toObjectList(msg.getEvalsList(),
    proto.xcalar.compute.localtypes.Operator.XcalarApiEval.toObject, includeInstance),
    icv: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.MapRequest}
 */
proto.xcalar.compute.localtypes.Operator.MapRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.MapRequest;
  return proto.xcalar.compute.localtypes.Operator.MapRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.MapRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.MapRequest}
 */
proto.xcalar.compute.localtypes.Operator.MapRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDest(value);
      break;
    case 3:
      var value = new proto.xcalar.compute.localtypes.Operator.XcalarApiEval;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Operator.XcalarApiEval.deserializeBinaryFromReader);
      msg.addEvals(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIcv(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.MapRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.MapRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.MapRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.MapRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDest();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEvalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.xcalar.compute.localtypes.Operator.XcalarApiEval.serializeBinaryToWriter
    );
  }
  f = message.getIcv();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.MapRequest.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.MapRequest.prototype.setSource = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string dest = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.MapRequest.prototype.getDest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.MapRequest.prototype.setDest = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated XcalarApiEval evals = 3;
 * @return {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiEval>}
 */
proto.xcalar.compute.localtypes.Operator.MapRequest.prototype.getEvalsList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiEval>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.Operator.XcalarApiEval, 3));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiEval>} value */
proto.xcalar.compute.localtypes.Operator.MapRequest.prototype.setEvalsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiEval=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarApiEval}
 */
proto.xcalar.compute.localtypes.Operator.MapRequest.prototype.addEvals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.xcalar.compute.localtypes.Operator.XcalarApiEval, opt_index);
};


proto.xcalar.compute.localtypes.Operator.MapRequest.prototype.clearEvalsList = function() {
  this.setEvalsList([]);
};


/**
 * optional bool icv = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Operator.MapRequest.prototype.getIcv = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.xcalar.compute.localtypes.Operator.MapRequest.prototype.setIcv = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo.displayName = 'proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupIdNum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    totalSingleStats: jspb.Message.getFieldWithDefault(msg, 2, 0),
    statsGroupName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo}
 */
proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo;
  return proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo}
 */
proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGroupIdNum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalSingleStats(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatsGroupName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupIdNum();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTotalSingleStats();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getStatsGroupName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int64 group_id_num = 1;
 * @return {number}
 */
proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo.prototype.getGroupIdNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo.prototype.setGroupIdNum = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 total_single_stats = 2;
 * @return {number}
 */
proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo.prototype.getTotalSingleStats = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo.prototype.setTotalSingleStats = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string stats_group_name = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo.prototype.getStatsGroupName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo.prototype.setStatsGroupName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.MapResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Operator.MapResponse.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.MapResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.MapResponse.displayName = 'proto.xcalar.compute.localtypes.Operator.MapResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Operator.MapResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.MapResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.MapResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.MapResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.MapResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    numGroupNames: jspb.Message.getFieldWithDefault(msg, 1, 0),
    truncated: jspb.Message.getFieldWithDefault(msg, 2, false),
    groupNameInfoArrayList: jspb.Message.toObjectList(msg.getGroupNameInfoArrayList(),
    proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.MapResponse}
 */
proto.xcalar.compute.localtypes.Operator.MapResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.MapResponse;
  return proto.xcalar.compute.localtypes.Operator.MapResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.MapResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.MapResponse}
 */
proto.xcalar.compute.localtypes.Operator.MapResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumGroupNames(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTruncated(value);
      break;
    case 3:
      var value = new proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo.deserializeBinaryFromReader);
      msg.addGroupNameInfoArray(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.MapResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.MapResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.MapResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.MapResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumGroupNames();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTruncated();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getGroupNameInfoArrayList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 num_group_names = 1;
 * @return {number}
 */
proto.xcalar.compute.localtypes.Operator.MapResponse.prototype.getNumGroupNames = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.Operator.MapResponse.prototype.setNumGroupNames = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool truncated = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Operator.MapResponse.prototype.getTruncated = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.xcalar.compute.localtypes.Operator.MapResponse.prototype.setTruncated = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * repeated XcalarStatGroupInfo group_name_info_array = 3;
 * @return {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo>}
 */
proto.xcalar.compute.localtypes.Operator.MapResponse.prototype.getGroupNameInfoArrayList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo, 3));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo>} value */
proto.xcalar.compute.localtypes.Operator.MapResponse.prototype.setGroupNameInfoArrayList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo}
 */
proto.xcalar.compute.localtypes.Operator.MapResponse.prototype.addGroupNameInfoArray = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.xcalar.compute.localtypes.Operator.XcalarStatGroupInfo, opt_index);
};


proto.xcalar.compute.localtypes.Operator.MapResponse.prototype.clearGroupNameInfoArrayList = function() {
  this.setGroupNameInfoArrayList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Operator.GroupByRequest.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.GroupByRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.GroupByRequest.displayName = 'proto.xcalar.compute.localtypes.Operator.GroupByRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.GroupByRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.GroupByRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dest: jspb.Message.getFieldWithDefault(msg, 2, ""),
    evalsList: jspb.Message.toObjectList(msg.getEvalsList(),
    proto.xcalar.compute.localtypes.Operator.XcalarApiEval.toObject, includeInstance),
    newKeyField: jspb.Message.getFieldWithDefault(msg, 4, ""),
    includeSample: jspb.Message.getFieldWithDefault(msg, 5, false),
    icv: jspb.Message.getFieldWithDefault(msg, 6, false),
    groupAll: jspb.Message.getFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.GroupByRequest}
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.GroupByRequest;
  return proto.xcalar.compute.localtypes.Operator.GroupByRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.GroupByRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.GroupByRequest}
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDest(value);
      break;
    case 3:
      var value = new proto.xcalar.compute.localtypes.Operator.XcalarApiEval;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Operator.XcalarApiEval.deserializeBinaryFromReader);
      msg.addEvals(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewKeyField(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeSample(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIcv(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGroupAll(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.GroupByRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.GroupByRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDest();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEvalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.xcalar.compute.localtypes.Operator.XcalarApiEval.serializeBinaryToWriter
    );
  }
  f = message.getNewKeyField();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIncludeSample();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getIcv();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getGroupAll();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.setSource = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string dest = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.getDest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.setDest = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated XcalarApiEval evals = 3;
 * @return {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiEval>}
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.getEvalsList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiEval>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.Operator.XcalarApiEval, 3));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiEval>} value */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.setEvalsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiEval=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarApiEval}
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.addEvals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.xcalar.compute.localtypes.Operator.XcalarApiEval, opt_index);
};


proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.clearEvalsList = function() {
  this.setEvalsList([]);
};


/**
 * optional string new_key_field = 4;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.getNewKeyField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.setNewKeyField = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool include_sample = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.getIncludeSample = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.setIncludeSample = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool icv = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.getIcv = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.setIcv = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool group_all = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.getGroupAll = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.xcalar.compute.localtypes.Operator.GroupByRequest.prototype.setGroupAll = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.GroupByResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.GroupByResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.GroupByResponse.displayName = 'proto.xcalar.compute.localtypes.Operator.GroupByResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.GroupByResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.GroupByResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.GroupByResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.GroupByResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.GroupByResponse}
 */
proto.xcalar.compute.localtypes.Operator.GroupByResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.GroupByResponse;
  return proto.xcalar.compute.localtypes.Operator.GroupByResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.GroupByResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.GroupByResponse}
 */
proto.xcalar.compute.localtypes.Operator.GroupByResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.GroupByResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.GroupByResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.GroupByResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.GroupByResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string table_name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.GroupByResponse.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.GroupByResponse.prototype.setTableName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiColumn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.XcalarApiColumn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.displayName = 'proto.xcalar.compute.localtypes.Operator.XcalarApiColumn';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceColumn: jspb.Message.getFieldWithDefault(msg, 1, ""),
    destColumn: jspb.Message.getFieldWithDefault(msg, 2, ""),
    columnType: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.XcalarApiColumn;
  return proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceColumn(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestColumn(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setColumnType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceColumn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDestColumn();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getColumnType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string source_column = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.prototype.getSourceColumn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.prototype.setSourceColumn = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string dest_column = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.prototype.getDestColumn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.prototype.setDestColumn = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string column_type = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.prototype.getColumnType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.prototype.setColumnType = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.Columns = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Operator.Columns.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.Columns, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.Columns.displayName = 'proto.xcalar.compute.localtypes.Operator.Columns';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Operator.Columns.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.Columns.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.Columns.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.Columns} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.Columns.toObject = function(includeInstance, msg) {
  var f, obj = {
    colsList: jspb.Message.toObjectList(msg.getColsList(),
    proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.Columns}
 */
proto.xcalar.compute.localtypes.Operator.Columns.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.Columns;
  return proto.xcalar.compute.localtypes.Operator.Columns.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.Columns} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.Columns}
 */
proto.xcalar.compute.localtypes.Operator.Columns.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.Operator.XcalarApiColumn;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.deserializeBinaryFromReader);
      msg.addCols(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.Columns.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.Columns.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.Columns} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.Columns.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.Operator.XcalarApiColumn.serializeBinaryToWriter
    );
  }
};


/**
 * repeated XcalarApiColumn cols = 1;
 * @return {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn>}
 */
proto.xcalar.compute.localtypes.Operator.Columns.prototype.getColsList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.Operator.XcalarApiColumn, 1));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn>} value */
proto.xcalar.compute.localtypes.Operator.Columns.prototype.setColsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn}
 */
proto.xcalar.compute.localtypes.Operator.Columns.prototype.addCols = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.xcalar.compute.localtypes.Operator.XcalarApiColumn, opt_index);
};


proto.xcalar.compute.localtypes.Operator.Columns.prototype.clearColsList = function() {
  this.setColsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Operator.UnionRequest.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.UnionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.UnionRequest.displayName = 'proto.xcalar.compute.localtypes.Operator.UnionRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest.repeatedFields_ = [1,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.UnionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.UnionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceList: jspb.Message.getRepeatedField(msg, 1),
    dest: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dedup: jspb.Message.getFieldWithDefault(msg, 3, false),
    columnsList: jspb.Message.toObjectList(msg.getColumnsList(),
    proto.xcalar.compute.localtypes.Operator.Columns.toObject, includeInstance),
    unionType: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.UnionRequest}
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.UnionRequest;
  return proto.xcalar.compute.localtypes.Operator.UnionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.UnionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.UnionRequest}
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addSource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDest(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDedup(value);
      break;
    case 4:
      var value = new proto.xcalar.compute.localtypes.Operator.Columns;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Operator.Columns.deserializeBinaryFromReader);
      msg.addColumns(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnionType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.UnionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.UnionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getDest();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDedup();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.xcalar.compute.localtypes.Operator.Columns.serializeBinaryToWriter
    );
  }
  f = message.getUnionType();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * repeated string source = 1;
 * @return {!Array<string>}
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.getSourceList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.setSourceList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.addSource = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.clearSourceList = function() {
  this.setSourceList([]);
};


/**
 * optional string dest = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.getDest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.setDest = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool dedup = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.getDedup = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.setDedup = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * repeated Columns columns = 4;
 * @return {!Array<!proto.xcalar.compute.localtypes.Operator.Columns>}
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.getColumnsList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.Operator.Columns>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.Operator.Columns, 4));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.Operator.Columns>} value */
proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.setColumnsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.Operator.Columns=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.Operator.Columns}
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.addColumns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.xcalar.compute.localtypes.Operator.Columns, opt_index);
};


proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.clearColumnsList = function() {
  this.setColumnsList([]);
};


/**
 * optional string union_type = 5;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.getUnionType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.UnionRequest.prototype.setUnionType = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.UnionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.UnionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.UnionResponse.displayName = 'proto.xcalar.compute.localtypes.Operator.UnionResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.UnionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.UnionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.UnionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.UnionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.UnionResponse}
 */
proto.xcalar.compute.localtypes.Operator.UnionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.UnionResponse;
  return proto.xcalar.compute.localtypes.Operator.UnionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.UnionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.UnionResponse}
 */
proto.xcalar.compute.localtypes.Operator.UnionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.UnionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.UnionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.UnionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.UnionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string table_name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.UnionResponse.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.UnionResponse.prototype.setTableName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.XcalarApiParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.XcalarApiParameter.displayName = 'proto.xcalar.compute.localtypes.Operator.XcalarApiParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.XcalarApiParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    paramName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    paramValue: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarApiParameter}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.XcalarApiParameter;
  return proto.xcalar.compute.localtypes.Operator.XcalarApiParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarApiParameter}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParamName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setParamValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.XcalarApiParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParamName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParamValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string param_name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiParameter.prototype.getParamName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.XcalarApiParameter.prototype.setParamName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string param_value = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.XcalarApiParameter.prototype.getParamValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.XcalarApiParameter.prototype.setParamValue = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest.displayName = 'proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    retinaName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    queryName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dest: jspb.Message.getFieldWithDefault(msg, 3, ""),
    parametersList: jspb.Message.toObjectList(msg.getParametersList(),
    proto.xcalar.compute.localtypes.Operator.XcalarApiParameter.toObject, includeInstance),
    schedName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    udfUserName: jspb.Message.getFieldWithDefault(msg, 6, ""),
    udfSessionName: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest}
 */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest;
  return proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest}
 */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRetinaName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQueryName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDest(value);
      break;
    case 4:
      var value = new proto.xcalar.compute.localtypes.Operator.XcalarApiParameter;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Operator.XcalarApiParameter.deserializeBinaryFromReader);
      msg.addParameters(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchedName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUdfUserName(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setUdfSessionName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRetinaName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQueryName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDest();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getParametersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.xcalar.compute.localtypes.Operator.XcalarApiParameter.serializeBinaryToWriter
    );
  }
  f = message.getSchedName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUdfUserName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getUdfSessionName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string retina_name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest.prototype.getRetinaName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest.prototype.setRetinaName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string query_name = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest.prototype.getQueryName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest.prototype.setQueryName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string dest = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest.prototype.getDest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest.prototype.setDest = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated XcalarApiParameter parameters = 4;
 * @return {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiParameter>}
 */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest.prototype.getParametersList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiParameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.Operator.XcalarApiParameter, 4));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiParameter>} value */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest.prototype.setParametersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiParameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarApiParameter}
 */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest.prototype.addParameters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.xcalar.compute.localtypes.Operator.XcalarApiParameter, opt_index);
};


proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest.prototype.clearParametersList = function() {
  this.setParametersList([]);
};


/**
 * optional string sched_name = 5;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest.prototype.getSchedName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest.prototype.setSchedName = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string udf_user_name = 6;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest.prototype.getUdfUserName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest.prototype.setUdfUserName = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string udf_session_name = 7;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest.prototype.getUdfSessionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaRequest.prototype.setUdfSessionName = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Operator.ExecuteRetinaResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Operator.ExecuteRetinaResponse.displayName = 'proto.xcalar.compute.localtypes.Operator.ExecuteRetinaResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Operator.ExecuteRetinaResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Operator.ExecuteRetinaResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Operator.ExecuteRetinaResponse}
 */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Operator.ExecuteRetinaResponse;
  return proto.xcalar.compute.localtypes.Operator.ExecuteRetinaResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Operator.ExecuteRetinaResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Operator.ExecuteRetinaResponse}
 */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Operator.ExecuteRetinaResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Operator.ExecuteRetinaResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string table_name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaResponse.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.Operator.ExecuteRetinaResponse.prototype.setTableName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.xcalar.compute.localtypes.Operator);
