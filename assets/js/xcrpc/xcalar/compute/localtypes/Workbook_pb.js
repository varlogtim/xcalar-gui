/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.exportSymbol('proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Workbook.GlobalSpecifier', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Workbook.ScopeType', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Workbook.WorkbookScope', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Workbook.GlobalSpecifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Workbook.GlobalSpecifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Workbook.GlobalSpecifier.displayName = 'proto.xcalar.compute.localtypes.Workbook.GlobalSpecifier';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Workbook.GlobalSpecifier.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Workbook.GlobalSpecifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Workbook.GlobalSpecifier} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Workbook.GlobalSpecifier.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Workbook.GlobalSpecifier}
 */
proto.xcalar.compute.localtypes.Workbook.GlobalSpecifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Workbook.GlobalSpecifier;
  return proto.xcalar.compute.localtypes.Workbook.GlobalSpecifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Workbook.GlobalSpecifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Workbook.GlobalSpecifier}
 */
proto.xcalar.compute.localtypes.Workbook.GlobalSpecifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Workbook.GlobalSpecifier} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Workbook.GlobalSpecifier.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Workbook.GlobalSpecifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Workbook.GlobalSpecifier.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Workbook.GlobalSpecifier} The clone.
 */
proto.xcalar.compute.localtypes.Workbook.GlobalSpecifier.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Workbook.GlobalSpecifier} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.oneofGroups_);
};
goog.inherits(proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.displayName = 'proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.SpecifierCase = {
  SPECIFIER_NOT_SET: 0,
  NAME: 1,
  ID: 2
};

/**
 * @return {proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.SpecifierCase}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.prototype.getSpecifierCase = function() {
  return /** @type {proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.SpecifierCase} */(jspb.Message.computeOneofCase(this, proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = msg.getName()) && proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier.toObject(includeInstance, f),
    id: (f = msg.getId()) && proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier;
  return proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    case 2:
      var value = new proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier.serializeBinaryToWriter
    );
  }
  f = this.getId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier} The clone.
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional NameSpecifier name = 1;
 * @return {proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.prototype.getName = function() {
  return /** @type{proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier, 1));
};


/** @param {proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier|undefined} value  */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.prototype.setName = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.oneofGroups_[0], value);
};


proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.prototype.clearName = function() {
  this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional IdSpecifier id = 2;
 * @return {proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.prototype.getId = function() {
  return /** @type{proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier, 2));
};


/** @param {proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier|undefined} value  */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.prototype.setId = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.oneofGroups_[0], value);
};


proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier.displayName = 'proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: msg.getUsername(),
    workbookname: msg.getWorkbookname()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier;
  return proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkbookname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getWorkbookname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier} The clone.
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string workbookName = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier.prototype.getWorkbookname = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.NameSpecifier.prototype.setWorkbookname = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier.displayName = 'proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: msg.getUsername(),
    workbookid: msg.getWorkbookid()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier;
  return proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setWorkbookid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getWorkbookid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier} The clone.
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 workbookId = 2;
 * @return {number}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier.prototype.getWorkbookid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.IdSpecifier.prototype.setWorkbookid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookScope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.xcalar.compute.localtypes.Workbook.WorkbookScope.oneofGroups_);
};
goog.inherits(proto.xcalar.compute.localtypes.Workbook.WorkbookScope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Workbook.WorkbookScope.displayName = 'proto.xcalar.compute.localtypes.Workbook.WorkbookScope';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookScope.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookScope.SpecifierCase = {
  SPECIFIER_NOT_SET: 0,
  GLOBL: 2,
  WORKBOOK: 3
};

/**
 * @return {proto.xcalar.compute.localtypes.Workbook.WorkbookScope.SpecifierCase}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookScope.prototype.getSpecifierCase = function() {
  return /** @type {proto.xcalar.compute.localtypes.Workbook.WorkbookScope.SpecifierCase} */(jspb.Message.computeOneofCase(this, proto.xcalar.compute.localtypes.Workbook.WorkbookScope.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookScope.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Workbook.WorkbookScope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Workbook.WorkbookScope} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookScope.toObject = function(includeInstance, msg) {
  var f, obj = {
    globl: (f = msg.getGlobl()) && proto.xcalar.compute.localtypes.Workbook.GlobalSpecifier.toObject(includeInstance, f),
    workbook: (f = msg.getWorkbook()) && proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookScope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Workbook.WorkbookScope;
  return proto.xcalar.compute.localtypes.Workbook.WorkbookScope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Workbook.WorkbookScope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookScope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.xcalar.compute.localtypes.Workbook.GlobalSpecifier;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Workbook.GlobalSpecifier.deserializeBinaryFromReader);
      msg.setGlobl(value);
      break;
    case 3:
      var value = new proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.deserializeBinaryFromReader);
      msg.setWorkbook(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Workbook.WorkbookScope} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookScope.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookScope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookScope.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getGlobl();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.xcalar.compute.localtypes.Workbook.GlobalSpecifier.serializeBinaryToWriter
    );
  }
  f = this.getWorkbook();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Workbook.WorkbookScope} The clone.
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookScope.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional GlobalSpecifier globl = 2;
 * @return {proto.xcalar.compute.localtypes.Workbook.GlobalSpecifier}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookScope.prototype.getGlobl = function() {
  return /** @type{proto.xcalar.compute.localtypes.Workbook.GlobalSpecifier} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.Workbook.GlobalSpecifier, 2));
};


/** @param {proto.xcalar.compute.localtypes.Workbook.GlobalSpecifier|undefined} value  */
proto.xcalar.compute.localtypes.Workbook.WorkbookScope.prototype.setGlobl = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.xcalar.compute.localtypes.Workbook.WorkbookScope.oneofGroups_[0], value);
};


proto.xcalar.compute.localtypes.Workbook.WorkbookScope.prototype.clearGlobl = function() {
  this.setGlobl(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookScope.prototype.hasGlobl = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional WorkbookSpecifier workbook = 3;
 * @return {proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookScope.prototype.getWorkbook = function() {
  return /** @type{proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier, 3));
};


/** @param {proto.xcalar.compute.localtypes.Workbook.WorkbookSpecifier|undefined} value  */
proto.xcalar.compute.localtypes.Workbook.WorkbookScope.prototype.setWorkbook = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.xcalar.compute.localtypes.Workbook.WorkbookScope.oneofGroups_[0], value);
};


proto.xcalar.compute.localtypes.Workbook.WorkbookScope.prototype.clearWorkbook = function() {
  this.setWorkbook(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.xcalar.compute.localtypes.Workbook.WorkbookScope.prototype.hasWorkbook = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryRequest.displayName = 'proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    kvsstring: msg.getKvsstring(),
    optimized: msg.getOptimized()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryRequest}
 */
proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryRequest;
  return proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryRequest}
 */
proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKvsstring(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOptimized(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getKvsstring();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getOptimized();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryRequest} The clone.
 */
proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string kvsString = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryRequest.prototype.getKvsstring = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryRequest.prototype.setKvsstring = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool optimized = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryRequest.prototype.getOptimized = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 2, false));
};


/** @param {boolean} value  */
proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryRequest.prototype.setOptimized = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryResponse.displayName = 'proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    converted: msg.getConverted(),
    resultstring: msg.getResultstring()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryResponse}
 */
proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryResponse;
  return proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryResponse}
 */
proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConverted(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResultstring(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getConverted();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = this.getResultstring();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryResponse} The clone.
 */
proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bool converted = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryResponse.prototype.getConverted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 1, false));
};


/** @param {boolean} value  */
proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryResponse.prototype.setConverted = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string resultString = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryResponse.prototype.getResultstring = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.Workbook.ConvertKvsToQueryResponse.prototype.setResultstring = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.xcalar.compute.localtypes.Workbook.ScopeType = {
  GLOBALSCOPETYPE: 0,
  WORKBOOKSCOPETYPE: 1
};

goog.object.extend(exports, proto.xcalar.compute.localtypes.Workbook);
