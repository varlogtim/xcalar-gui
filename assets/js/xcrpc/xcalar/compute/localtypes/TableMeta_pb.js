/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var xcalar_compute_localtypes_ColumnAttribute_pb = require('../../../xcalar/compute/localtypes/ColumnAttribute_pb.js');
goog.exportSymbol('proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.TableMeta.TableMetaProto', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.TableMeta.TableMetaProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.TableMeta.TableMetaProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.displayName = 'proto.xcalar.compute.localtypes.TableMeta.TableMetaProto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.TableMeta.TableMetaProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, ""),
    numRows: jspb.Message.getFieldWithDefault(msg, 2, 0),
    numPages: jspb.Message.getFieldWithDefault(msg, 3, 0),
    numSlots: jspb.Message.getFieldWithDefault(msg, 4, 0),
    size: jspb.Message.getFieldWithDefault(msg, 5, 0),
    rowsPerSlotMap: (f = msg.getRowsPerSlotMap()) ? f.toObject(includeInstance, undefined) : [],
    pagesPerSlotMap: (f = msg.getPagesPerSlotMap()) ? f.toObject(includeInstance, undefined) : [],
    pagesConsumedInBytes: jspb.Message.getFieldWithDefault(msg, 8, 0),
    pagesAllocatedInBytes: jspb.Message.getFieldWithDefault(msg, 9, 0),
    pagesSent: jspb.Message.getFieldWithDefault(msg, 10, 0),
    pagesReceived: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.TableMeta.TableMetaProto}
 */
proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.TableMeta.TableMetaProto;
  return proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.TableMeta.TableMetaProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.TableMeta.TableMetaProto}
 */
proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumRows(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumPages(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumSlots(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    case 6:
      var value = msg.getRowsPerSlotMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readUint64, null, 0);
         });
      break;
    case 7:
      var value = msg.getPagesPerSlotMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readUint64, null, 0);
         });
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPagesConsumedInBytes(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPagesAllocatedInBytes(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPagesSent(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPagesReceived(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.TableMeta.TableMetaProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNumRows();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getNumPages();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getNumSlots();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getRowsPerSlotMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeUint64);
  }
  f = message.getPagesPerSlotMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeUint64);
  }
  f = message.getPagesConsumedInBytes();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getPagesAllocatedInBytes();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getPagesSent();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getPagesReceived();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
};


/**
 * optional string status = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.prototype.setStatus = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 num_rows = 2;
 * @return {number}
 */
proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.prototype.getNumRows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.prototype.setNumRows = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 num_pages = 3;
 * @return {number}
 */
proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.prototype.getNumPages = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.prototype.setNumPages = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 num_slots = 4;
 * @return {number}
 */
proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.prototype.getNumSlots = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.prototype.setNumSlots = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 size = 5;
 * @return {number}
 */
proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * map<uint32, uint64> rows_per_slot = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.prototype.getRowsPerSlotMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.prototype.clearRowsPerSlotMap = function() {
  this.getRowsPerSlotMap().clear();
};


/**
 * map<uint32, uint64> pages_per_slot = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.prototype.getPagesPerSlotMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.prototype.clearPagesPerSlotMap = function() {
  this.getPagesPerSlotMap().clear();
};


/**
 * optional uint64 pages_consumed_in_bytes = 8;
 * @return {number}
 */
proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.prototype.getPagesConsumedInBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.prototype.setPagesConsumedInBytes = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint64 pages_allocated_in_bytes = 9;
 * @return {number}
 */
proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.prototype.getPagesAllocatedInBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.prototype.setPagesAllocatedInBytes = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 pages_sent = 10;
 * @return {number}
 */
proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.prototype.getPagesSent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.prototype.setPagesSent = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint64 pages_received = 11;
 * @return {number}
 */
proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.prototype.getPagesReceived = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.prototype.setPagesReceived = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto.displayName = 'proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    datasetsList: jspb.Message.getRepeatedField(msg, 1),
    resultSetIdsList: jspb.Message.getRepeatedField(msg, 2),
    columnAttributesMap: (f = msg.getColumnAttributesMap()) ? f.toObject(includeInstance, proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto.toObject) : [],
    keyAttributesMap: (f = msg.getKeyAttributesMap()) ? f.toObject(includeInstance, proto.xcalar.compute.localtypes.ColumnAttribute.KeyAttributeProto.toObject) : [],
    tableMetaMap: (f = msg.getTableMetaMap()) ? f.toObject(includeInstance, proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.toObject) : [],
    numImmediates: jspb.Message.getFieldWithDefault(msg, 6, 0),
    ordering: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto}
 */
proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto;
  return proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto}
 */
proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addDatasets(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedFixed64());
      msg.setResultSetIdsList(value);
      break;
    case 3:
      var value = msg.getColumnAttributesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto.deserializeBinaryFromReader, "");
         });
      break;
    case 4:
      var value = msg.getKeyAttributesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.xcalar.compute.localtypes.ColumnAttribute.KeyAttributeProto.deserializeBinaryFromReader, "");
         });
      break;
    case 5:
      var value = msg.getTableMetaMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.deserializeBinaryFromReader, 0);
         });
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumImmediates(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrdering(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatasetsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getResultSetIdsList();
  if (f.length > 0) {
    writer.writePackedFixed64(
      2,
      f
    );
  }
  f = message.getColumnAttributesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto.serializeBinaryToWriter);
  }
  f = message.getKeyAttributesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.xcalar.compute.localtypes.ColumnAttribute.KeyAttributeProto.serializeBinaryToWriter);
  }
  f = message.getTableMetaMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.xcalar.compute.localtypes.TableMeta.TableMetaProto.serializeBinaryToWriter);
  }
  f = message.getNumImmediates();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getOrdering();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * repeated string datasets = 1;
 * @return {!Array<string>}
 */
proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto.prototype.getDatasetsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto.prototype.setDatasetsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto.prototype.addDatasets = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto.prototype.clearDatasetsList = function() {
  this.setDatasetsList([]);
};


/**
 * repeated fixed64 result_set_ids = 2;
 * @return {!Array<number>}
 */
proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto.prototype.getResultSetIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto.prototype.setResultSetIdsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto.prototype.addResultSetIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto.prototype.clearResultSetIdsList = function() {
  this.setResultSetIdsList([]);
};


/**
 * map<string, xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto> column_attributes = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto>}
 */
proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto.prototype.getColumnAttributesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto));
};


proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto.prototype.clearColumnAttributesMap = function() {
  this.getColumnAttributesMap().clear();
};


/**
 * map<string, xcalar.compute.localtypes.ColumnAttribute.KeyAttributeProto> key_attributes = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.xcalar.compute.localtypes.ColumnAttribute.KeyAttributeProto>}
 */
proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto.prototype.getKeyAttributesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.xcalar.compute.localtypes.ColumnAttribute.KeyAttributeProto>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.xcalar.compute.localtypes.ColumnAttribute.KeyAttributeProto));
};


proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto.prototype.clearKeyAttributesMap = function() {
  this.getKeyAttributesMap().clear();
};


/**
 * map<uint32, TableMetaProto> table_meta = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.xcalar.compute.localtypes.TableMeta.TableMetaProto>}
 */
proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto.prototype.getTableMetaMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.xcalar.compute.localtypes.TableMeta.TableMetaProto>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.xcalar.compute.localtypes.TableMeta.TableMetaProto));
};


proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto.prototype.clearTableMetaMap = function() {
  this.getTableMetaMap().clear();
};


/**
 * optional uint32 num_immediates = 6;
 * @return {number}
 */
proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto.prototype.getNumImmediates = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto.prototype.setNumImmediates = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string ordering = 7;
 * @return {string}
 */
proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto.prototype.getOrdering = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.TableMeta.GetTableMetaProto.prototype.setOrdering = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


goog.object.extend(exports, proto.xcalar.compute.localtypes.TableMeta);
