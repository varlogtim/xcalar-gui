/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.exportSymbol('proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.KvStore.AppendRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.KvStore.GlobalSpecifier', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.KvStore.KeyScope', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.KvStore.KeyValue', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.KvStore.ListRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.KvStore.ListResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.KvStore.LookupRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.KvStore.LookupResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.KvStore.ScopeType', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.KvStore.ScopedKey', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.KvStore.GlobalSpecifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.KvStore.GlobalSpecifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.KvStore.GlobalSpecifier.displayName = 'proto.xcalar.compute.localtypes.KvStore.GlobalSpecifier';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.GlobalSpecifier.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.KvStore.GlobalSpecifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.KvStore.GlobalSpecifier} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.GlobalSpecifier.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.KvStore.GlobalSpecifier}
 */
proto.xcalar.compute.localtypes.KvStore.GlobalSpecifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.KvStore.GlobalSpecifier;
  return proto.xcalar.compute.localtypes.KvStore.GlobalSpecifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.KvStore.GlobalSpecifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.KvStore.GlobalSpecifier}
 */
proto.xcalar.compute.localtypes.KvStore.GlobalSpecifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.KvStore.GlobalSpecifier} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.KvStore.GlobalSpecifier.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.KvStore.GlobalSpecifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.KvStore.GlobalSpecifier.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.KvStore.GlobalSpecifier} The clone.
 */
proto.xcalar.compute.localtypes.KvStore.GlobalSpecifier.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.KvStore.GlobalSpecifier} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.oneofGroups_);
};
goog.inherits(proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.displayName = 'proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.SpecifierCase = {
  SPECIFIER_NOT_SET: 0,
  NAME: 1,
  ID: 2
};

/**
 * @return {proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.SpecifierCase}
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.prototype.getSpecifierCase = function() {
  return /** @type {proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.SpecifierCase} */(jspb.Message.computeOneofCase(this, proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = msg.getName()) && proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier.toObject(includeInstance, f),
    id: (f = msg.getId()) && proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier}
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier;
  return proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier}
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier;
      reader.readMessage(value,proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    case 2:
      var value = new proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier;
      reader.readMessage(value,proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier.serializeBinaryToWriter
    );
  }
  f = this.getId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier} The clone.
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional NameSpecifier name = 1;
 * @return {proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier}
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.prototype.getName = function() {
  return /** @type{proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier, 1));
};


/** @param {proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier|undefined} value  */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.prototype.setName = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.oneofGroups_[0], value);
};


proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.prototype.clearName = function() {
  this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional IdSpecifier id = 2;
 * @return {proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier}
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.prototype.getId = function() {
  return /** @type{proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier, 2));
};


/** @param {proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier|undefined} value  */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.prototype.setId = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.oneofGroups_[0], value);
};


proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier.displayName = 'proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: msg.getUsername(),
    workbookname: msg.getWorkbookname()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier}
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier;
  return proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier}
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkbookname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getWorkbookname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier} The clone.
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string workbookName = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier.prototype.getWorkbookname = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.NameSpecifier.prototype.setWorkbookname = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier.displayName = 'proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: msg.getUsername(),
    workbookid: msg.getWorkbookid()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier}
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier;
  return proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier}
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setWorkbookid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getWorkbookid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier} The clone.
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 workbookId = 2;
 * @return {number}
 */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier.prototype.getWorkbookid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.IdSpecifier.prototype.setWorkbookid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.KvStore.KeyScope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.xcalar.compute.localtypes.KvStore.KeyScope.oneofGroups_);
};
goog.inherits(proto.xcalar.compute.localtypes.KvStore.KeyScope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.KvStore.KeyScope.displayName = 'proto.xcalar.compute.localtypes.KvStore.KeyScope';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.xcalar.compute.localtypes.KvStore.KeyScope.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.xcalar.compute.localtypes.KvStore.KeyScope.SpecifierCase = {
  SPECIFIER_NOT_SET: 0,
  GLOBL: 2,
  WORKBOOK: 3
};

/**
 * @return {proto.xcalar.compute.localtypes.KvStore.KeyScope.SpecifierCase}
 */
proto.xcalar.compute.localtypes.KvStore.KeyScope.prototype.getSpecifierCase = function() {
  return /** @type {proto.xcalar.compute.localtypes.KvStore.KeyScope.SpecifierCase} */(jspb.Message.computeOneofCase(this, proto.xcalar.compute.localtypes.KvStore.KeyScope.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.KeyScope.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.KvStore.KeyScope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.KvStore.KeyScope} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.KeyScope.toObject = function(includeInstance, msg) {
  var f, obj = {
    globl: (f = msg.getGlobl()) && proto.xcalar.compute.localtypes.KvStore.GlobalSpecifier.toObject(includeInstance, f),
    workbook: (f = msg.getWorkbook()) && proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.KvStore.KeyScope}
 */
proto.xcalar.compute.localtypes.KvStore.KeyScope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.KvStore.KeyScope;
  return proto.xcalar.compute.localtypes.KvStore.KeyScope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.KvStore.KeyScope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.KvStore.KeyScope}
 */
proto.xcalar.compute.localtypes.KvStore.KeyScope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.xcalar.compute.localtypes.KvStore.GlobalSpecifier;
      reader.readMessage(value,proto.xcalar.compute.localtypes.KvStore.GlobalSpecifier.deserializeBinaryFromReader);
      msg.setGlobl(value);
      break;
    case 3:
      var value = new proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier;
      reader.readMessage(value,proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.deserializeBinaryFromReader);
      msg.setWorkbook(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.KvStore.KeyScope} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.KvStore.KeyScope.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.KvStore.KeyScope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.KvStore.KeyScope.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getGlobl();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.xcalar.compute.localtypes.KvStore.GlobalSpecifier.serializeBinaryToWriter
    );
  }
  f = this.getWorkbook();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.KvStore.KeyScope} The clone.
 */
proto.xcalar.compute.localtypes.KvStore.KeyScope.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.KvStore.KeyScope} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional GlobalSpecifier globl = 2;
 * @return {proto.xcalar.compute.localtypes.KvStore.GlobalSpecifier}
 */
proto.xcalar.compute.localtypes.KvStore.KeyScope.prototype.getGlobl = function() {
  return /** @type{proto.xcalar.compute.localtypes.KvStore.GlobalSpecifier} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.KvStore.GlobalSpecifier, 2));
};


/** @param {proto.xcalar.compute.localtypes.KvStore.GlobalSpecifier|undefined} value  */
proto.xcalar.compute.localtypes.KvStore.KeyScope.prototype.setGlobl = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.xcalar.compute.localtypes.KvStore.KeyScope.oneofGroups_[0], value);
};


proto.xcalar.compute.localtypes.KvStore.KeyScope.prototype.clearGlobl = function() {
  this.setGlobl(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.xcalar.compute.localtypes.KvStore.KeyScope.prototype.hasGlobl = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional WorkbookSpecifier workbook = 3;
 * @return {proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier}
 */
proto.xcalar.compute.localtypes.KvStore.KeyScope.prototype.getWorkbook = function() {
  return /** @type{proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier, 3));
};


/** @param {proto.xcalar.compute.localtypes.KvStore.WorkbookSpecifier|undefined} value  */
proto.xcalar.compute.localtypes.KvStore.KeyScope.prototype.setWorkbook = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.xcalar.compute.localtypes.KvStore.KeyScope.oneofGroups_[0], value);
};


proto.xcalar.compute.localtypes.KvStore.KeyScope.prototype.clearWorkbook = function() {
  this.setWorkbook(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.xcalar.compute.localtypes.KvStore.KeyScope.prototype.hasWorkbook = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.KvStore.ScopedKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.KvStore.ScopedKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.KvStore.ScopedKey.displayName = 'proto.xcalar.compute.localtypes.KvStore.ScopedKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.ScopedKey.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.KvStore.ScopedKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.KvStore.ScopedKey} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.ScopedKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: (f = msg.getScope()) && proto.xcalar.compute.localtypes.KvStore.KeyScope.toObject(includeInstance, f),
    name: msg.getName()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.KvStore.ScopedKey}
 */
proto.xcalar.compute.localtypes.KvStore.ScopedKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.KvStore.ScopedKey;
  return proto.xcalar.compute.localtypes.KvStore.ScopedKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.KvStore.ScopedKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.KvStore.ScopedKey}
 */
proto.xcalar.compute.localtypes.KvStore.ScopedKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.KvStore.KeyScope;
      reader.readMessage(value,proto.xcalar.compute.localtypes.KvStore.KeyScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.KvStore.ScopedKey} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.KvStore.ScopedKey.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.KvStore.ScopedKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.KvStore.ScopedKey.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getScope();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.KvStore.KeyScope.serializeBinaryToWriter
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.KvStore.ScopedKey} The clone.
 */
proto.xcalar.compute.localtypes.KvStore.ScopedKey.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.KvStore.ScopedKey} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional KeyScope scope = 1;
 * @return {proto.xcalar.compute.localtypes.KvStore.KeyScope}
 */
proto.xcalar.compute.localtypes.KvStore.ScopedKey.prototype.getScope = function() {
  return /** @type{proto.xcalar.compute.localtypes.KvStore.KeyScope} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.KvStore.KeyScope, 1));
};


/** @param {proto.xcalar.compute.localtypes.KvStore.KeyScope|undefined} value  */
proto.xcalar.compute.localtypes.KvStore.ScopedKey.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xcalar.compute.localtypes.KvStore.ScopedKey.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.xcalar.compute.localtypes.KvStore.ScopedKey.prototype.hasScope = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.KvStore.ScopedKey.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.KvStore.ScopedKey.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.KvStore.KeyValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.KvStore.KeyValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.KvStore.KeyValue.displayName = 'proto.xcalar.compute.localtypes.KvStore.KeyValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.KeyValue.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.KvStore.KeyValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.KvStore.KeyValue} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.KeyValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: msg.getText()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.KvStore.KeyValue}
 */
proto.xcalar.compute.localtypes.KvStore.KeyValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.KvStore.KeyValue;
  return proto.xcalar.compute.localtypes.KvStore.KeyValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.KvStore.KeyValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.KvStore.KeyValue}
 */
proto.xcalar.compute.localtypes.KvStore.KeyValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.KvStore.KeyValue} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.KvStore.KeyValue.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.KvStore.KeyValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.KvStore.KeyValue.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.KvStore.KeyValue} The clone.
 */
proto.xcalar.compute.localtypes.KvStore.KeyValue.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.KvStore.KeyValue} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.KvStore.KeyValue.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.KvStore.KeyValue.prototype.setText = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.KvStore.LookupRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.KvStore.LookupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.KvStore.LookupRequest.displayName = 'proto.xcalar.compute.localtypes.KvStore.LookupRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.LookupRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.KvStore.LookupRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.KvStore.LookupRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.LookupRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.xcalar.compute.localtypes.KvStore.ScopedKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.KvStore.LookupRequest}
 */
proto.xcalar.compute.localtypes.KvStore.LookupRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.KvStore.LookupRequest;
  return proto.xcalar.compute.localtypes.KvStore.LookupRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.KvStore.LookupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.KvStore.LookupRequest}
 */
proto.xcalar.compute.localtypes.KvStore.LookupRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.KvStore.ScopedKey;
      reader.readMessage(value,proto.xcalar.compute.localtypes.KvStore.ScopedKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.KvStore.LookupRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.KvStore.LookupRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.KvStore.LookupRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.KvStore.LookupRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.KvStore.ScopedKey.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.KvStore.LookupRequest} The clone.
 */
proto.xcalar.compute.localtypes.KvStore.LookupRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.KvStore.LookupRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional ScopedKey key = 1;
 * @return {proto.xcalar.compute.localtypes.KvStore.ScopedKey}
 */
proto.xcalar.compute.localtypes.KvStore.LookupRequest.prototype.getKey = function() {
  return /** @type{proto.xcalar.compute.localtypes.KvStore.ScopedKey} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.KvStore.ScopedKey, 1));
};


/** @param {proto.xcalar.compute.localtypes.KvStore.ScopedKey|undefined} value  */
proto.xcalar.compute.localtypes.KvStore.LookupRequest.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xcalar.compute.localtypes.KvStore.LookupRequest.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.xcalar.compute.localtypes.KvStore.LookupRequest.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.KvStore.LookupResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.KvStore.LookupResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.KvStore.LookupResponse.displayName = 'proto.xcalar.compute.localtypes.KvStore.LookupResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.LookupResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.KvStore.LookupResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.KvStore.LookupResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.LookupResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: (f = msg.getValue()) && proto.xcalar.compute.localtypes.KvStore.KeyValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.KvStore.LookupResponse}
 */
proto.xcalar.compute.localtypes.KvStore.LookupResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.KvStore.LookupResponse;
  return proto.xcalar.compute.localtypes.KvStore.LookupResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.KvStore.LookupResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.KvStore.LookupResponse}
 */
proto.xcalar.compute.localtypes.KvStore.LookupResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.KvStore.KeyValue;
      reader.readMessage(value,proto.xcalar.compute.localtypes.KvStore.KeyValue.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.KvStore.LookupResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.KvStore.LookupResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.KvStore.LookupResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.KvStore.LookupResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getValue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.KvStore.KeyValue.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.KvStore.LookupResponse} The clone.
 */
proto.xcalar.compute.localtypes.KvStore.LookupResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.KvStore.LookupResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional KeyValue value = 1;
 * @return {proto.xcalar.compute.localtypes.KvStore.KeyValue}
 */
proto.xcalar.compute.localtypes.KvStore.LookupResponse.prototype.getValue = function() {
  return /** @type{proto.xcalar.compute.localtypes.KvStore.KeyValue} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.KvStore.KeyValue, 1));
};


/** @param {proto.xcalar.compute.localtypes.KvStore.KeyValue|undefined} value  */
proto.xcalar.compute.localtypes.KvStore.LookupResponse.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xcalar.compute.localtypes.KvStore.LookupResponse.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.xcalar.compute.localtypes.KvStore.LookupResponse.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.displayName = 'proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.xcalar.compute.localtypes.KvStore.ScopedKey.toObject(includeInstance, f),
    persist: msg.getPersist(),
    value: (f = msg.getValue()) && proto.xcalar.compute.localtypes.KvStore.KeyValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest}
 */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest;
  return proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest}
 */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.KvStore.ScopedKey;
      reader.readMessage(value,proto.xcalar.compute.localtypes.KvStore.ScopedKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPersist(value);
      break;
    case 3:
      var value = new proto.xcalar.compute.localtypes.KvStore.KeyValue;
      reader.readMessage(value,proto.xcalar.compute.localtypes.KvStore.KeyValue.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.KvStore.ScopedKey.serializeBinaryToWriter
    );
  }
  f = this.getPersist();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = this.getValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.xcalar.compute.localtypes.KvStore.KeyValue.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest} The clone.
 */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional ScopedKey key = 1;
 * @return {proto.xcalar.compute.localtypes.KvStore.ScopedKey}
 */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.prototype.getKey = function() {
  return /** @type{proto.xcalar.compute.localtypes.KvStore.ScopedKey} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.KvStore.ScopedKey, 1));
};


/** @param {proto.xcalar.compute.localtypes.KvStore.ScopedKey|undefined} value  */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool persist = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.prototype.getPersist = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 2, false));
};


/** @param {boolean} value  */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.prototype.setPersist = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional KeyValue value = 3;
 * @return {proto.xcalar.compute.localtypes.KvStore.KeyValue}
 */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.prototype.getValue = function() {
  return /** @type{proto.xcalar.compute.localtypes.KvStore.KeyValue} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.KvStore.KeyValue, 3));
};


/** @param {proto.xcalar.compute.localtypes.KvStore.KeyValue|undefined} value  */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest.displayName = 'proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.xcalar.compute.localtypes.KvStore.ScopedKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest}
 */
proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest;
  return proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest}
 */
proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.KvStore.ScopedKey;
      reader.readMessage(value,proto.xcalar.compute.localtypes.KvStore.ScopedKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.KvStore.ScopedKey.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest} The clone.
 */
proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional ScopedKey key = 1;
 * @return {proto.xcalar.compute.localtypes.KvStore.ScopedKey}
 */
proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest.prototype.getKey = function() {
  return /** @type{proto.xcalar.compute.localtypes.KvStore.ScopedKey} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.KvStore.ScopedKey, 1));
};


/** @param {proto.xcalar.compute.localtypes.KvStore.ScopedKey|undefined} value  */
proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.KvStore.AppendRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.KvStore.AppendRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.KvStore.AppendRequest.displayName = 'proto.xcalar.compute.localtypes.KvStore.AppendRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.AppendRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.KvStore.AppendRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.KvStore.AppendRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.AppendRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.xcalar.compute.localtypes.KvStore.ScopedKey.toObject(includeInstance, f),
    suffix: msg.getSuffix()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.KvStore.AppendRequest}
 */
proto.xcalar.compute.localtypes.KvStore.AppendRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.KvStore.AppendRequest;
  return proto.xcalar.compute.localtypes.KvStore.AppendRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.KvStore.AppendRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.KvStore.AppendRequest}
 */
proto.xcalar.compute.localtypes.KvStore.AppendRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.KvStore.ScopedKey;
      reader.readMessage(value,proto.xcalar.compute.localtypes.KvStore.ScopedKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSuffix(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.KvStore.AppendRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.KvStore.AppendRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.KvStore.AppendRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.KvStore.AppendRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.KvStore.ScopedKey.serializeBinaryToWriter
    );
  }
  f = this.getSuffix();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.KvStore.AppendRequest} The clone.
 */
proto.xcalar.compute.localtypes.KvStore.AppendRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.KvStore.AppendRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional ScopedKey key = 1;
 * @return {proto.xcalar.compute.localtypes.KvStore.ScopedKey}
 */
proto.xcalar.compute.localtypes.KvStore.AppendRequest.prototype.getKey = function() {
  return /** @type{proto.xcalar.compute.localtypes.KvStore.ScopedKey} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.KvStore.ScopedKey, 1));
};


/** @param {proto.xcalar.compute.localtypes.KvStore.ScopedKey|undefined} value  */
proto.xcalar.compute.localtypes.KvStore.AppendRequest.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xcalar.compute.localtypes.KvStore.AppendRequest.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.xcalar.compute.localtypes.KvStore.AppendRequest.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string suffix = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.KvStore.AppendRequest.prototype.getSuffix = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.KvStore.AppendRequest.prototype.setSuffix = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.displayName = 'proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: (f = msg.getScope()) && proto.xcalar.compute.localtypes.KvStore.KeyScope.toObject(includeInstance, f),
    persist: msg.getPersist(),
    countsecondarypairs: msg.getCountsecondarypairs(),
    keycompare: msg.getKeycompare(),
    valuecompare: msg.getValuecompare(),
    valuereplace: msg.getValuereplace(),
    keysecondary: msg.getKeysecondary(),
    valuesecondary: msg.getValuesecondary()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest}
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest;
  return proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest}
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.KvStore.KeyScope;
      reader.readMessage(value,proto.xcalar.compute.localtypes.KvStore.KeyScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPersist(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCountsecondarypairs(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeycompare(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setValuecompare(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setValuereplace(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeysecondary(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setValuesecondary(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getScope();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.KvStore.KeyScope.serializeBinaryToWriter
    );
  }
  f = this.getPersist();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = this.getCountsecondarypairs();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getKeycompare();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getValuecompare();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getValuereplace();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getKeysecondary();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getValuesecondary();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest} The clone.
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional KeyScope scope = 1;
 * @return {proto.xcalar.compute.localtypes.KvStore.KeyScope}
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.getScope = function() {
  return /** @type{proto.xcalar.compute.localtypes.KvStore.KeyScope} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.KvStore.KeyScope, 1));
};


/** @param {proto.xcalar.compute.localtypes.KvStore.KeyScope|undefined} value  */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool persist = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.getPersist = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 2, false));
};


/** @param {boolean} value  */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.setPersist = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 countSecondaryPairs = 3;
 * @return {number}
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.getCountsecondarypairs = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.setCountsecondarypairs = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string keyCompare = 4;
 * @return {string}
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.getKeycompare = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.setKeycompare = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string valueCompare = 5;
 * @return {string}
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.getValuecompare = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.setValuecompare = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string valueReplace = 6;
 * @return {string}
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.getValuereplace = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.setValuereplace = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string keySecondary = 7;
 * @return {string}
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.getKeysecondary = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.setKeysecondary = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string valueSecondary = 8;
 * @return {string}
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.getValuesecondary = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.setValuesecondary = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.KvStore.ListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.KvStore.ListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.KvStore.ListRequest.displayName = 'proto.xcalar.compute.localtypes.KvStore.ListRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.ListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.KvStore.ListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.KvStore.ListRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.ListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: (f = msg.getScope()) && proto.xcalar.compute.localtypes.KvStore.KeyScope.toObject(includeInstance, f),
    keyregex: msg.getKeyregex()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.KvStore.ListRequest}
 */
proto.xcalar.compute.localtypes.KvStore.ListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.KvStore.ListRequest;
  return proto.xcalar.compute.localtypes.KvStore.ListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.KvStore.ListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.KvStore.ListRequest}
 */
proto.xcalar.compute.localtypes.KvStore.ListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.KvStore.KeyScope;
      reader.readMessage(value,proto.xcalar.compute.localtypes.KvStore.KeyScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyregex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.KvStore.ListRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.KvStore.ListRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.KvStore.ListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.KvStore.ListRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getScope();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.KvStore.KeyScope.serializeBinaryToWriter
    );
  }
  f = this.getKeyregex();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.KvStore.ListRequest} The clone.
 */
proto.xcalar.compute.localtypes.KvStore.ListRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.KvStore.ListRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional KeyScope scope = 1;
 * @return {proto.xcalar.compute.localtypes.KvStore.KeyScope}
 */
proto.xcalar.compute.localtypes.KvStore.ListRequest.prototype.getScope = function() {
  return /** @type{proto.xcalar.compute.localtypes.KvStore.KeyScope} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.KvStore.KeyScope, 1));
};


/** @param {proto.xcalar.compute.localtypes.KvStore.KeyScope|undefined} value  */
proto.xcalar.compute.localtypes.KvStore.ListRequest.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xcalar.compute.localtypes.KvStore.ListRequest.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.xcalar.compute.localtypes.KvStore.ListRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string keyRegex = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.KvStore.ListRequest.prototype.getKeyregex = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.KvStore.ListRequest.prototype.setKeyregex = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.KvStore.ListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.KvStore.ListResponse.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.KvStore.ListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.KvStore.ListResponse.displayName = 'proto.xcalar.compute.localtypes.KvStore.ListResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.KvStore.ListResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.ListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.KvStore.ListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.KvStore.ListResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.ListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    keysList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.KvStore.ListResponse}
 */
proto.xcalar.compute.localtypes.KvStore.ListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.KvStore.ListResponse;
  return proto.xcalar.compute.localtypes.KvStore.ListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.KvStore.ListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.KvStore.ListResponse}
 */
proto.xcalar.compute.localtypes.KvStore.ListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.getKeysList().push(value);
      msg.setKeysList(msg.getKeysList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.KvStore.ListResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.KvStore.ListResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.KvStore.ListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.KvStore.ListResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.KvStore.ListResponse} The clone.
 */
proto.xcalar.compute.localtypes.KvStore.ListResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.KvStore.ListResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated string keys = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.xcalar.compute.localtypes.KvStore.ListResponse.prototype.getKeysList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<string>} value  */
proto.xcalar.compute.localtypes.KvStore.ListResponse.prototype.setKeysList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.xcalar.compute.localtypes.KvStore.ListResponse.prototype.clearKeysList = function() {
  jspb.Message.setField(this, 1, []);
};


/**
 * @enum {number}
 */
proto.xcalar.compute.localtypes.KvStore.ScopeType = {
  GLOBAL: 0,
  WORKBOOK: 1
};

goog.object.extend(exports, proto.xcalar.compute.localtypes.KvStore);
