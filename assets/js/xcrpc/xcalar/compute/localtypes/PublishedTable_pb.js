/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var xcalar_compute_localtypes_ColumnAttribute_pb = require('../../../xcalar/compute/localtypes/ColumnAttribute_pb.js');
var xcalar_compute_localtypes_Operator_pb = require('../../../xcalar/compute/localtypes/Operator_pb.js');
var xcalar_compute_localtypes_Workbook_pb = require('../../../xcalar/compute/localtypes/Workbook_pb.js');
goog.exportSymbol('proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.PublishedTable.SelectRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.PublishedTable.SelectResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg.displayName = 'proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg.toObject = function(includeInstance, msg) {
  var f, obj = {
    func: jspb.Message.getFieldWithDefault(msg, 1, ""),
    arg: jspb.Message.getFieldWithDefault(msg, 2, ""),
    newField: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg;
  return proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFunc(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setArg(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewField(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFunc();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getArg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNewField();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string func = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg.prototype.getFunc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg.prototype.setFunc = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string arg = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg.prototype.getArg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg.prototype.setArg = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string new_field = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg.prototype.getNewField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg.prototype.setNewField = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs.displayName = 'proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs.repeatedFields_ = [1,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    mapList: jspb.Message.toObjectList(msg.getMapList(),
    xcalar_compute_localtypes_Operator_pb.XcalarApiEval.toObject, includeInstance),
    filter: jspb.Message.getFieldWithDefault(msg, 2, ""),
    groupByKeyList: jspb.Message.getRepeatedField(msg, 3),
    groupByList: jspb.Message.toObjectList(msg.getGroupByList(),
    proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs;
  return proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new xcalar_compute_localtypes_Operator_pb.XcalarApiEval;
      reader.readMessage(value,xcalar_compute_localtypes_Operator_pb.XcalarApiEval.deserializeBinaryFromReader);
      msg.addMap(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilter(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addGroupByKey(value);
      break;
    case 4:
      var value = new proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg;
      reader.readMessage(value,proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg.deserializeBinaryFromReader);
      msg.addGroupBy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMapList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      xcalar_compute_localtypes_Operator_pb.XcalarApiEval.serializeBinaryToWriter
    );
  }
  f = message.getFilter();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGroupByKeyList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getGroupByList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg.serializeBinaryToWriter
    );
  }
};


/**
 * repeated xcalar.compute.localtypes.Operator.XcalarApiEval map = 1;
 * @return {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiEval>}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs.prototype.getMapList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiEval>} */ (
    jspb.Message.getRepeatedWrapperField(this, xcalar_compute_localtypes_Operator_pb.XcalarApiEval, 1));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiEval>} value */
proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs.prototype.setMapList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiEval=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarApiEval}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs.prototype.addMap = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.xcalar.compute.localtypes.Operator.XcalarApiEval, opt_index);
};


proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs.prototype.clearMapList = function() {
  this.setMapList([]);
};


/**
 * optional string filter = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs.prototype.getFilter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs.prototype.setFilter = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string group_by_key = 3;
 * @return {!Array<string>}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs.prototype.getGroupByKeyList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs.prototype.setGroupByKeyList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs.prototype.addGroupByKey = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs.prototype.clearGroupByKeyList = function() {
  this.setGroupByKeyList([]);
};


/**
 * repeated SelectGroupByEvalArg group_by = 4;
 * @return {!Array<!proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg>}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs.prototype.getGroupByList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg, 4));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg>} value */
proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs.prototype.setGroupByList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs.prototype.addGroupBy = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.xcalar.compute.localtypes.PublishedTable.SelectGroupByEvalArg, opt_index);
};


proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs.prototype.clearGroupByList = function() {
  this.setGroupByList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.PublishedTable.SelectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.displayName = 'proto.xcalar.compute.localtypes.PublishedTable.SelectRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.SelectRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dest: jspb.Message.getFieldWithDefault(msg, 2, ""),
    minBatchId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maxBatchId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    eval: (f = msg.getEval()) && proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs.toObject(includeInstance, f),
    columnsList: jspb.Message.toObjectList(msg.getColumnsList(),
    xcalar_compute_localtypes_Operator_pb.XcalarApiColumn.toObject, includeInstance),
    limitRows: jspb.Message.getFieldWithDefault(msg, 7, 0),
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectRequest}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.PublishedTable.SelectRequest;
  return proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.SelectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectRequest}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDest(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinBatchId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxBatchId(value);
      break;
    case 5:
      var value = new proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs;
      reader.readMessage(value,proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs.deserializeBinaryFromReader);
      msg.setEval(value);
      break;
    case 6:
      var value = new xcalar_compute_localtypes_Operator_pb.XcalarApiColumn;
      reader.readMessage(value,xcalar_compute_localtypes_Operator_pb.XcalarApiColumn.deserializeBinaryFromReader);
      msg.addColumns(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLimitRows(value);
      break;
    case 8:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.SelectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDest();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMinBatchId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getMaxBatchId();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getEval();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs.serializeBinaryToWriter
    );
  }
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      xcalar_compute_localtypes_Operator_pb.XcalarApiColumn.serializeBinaryToWriter
    );
  }
  f = message.getLimitRows();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.setSource = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string dest = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.getDest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.setDest = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 min_batch_id = 3;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.getMinBatchId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.setMinBatchId = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 max_batch_id = 4;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.getMaxBatchId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.setMaxBatchId = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional SelectEvalArgs eval = 5;
 * @return {?proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.getEval = function() {
  return /** @type{?proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs, 5));
};


/** @param {?proto.xcalar.compute.localtypes.PublishedTable.SelectEvalArgs|undefined} value */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.setEval = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.clearEval = function() {
  this.setEval(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.hasEval = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated xcalar.compute.localtypes.Operator.XcalarApiColumn columns = 6;
 * @return {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn>}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.getColumnsList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn>} */ (
    jspb.Message.getRepeatedWrapperField(this, xcalar_compute_localtypes_Operator_pb.XcalarApiColumn, 6));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn>} value */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.setColumnsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.Operator.XcalarApiColumn}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.addColumns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.xcalar.compute.localtypes.Operator.XcalarApiColumn, opt_index);
};


proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.clearColumnsList = function() {
  this.setColumnsList([]);
};


/**
 * optional int64 limit_rows = 7;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.getLimitRows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.setLimitRows = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 8;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 8));
};


/** @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.PublishedTable.SelectResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.displayName = 'proto.xcalar.compute.localtypes.PublishedTable.SelectResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.SelectResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectResponse}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.PublishedTable.SelectResponse;
  return proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.SelectResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectResponse}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.SelectResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string table_name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.prototype.setTableName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.displayName = 'proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    namePattern: jspb.Message.getFieldWithDefault(msg, 1, ""),
    updateStartBatchId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxUpdateCount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maxSelectCount: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest;
  return proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamePattern(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateStartBatchId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxUpdateCount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxSelectCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamePattern();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUpdateStartBatchId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getMaxUpdateCount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getMaxSelectCount();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string name_pattern = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.prototype.getNamePattern = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.prototype.setNamePattern = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 update_start_batch_id = 2;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.prototype.getUpdateStartBatchId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.prototype.setUpdateStartBatchId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 max_update_count = 3;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.prototype.getMaxUpdateCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.prototype.setMaxUpdateCount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 max_select_count = 4;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.prototype.getMaxSelectCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.prototype.setMaxSelectCount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.displayName = 'proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tablesList: jspb.Message.toObjectList(msg.getTablesList(),
    proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse;
  return proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo;
      reader.readMessage(value,proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.deserializeBinaryFromReader);
      msg.addTables(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTablesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.displayName = 'proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    srcTableName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    batchId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    startTs: jspb.Message.getFieldWithDefault(msg, 3, 0),
    numRows: jspb.Message.getFieldWithDefault(msg, 4, 0),
    numInserts: jspb.Message.getFieldWithDefault(msg, 5, 0),
    numUpdates: jspb.Message.getFieldWithDefault(msg, 6, 0),
    numDeletes: jspb.Message.getFieldWithDefault(msg, 7, 0),
    size: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo;
  return proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcTableName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBatchId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStartTs(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumRows(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumInserts(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumUpdates(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumDeletes(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSrcTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBatchId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getStartTs();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getNumRows();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getNumInserts();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getNumUpdates();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getNumDeletes();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
};


/**
 * optional string src_table_name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.getSrcTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.setSrcTableName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 batch_id = 2;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.getBatchId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.setBatchId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 start_ts = 3;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.getStartTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.setStartTs = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 num_rows = 4;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.getNumRows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.setNumRows = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 num_inserts = 5;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.getNumInserts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.setNumInserts = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 num_updates = 6;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.getNumUpdates = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.setNumUpdates = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 num_deletes = 7;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.getNumDeletes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.setNumDeletes = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 size = 8;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.displayName = 'proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    dstTableName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    minBatchId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxBatchId: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo;
  return proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDstTableName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMinBatchId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxBatchId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDstTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMinBatchId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMaxBatchId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string dst_table_name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.prototype.getDstTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.prototype.setDstTableName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 min_batch_id = 2;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.prototype.getMinBatchId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.prototype.setMinBatchId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 max_batch_id = 3;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.prototype.getMaxBatchId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.prototype.setMaxBatchId = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.displayName = 'proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto.toObject(includeInstance, f),
    uptimeMs: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sizeEstimate: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo;
  return proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto;
      reader.readMessage(value,xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUptimeMs(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSizeEstimate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto.serializeBinaryToWriter
    );
  }
  f = message.getUptimeMs();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSizeEstimate();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto key = 1;
 * @return {?proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.prototype.getKey = function() {
  return /** @type{?proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto, 1));
};


/** @param {?proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto|undefined} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 uptime_ms = 2;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.prototype.getUptimeMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.prototype.setUptimeMs = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 size_estimate = 3;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.prototype.getSizeEstimate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.prototype.setSizeEstimate = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.displayName = 'proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.repeatedFields_ = [12,13,14,15,16];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    numPersistedUpdates: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sizeTotal: jspb.Message.getFieldWithDefault(msg, 3, 0),
    numRowsTotal: jspb.Message.getFieldWithDefault(msg, 4, 0),
    oldestBatchId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    nextBatchId: jspb.Message.getFieldWithDefault(msg, 6, 0),
    srcTableName: jspb.Message.getFieldWithDefault(msg, 7, ""),
    active: jspb.Message.getFieldWithDefault(msg, 8, false),
    restoring: jspb.Message.getFieldWithDefault(msg, 9, false),
    userIdName: jspb.Message.getFieldWithDefault(msg, 10, ""),
    sessionName: jspb.Message.getFieldWithDefault(msg, 11, ""),
    keysList: jspb.Message.toObjectList(msg.getKeysList(),
    xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto.toObject, includeInstance),
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto.toObject, includeInstance),
    updatesList: jspb.Message.toObjectList(msg.getUpdatesList(),
    proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.toObject, includeInstance),
    selectsList: jspb.Message.toObjectList(msg.getSelectsList(),
    proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.toObject, includeInstance),
    indexesList: jspb.Message.toObjectList(msg.getIndexesList(),
    proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo;
  return proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumPersistedUpdates(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSizeTotal(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumRowsTotal(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOldestBatchId(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNextBatchId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcTableName(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRestoring(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserIdName(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionName(value);
      break;
    case 12:
      var value = new xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto;
      reader.readMessage(value,xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto.deserializeBinaryFromReader);
      msg.addKeys(value);
      break;
    case 13:
      var value = new xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto;
      reader.readMessage(value,xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    case 14:
      var value = new proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo;
      reader.readMessage(value,proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.deserializeBinaryFromReader);
      msg.addUpdates(value);
      break;
    case 15:
      var value = new proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo;
      reader.readMessage(value,proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.deserializeBinaryFromReader);
      msg.addSelects(value);
      break;
    case 16:
      var value = new proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo;
      reader.readMessage(value,proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.deserializeBinaryFromReader);
      msg.addIndexes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNumPersistedUpdates();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSizeTotal();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getNumRowsTotal();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getOldestBatchId();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getNextBatchId();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getSrcTableName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getRestoring();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getUserIdName();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getSessionName();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto.serializeBinaryToWriter
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto.serializeBinaryToWriter
    );
  }
  f = message.getUpdatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.serializeBinaryToWriter
    );
  }
  f = message.getSelectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.serializeBinaryToWriter
    );
  }
  f = message.getIndexesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 num_persisted_updates = 2;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getNumPersistedUpdates = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setNumPersistedUpdates = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 size_total = 3;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getSizeTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setSizeTotal = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 num_rows_total = 4;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getNumRowsTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setNumRowsTotal = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 oldest_batch_id = 5;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getOldestBatchId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setOldestBatchId = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 next_batch_id = 6;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getNextBatchId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setNextBatchId = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string src_table_name = 7;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getSrcTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setSrcTableName = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool active = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setActive = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool restoring = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getRestoring = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setRestoring = function(value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional string user_id_name = 10;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getUserIdName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setUserIdName = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string session_name = 11;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getSessionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setSessionName = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * repeated xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto keys = 12;
 * @return {!Array<!proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto>}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getKeysList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto, 12));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto>} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setKeysList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.addKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto, opt_index);
};


proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.clearKeysList = function() {
  this.setKeysList([]);
};


/**
 * repeated xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto values = 13;
 * @return {!Array<!proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto>}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto, 13));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto>} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setValuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto, opt_index);
};


proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.clearValuesList = function() {
  this.setValuesList([]);
};


/**
 * repeated UpdateInfo updates = 14;
 * @return {!Array<!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo>}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getUpdatesList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo, 14));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo>} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setUpdatesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.addUpdates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo, opt_index);
};


proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.clearUpdatesList = function() {
  this.setUpdatesList([]);
};


/**
 * repeated SelectInfo selects = 15;
 * @return {!Array<!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo>}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getSelectsList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo, 15));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo>} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setSelectsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.addSelects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo, opt_index);
};


proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.clearSelectsList = function() {
  this.setSelectsList([]);
};


/**
 * repeated IndexInfo indexes = 16;
 * @return {!Array<!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo>}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getIndexesList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo, 16));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo>} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setIndexesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.addIndexes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo, opt_index);
};


proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.clearIndexesList = function() {
  this.setIndexesList([]);
};


/**
 * repeated TableInfo tables = 1;
 * @return {!Array<!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo>}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.prototype.getTablesList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo, 1));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo>} value */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.prototype.setTablesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.prototype.addTables = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo, opt_index);
};


proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.prototype.clearTablesList = function() {
  this.setTablesList([]);
};


goog.object.extend(exports, proto.xcalar.compute.localtypes.PublishedTable);
