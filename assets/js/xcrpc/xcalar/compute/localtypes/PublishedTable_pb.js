/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.xcalar.compute.localtypes.PublishedTable.Column', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.PublishedTable.GroupByEval', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.PublishedTable.MapEval', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.PublishedTable.SelectRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.PublishedTable.SelectResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.PublishedTable.Column = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.PublishedTable.Column, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.PublishedTable.Column.displayName = 'proto.xcalar.compute.localtypes.PublishedTable.Column';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.Column.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.PublishedTable.Column.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.Column} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.Column.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourcename: msg.getSourcename(),
    destname: msg.getDestname()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.Column}
 */
proto.xcalar.compute.localtypes.PublishedTable.Column.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.PublishedTable.Column;
  return proto.xcalar.compute.localtypes.PublishedTable.Column.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.Column} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.Column}
 */
proto.xcalar.compute.localtypes.PublishedTable.Column.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourcename(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.Column} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.PublishedTable.Column.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.PublishedTable.Column.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.PublishedTable.Column.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSourcename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getDestname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.Column} The clone.
 */
proto.xcalar.compute.localtypes.PublishedTable.Column.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.PublishedTable.Column} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string sourceName = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.Column.prototype.getSourcename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.PublishedTable.Column.prototype.setSourcename = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string destName = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.Column.prototype.getDestname = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.PublishedTable.Column.prototype.setDestname = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.PublishedTable.MapEval = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.PublishedTable.MapEval, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.PublishedTable.MapEval.displayName = 'proto.xcalar.compute.localtypes.PublishedTable.MapEval';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.MapEval.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.PublishedTable.MapEval.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.MapEval} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.MapEval.toObject = function(includeInstance, msg) {
  var f, obj = {
    evalstring: msg.getEvalstring(),
    newfield: msg.getNewfield()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.MapEval}
 */
proto.xcalar.compute.localtypes.PublishedTable.MapEval.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.PublishedTable.MapEval;
  return proto.xcalar.compute.localtypes.PublishedTable.MapEval.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.MapEval} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.MapEval}
 */
proto.xcalar.compute.localtypes.PublishedTable.MapEval.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEvalstring(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewfield(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.MapEval} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.PublishedTable.MapEval.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.PublishedTable.MapEval.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.PublishedTable.MapEval.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEvalstring();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getNewfield();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.MapEval} The clone.
 */
proto.xcalar.compute.localtypes.PublishedTable.MapEval.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.PublishedTable.MapEval} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string evalString = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.MapEval.prototype.getEvalstring = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.PublishedTable.MapEval.prototype.setEvalstring = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string newField = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.MapEval.prototype.getNewfield = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.PublishedTable.MapEval.prototype.setNewfield = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.PublishedTable.GroupByEval = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.PublishedTable.GroupByEval, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.displayName = 'proto.xcalar.compute.localtypes.PublishedTable.GroupByEval';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.GroupByEval} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.toObject = function(includeInstance, msg) {
  var f, obj = {
    evalstring: msg.getEvalstring(),
    newfield: msg.getNewfield()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.GroupByEval}
 */
proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.PublishedTable.GroupByEval;
  return proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.GroupByEval} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.GroupByEval}
 */
proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEvalstring(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewfield(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.GroupByEval} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEvalstring();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getNewfield();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.GroupByEval} The clone.
 */
proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.PublishedTable.GroupByEval} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string evalString = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.prototype.getEvalstring = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.prototype.setEvalstring = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string newField = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.prototype.getNewfield = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.prototype.setNewfield = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.PublishedTable.SelectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.displayName = 'proto.xcalar.compute.localtypes.PublishedTable.SelectRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.repeatedFields_ = [6,7,8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.SelectRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: msg.getSource(),
    dest: msg.getDest(),
    minbatchid: msg.getMinbatchid(),
    maxbatchid: msg.getMaxbatchid(),
    filterstring: msg.getFilterstring(),
    mapsList: jspb.Message.toObjectList(msg.getMapsList(),
    proto.xcalar.compute.localtypes.PublishedTable.MapEval.toObject, includeInstance),
    groupbysList: jspb.Message.toObjectList(msg.getGroupbysList(),
    proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.toObject, includeInstance),
    groupkeysList: jspb.Message.getField(msg, 8),
    columnsList: jspb.Message.toObjectList(msg.getColumnsList(),
    proto.xcalar.compute.localtypes.PublishedTable.Column.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectRequest}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.PublishedTable.SelectRequest;
  return proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.SelectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectRequest}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDest(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinbatchid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxbatchid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilterstring(value);
      break;
    case 6:
      var value = new proto.xcalar.compute.localtypes.PublishedTable.MapEval;
      reader.readMessage(value,proto.xcalar.compute.localtypes.PublishedTable.MapEval.deserializeBinaryFromReader);
      msg.getMapsList().push(value);
      msg.setMapsList(msg.getMapsList());
      break;
    case 7:
      var value = new proto.xcalar.compute.localtypes.PublishedTable.GroupByEval;
      reader.readMessage(value,proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.deserializeBinaryFromReader);
      msg.getGroupbysList().push(value);
      msg.setGroupbysList(msg.getGroupbysList());
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.getGroupkeysList().push(value);
      msg.setGroupkeysList(msg.getGroupkeysList());
      break;
    case 9:
      var value = new proto.xcalar.compute.localtypes.PublishedTable.Column;
      reader.readMessage(value,proto.xcalar.compute.localtypes.PublishedTable.Column.deserializeBinaryFromReader);
      msg.getColumnsList().push(value);
      msg.setColumnsList(msg.getColumnsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.SelectRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSource();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getDest();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getMinbatchid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = this.getMaxbatchid();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = this.getFilterstring();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getMapsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.xcalar.compute.localtypes.PublishedTable.MapEval.serializeBinaryToWriter
    );
  }
  f = this.getGroupbysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.serializeBinaryToWriter
    );
  }
  f = this.getGroupkeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = this.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.xcalar.compute.localtypes.PublishedTable.Column.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectRequest} The clone.
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.PublishedTable.SelectRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.setSource = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string dest = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.getDest = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.setDest = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 minBatchId = 3;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.getMinbatchid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.setMinbatchid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 maxBatchId = 4;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.getMaxbatchid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.setMaxbatchid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string filterString = 5;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.getFilterstring = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.setFilterstring = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * repeated MapEval maps = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.xcalar.compute.localtypes.PublishedTable.MapEval>}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.getMapsList = function() {
  return /** @type{!Array.<!proto.xcalar.compute.localtypes.PublishedTable.MapEval>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.PublishedTable.MapEval, 6));
};


/** @param {Array.<!proto.xcalar.compute.localtypes.PublishedTable.MapEval>} value  */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.setMapsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.clearMapsList = function() {
  this.setMapsList([]);
};


/**
 * repeated GroupByEval groupBys = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.xcalar.compute.localtypes.PublishedTable.GroupByEval>}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.getGroupbysList = function() {
  return /** @type{!Array.<!proto.xcalar.compute.localtypes.PublishedTable.GroupByEval>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.PublishedTable.GroupByEval, 7));
};


/** @param {Array.<!proto.xcalar.compute.localtypes.PublishedTable.GroupByEval>} value  */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.setGroupbysList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.clearGroupbysList = function() {
  this.setGroupbysList([]);
};


/**
 * repeated string groupKeys = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.getGroupkeysList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 8));
};


/** @param {Array.<string>} value  */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.setGroupkeysList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.clearGroupkeysList = function() {
  jspb.Message.setField(this, 8, []);
};


/**
 * repeated Column columns = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.xcalar.compute.localtypes.PublishedTable.Column>}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.getColumnsList = function() {
  return /** @type{!Array.<!proto.xcalar.compute.localtypes.PublishedTable.Column>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.PublishedTable.Column, 9));
};


/** @param {Array.<!proto.xcalar.compute.localtypes.PublishedTable.Column>} value  */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.setColumnsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.clearColumnsList = function() {
  this.setColumnsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.PublishedTable.SelectResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.displayName = 'proto.xcalar.compute.localtypes.PublishedTable.SelectResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.SelectResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tablename: msg.getTablename()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectResponse}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.PublishedTable.SelectResponse;
  return proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.SelectResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectResponse}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTablename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.SelectResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTablename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectResponse} The clone.
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.xcalar.compute.localtypes.PublishedTable.SelectResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string tableName = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.prototype.getTablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.prototype.setTablename = function(value) {
  jspb.Message.setField(this, 1, value);
};


goog.object.extend(exports, proto.xcalar.compute.localtypes.PublishedTable);
