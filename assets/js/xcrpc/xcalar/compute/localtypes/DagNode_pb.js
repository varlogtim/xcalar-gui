/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
var xcalar_compute_localtypes_Workbook_pb = require('../../../xcalar/compute/localtypes/Workbook_pb.js');
var xcalar_compute_localtypes_Operator_pb = require('../../../xcalar/compute/localtypes/Operator_pb.js');
var xcalar_compute_localtypes_DagStateEnums_pb = require('../../../xcalar/compute/localtypes/DagStateEnums_pb.js');
var xcalar_compute_localtypes_DagRefTypeEnums_pb = require('../../../xcalar/compute/localtypes/DagRefTypeEnums_pb.js');
var xcalar_compute_localtypes_Status_pb = require('../../../xcalar/compute/localtypes/Status_pb.js');
var xcalar_compute_localtypes_SourceTypeEnum_pb = require('../../../xcalar/compute/localtypes/SourceTypeEnum_pb.js');
var xcalar_compute_localtypes_LibApisEnums_pb = require('../../../xcalar/compute/localtypes/LibApisEnums_pb.js');
goog.exportSymbol('proto.xcalar.compute.localtypes.DagNode.CommentRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.DagNode.DagNodeArg', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.DagNode.DagNodeInfo', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.DagNode.DagNodeInputMsg', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.DagNode.DagRef', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.DagNode.DeleteRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.DagNode.DeleteResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.DagNode.FailureDesc', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.DagNode.FailureSummary', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.DagNode.ListRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.DagNode.ListResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.DagNode.OpFailureInfo', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.DagNode.RenameRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.DagNode.TagRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.DagNode.Time', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.DagNode.Time = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.DagNode.Time, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.DagNode.Time.displayName = 'proto.xcalar.compute.localtypes.DagNode.Time';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.DagNode.Time.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.DagNode.Time.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.DagNode.Time} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.Time.toObject = function(includeInstance, msg) {
  var f, obj = {
    milliseconds: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.DagNode.Time}
 */
proto.xcalar.compute.localtypes.DagNode.Time.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.DagNode.Time;
  return proto.xcalar.compute.localtypes.DagNode.Time.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.DagNode.Time} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.DagNode.Time}
 */
proto.xcalar.compute.localtypes.DagNode.Time.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMilliseconds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.DagNode.Time.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.DagNode.Time.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.DagNode.Time} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.Time.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMilliseconds();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 milliseconds = 1;
 * @return {number}
 */
proto.xcalar.compute.localtypes.DagNode.Time.prototype.getMilliseconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.DagNode.Time.prototype.setMilliseconds = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.DagNode.FailureDesc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.DagNode.FailureDesc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.DagNode.FailureDesc.displayName = 'proto.xcalar.compute.localtypes.DagNode.FailureDesc';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.DagNode.FailureDesc.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.DagNode.FailureDesc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.DagNode.FailureDesc} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.FailureDesc.toObject = function(includeInstance, msg) {
  var f, obj = {
    numRowsFailed: jspb.Message.getFieldWithDefault(msg, 1, 0),
    failureDesc: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.DagNode.FailureDesc}
 */
proto.xcalar.compute.localtypes.DagNode.FailureDesc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.DagNode.FailureDesc;
  return proto.xcalar.compute.localtypes.DagNode.FailureDesc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.DagNode.FailureDesc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.DagNode.FailureDesc}
 */
proto.xcalar.compute.localtypes.DagNode.FailureDesc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumRowsFailed(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFailureDesc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.DagNode.FailureDesc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.DagNode.FailureDesc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.DagNode.FailureDesc} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.FailureDesc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumRowsFailed();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getFailureDesc();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint64 num_rows_failed = 1;
 * @return {number}
 */
proto.xcalar.compute.localtypes.DagNode.FailureDesc.prototype.getNumRowsFailed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.DagNode.FailureDesc.prototype.setNumRowsFailed = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string failure_desc = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.DagNode.FailureDesc.prototype.getFailureDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.DagNode.FailureDesc.prototype.setFailureDesc = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.DagNode.FailureSummary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.DagNode.FailureSummary.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.DagNode.FailureSummary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.DagNode.FailureSummary.displayName = 'proto.xcalar.compute.localtypes.DagNode.FailureSummary';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.DagNode.FailureSummary.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.DagNode.FailureSummary.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.DagNode.FailureSummary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.DagNode.FailureSummary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.FailureSummary.toObject = function(includeInstance, msg) {
  var f, obj = {
    failureSummName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    failureSummInfoList: jspb.Message.toObjectList(msg.getFailureSummInfoList(),
    proto.xcalar.compute.localtypes.DagNode.FailureDesc.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.DagNode.FailureSummary}
 */
proto.xcalar.compute.localtypes.DagNode.FailureSummary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.DagNode.FailureSummary;
  return proto.xcalar.compute.localtypes.DagNode.FailureSummary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.DagNode.FailureSummary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.DagNode.FailureSummary}
 */
proto.xcalar.compute.localtypes.DagNode.FailureSummary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFailureSummName(value);
      break;
    case 2:
      var value = new proto.xcalar.compute.localtypes.DagNode.FailureDesc;
      reader.readMessage(value,proto.xcalar.compute.localtypes.DagNode.FailureDesc.deserializeBinaryFromReader);
      msg.addFailureSummInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.DagNode.FailureSummary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.DagNode.FailureSummary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.DagNode.FailureSummary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.FailureSummary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFailureSummName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFailureSummInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.xcalar.compute.localtypes.DagNode.FailureDesc.serializeBinaryToWriter
    );
  }
};


/**
 * optional string failure_summ_name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.DagNode.FailureSummary.prototype.getFailureSummName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.DagNode.FailureSummary.prototype.setFailureSummName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated FailureDesc failure_summ_info = 2;
 * @return {!Array<!proto.xcalar.compute.localtypes.DagNode.FailureDesc>}
 */
proto.xcalar.compute.localtypes.DagNode.FailureSummary.prototype.getFailureSummInfoList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.DagNode.FailureDesc>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.DagNode.FailureDesc, 2));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.DagNode.FailureDesc>} value */
proto.xcalar.compute.localtypes.DagNode.FailureSummary.prototype.setFailureSummInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.DagNode.FailureDesc=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.DagNode.FailureDesc}
 */
proto.xcalar.compute.localtypes.DagNode.FailureSummary.prototype.addFailureSummInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.xcalar.compute.localtypes.DagNode.FailureDesc, opt_index);
};


proto.xcalar.compute.localtypes.DagNode.FailureSummary.prototype.clearFailureSummInfoList = function() {
  this.setFailureSummInfoList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.DagNode.OpFailureInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.DagNode.OpFailureInfo.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.DagNode.OpFailureInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.DagNode.OpFailureInfo.displayName = 'proto.xcalar.compute.localtypes.DagNode.OpFailureInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.DagNode.OpFailureInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.DagNode.OpFailureInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.DagNode.OpFailureInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.DagNode.OpFailureInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.OpFailureInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    numRowsFailedTotal: jspb.Message.getFieldWithDefault(msg, 1, 0),
    opFailureSummaryList: jspb.Message.toObjectList(msg.getOpFailureSummaryList(),
    proto.xcalar.compute.localtypes.DagNode.FailureSummary.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.DagNode.OpFailureInfo}
 */
proto.xcalar.compute.localtypes.DagNode.OpFailureInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.DagNode.OpFailureInfo;
  return proto.xcalar.compute.localtypes.DagNode.OpFailureInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.DagNode.OpFailureInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.DagNode.OpFailureInfo}
 */
proto.xcalar.compute.localtypes.DagNode.OpFailureInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumRowsFailedTotal(value);
      break;
    case 2:
      var value = new proto.xcalar.compute.localtypes.DagNode.FailureSummary;
      reader.readMessage(value,proto.xcalar.compute.localtypes.DagNode.FailureSummary.deserializeBinaryFromReader);
      msg.addOpFailureSummary(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.DagNode.OpFailureInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.DagNode.OpFailureInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.DagNode.OpFailureInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.OpFailureInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumRowsFailedTotal();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getOpFailureSummaryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.xcalar.compute.localtypes.DagNode.FailureSummary.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 num_rows_failed_total = 1;
 * @return {number}
 */
proto.xcalar.compute.localtypes.DagNode.OpFailureInfo.prototype.getNumRowsFailedTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.DagNode.OpFailureInfo.prototype.setNumRowsFailedTotal = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated FailureSummary op_failure_summary = 2;
 * @return {!Array<!proto.xcalar.compute.localtypes.DagNode.FailureSummary>}
 */
proto.xcalar.compute.localtypes.DagNode.OpFailureInfo.prototype.getOpFailureSummaryList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.DagNode.FailureSummary>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.DagNode.FailureSummary, 2));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.DagNode.FailureSummary>} value */
proto.xcalar.compute.localtypes.DagNode.OpFailureInfo.prototype.setOpFailureSummaryList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.DagNode.FailureSummary=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.DagNode.FailureSummary}
 */
proto.xcalar.compute.localtypes.DagNode.OpFailureInfo.prototype.addOpFailureSummary = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.xcalar.compute.localtypes.DagNode.FailureSummary, opt_index);
};


proto.xcalar.compute.localtypes.DagNode.OpFailureInfo.prototype.clearOpFailureSummaryList = function() {
  this.setOpFailureSummaryList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.DagNode.DagNodeArg.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.DagNode.DagNodeArg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.DagNode.DagNodeArg.displayName = 'proto.xcalar.compute.localtypes.DagNode.DagNodeArg';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.repeatedFields_ = [10,11,24,25,27];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.DagNode.DagNodeArg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.DagNode.DagNodeArg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName_asB64(),
    tag: msg.getTag_asB64(),
    comment: msg.getComment_asB64(),
    dagNodeId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    api: jspb.Message.getFieldWithDefault(msg, 5, 0),
    state: jspb.Message.getFieldWithDefault(msg, 6, 0),
    elapsed: (f = msg.getElapsed()) && proto.xcalar.compute.localtypes.DagNode.Time.toObject(includeInstance, f),
    numParents: jspb.Message.getFieldWithDefault(msg, 8, 0),
    numChildren: jspb.Message.getFieldWithDefault(msg, 9, 0),
    parentsList: jspb.Message.getRepeatedField(msg, 10),
    childrenList: jspb.Message.getRepeatedField(msg, 11),
    log: jspb.Message.getFieldWithDefault(msg, 12, ""),
    status: jspb.Message.getFieldWithDefault(msg, 13, 0),
    input: (f = msg.getInput()) && xcalar_compute_localtypes_Operator_pb.XcalarDagInput.toObject(includeInstance, f),
    inputSize: jspb.Message.getFieldWithDefault(msg, 15, 0),
    xdbBytesRequired: jspb.Message.getFieldWithDefault(msg, 16, 0),
    xdbBytesConsumed: jspb.Message.getFieldWithDefault(msg, 17, 0),
    numTransPageSent: jspb.Message.getFieldWithDefault(msg, 18, 0),
    numTransPageRecv: jspb.Message.getFieldWithDefault(msg, 19, 0),
    numWorkCompleted: jspb.Message.getFieldWithDefault(msg, 20, 0),
    numWorkTotal: jspb.Message.getFieldWithDefault(msg, 21, 0),
    numNodes: jspb.Message.getFieldWithDefault(msg, 22, 0),
    numRowsTotal: jspb.Message.getFieldWithDefault(msg, 23, 0),
    numTransPagesReceivedPerNodeList: jspb.Message.getRepeatedField(msg, 24),
    numRowsPerNodeList: jspb.Message.getRepeatedField(msg, 25),
    sizeTotal: jspb.Message.getFieldWithDefault(msg, 26, 0),
    sizePerNodeList: jspb.Message.getRepeatedField(msg, 27),
    opFailureInfo: (f = msg.getOpFailureInfo()) && proto.xcalar.compute.localtypes.DagNode.OpFailureInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.DagNode.DagNodeArg}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.DagNode.DagNodeArg;
  return proto.xcalar.compute.localtypes.DagNode.DagNodeArg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.DagNode.DagNodeArg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.DagNode.DagNodeArg}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTag(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setComment(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDagNodeId(value);
      break;
    case 5:
      var value = /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.XcalarApis} */ (reader.readEnum());
      msg.setApi(value);
      break;
    case 6:
      var value = /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.DgDagState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 7:
      var value = new proto.xcalar.compute.localtypes.DagNode.Time;
      reader.readMessage(value,proto.xcalar.compute.localtypes.DagNode.Time.deserializeBinaryFromReader);
      msg.setElapsed(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumParents(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumChildren(value);
      break;
    case 10:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
      msg.setParentsList(value);
      break;
    case 11:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
      msg.setChildrenList(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setLog(value);
      break;
    case 13:
      var value = /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 14:
      var value = new xcalar_compute_localtypes_Operator_pb.XcalarDagInput;
      reader.readMessage(value,xcalar_compute_localtypes_Operator_pb.XcalarDagInput.deserializeBinaryFromReader);
      msg.setInput(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setInputSize(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setXdbBytesRequired(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setXdbBytesConsumed(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumTransPageSent(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumTransPageRecv(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumWorkCompleted(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumWorkTotal(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumNodes(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumRowsTotal(value);
      break;
    case 24:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
      msg.setNumTransPagesReceivedPerNodeList(value);
      break;
    case 25:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
      msg.setNumRowsPerNodeList(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSizeTotal(value);
      break;
    case 27:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
      msg.setSizePerNodeList(value);
      break;
    case 28:
      var value = new proto.xcalar.compute.localtypes.DagNode.OpFailureInfo;
      reader.readMessage(value,proto.xcalar.compute.localtypes.DagNode.OpFailureInfo.deserializeBinaryFromReader);
      msg.setOpFailureInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.DagNode.DagNodeArg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.DagNode.DagNodeArg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTag_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getComment_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getDagNodeId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getApi();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getElapsed();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.xcalar.compute.localtypes.DagNode.Time.serializeBinaryToWriter
    );
  }
  f = message.getNumParents();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getNumChildren();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getParentsList();
  if (f.length > 0) {
    writer.writePackedUint64(
      10,
      f
    );
  }
  f = message.getChildrenList();
  if (f.length > 0) {
    writer.writePackedUint64(
      11,
      f
    );
  }
  f = message.getLog();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = message.getInput();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      xcalar_compute_localtypes_Operator_pb.XcalarDagInput.serializeBinaryToWriter
    );
  }
  f = message.getInputSize();
  if (f !== 0) {
    writer.writeUint64(
      15,
      f
    );
  }
  f = message.getXdbBytesRequired();
  if (f !== 0) {
    writer.writeUint64(
      16,
      f
    );
  }
  f = message.getXdbBytesConsumed();
  if (f !== 0) {
    writer.writeUint64(
      17,
      f
    );
  }
  f = message.getNumTransPageSent();
  if (f !== 0) {
    writer.writeUint64(
      18,
      f
    );
  }
  f = message.getNumTransPageRecv();
  if (f !== 0) {
    writer.writeUint64(
      19,
      f
    );
  }
  f = message.getNumWorkCompleted();
  if (f !== 0) {
    writer.writeUint64(
      20,
      f
    );
  }
  f = message.getNumWorkTotal();
  if (f !== 0) {
    writer.writeUint64(
      21,
      f
    );
  }
  f = message.getNumNodes();
  if (f !== 0) {
    writer.writeUint64(
      22,
      f
    );
  }
  f = message.getNumRowsTotal();
  if (f !== 0) {
    writer.writeUint64(
      23,
      f
    );
  }
  f = message.getNumTransPagesReceivedPerNodeList();
  if (f.length > 0) {
    writer.writePackedUint64(
      24,
      f
    );
  }
  f = message.getNumRowsPerNodeList();
  if (f.length > 0) {
    writer.writePackedUint64(
      25,
      f
    );
  }
  f = message.getSizeTotal();
  if (f !== 0) {
    writer.writeUint64(
      26,
      f
    );
  }
  f = message.getSizePerNodeList();
  if (f.length > 0) {
    writer.writePackedUint64(
      27,
      f
    );
  }
  f = message.getOpFailureInfo();
  if (f != null) {
    writer.writeMessage(
      28,
      f,
      proto.xcalar.compute.localtypes.DagNode.OpFailureInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes name = 1;
 * @return {!(string|Uint8Array)}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getName = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes name = 1;
 * This is a type-conversion wrapper around `getName()`
 * @return {string}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getName_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getName()));
};


/**
 * optional bytes name = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getName()`
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getName_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getName()));
};


/** @param {!(string|Uint8Array)} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.setName = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes tag = 2;
 * @return {!(string|Uint8Array)}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getTag = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes tag = 2;
 * This is a type-conversion wrapper around `getTag()`
 * @return {string}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getTag_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTag()));
};


/**
 * optional bytes tag = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTag()`
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getTag_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTag()));
};


/** @param {!(string|Uint8Array)} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.setTag = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes comment = 3;
 * @return {!(string|Uint8Array)}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getComment = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes comment = 3;
 * This is a type-conversion wrapper around `getComment()`
 * @return {string}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getComment_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getComment()));
};


/**
 * optional bytes comment = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getComment()`
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getComment_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getComment()));
};


/** @param {!(string|Uint8Array)} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.setComment = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string dag_node_id = 4;
 * @return {string}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getDagNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.setDagNodeId = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional xcalar.compute.localtypes.XcalarEnumType.XcalarApis api = 5;
 * @return {!proto.xcalar.compute.localtypes.XcalarEnumType.XcalarApis}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getApi = function() {
  return /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.XcalarApis} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.xcalar.compute.localtypes.XcalarEnumType.XcalarApis} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.setApi = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional xcalar.compute.localtypes.XcalarEnumType.DgDagState state = 6;
 * @return {!proto.xcalar.compute.localtypes.XcalarEnumType.DgDagState}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getState = function() {
  return /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.DgDagState} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.xcalar.compute.localtypes.XcalarEnumType.DgDagState} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional Time elapsed = 7;
 * @return {?proto.xcalar.compute.localtypes.DagNode.Time}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getElapsed = function() {
  return /** @type{?proto.xcalar.compute.localtypes.DagNode.Time} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.DagNode.Time, 7));
};


/** @param {?proto.xcalar.compute.localtypes.DagNode.Time|undefined} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.setElapsed = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.clearElapsed = function() {
  this.setElapsed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.hasElapsed = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint64 num_parents = 8;
 * @return {number}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getNumParents = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.setNumParents = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint64 num_children = 9;
 * @return {number}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getNumChildren = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.setNumChildren = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * repeated uint64 parents = 10;
 * @return {!Array<number>}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getParentsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 10));
};


/** @param {!Array<number>} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.setParentsList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.addParents = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.clearParentsList = function() {
  this.setParentsList([]);
};


/**
 * repeated uint64 children = 11;
 * @return {!Array<number>}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getChildrenList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 11));
};


/** @param {!Array<number>} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.setChildrenList = function(value) {
  jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.addChildren = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.clearChildrenList = function() {
  this.setChildrenList([]);
};


/**
 * optional string log = 12;
 * @return {string}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getLog = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.setLog = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional xcalar.compute.localtypes.XcalarEnumType.Status status = 13;
 * @return {!proto.xcalar.compute.localtypes.XcalarEnumType.Status}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getStatus = function() {
  return /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.Status} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {!proto.xcalar.compute.localtypes.XcalarEnumType.Status} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 13, value);
};


/**
 * optional xcalar.compute.localtypes.Operator.XcalarDagInput input = 14;
 * @return {?proto.xcalar.compute.localtypes.Operator.XcalarDagInput}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getInput = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Operator.XcalarDagInput} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Operator_pb.XcalarDagInput, 14));
};


/** @param {?proto.xcalar.compute.localtypes.Operator.XcalarDagInput|undefined} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.setInput = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.clearInput = function() {
  this.setInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.hasInput = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional uint64 input_size = 15;
 * @return {number}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getInputSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.setInputSize = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional uint64 xdb_bytes_required = 16;
 * @return {number}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getXdbBytesRequired = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.setXdbBytesRequired = function(value) {
  jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional uint64 xdb_bytes_consumed = 17;
 * @return {number}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getXdbBytesConsumed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.setXdbBytesConsumed = function(value) {
  jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional uint64 num_trans_page_sent = 18;
 * @return {number}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getNumTransPageSent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.setNumTransPageSent = function(value) {
  jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional uint64 num_trans_page_recv = 19;
 * @return {number}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getNumTransPageRecv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.setNumTransPageRecv = function(value) {
  jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional uint64 num_work_completed = 20;
 * @return {number}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getNumWorkCompleted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.setNumWorkCompleted = function(value) {
  jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional uint64 num_work_total = 21;
 * @return {number}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getNumWorkTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.setNumWorkTotal = function(value) {
  jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional uint64 num_nodes = 22;
 * @return {number}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getNumNodes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.setNumNodes = function(value) {
  jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional uint64 num_rows_total = 23;
 * @return {number}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getNumRowsTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.setNumRowsTotal = function(value) {
  jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * repeated uint64 num_trans_pages_received_per_node = 24;
 * @return {!Array<number>}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getNumTransPagesReceivedPerNodeList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 24));
};


/** @param {!Array<number>} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.setNumTransPagesReceivedPerNodeList = function(value) {
  jspb.Message.setField(this, 24, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.addNumTransPagesReceivedPerNode = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 24, value, opt_index);
};


proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.clearNumTransPagesReceivedPerNodeList = function() {
  this.setNumTransPagesReceivedPerNodeList([]);
};


/**
 * repeated uint64 num_rows_per_node = 25;
 * @return {!Array<number>}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getNumRowsPerNodeList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 25));
};


/** @param {!Array<number>} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.setNumRowsPerNodeList = function(value) {
  jspb.Message.setField(this, 25, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.addNumRowsPerNode = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 25, value, opt_index);
};


proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.clearNumRowsPerNodeList = function() {
  this.setNumRowsPerNodeList([]);
};


/**
 * optional uint64 size_total = 26;
 * @return {number}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getSizeTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.setSizeTotal = function(value) {
  jspb.Message.setProto3IntField(this, 26, value);
};


/**
 * repeated uint64 size_per_node = 27;
 * @return {!Array<number>}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getSizePerNodeList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 27));
};


/** @param {!Array<number>} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.setSizePerNodeList = function(value) {
  jspb.Message.setField(this, 27, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.addSizePerNode = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 27, value, opt_index);
};


proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.clearSizePerNodeList = function() {
  this.setSizePerNodeList([]);
};


/**
 * optional OpFailureInfo op_failure_info = 28;
 * @return {?proto.xcalar.compute.localtypes.DagNode.OpFailureInfo}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.getOpFailureInfo = function() {
  return /** @type{?proto.xcalar.compute.localtypes.DagNode.OpFailureInfo} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.DagNode.OpFailureInfo, 28));
};


/** @param {?proto.xcalar.compute.localtypes.DagNode.OpFailureInfo|undefined} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.setOpFailureInfo = function(value) {
  jspb.Message.setWrapperField(this, 28, value);
};


proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.clearOpFailureInfo = function() {
  this.setOpFailureInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeArg.prototype.hasOpFailureInfo = function() {
  return jspb.Message.getField(this, 28) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.DagNode.DagNodeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.displayName = 'proto.xcalar.compute.localtypes.DagNode.DagNodeInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.DagNode.DagNodeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dagNodeId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    state: jspb.Message.getFieldWithDefault(msg, 3, 0),
    size: jspb.Message.getFieldWithDefault(msg, 4, 0),
    api: jspb.Message.getFieldWithDefault(msg, 5, 0),
    pinned: jspb.Message.getFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.DagNode.DagNodeInfo}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.DagNode.DagNodeInfo;
  return proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.DagNode.DagNodeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.DagNode.DagNodeInfo}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDagNodeId(value);
      break;
    case 3:
      var value = /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.DgDagState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    case 5:
      var value = /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.XcalarApis} */ (reader.readEnum());
      msg.setApi(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPinned(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.DagNode.DagNodeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDagNodeId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getApi();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getPinned();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 dag_node_id = 2;
 * @return {number}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.prototype.getDagNodeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.prototype.setDagNodeId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional xcalar.compute.localtypes.XcalarEnumType.DgDagState state = 3;
 * @return {!proto.xcalar.compute.localtypes.XcalarEnumType.DgDagState}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.prototype.getState = function() {
  return /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.DgDagState} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.xcalar.compute.localtypes.XcalarEnumType.DgDagState} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional uint64 size = 4;
 * @return {number}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional xcalar.compute.localtypes.XcalarEnumType.XcalarApis api = 5;
 * @return {!proto.xcalar.compute.localtypes.XcalarEnumType.XcalarApis}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.prototype.getApi = function() {
  return /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.XcalarApis} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.xcalar.compute.localtypes.XcalarEnumType.XcalarApis} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.prototype.setApi = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional bool pinned = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.prototype.getPinned = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.prototype.setPinned = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.DagNode.DagRef = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.DagNode.DagRef, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.DagNode.DagRef.displayName = 'proto.xcalar.compute.localtypes.DagNode.DagRef';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.DagNode.DagRef.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.DagNode.DagRef.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.DagNode.DagRef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.DagRef.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    xid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.DagNode.DagRef}
 */
proto.xcalar.compute.localtypes.DagNode.DagRef.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.DagNode.DagRef;
  return proto.xcalar.compute.localtypes.DagNode.DagRef.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.DagNode.DagRef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.DagNode.DagRef}
 */
proto.xcalar.compute.localtypes.DagNode.DagRef.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.DagRefType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setXid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.DagNode.DagRef.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.DagNode.DagRef.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.DagNode.DagRef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.DagRef.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getXid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional xcalar.compute.localtypes.XcalarEnumType.DagRefType type = 1;
 * @return {!proto.xcalar.compute.localtypes.XcalarEnumType.DagRefType}
 */
proto.xcalar.compute.localtypes.DagNode.DagRef.prototype.getType = function() {
  return /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.DagRefType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.xcalar.compute.localtypes.XcalarEnumType.DagRefType} value */
proto.xcalar.compute.localtypes.DagNode.DagRef.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.DagNode.DagRef.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.DagNode.DagRef.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string xid = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.DagNode.DagRef.prototype.getXid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.DagNode.DagRef.prototype.setXid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.displayName = 'proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeInfo: (f = msg.getNodeInfo()) && proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    numRefs: jspb.Message.getFieldWithDefault(msg, 3, 0),
    refsList: jspb.Message.toObjectList(msg.getRefsList(),
    proto.xcalar.compute.localtypes.DagNode.DagRef.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus;
  return proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.DagNode.DagNodeInfo;
      reader.readMessage(value,proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.deserializeBinaryFromReader);
      msg.setNodeInfo(value);
      break;
    case 2:
      var value = /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumRefs(value);
      break;
    case 4:
      var value = new proto.xcalar.compute.localtypes.DagNode.DagRef;
      reader.readMessage(value,proto.xcalar.compute.localtypes.DagNode.DagRef.deserializeBinaryFromReader);
      msg.addRefs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getNumRefs();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getRefsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.xcalar.compute.localtypes.DagNode.DagRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional DagNodeInfo node_info = 1;
 * @return {?proto.xcalar.compute.localtypes.DagNode.DagNodeInfo}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.prototype.getNodeInfo = function() {
  return /** @type{?proto.xcalar.compute.localtypes.DagNode.DagNodeInfo} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.DagNode.DagNodeInfo, 1));
};


/** @param {?proto.xcalar.compute.localtypes.DagNode.DagNodeInfo|undefined} value */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.prototype.setNodeInfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.prototype.clearNodeInfo = function() {
  this.setNodeInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.prototype.hasNodeInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional xcalar.compute.localtypes.XcalarEnumType.Status status = 2;
 * @return {!proto.xcalar.compute.localtypes.XcalarEnumType.Status}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.prototype.getStatus = function() {
  return /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.xcalar.compute.localtypes.XcalarEnumType.Status} value */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint64 num_refs = 3;
 * @return {number}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.prototype.getNumRefs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.prototype.setNumRefs = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated DagRef refs = 4;
 * @return {!Array<!proto.xcalar.compute.localtypes.DagNode.DagRef>}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.prototype.getRefsList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.DagNode.DagRef>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.DagNode.DagRef, 4));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.DagNode.DagRef>} value */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.prototype.setRefsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.DagNode.DagRef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.DagNode.DagRef}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.prototype.addRefs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.xcalar.compute.localtypes.DagNode.DagRef, opt_index);
};


proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.prototype.clearRefsList = function() {
  this.setRefsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.DagNode.ListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.DagNode.ListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.DagNode.ListRequest.displayName = 'proto.xcalar.compute.localtypes.DagNode.ListRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.DagNode.ListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.DagNode.ListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.DagNode.ListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.ListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    namePattern: jspb.Message.getFieldWithDefault(msg, 1, ""),
    srcType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.DagNode.ListRequest}
 */
proto.xcalar.compute.localtypes.DagNode.ListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.DagNode.ListRequest;
  return proto.xcalar.compute.localtypes.DagNode.ListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.DagNode.ListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.DagNode.ListRequest}
 */
proto.xcalar.compute.localtypes.DagNode.ListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamePattern(value);
      break;
    case 2:
      var value = /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.SourceType} */ (reader.readEnum());
      msg.setSrcType(value);
      break;
    case 3:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.DagNode.ListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.DagNode.ListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.DagNode.ListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.ListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamePattern();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSrcType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name_pattern = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.DagNode.ListRequest.prototype.getNamePattern = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.DagNode.ListRequest.prototype.setNamePattern = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional xcalar.compute.localtypes.XcalarEnumType.SourceType src_type = 2;
 * @return {!proto.xcalar.compute.localtypes.XcalarEnumType.SourceType}
 */
proto.xcalar.compute.localtypes.DagNode.ListRequest.prototype.getSrcType = function() {
  return /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.SourceType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.xcalar.compute.localtypes.XcalarEnumType.SourceType} value */
proto.xcalar.compute.localtypes.DagNode.ListRequest.prototype.setSrcType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 3;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.DagNode.ListRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 3));
};


/** @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value */
proto.xcalar.compute.localtypes.DagNode.ListRequest.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.xcalar.compute.localtypes.DagNode.ListRequest.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.DagNode.ListRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.DagNode.ListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.DagNode.ListResponse.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.DagNode.ListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.DagNode.ListResponse.displayName = 'proto.xcalar.compute.localtypes.DagNode.ListResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.DagNode.ListResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.DagNode.ListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.DagNode.ListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.DagNode.ListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.ListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    numNodes: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nodeInfoList: jspb.Message.toObjectList(msg.getNodeInfoList(),
    proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.DagNode.ListResponse}
 */
proto.xcalar.compute.localtypes.DagNode.ListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.DagNode.ListResponse;
  return proto.xcalar.compute.localtypes.DagNode.ListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.DagNode.ListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.DagNode.ListResponse}
 */
proto.xcalar.compute.localtypes.DagNode.ListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumNodes(value);
      break;
    case 2:
      var value = new proto.xcalar.compute.localtypes.DagNode.DagNodeInfo;
      reader.readMessage(value,proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.deserializeBinaryFromReader);
      msg.addNodeInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.DagNode.ListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.DagNode.ListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.DagNode.ListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.ListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumNodes();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getNodeInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 num_nodes = 1;
 * @return {number}
 */
proto.xcalar.compute.localtypes.DagNode.ListResponse.prototype.getNumNodes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.DagNode.ListResponse.prototype.setNumNodes = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated DagNodeInfo node_info = 2;
 * @return {!Array<!proto.xcalar.compute.localtypes.DagNode.DagNodeInfo>}
 */
proto.xcalar.compute.localtypes.DagNode.ListResponse.prototype.getNodeInfoList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.DagNode.DagNodeInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.DagNode.DagNodeInfo, 2));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.DagNode.DagNodeInfo>} value */
proto.xcalar.compute.localtypes.DagNode.ListResponse.prototype.setNodeInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.DagNode.DagNodeInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.DagNode.DagNodeInfo}
 */
proto.xcalar.compute.localtypes.DagNode.ListResponse.prototype.addNodeInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.xcalar.compute.localtypes.DagNode.DagNodeInfo, opt_index);
};


proto.xcalar.compute.localtypes.DagNode.ListResponse.prototype.clearNodeInfoList = function() {
  this.setNodeInfoList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.DagNode.DeleteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.DagNode.DeleteRequest.displayName = 'proto.xcalar.compute.localtypes.DagNode.DeleteRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.DagNode.DeleteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.DagNode.DeleteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    namePattern: jspb.Message.getFieldWithDefault(msg, 1, ""),
    srcType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    deleteCompletely: jspb.Message.getFieldWithDefault(msg, 3, false),
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.DagNode.DeleteRequest}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.DagNode.DeleteRequest;
  return proto.xcalar.compute.localtypes.DagNode.DeleteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.DagNode.DeleteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.DagNode.DeleteRequest}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamePattern(value);
      break;
    case 2:
      var value = /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.SourceType} */ (reader.readEnum());
      msg.setSrcType(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeleteCompletely(value);
      break;
    case 4:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.DagNode.DeleteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.DagNode.DeleteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamePattern();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSrcType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getDeleteCompletely();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name_pattern = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest.prototype.getNamePattern = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest.prototype.setNamePattern = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional xcalar.compute.localtypes.XcalarEnumType.SourceType src_type = 2;
 * @return {!proto.xcalar.compute.localtypes.XcalarEnumType.SourceType}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest.prototype.getSrcType = function() {
  return /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.SourceType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.xcalar.compute.localtypes.XcalarEnumType.SourceType} value */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest.prototype.setSrcType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bool delete_completely = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest.prototype.getDeleteCompletely = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest.prototype.setDeleteCompletely = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 4;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 4));
};


/** @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.xcalar.compute.localtypes.DagNode.DeleteRequest.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.DagNode.DeleteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.DagNode.DeleteResponse.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.DagNode.DeleteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.DagNode.DeleteResponse.displayName = 'proto.xcalar.compute.localtypes.DagNode.DeleteResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.DagNode.DeleteResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.DagNode.DeleteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.DagNode.DeleteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.DeleteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    numNodes: jspb.Message.getFieldWithDefault(msg, 1, 0),
    statusesList: jspb.Message.toObjectList(msg.getStatusesList(),
    proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.DagNode.DeleteResponse}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.DagNode.DeleteResponse;
  return proto.xcalar.compute.localtypes.DagNode.DeleteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.DagNode.DeleteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.DagNode.DeleteResponse}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumNodes(value);
      break;
    case 2:
      var value = new proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus;
      reader.readMessage(value,proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.deserializeBinaryFromReader);
      msg.addStatuses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.DagNode.DeleteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.DagNode.DeleteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.DeleteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumNodes();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getStatusesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 num_nodes = 1;
 * @return {number}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteResponse.prototype.getNumNodes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.DagNode.DeleteResponse.prototype.setNumNodes = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated DeleteDagNodeStatus statuses = 2;
 * @return {!Array<!proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus>}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteResponse.prototype.getStatusesList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus, 2));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus>} value */
proto.xcalar.compute.localtypes.DagNode.DeleteResponse.prototype.setStatusesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteResponse.prototype.addStatuses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus, opt_index);
};


proto.xcalar.compute.localtypes.DagNode.DeleteResponse.prototype.clearStatusesList = function() {
  this.setStatusesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.DagNode.TagRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.DagNode.TagRequest.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.DagNode.TagRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.DagNode.TagRequest.displayName = 'proto.xcalar.compute.localtypes.DagNode.TagRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.DagNode.TagRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.DagNode.TagRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.DagNode.TagRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.DagNode.TagRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.TagRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    numDagNodes: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dagNodeNamesList: jspb.Message.getRepeatedField(msg, 2),
    tag: jspb.Message.getFieldWithDefault(msg, 3, ""),
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.DagNode.TagRequest}
 */
proto.xcalar.compute.localtypes.DagNode.TagRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.DagNode.TagRequest;
  return proto.xcalar.compute.localtypes.DagNode.TagRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.DagNode.TagRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.DagNode.TagRequest}
 */
proto.xcalar.compute.localtypes.DagNode.TagRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumDagNodes(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addDagNodeNames(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTag(value);
      break;
    case 4:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.DagNode.TagRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.DagNode.TagRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.DagNode.TagRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.TagRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumDagNodes();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDagNodeNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getTag();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 num_dag_nodes = 1;
 * @return {number}
 */
proto.xcalar.compute.localtypes.DagNode.TagRequest.prototype.getNumDagNodes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.DagNode.TagRequest.prototype.setNumDagNodes = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated string dag_node_names = 2;
 * @return {!Array<string>}
 */
proto.xcalar.compute.localtypes.DagNode.TagRequest.prototype.getDagNodeNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.xcalar.compute.localtypes.DagNode.TagRequest.prototype.setDagNodeNamesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.xcalar.compute.localtypes.DagNode.TagRequest.prototype.addDagNodeNames = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.xcalar.compute.localtypes.DagNode.TagRequest.prototype.clearDagNodeNamesList = function() {
  this.setDagNodeNamesList([]);
};


/**
 * optional string tag = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.DagNode.TagRequest.prototype.getTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.DagNode.TagRequest.prototype.setTag = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 4;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.DagNode.TagRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 4));
};


/** @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value */
proto.xcalar.compute.localtypes.DagNode.TagRequest.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.xcalar.compute.localtypes.DagNode.TagRequest.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.DagNode.TagRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.DagNode.CommentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.DagNode.CommentRequest.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.DagNode.CommentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.DagNode.CommentRequest.displayName = 'proto.xcalar.compute.localtypes.DagNode.CommentRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.DagNode.CommentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.DagNode.CommentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    numDagNodes: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dagNodeNamesList: jspb.Message.getRepeatedField(msg, 2),
    comment: jspb.Message.getFieldWithDefault(msg, 3, ""),
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.DagNode.CommentRequest}
 */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.DagNode.CommentRequest;
  return proto.xcalar.compute.localtypes.DagNode.CommentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.DagNode.CommentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.DagNode.CommentRequest}
 */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumDagNodes(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addDagNodeNames(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    case 4:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.DagNode.CommentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.DagNode.CommentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumDagNodes();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDagNodeNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 num_dag_nodes = 1;
 * @return {number}
 */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.prototype.getNumDagNodes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.prototype.setNumDagNodes = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated string dag_node_names = 2;
 * @return {!Array<string>}
 */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.prototype.getDagNodeNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.prototype.setDagNodeNamesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.prototype.addDagNodeNames = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.xcalar.compute.localtypes.DagNode.CommentRequest.prototype.clearDagNodeNamesList = function() {
  this.setDagNodeNamesList([]);
};


/**
 * optional string comment = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.prototype.setComment = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 4;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 4));
};


/** @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.xcalar.compute.localtypes.DagNode.CommentRequest.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.DagNode.RenameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.DagNode.RenameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.DagNode.RenameRequest.displayName = 'proto.xcalar.compute.localtypes.DagNode.RenameRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.DagNode.RenameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.DagNode.RenameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.DagNode.RenameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.RenameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    oldName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    newName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.DagNode.RenameRequest}
 */
proto.xcalar.compute.localtypes.DagNode.RenameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.DagNode.RenameRequest;
  return proto.xcalar.compute.localtypes.DagNode.RenameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.DagNode.RenameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.DagNode.RenameRequest}
 */
proto.xcalar.compute.localtypes.DagNode.RenameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOldName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewName(value);
      break;
    case 3:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.DagNode.RenameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.DagNode.RenameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.DagNode.RenameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.RenameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOldName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNewName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
};


/**
 * optional string old_name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.DagNode.RenameRequest.prototype.getOldName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.DagNode.RenameRequest.prototype.setOldName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string new_name = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.DagNode.RenameRequest.prototype.getNewName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.DagNode.RenameRequest.prototype.setNewName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 3;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.DagNode.RenameRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 3));
};


/** @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value */
proto.xcalar.compute.localtypes.DagNode.RenameRequest.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.xcalar.compute.localtypes.DagNode.RenameRequest.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.DagNode.RenameRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInputMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.DagNode.DagNodeInputMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.DagNode.DagNodeInputMsg.displayName = 'proto.xcalar.compute.localtypes.DagNode.DagNodeInputMsg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInputMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.DagNode.DagNodeInputMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.DagNode.DagNodeInputMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInputMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    dagNodeName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.DagNode.DagNodeInputMsg}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInputMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.DagNode.DagNodeInputMsg;
  return proto.xcalar.compute.localtypes.DagNode.DagNodeInputMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.DagNode.DagNodeInputMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.DagNode.DagNodeInputMsg}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInputMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDagNodeName(value);
      break;
    case 2:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInputMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.DagNode.DagNodeInputMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.DagNode.DagNodeInputMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInputMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDagNodeName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
};


/**
 * optional string dag_node_name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInputMsg.prototype.getDagNodeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeInputMsg.prototype.setDagNodeName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 2;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInputMsg.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 2));
};


/** @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeInputMsg.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.xcalar.compute.localtypes.DagNode.DagNodeInputMsg.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInputMsg.prototype.hasScope = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.xcalar.compute.localtypes.DagNode);
