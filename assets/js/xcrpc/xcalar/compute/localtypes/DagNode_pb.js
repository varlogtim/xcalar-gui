/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
var xcalar_compute_localtypes_Workbook_pb = require('../../../xcalar/compute/localtypes/Workbook_pb.js');
var xcalar_compute_localtypes_DagStateEnums_pb = require('../../../xcalar/compute/localtypes/DagStateEnums_pb.js');
var xcalar_compute_localtypes_DagRefTypeEnums_pb = require('../../../xcalar/compute/localtypes/DagRefTypeEnums_pb.js');
var xcalar_compute_localtypes_Status_pb = require('../../../xcalar/compute/localtypes/Status_pb.js');
var xcalar_compute_localtypes_SourceTypeEnum_pb = require('../../../xcalar/compute/localtypes/SourceTypeEnum_pb.js');
var xcalar_compute_localtypes_LibApisEnums_pb = require('../../../xcalar/compute/localtypes/LibApisEnums_pb.js');
goog.exportSymbol('proto.xcalar.compute.localtypes.DagNode.CommentRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.DagNode.DagNodeInfo', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.DagNode.DagRef', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.DagNode.DeleteRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.DagNode.DeleteResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.DagNode.ListRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.DagNode.ListResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.DagNode.RenameRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.DagNode.TagRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.DagNode.DagNodeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.displayName = 'proto.xcalar.compute.localtypes.DagNode.DagNodeInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.DagNode.DagNodeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dagNodeId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    state: jspb.Message.getFieldWithDefault(msg, 3, 0),
    size: jspb.Message.getFieldWithDefault(msg, 4, 0),
    api: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.DagNode.DagNodeInfo}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.DagNode.DagNodeInfo;
  return proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.DagNode.DagNodeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.DagNode.DagNodeInfo}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDagNodeId(value);
      break;
    case 3:
      var value = /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.DgDagState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    case 5:
      var value = /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.XcalarApis} */ (reader.readEnum());
      msg.setApi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.DagNode.DagNodeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDagNodeId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getApi();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 dag_node_id = 2;
 * @return {number}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.prototype.getDagNodeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.prototype.setDagNodeId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional xcalar.compute.localtypes.XcalarEnumType.DgDagState state = 3;
 * @return {!proto.xcalar.compute.localtypes.XcalarEnumType.DgDagState}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.prototype.getState = function() {
  return /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.DgDagState} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.xcalar.compute.localtypes.XcalarEnumType.DgDagState} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional uint64 size = 4;
 * @return {number}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional xcalar.compute.localtypes.XcalarEnumType.XcalarApis api = 5;
 * @return {!proto.xcalar.compute.localtypes.XcalarEnumType.XcalarApis}
 */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.prototype.getApi = function() {
  return /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.XcalarApis} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.xcalar.compute.localtypes.XcalarEnumType.XcalarApis} value */
proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.prototype.setApi = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.DagNode.DagRef = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.DagNode.DagRef, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.DagNode.DagRef.displayName = 'proto.xcalar.compute.localtypes.DagNode.DagRef';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.DagNode.DagRef.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.DagNode.DagRef.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.DagNode.DagRef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.DagRef.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    xid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.DagNode.DagRef}
 */
proto.xcalar.compute.localtypes.DagNode.DagRef.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.DagNode.DagRef;
  return proto.xcalar.compute.localtypes.DagNode.DagRef.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.DagNode.DagRef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.DagNode.DagRef}
 */
proto.xcalar.compute.localtypes.DagNode.DagRef.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.DagRefType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setXid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.DagNode.DagRef.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.DagNode.DagRef.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.DagNode.DagRef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.DagRef.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getXid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional xcalar.compute.localtypes.XcalarEnumType.DagRefType type = 1;
 * @return {!proto.xcalar.compute.localtypes.XcalarEnumType.DagRefType}
 */
proto.xcalar.compute.localtypes.DagNode.DagRef.prototype.getType = function() {
  return /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.DagRefType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.xcalar.compute.localtypes.XcalarEnumType.DagRefType} value */
proto.xcalar.compute.localtypes.DagNode.DagRef.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.DagNode.DagRef.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.DagNode.DagRef.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string xid = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.DagNode.DagRef.prototype.getXid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.DagNode.DagRef.prototype.setXid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.displayName = 'proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeInfo: (f = msg.getNodeInfo()) && proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    numRefs: jspb.Message.getFieldWithDefault(msg, 3, 0),
    refsList: jspb.Message.toObjectList(msg.getRefsList(),
    proto.xcalar.compute.localtypes.DagNode.DagRef.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus;
  return proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.DagNode.DagNodeInfo;
      reader.readMessage(value,proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.deserializeBinaryFromReader);
      msg.setNodeInfo(value);
      break;
    case 2:
      var value = /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumRefs(value);
      break;
    case 4:
      var value = new proto.xcalar.compute.localtypes.DagNode.DagRef;
      reader.readMessage(value,proto.xcalar.compute.localtypes.DagNode.DagRef.deserializeBinaryFromReader);
      msg.addRefs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getNumRefs();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getRefsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.xcalar.compute.localtypes.DagNode.DagRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional DagNodeInfo node_info = 1;
 * @return {?proto.xcalar.compute.localtypes.DagNode.DagNodeInfo}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.prototype.getNodeInfo = function() {
  return /** @type{?proto.xcalar.compute.localtypes.DagNode.DagNodeInfo} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.DagNode.DagNodeInfo, 1));
};


/** @param {?proto.xcalar.compute.localtypes.DagNode.DagNodeInfo|undefined} value */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.prototype.setNodeInfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.prototype.clearNodeInfo = function() {
  this.setNodeInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.prototype.hasNodeInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional xcalar.compute.localtypes.XcalarEnumType.Status status = 2;
 * @return {!proto.xcalar.compute.localtypes.XcalarEnumType.Status}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.prototype.getStatus = function() {
  return /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.xcalar.compute.localtypes.XcalarEnumType.Status} value */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint64 num_refs = 3;
 * @return {number}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.prototype.getNumRefs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.prototype.setNumRefs = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated DagRef refs = 4;
 * @return {!Array<!proto.xcalar.compute.localtypes.DagNode.DagRef>}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.prototype.getRefsList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.DagNode.DagRef>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.DagNode.DagRef, 4));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.DagNode.DagRef>} value */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.prototype.setRefsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.DagNode.DagRef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.DagNode.DagRef}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.prototype.addRefs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.xcalar.compute.localtypes.DagNode.DagRef, opt_index);
};


proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.prototype.clearRefsList = function() {
  this.setRefsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.DagNode.ListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.DagNode.ListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.DagNode.ListRequest.displayName = 'proto.xcalar.compute.localtypes.DagNode.ListRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.DagNode.ListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.DagNode.ListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.DagNode.ListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.ListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    namePattern: jspb.Message.getFieldWithDefault(msg, 1, ""),
    srcType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.DagNode.ListRequest}
 */
proto.xcalar.compute.localtypes.DagNode.ListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.DagNode.ListRequest;
  return proto.xcalar.compute.localtypes.DagNode.ListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.DagNode.ListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.DagNode.ListRequest}
 */
proto.xcalar.compute.localtypes.DagNode.ListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamePattern(value);
      break;
    case 2:
      var value = /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.SourceType} */ (reader.readEnum());
      msg.setSrcType(value);
      break;
    case 3:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.DagNode.ListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.DagNode.ListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.DagNode.ListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.ListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamePattern();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSrcType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name_pattern = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.DagNode.ListRequest.prototype.getNamePattern = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.DagNode.ListRequest.prototype.setNamePattern = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional xcalar.compute.localtypes.XcalarEnumType.SourceType src_type = 2;
 * @return {!proto.xcalar.compute.localtypes.XcalarEnumType.SourceType}
 */
proto.xcalar.compute.localtypes.DagNode.ListRequest.prototype.getSrcType = function() {
  return /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.SourceType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.xcalar.compute.localtypes.XcalarEnumType.SourceType} value */
proto.xcalar.compute.localtypes.DagNode.ListRequest.prototype.setSrcType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 3;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.DagNode.ListRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 3));
};


/** @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value */
proto.xcalar.compute.localtypes.DagNode.ListRequest.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.xcalar.compute.localtypes.DagNode.ListRequest.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.DagNode.ListRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.DagNode.ListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.DagNode.ListResponse.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.DagNode.ListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.DagNode.ListResponse.displayName = 'proto.xcalar.compute.localtypes.DagNode.ListResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.DagNode.ListResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.DagNode.ListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.DagNode.ListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.DagNode.ListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.ListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    numNodes: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nodeInfoList: jspb.Message.toObjectList(msg.getNodeInfoList(),
    proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.DagNode.ListResponse}
 */
proto.xcalar.compute.localtypes.DagNode.ListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.DagNode.ListResponse;
  return proto.xcalar.compute.localtypes.DagNode.ListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.DagNode.ListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.DagNode.ListResponse}
 */
proto.xcalar.compute.localtypes.DagNode.ListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumNodes(value);
      break;
    case 2:
      var value = new proto.xcalar.compute.localtypes.DagNode.DagNodeInfo;
      reader.readMessage(value,proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.deserializeBinaryFromReader);
      msg.addNodeInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.DagNode.ListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.DagNode.ListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.DagNode.ListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.ListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumNodes();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getNodeInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.xcalar.compute.localtypes.DagNode.DagNodeInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 num_nodes = 1;
 * @return {number}
 */
proto.xcalar.compute.localtypes.DagNode.ListResponse.prototype.getNumNodes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.DagNode.ListResponse.prototype.setNumNodes = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated DagNodeInfo node_info = 2;
 * @return {!Array<!proto.xcalar.compute.localtypes.DagNode.DagNodeInfo>}
 */
proto.xcalar.compute.localtypes.DagNode.ListResponse.prototype.getNodeInfoList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.DagNode.DagNodeInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.DagNode.DagNodeInfo, 2));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.DagNode.DagNodeInfo>} value */
proto.xcalar.compute.localtypes.DagNode.ListResponse.prototype.setNodeInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.DagNode.DagNodeInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.DagNode.DagNodeInfo}
 */
proto.xcalar.compute.localtypes.DagNode.ListResponse.prototype.addNodeInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.xcalar.compute.localtypes.DagNode.DagNodeInfo, opt_index);
};


proto.xcalar.compute.localtypes.DagNode.ListResponse.prototype.clearNodeInfoList = function() {
  this.setNodeInfoList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.DagNode.DeleteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.DagNode.DeleteRequest.displayName = 'proto.xcalar.compute.localtypes.DagNode.DeleteRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.DagNode.DeleteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.DagNode.DeleteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    namePattern: jspb.Message.getFieldWithDefault(msg, 1, ""),
    srcType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    deleteCompletely: jspb.Message.getFieldWithDefault(msg, 3, false),
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.DagNode.DeleteRequest}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.DagNode.DeleteRequest;
  return proto.xcalar.compute.localtypes.DagNode.DeleteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.DagNode.DeleteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.DagNode.DeleteRequest}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamePattern(value);
      break;
    case 2:
      var value = /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.SourceType} */ (reader.readEnum());
      msg.setSrcType(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeleteCompletely(value);
      break;
    case 4:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.DagNode.DeleteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.DagNode.DeleteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamePattern();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSrcType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getDeleteCompletely();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name_pattern = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest.prototype.getNamePattern = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest.prototype.setNamePattern = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional xcalar.compute.localtypes.XcalarEnumType.SourceType src_type = 2;
 * @return {!proto.xcalar.compute.localtypes.XcalarEnumType.SourceType}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest.prototype.getSrcType = function() {
  return /** @type {!proto.xcalar.compute.localtypes.XcalarEnumType.SourceType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.xcalar.compute.localtypes.XcalarEnumType.SourceType} value */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest.prototype.setSrcType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bool delete_completely = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest.prototype.getDeleteCompletely = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest.prototype.setDeleteCompletely = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 4;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 4));
};


/** @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.xcalar.compute.localtypes.DagNode.DeleteRequest.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.DagNode.DeleteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.DagNode.DeleteResponse.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.DagNode.DeleteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.DagNode.DeleteResponse.displayName = 'proto.xcalar.compute.localtypes.DagNode.DeleteResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.DagNode.DeleteResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.DagNode.DeleteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.DagNode.DeleteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.DeleteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    numNodes: jspb.Message.getFieldWithDefault(msg, 1, 0),
    statusesList: jspb.Message.toObjectList(msg.getStatusesList(),
    proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.DagNode.DeleteResponse}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.DagNode.DeleteResponse;
  return proto.xcalar.compute.localtypes.DagNode.DeleteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.DagNode.DeleteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.DagNode.DeleteResponse}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumNodes(value);
      break;
    case 2:
      var value = new proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus;
      reader.readMessage(value,proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.deserializeBinaryFromReader);
      msg.addStatuses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.DagNode.DeleteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.DagNode.DeleteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.DeleteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumNodes();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getStatusesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 num_nodes = 1;
 * @return {number}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteResponse.prototype.getNumNodes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.DagNode.DeleteResponse.prototype.setNumNodes = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated DeleteDagNodeStatus statuses = 2;
 * @return {!Array<!proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus>}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteResponse.prototype.getStatusesList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus, 2));
};


/** @param {!Array<!proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus>} value */
proto.xcalar.compute.localtypes.DagNode.DeleteResponse.prototype.setStatusesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus}
 */
proto.xcalar.compute.localtypes.DagNode.DeleteResponse.prototype.addStatuses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.xcalar.compute.localtypes.DagNode.DeleteDagNodeStatus, opt_index);
};


proto.xcalar.compute.localtypes.DagNode.DeleteResponse.prototype.clearStatusesList = function() {
  this.setStatusesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.DagNode.TagRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.DagNode.TagRequest.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.DagNode.TagRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.DagNode.TagRequest.displayName = 'proto.xcalar.compute.localtypes.DagNode.TagRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.DagNode.TagRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.DagNode.TagRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.DagNode.TagRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.DagNode.TagRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.TagRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    numDagNodes: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dagNodeNamesList: jspb.Message.getRepeatedField(msg, 2),
    tag: jspb.Message.getFieldWithDefault(msg, 3, ""),
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.DagNode.TagRequest}
 */
proto.xcalar.compute.localtypes.DagNode.TagRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.DagNode.TagRequest;
  return proto.xcalar.compute.localtypes.DagNode.TagRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.DagNode.TagRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.DagNode.TagRequest}
 */
proto.xcalar.compute.localtypes.DagNode.TagRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumDagNodes(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addDagNodeNames(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTag(value);
      break;
    case 4:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.DagNode.TagRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.DagNode.TagRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.DagNode.TagRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.TagRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumDagNodes();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDagNodeNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getTag();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 num_dag_nodes = 1;
 * @return {number}
 */
proto.xcalar.compute.localtypes.DagNode.TagRequest.prototype.getNumDagNodes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.DagNode.TagRequest.prototype.setNumDagNodes = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated string dag_node_names = 2;
 * @return {!Array<string>}
 */
proto.xcalar.compute.localtypes.DagNode.TagRequest.prototype.getDagNodeNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.xcalar.compute.localtypes.DagNode.TagRequest.prototype.setDagNodeNamesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.xcalar.compute.localtypes.DagNode.TagRequest.prototype.addDagNodeNames = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.xcalar.compute.localtypes.DagNode.TagRequest.prototype.clearDagNodeNamesList = function() {
  this.setDagNodeNamesList([]);
};


/**
 * optional string tag = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.DagNode.TagRequest.prototype.getTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.DagNode.TagRequest.prototype.setTag = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 4;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.DagNode.TagRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 4));
};


/** @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value */
proto.xcalar.compute.localtypes.DagNode.TagRequest.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.xcalar.compute.localtypes.DagNode.TagRequest.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.DagNode.TagRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.DagNode.CommentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.DagNode.CommentRequest.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.DagNode.CommentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.DagNode.CommentRequest.displayName = 'proto.xcalar.compute.localtypes.DagNode.CommentRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.DagNode.CommentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.DagNode.CommentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    numDagNodes: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dagNodeNamesList: jspb.Message.getRepeatedField(msg, 2),
    comment: jspb.Message.getFieldWithDefault(msg, 3, ""),
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.DagNode.CommentRequest}
 */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.DagNode.CommentRequest;
  return proto.xcalar.compute.localtypes.DagNode.CommentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.DagNode.CommentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.DagNode.CommentRequest}
 */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumDagNodes(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addDagNodeNames(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    case 4:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.DagNode.CommentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.DagNode.CommentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumDagNodes();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDagNodeNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 num_dag_nodes = 1;
 * @return {number}
 */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.prototype.getNumDagNodes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.prototype.setNumDagNodes = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated string dag_node_names = 2;
 * @return {!Array<string>}
 */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.prototype.getDagNodeNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.prototype.setDagNodeNamesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.prototype.addDagNodeNames = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.xcalar.compute.localtypes.DagNode.CommentRequest.prototype.clearDagNodeNamesList = function() {
  this.setDagNodeNamesList([]);
};


/**
 * optional string comment = 3;
 * @return {string}
 */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.prototype.setComment = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 4;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 4));
};


/** @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.xcalar.compute.localtypes.DagNode.CommentRequest.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.DagNode.CommentRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.DagNode.RenameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.DagNode.RenameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcalar.compute.localtypes.DagNode.RenameRequest.displayName = 'proto.xcalar.compute.localtypes.DagNode.RenameRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.DagNode.RenameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.DagNode.RenameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.DagNode.RenameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.RenameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    oldName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    newName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.DagNode.RenameRequest}
 */
proto.xcalar.compute.localtypes.DagNode.RenameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.DagNode.RenameRequest;
  return proto.xcalar.compute.localtypes.DagNode.RenameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.DagNode.RenameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.DagNode.RenameRequest}
 */
proto.xcalar.compute.localtypes.DagNode.RenameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOldName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewName(value);
      break;
    case 3:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.DagNode.RenameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.DagNode.RenameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.DagNode.RenameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.DagNode.RenameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOldName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNewName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
};


/**
 * optional string old_name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.DagNode.RenameRequest.prototype.getOldName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.DagNode.RenameRequest.prototype.setOldName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string new_name = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.DagNode.RenameRequest.prototype.getNewName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcalar.compute.localtypes.DagNode.RenameRequest.prototype.setNewName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 3;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.DagNode.RenameRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 3));
};


/** @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value */
proto.xcalar.compute.localtypes.DagNode.RenameRequest.prototype.setScope = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.xcalar.compute.localtypes.DagNode.RenameRequest.prototype.clearScope = function() {
  this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcalar.compute.localtypes.DagNode.RenameRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.xcalar.compute.localtypes.DagNode);
