// **********************************************************************
// *** DO NOT EDIT!  This file was autogenerated by xcrpc             ***
// **********************************************************************
// Copyright 2018 Xcalar, Inc. All rights reserved.
//
// No use, or distribution, of this source code is permitted in any form or
// means without a valid, written license agreement with Xcalar, Inc.
// Please refer to the included "COPYING" file for terms and conditions
// regarding the use and redistribution of this software.
//

var jQuery;
// Explicitly check if this code is running under nodejs
if ((typeof process !== 'undefined') &&
    (typeof process.versions !== 'undefined') &&
    (typeof process.versions.node !== 'undefined')) {
    const jsdom = require("jsdom");
    const { JSDOM } = jsdom;
    const { window } = new JSDOM();
    jQuery = require("jquery")(window);
} else {
    jQuery = require('jquery');
};
var client = require("./Client");
var service = require('./xcalar/compute/localtypes/Service_pb');

var dataflow = require("./xcalar/compute/localtypes/Dataflow_pb");


////////////////////////////////////////////////////////////////////////////////
// Constructors
////////////////////////////////////////////////////////////////////////////////

function DataflowService(client) {
    this.client = client;
}

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

DataflowService.prototype = {
    filter: function(filterRequest) {
        var deferred = jQuery.Deferred();
        // XXX we want to use Any.pack() here, but it is only available
        // in protobuf 3.2
        // https://github.com/google/protobuf/issues/2612#issuecomment-274567411
        var anyWrapper = new proto.google.protobuf.Any();
        anyWrapper.setValue(filterRequest.serializeBinary());
        anyWrapper.setTypeUrl("type.googleapis.com/xcalar.compute.localtypes.Dataflow.FilterRequest");
        //anyWrapper.pack(filterRequest.serializeBinary(), "FilterRequest");

        var response = this.client.execute("Dataflow", "Filter", anyWrapper)
        .then(function(responseData) {
            var specificBytes = responseData.getValue();
            // XXX Any.unpack() is only available in protobuf 3.2; see above
            //var filterResponse =
            //    responseData.unpack(dataflow.FilterResponse.deserializeBinary,
            //                        "FilterResponse");
            var filterResponse = dataflow.FilterResponse.deserializeBinary(specificBytes);
            deferred.resolve(filterResponse);
        })
        .fail(function(error) {
            console.log("filter fail:" + JSON.stringify(error));
            deferred.reject(error);
        });
        return deferred.promise();
    },
    aggregate: function(aggregateRequest) {
        var deferred = jQuery.Deferred();
        // XXX we want to use Any.pack() here, but it is only available
        // in protobuf 3.2
        // https://github.com/google/protobuf/issues/2612#issuecomment-274567411
        var anyWrapper = new proto.google.protobuf.Any();
        anyWrapper.setValue(aggregateRequest.serializeBinary());
        anyWrapper.setTypeUrl("type.googleapis.com/xcalar.compute.localtypes.Dataflow.AggregateRequest");
        //anyWrapper.pack(aggregateRequest.serializeBinary(), "AggregateRequest");

        var response = this.client.execute("Dataflow", "Aggregate", anyWrapper)
        .then(function(responseData) {
            var specificBytes = responseData.getValue();
            // XXX Any.unpack() is only available in protobuf 3.2; see above
            //var aggregateResponse =
            //    responseData.unpack(dataflow.AggregateResponse.deserializeBinary,
            //                        "AggregateResponse");
            var aggregateResponse = dataflow.AggregateResponse.deserializeBinary(specificBytes);
            deferred.resolve(aggregateResponse);
        })
        .fail(function(error) {
            console.log("aggregate fail:" + JSON.stringify(error));
            deferred.reject(error);
        });
        return deferred.promise();
    },
    aggregateWithEvalStr: function(aggregateEvalStrRequest) {
        var deferred = jQuery.Deferred();
        // XXX we want to use Any.pack() here, but it is only available
        // in protobuf 3.2
        // https://github.com/google/protobuf/issues/2612#issuecomment-274567411
        var anyWrapper = new proto.google.protobuf.Any();
        anyWrapper.setValue(aggregateEvalStrRequest.serializeBinary());
        anyWrapper.setTypeUrl("type.googleapis.com/xcalar.compute.localtypes.Dataflow.AggregateEvalStrRequest");
        //anyWrapper.pack(aggregateEvalStrRequest.serializeBinary(), "AggregateEvalStrRequest");

        var response = this.client.execute("Dataflow", "AggregateWithEvalStr", anyWrapper)
        .then(function(responseData) {
            var specificBytes = responseData.getValue();
            // XXX Any.unpack() is only available in protobuf 3.2; see above
            //var aggregateResponse =
            //    responseData.unpack(dataflow.AggregateResponse.deserializeBinary,
            //                        "AggregateResponse");
            var aggregateResponse = dataflow.AggregateResponse.deserializeBinary(specificBytes);
            deferred.resolve(aggregateResponse);
        })
        .fail(function(error) {
            console.log("aggregateWithEvalStr fail:" + JSON.stringify(error));
            deferred.reject(error);
        });
        return deferred.promise();
    },
    map: function(mapRequest) {
        var deferred = jQuery.Deferred();
        // XXX we want to use Any.pack() here, but it is only available
        // in protobuf 3.2
        // https://github.com/google/protobuf/issues/2612#issuecomment-274567411
        var anyWrapper = new proto.google.protobuf.Any();
        anyWrapper.setValue(mapRequest.serializeBinary());
        anyWrapper.setTypeUrl("type.googleapis.com/xcalar.compute.localtypes.Dataflow.MapRequest");
        //anyWrapper.pack(mapRequest.serializeBinary(), "MapRequest");

        var response = this.client.execute("Dataflow", "Map", anyWrapper)
        .then(function(responseData) {
            var specificBytes = responseData.getValue();
            // XXX Any.unpack() is only available in protobuf 3.2; see above
            //var mapResponse =
            //    responseData.unpack(dataflow.MapResponse.deserializeBinary,
            //                        "MapResponse");
            var mapResponse = dataflow.MapResponse.deserializeBinary(specificBytes);
            deferred.resolve(mapResponse);
        })
        .fail(function(error) {
            console.log("map fail:" + JSON.stringify(error));
            deferred.reject(error);
        });
        return deferred.promise();
    },
    genRowNum: function(genRowNumRequest) {
        var deferred = jQuery.Deferred();
        // XXX we want to use Any.pack() here, but it is only available
        // in protobuf 3.2
        // https://github.com/google/protobuf/issues/2612#issuecomment-274567411
        var anyWrapper = new proto.google.protobuf.Any();
        anyWrapper.setValue(genRowNumRequest.serializeBinary());
        anyWrapper.setTypeUrl("type.googleapis.com/xcalar.compute.localtypes.Dataflow.GenRowNumRequest");
        //anyWrapper.pack(genRowNumRequest.serializeBinary(), "GenRowNumRequest");

        var response = this.client.execute("Dataflow", "GenRowNum", anyWrapper)
        .then(function(responseData) {
            var specificBytes = responseData.getValue();
            // XXX Any.unpack() is only available in protobuf 3.2; see above
            //var genRowNumResponse =
            //    responseData.unpack(dataflow.GenRowNumResponse.deserializeBinary,
            //                        "GenRowNumResponse");
            var genRowNumResponse = dataflow.GenRowNumResponse.deserializeBinary(specificBytes);
            deferred.resolve(genRowNumResponse);
        })
        .fail(function(error) {
            console.log("genRowNum fail:" + JSON.stringify(error));
            deferred.reject(error);
        });
        return deferred.promise();
    },
    project: function(projectRequest) {
        var deferred = jQuery.Deferred();
        // XXX we want to use Any.pack() here, but it is only available
        // in protobuf 3.2
        // https://github.com/google/protobuf/issues/2612#issuecomment-274567411
        var anyWrapper = new proto.google.protobuf.Any();
        anyWrapper.setValue(projectRequest.serializeBinary());
        anyWrapper.setTypeUrl("type.googleapis.com/xcalar.compute.localtypes.Dataflow.ProjectRequest");
        //anyWrapper.pack(projectRequest.serializeBinary(), "ProjectRequest");

        var response = this.client.execute("Dataflow", "Project", anyWrapper)
        .then(function(responseData) {
            var specificBytes = responseData.getValue();
            // XXX Any.unpack() is only available in protobuf 3.2; see above
            //var projectResponse =
            //    responseData.unpack(dataflow.ProjectResponse.deserializeBinary,
            //                        "ProjectResponse");
            var projectResponse = dataflow.ProjectResponse.deserializeBinary(specificBytes);
            deferred.resolve(projectResponse);
        })
        .fail(function(error) {
            console.log("project fail:" + JSON.stringify(error));
            deferred.reject(error);
        });
        return deferred.promise();
    },
    join: function(joinRequest) {
        var deferred = jQuery.Deferred();
        // XXX we want to use Any.pack() here, but it is only available
        // in protobuf 3.2
        // https://github.com/google/protobuf/issues/2612#issuecomment-274567411
        var anyWrapper = new proto.google.protobuf.Any();
        anyWrapper.setValue(joinRequest.serializeBinary());
        anyWrapper.setTypeUrl("type.googleapis.com/xcalar.compute.localtypes.Dataflow.JoinRequest");
        //anyWrapper.pack(joinRequest.serializeBinary(), "JoinRequest");

        var response = this.client.execute("Dataflow", "Join", anyWrapper)
        .then(function(responseData) {
            var specificBytes = responseData.getValue();
            // XXX Any.unpack() is only available in protobuf 3.2; see above
            //var joinResponse =
            //    responseData.unpack(dataflow.JoinResponse.deserializeBinary,
            //                        "JoinResponse");
            var joinResponse = dataflow.JoinResponse.deserializeBinary(specificBytes);
            deferred.resolve(joinResponse);
        })
        .fail(function(error) {
            console.log("join fail:" + JSON.stringify(error));
            deferred.reject(error);
        });
        return deferred.promise();
    },
    unionOp: function(unionRequest) {
        var deferred = jQuery.Deferred();
        // XXX we want to use Any.pack() here, but it is only available
        // in protobuf 3.2
        // https://github.com/google/protobuf/issues/2612#issuecomment-274567411
        var anyWrapper = new proto.google.protobuf.Any();
        anyWrapper.setValue(unionRequest.serializeBinary());
        anyWrapper.setTypeUrl("type.googleapis.com/xcalar.compute.localtypes.Dataflow.UnionRequest");
        //anyWrapper.pack(unionRequest.serializeBinary(), "UnionRequest");

        var response = this.client.execute("Dataflow", "UnionOp", anyWrapper)
        .then(function(responseData) {
            var specificBytes = responseData.getValue();
            // XXX Any.unpack() is only available in protobuf 3.2; see above
            //var unionResponse =
            //    responseData.unpack(dataflow.UnionResponse.deserializeBinary,
            //                        "UnionResponse");
            var unionResponse = dataflow.UnionResponse.deserializeBinary(specificBytes);
            deferred.resolve(unionResponse);
        })
        .fail(function(error) {
            console.log("unionOp fail:" + JSON.stringify(error));
            deferred.reject(error);
        });
        return deferred.promise();
    },
    groupBy: function(groupByRequest) {
        var deferred = jQuery.Deferred();
        // XXX we want to use Any.pack() here, but it is only available
        // in protobuf 3.2
        // https://github.com/google/protobuf/issues/2612#issuecomment-274567411
        var anyWrapper = new proto.google.protobuf.Any();
        anyWrapper.setValue(groupByRequest.serializeBinary());
        anyWrapper.setTypeUrl("type.googleapis.com/xcalar.compute.localtypes.Dataflow.GroupByRequest");
        //anyWrapper.pack(groupByRequest.serializeBinary(), "GroupByRequest");

        var response = this.client.execute("Dataflow", "GroupBy", anyWrapper)
        .then(function(responseData) {
            var specificBytes = responseData.getValue();
            // XXX Any.unpack() is only available in protobuf 3.2; see above
            //var groupByResponse =
            //    responseData.unpack(dataflow.GroupByResponse.deserializeBinary,
            //                        "GroupByResponse");
            var groupByResponse = dataflow.GroupByResponse.deserializeBinary(specificBytes);
            deferred.resolve(groupByResponse);
        })
        .fail(function(error) {
            console.log("groupBy fail:" + JSON.stringify(error));
            deferred.reject(error);
        });
        return deferred.promise();
    },
    indexFromDataset: function(indexFromDatasetRequest) {
        var deferred = jQuery.Deferred();
        // XXX we want to use Any.pack() here, but it is only available
        // in protobuf 3.2
        // https://github.com/google/protobuf/issues/2612#issuecomment-274567411
        var anyWrapper = new proto.google.protobuf.Any();
        anyWrapper.setValue(indexFromDatasetRequest.serializeBinary());
        anyWrapper.setTypeUrl("type.googleapis.com/xcalar.compute.localtypes.Dataflow.IndexFromDatasetRequest");
        //anyWrapper.pack(indexFromDatasetRequest.serializeBinary(), "IndexFromDatasetRequest");

        var response = this.client.execute("Dataflow", "IndexFromDataset", anyWrapper)
        .then(function(responseData) {
            var specificBytes = responseData.getValue();
            // XXX Any.unpack() is only available in protobuf 3.2; see above
            //var indexFromDatasetResponse =
            //    responseData.unpack(dataflow.IndexFromDatasetResponse.deserializeBinary,
            //                        "IndexFromDatasetResponse");
            var indexFromDatasetResponse = dataflow.IndexFromDatasetResponse.deserializeBinary(specificBytes);
            deferred.resolve(indexFromDatasetResponse);
        })
        .fail(function(error) {
            console.log("indexFromDataset fail:" + JSON.stringify(error));
            deferred.reject(error);
        });
        return deferred.promise();
    },
    index: function(indexRequest) {
        var deferred = jQuery.Deferred();
        // XXX we want to use Any.pack() here, but it is only available
        // in protobuf 3.2
        // https://github.com/google/protobuf/issues/2612#issuecomment-274567411
        var anyWrapper = new proto.google.protobuf.Any();
        anyWrapper.setValue(indexRequest.serializeBinary());
        anyWrapper.setTypeUrl("type.googleapis.com/xcalar.compute.localtypes.Dataflow.IndexRequest");
        //anyWrapper.pack(indexRequest.serializeBinary(), "IndexRequest");

        var response = this.client.execute("Dataflow", "Index", anyWrapper)
        .then(function(responseData) {
            var specificBytes = responseData.getValue();
            // XXX Any.unpack() is only available in protobuf 3.2; see above
            //var indexResponse =
            //    responseData.unpack(dataflow.IndexResponse.deserializeBinary,
            //                        "IndexResponse");
            var indexResponse = dataflow.IndexResponse.deserializeBinary(specificBytes);
            deferred.resolve(indexResponse);
        })
        .fail(function(error) {
            console.log("index fail:" + JSON.stringify(error));
            deferred.reject(error);
        });
        return deferred.promise();
    },
    sort: function(sortRequest) {
        var deferred = jQuery.Deferred();
        // XXX we want to use Any.pack() here, but it is only available
        // in protobuf 3.2
        // https://github.com/google/protobuf/issues/2612#issuecomment-274567411
        var anyWrapper = new proto.google.protobuf.Any();
        anyWrapper.setValue(sortRequest.serializeBinary());
        anyWrapper.setTypeUrl("type.googleapis.com/xcalar.compute.localtypes.Dataflow.SortRequest");
        //anyWrapper.pack(sortRequest.serializeBinary(), "SortRequest");

        var response = this.client.execute("Dataflow", "Sort", anyWrapper)
        .then(function(responseData) {
            var specificBytes = responseData.getValue();
            // XXX Any.unpack() is only available in protobuf 3.2; see above
            //var sortResponse =
            //    responseData.unpack(dataflow.SortResponse.deserializeBinary,
            //                        "SortResponse");
            var sortResponse = dataflow.SortResponse.deserializeBinary(specificBytes);
            deferred.resolve(sortResponse);
        })
        .fail(function(error) {
            console.log("sort fail:" + JSON.stringify(error));
            deferred.reject(error);
        });
        return deferred.promise();
    },
    synthesize: function(synthesizeRequest) {
        var deferred = jQuery.Deferred();
        // XXX we want to use Any.pack() here, but it is only available
        // in protobuf 3.2
        // https://github.com/google/protobuf/issues/2612#issuecomment-274567411
        var anyWrapper = new proto.google.protobuf.Any();
        anyWrapper.setValue(synthesizeRequest.serializeBinary());
        anyWrapper.setTypeUrl("type.googleapis.com/xcalar.compute.localtypes.Dataflow.SynthesizeRequest");
        //anyWrapper.pack(synthesizeRequest.serializeBinary(), "SynthesizeRequest");

        var response = this.client.execute("Dataflow", "Synthesize", anyWrapper)
        .then(function(responseData) {
            var specificBytes = responseData.getValue();
            // XXX Any.unpack() is only available in protobuf 3.2; see above
            //var synthesizeResponse =
            //    responseData.unpack(dataflow.SynthesizeResponse.deserializeBinary,
            //                        "SynthesizeResponse");
            var synthesizeResponse = dataflow.SynthesizeResponse.deserializeBinary(specificBytes);
            deferred.resolve(synthesizeResponse);
        })
        .fail(function(error) {
            console.log("synthesize fail:" + JSON.stringify(error));
            deferred.reject(error);
        });
        return deferred.promise();
    },
};

exports.DataflowService = DataflowService;
