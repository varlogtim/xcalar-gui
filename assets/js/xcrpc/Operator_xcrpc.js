// **********************************************************************
// *** DO NOT EDIT!  This file was autogenerated by xcrpc             ***
// **********************************************************************
// Copyright 2018 Xcalar, Inc. All rights reserved.
//
// No use, or distribution, of this source code is permitted in any form or
// means without a valid, written license agreement with Xcalar, Inc.
// Please refer to the included "COPYING" file for terms and conditions
// regarding the use and redistribution of this software.
//

var client = require("./Client");
var service = require('./xcalar/compute/localtypes/Service_pb');

var operator = require("./xcalar/compute/localtypes/Operator_pb");
var proto_empty = require("google-protobuf/google/protobuf/empty_pb");


////////////////////////////////////////////////////////////////////////////////
// Constructors
////////////////////////////////////////////////////////////////////////////////

function OperatorService(client) {
    this.client = client;
}

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

OperatorService.prototype = {
    opMap: async function(mapRequest) {
        // XXX we want to use Any.pack() here, but it is only available
        // in protobuf 3.2
        // https://github.com/google/protobuf/issues/2612#issuecomment-274567411
        var anyWrapper = new proto.google.protobuf.Any();
        anyWrapper.setValue(mapRequest.serializeBinary());
        anyWrapper.setTypeUrl("type.googleapis.com/xcalar.compute.localtypes.Operator.MapRequest");
        //anyWrapper.pack(mapRequest.serializeBinary(), "MapRequest");

        var responseData = await this.client.execute("Operator", "OpMap", anyWrapper);
        var specificBytes = responseData.getValue();
        // XXX Any.unpack() is only available in protobuf 3.2; see above
        //var mapResponse =
        //    responseData.unpack(operator.MapResponse.deserializeBinary,
        //                        "MapResponse");
        var mapResponse = operator.MapResponse.deserializeBinary(specificBytes);
        return mapResponse;
    },
    opGroupBy: async function(groupByRequest) {
        // XXX we want to use Any.pack() here, but it is only available
        // in protobuf 3.2
        // https://github.com/google/protobuf/issues/2612#issuecomment-274567411
        var anyWrapper = new proto.google.protobuf.Any();
        anyWrapper.setValue(groupByRequest.serializeBinary());
        anyWrapper.setTypeUrl("type.googleapis.com/xcalar.compute.localtypes.Operator.GroupByRequest");
        //anyWrapper.pack(groupByRequest.serializeBinary(), "GroupByRequest");

        var responseData = await this.client.execute("Operator", "OpGroupBy", anyWrapper);
        var specificBytes = responseData.getValue();
        // XXX Any.unpack() is only available in protobuf 3.2; see above
        //var groupByResponse =
        //    responseData.unpack(operator.GroupByResponse.deserializeBinary,
        //                        "GroupByResponse");
        var groupByResponse = operator.GroupByResponse.deserializeBinary(specificBytes);
        return groupByResponse;
    },
    opUnion: async function(unionRequest) {
        // XXX we want to use Any.pack() here, but it is only available
        // in protobuf 3.2
        // https://github.com/google/protobuf/issues/2612#issuecomment-274567411
        var anyWrapper = new proto.google.protobuf.Any();
        anyWrapper.setValue(unionRequest.serializeBinary());
        anyWrapper.setTypeUrl("type.googleapis.com/xcalar.compute.localtypes.Operator.UnionRequest");
        //anyWrapper.pack(unionRequest.serializeBinary(), "UnionRequest");

        var responseData = await this.client.execute("Operator", "OpUnion", anyWrapper);
        var specificBytes = responseData.getValue();
        // XXX Any.unpack() is only available in protobuf 3.2; see above
        //var unionResponse =
        //    responseData.unpack(operator.UnionResponse.deserializeBinary,
        //                        "UnionResponse");
        var unionResponse = operator.UnionResponse.deserializeBinary(specificBytes);
        return unionResponse;
    },
    opDataSetCreate: async function(dataSetCreateRequest) {
        // XXX we want to use Any.pack() here, but it is only available
        // in protobuf 3.2
        // https://github.com/google/protobuf/issues/2612#issuecomment-274567411
        var anyWrapper = new proto.google.protobuf.Any();
        anyWrapper.setValue(dataSetCreateRequest.serializeBinary());
        anyWrapper.setTypeUrl("type.googleapis.com/xcalar.compute.localtypes.Operator.DataSetCreateRequest");
        //anyWrapper.pack(dataSetCreateRequest.serializeBinary(), "DataSetCreateRequest");

        var responseData = await this.client.execute("Operator", "OpDataSetCreate", anyWrapper);
        var specificBytes = responseData.getValue();
        // XXX Any.unpack() is only available in protobuf 3.2; see above
        //var empty =
        //    responseData.unpack(proto_empty.Empty.deserializeBinary,
        //                        "Empty");
        var empty = proto_empty.Empty.deserializeBinary(specificBytes);
        return empty;
    },
    opBulkLoad: async function(bulkLoadRequest) {
        // XXX we want to use Any.pack() here, but it is only available
        // in protobuf 3.2
        // https://github.com/google/protobuf/issues/2612#issuecomment-274567411
        var anyWrapper = new proto.google.protobuf.Any();
        anyWrapper.setValue(bulkLoadRequest.serializeBinary());
        anyWrapper.setTypeUrl("type.googleapis.com/xcalar.compute.localtypes.Operator.BulkLoadRequest");
        //anyWrapper.pack(bulkLoadRequest.serializeBinary(), "BulkLoadRequest");

        var responseData = await this.client.execute("Operator", "OpBulkLoad", anyWrapper);
        var specificBytes = responseData.getValue();
        // XXX Any.unpack() is only available in protobuf 3.2; see above
        //var bulkLoadResponse =
        //    responseData.unpack(operator.BulkLoadResponse.deserializeBinary,
        //                        "BulkLoadResponse");
        var bulkLoadResponse = operator.BulkLoadResponse.deserializeBinary(specificBytes);
        return bulkLoadResponse;
    },
};

exports.OperatorService = OperatorService;
