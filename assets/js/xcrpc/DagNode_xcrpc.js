// **********************************************************************
// *** DO NOT EDIT!  This file was autogenerated by xcrpc             ***
// **********************************************************************
// Copyright 2018 Xcalar, Inc. All rights reserved.
//
// No use, or distribution, of this source code is permitted in any form or
// means without a valid, written license agreement with Xcalar, Inc.
// Please refer to the included "COPYING" file for terms and conditions
// regarding the use and redistribution of this software.
//

var client = require("./Client");
var service = require('./xcalar/compute/localtypes/Service_pb');

var dagNode = require("./xcalar/compute/localtypes/DagNode_pb");
var proto_empty = require("google-protobuf/google/protobuf/empty_pb");


////////////////////////////////////////////////////////////////////////////////
// Constructors
////////////////////////////////////////////////////////////////////////////////

function DagNodeService(client) {
    this.client = client;
}

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

DagNodeService.prototype = {
    deleteObjects: async function(deleteRequest) {
        // XXX we want to use Any.pack() here, but it is only available
        // in protobuf 3.2
        // https://github.com/google/protobuf/issues/2612#issuecomment-274567411
        var anyWrapper = new proto.google.protobuf.Any();
        anyWrapper.setValue(deleteRequest.serializeBinary());
        anyWrapper.setTypeUrl("type.googleapis.com/xcalar.compute.localtypes.DagNode.DeleteRequest");
        //anyWrapper.pack(deleteRequest.serializeBinary(), "DeleteRequest");

        try {
            var responseData = await this.client.execute("DagNode", "DeleteObjects", anyWrapper);
            var specificBytes = responseData.getValue();
            // XXX Any.unpack() is only available in protobuf 3.2; see above
            //var deleteResponse =
            //    responseData.unpack(dagNode.DeleteResponse.deserializeBinary,
            //                        "DeleteResponse");
            var deleteResponse = dagNode.DeleteResponse.deserializeBinary(specificBytes);
            return deleteResponse;
        } catch(error) {
            if (error.response != null) {
                const specificBytes = error.response.getValue();
                error.response = dagNode.DeleteResponse.deserializeBinary(specificBytes);
            }
            throw error;
        }
    },
    tag: async function(tagRequest) {
        // XXX we want to use Any.pack() here, but it is only available
        // in protobuf 3.2
        // https://github.com/google/protobuf/issues/2612#issuecomment-274567411
        var anyWrapper = new proto.google.protobuf.Any();
        anyWrapper.setValue(tagRequest.serializeBinary());
        anyWrapper.setTypeUrl("type.googleapis.com/xcalar.compute.localtypes.DagNode.TagRequest");
        //anyWrapper.pack(tagRequest.serializeBinary(), "TagRequest");

        try {
            var responseData = await this.client.execute("DagNode", "Tag", anyWrapper);
            var specificBytes = responseData.getValue();
            // XXX Any.unpack() is only available in protobuf 3.2; see above
            //var empty =
            //    responseData.unpack(proto_empty.Empty.deserializeBinary,
            //                        "Empty");
            var empty = proto_empty.Empty.deserializeBinary(specificBytes);
            return empty;
        } catch(error) {
            if (error.response != null) {
                const specificBytes = error.response.getValue();
                error.response = proto_empty.Empty.deserializeBinary(specificBytes);
            }
            throw error;
        }
    },
    comment: async function(commentRequest) {
        // XXX we want to use Any.pack() here, but it is only available
        // in protobuf 3.2
        // https://github.com/google/protobuf/issues/2612#issuecomment-274567411
        var anyWrapper = new proto.google.protobuf.Any();
        anyWrapper.setValue(commentRequest.serializeBinary());
        anyWrapper.setTypeUrl("type.googleapis.com/xcalar.compute.localtypes.DagNode.CommentRequest");
        //anyWrapper.pack(commentRequest.serializeBinary(), "CommentRequest");

        try {
            var responseData = await this.client.execute("DagNode", "Comment", anyWrapper);
            var specificBytes = responseData.getValue();
            // XXX Any.unpack() is only available in protobuf 3.2; see above
            //var empty =
            //    responseData.unpack(proto_empty.Empty.deserializeBinary,
            //                        "Empty");
            var empty = proto_empty.Empty.deserializeBinary(specificBytes);
            return empty;
        } catch(error) {
            if (error.response != null) {
                const specificBytes = error.response.getValue();
                error.response = proto_empty.Empty.deserializeBinary(specificBytes);
            }
            throw error;
        }
    },
    rename: async function(renameRequest) {
        // XXX we want to use Any.pack() here, but it is only available
        // in protobuf 3.2
        // https://github.com/google/protobuf/issues/2612#issuecomment-274567411
        var anyWrapper = new proto.google.protobuf.Any();
        anyWrapper.setValue(renameRequest.serializeBinary());
        anyWrapper.setTypeUrl("type.googleapis.com/xcalar.compute.localtypes.DagNode.RenameRequest");
        //anyWrapper.pack(renameRequest.serializeBinary(), "RenameRequest");

        try {
            var responseData = await this.client.execute("DagNode", "Rename", anyWrapper);
            var specificBytes = responseData.getValue();
            // XXX Any.unpack() is only available in protobuf 3.2; see above
            //var empty =
            //    responseData.unpack(proto_empty.Empty.deserializeBinary,
            //                        "Empty");
            var empty = proto_empty.Empty.deserializeBinary(specificBytes);
            return empty;
        } catch(error) {
            if (error.response != null) {
                const specificBytes = error.response.getValue();
                error.response = proto_empty.Empty.deserializeBinary(specificBytes);
            }
            throw error;
        }
    },
};

exports.DagNodeService = DagNodeService;
