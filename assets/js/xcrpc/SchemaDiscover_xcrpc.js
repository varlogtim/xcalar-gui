// **********************************************************************
// *** DO NOT EDIT!  This file was autogenerated by xcrpc             ***
// **********************************************************************
// Copyright 2018 Xcalar, Inc. All rights reserved.
//
// No use, or distribution, of this source code is permitted in any form or
// means without a valid, written license agreement with Xcalar, Inc.
// Please refer to the included "COPYING" file for terms and conditions
// regarding the use and redistribution of this software.
//

var client = require("./Client");
var service = require('./xcalar/compute/localtypes/Service_pb');

var schemaDiscover = require("./xcalar/compute/localtypes/SchemaDiscover_pb");


////////////////////////////////////////////////////////////////////////////////
// Constructors
////////////////////////////////////////////////////////////////////////////////

function SchemaDiscoverService(client) {
    this.client = client;
}

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

SchemaDiscoverService.prototype = {
    schemaDiscover: async function(schemaDiscoverRequest) {
        // XXX we want to use Any.pack() here, but it is only available
        // in protobuf 3.2
        // https://github.com/google/protobuf/issues/2612#issuecomment-274567411
        var anyWrapper = new proto.google.protobuf.Any();
        anyWrapper.setValue(schemaDiscoverRequest.serializeBinary());
        anyWrapper.setTypeUrl("type.googleapis.com/xcalar.compute.localtypes.SchemaDiscover.SchemaDiscoverRequest");
        //anyWrapper.pack(schemaDiscoverRequest.serializeBinary(), "SchemaDiscoverRequest");

        try {
            var responseData = await this.client.execute("SchemaDiscover", "SchemaDiscover", anyWrapper);
            var specificBytes = responseData.getValue();
            // XXX Any.unpack() is only available in protobuf 3.2; see above
            //var schemaDiscoverResponse =
            //    responseData.unpack(schemaDiscover.SchemaDiscoverResponse.deserializeBinary,
            //                        "SchemaDiscoverResponse");
            var schemaDiscoverResponse = schemaDiscover.SchemaDiscoverResponse.deserializeBinary(specificBytes);
            return schemaDiscoverResponse;
        } catch(error) {
            if (error.response != null) {
                const specificBytes = error.response.getValue();
                error.response = schemaDiscover.SchemaDiscoverResponse.deserializeBinary(specificBytes);
            }
            throw error;
        }
    },
};

exports.SchemaDiscoverService = SchemaDiscoverService;
