//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


XcalarApiKeyScopeT = {
  'XcalarApiKeyInvalid' : 0,
  'XcalarApiKeyScopeGlobal' : 1,
  'XcalarApiKeyScopeUser' : 2,
  'XcalarApiKeyScopeSession' : 3
};
XcalarApiTopRequestTypeT = {
  'XcalarApiTopRequestTypeInvalid' : 0,
  'GetCpuAndNetworkTopStats' : 1,
  'GetAllTopStats' : 2
};
XcalarApiException = function(args) {
  this.status = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
  }
};
Thrift.inherits(XcalarApiException, Thrift.TException);
XcalarApiException.prototype.name = 'XcalarApiException';
XcalarApiException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiException.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiException');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarEvalArgDescT = function(args) {
  this.argDesc = null;
  this.typesAccepted = null;
  this.isSingletonValue = null;
  if (args) {
    if (args.argDesc !== undefined) {
      this.argDesc = args.argDesc;
    }
    if (args.typesAccepted !== undefined) {
      this.typesAccepted = args.typesAccepted;
    }
    if (args.isSingletonValue !== undefined) {
      this.isSingletonValue = args.isSingletonValue;
    }
  }
};
XcalarEvalArgDescT.prototype = {};
XcalarEvalArgDescT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.argDesc = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.typesAccepted = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isSingletonValue = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarEvalArgDescT.prototype.write = function(output) {
  output.writeStructBegin('XcalarEvalArgDescT');
  if (this.argDesc !== null && this.argDesc !== undefined) {
    output.writeFieldBegin('argDesc', Thrift.Type.STRING, 1);
    output.writeString(this.argDesc);
    output.writeFieldEnd();
  }
  if (this.typesAccepted !== null && this.typesAccepted !== undefined) {
    output.writeFieldBegin('typesAccepted', Thrift.Type.I64, 2);
    output.writeI64(this.typesAccepted);
    output.writeFieldEnd();
  }
  if (this.isSingletonValue !== null && this.isSingletonValue !== undefined) {
    output.writeFieldBegin('isSingletonValue', Thrift.Type.BOOL, 3);
    output.writeBool(this.isSingletonValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarEvalFnDescT = function(args) {
  this.fnName = null;
  this.fnDesc = null;
  this.category = null;
  this.numArgs = null;
  this.argDescs = null;
  this.outputType = null;
  if (args) {
    if (args.fnName !== undefined) {
      this.fnName = args.fnName;
    }
    if (args.fnDesc !== undefined) {
      this.fnDesc = args.fnDesc;
    }
    if (args.category !== undefined) {
      this.category = args.category;
    }
    if (args.numArgs !== undefined) {
      this.numArgs = args.numArgs;
    }
    if (args.argDescs !== undefined) {
      this.argDescs = args.argDescs;
    }
    if (args.outputType !== undefined) {
      this.outputType = args.outputType;
    }
  }
};
XcalarEvalFnDescT.prototype = {};
XcalarEvalFnDescT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fnName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fnDesc = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.category = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.numArgs = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.argDescs = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new XcalarEvalArgDescT();
          elem6.read(input);
          this.argDescs.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.outputType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarEvalFnDescT.prototype.write = function(output) {
  output.writeStructBegin('XcalarEvalFnDescT');
  if (this.fnName !== null && this.fnName !== undefined) {
    output.writeFieldBegin('fnName', Thrift.Type.STRING, 1);
    output.writeString(this.fnName);
    output.writeFieldEnd();
  }
  if (this.fnDesc !== null && this.fnDesc !== undefined) {
    output.writeFieldBegin('fnDesc', Thrift.Type.STRING, 2);
    output.writeString(this.fnDesc);
    output.writeFieldEnd();
  }
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.I32, 3);
    output.writeI32(this.category);
    output.writeFieldEnd();
  }
  if (this.numArgs !== null && this.numArgs !== undefined) {
    output.writeFieldBegin('numArgs', Thrift.Type.I32, 4);
    output.writeI32(this.numArgs);
    output.writeFieldEnd();
  }
  if (this.argDescs !== null && this.argDescs !== undefined) {
    output.writeFieldBegin('argDescs', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.argDescs.length);
    for (var iter7 in this.argDescs)
    {
      if (this.argDescs.hasOwnProperty(iter7))
      {
        iter7 = this.argDescs[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.outputType !== null && this.outputType !== undefined) {
    output.writeFieldBegin('outputType', Thrift.Type.I32, 6);
    output.writeI32(this.outputType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DfFieldAttrHeaderT = function(args) {
  this.name = null;
  this.type = null;
  this.valueArrayIndex = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.valueArrayIndex !== undefined) {
      this.valueArrayIndex = args.valueArrayIndex;
    }
  }
};
DfFieldAttrHeaderT.prototype = {};
DfFieldAttrHeaderT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.valueArrayIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DfFieldAttrHeaderT.prototype.write = function(output) {
  output.writeStructBegin('DfFieldAttrHeaderT');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.valueArrayIndex !== null && this.valueArrayIndex !== undefined) {
    output.writeFieldBegin('valueArrayIndex', Thrift.Type.I32, 3);
    output.writeI32(this.valueArrayIndex);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiTimeT = function(args) {
  this.milliseconds = null;
  if (args) {
    if (args.milliseconds !== undefined) {
      this.milliseconds = args.milliseconds;
    }
  }
};
XcalarApiTimeT.prototype = {};
XcalarApiTimeT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.milliseconds = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiTimeT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiTimeT');
  if (this.milliseconds !== null && this.milliseconds !== undefined) {
    output.writeFieldBegin('milliseconds', Thrift.Type.I64, 1);
    output.writeI64(this.milliseconds);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiFileAttrT = function(args) {
  this.isDirectory = null;
  this.size = null;
  this.mtime = null;
  if (args) {
    if (args.isDirectory !== undefined) {
      this.isDirectory = args.isDirectory;
    }
    if (args.size !== undefined) {
      this.size = args.size;
    }
    if (args.mtime !== undefined) {
      this.mtime = args.mtime;
    }
  }
};
XcalarApiFileAttrT.prototype = {};
XcalarApiFileAttrT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.isDirectory = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.size = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.mtime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiFileAttrT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiFileAttrT');
  if (this.isDirectory !== null && this.isDirectory !== undefined) {
    output.writeFieldBegin('isDirectory', Thrift.Type.BOOL, 1);
    output.writeBool(this.isDirectory);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I64, 2);
    output.writeI64(this.size);
    output.writeFieldEnd();
  }
  if (this.mtime !== null && this.mtime !== undefined) {
    output.writeFieldBegin('mtime', Thrift.Type.I64, 3);
    output.writeI64(this.mtime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiFileT = function(args) {
  this.attr = null;
  this.name = null;
  if (args) {
    if (args.attr !== undefined) {
      this.attr = args.attr;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
XcalarApiFileT.prototype = {};
XcalarApiFileT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.attr = new XcalarApiFileAttrT();
        this.attr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiFileT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiFileT');
  if (this.attr !== null && this.attr !== undefined) {
    output.writeFieldBegin('attr', Thrift.Type.STRUCT, 1);
    this.attr.write(output);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListFilesInputT = function(args) {
  this.url = null;
  this.recursive = null;
  this.fileNamePattern = null;
  if (args) {
    if (args.url !== undefined) {
      this.url = args.url;
    }
    if (args.recursive !== undefined) {
      this.recursive = args.recursive;
    }
    if (args.fileNamePattern !== undefined) {
      this.fileNamePattern = args.fileNamePattern;
    }
  }
};
XcalarApiListFilesInputT.prototype = {};
XcalarApiListFilesInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.recursive = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.fileNamePattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListFilesInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListFilesInputT');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.recursive !== null && this.recursive !== undefined) {
    output.writeFieldBegin('recursive', Thrift.Type.BOOL, 2);
    output.writeBool(this.recursive);
    output.writeFieldEnd();
  }
  if (this.fileNamePattern !== null && this.fileNamePattern !== undefined) {
    output.writeFieldBegin('fileNamePattern', Thrift.Type.STRING, 3);
    output.writeString(this.fileNamePattern);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListFilesOutputT = function(args) {
  this.numFiles = null;
  this.files = null;
  if (args) {
    if (args.numFiles !== undefined) {
      this.numFiles = args.numFiles;
    }
    if (args.files !== undefined) {
      this.files = args.files;
    }
  }
};
XcalarApiListFilesOutputT.prototype = {};
XcalarApiListFilesOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numFiles = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.files = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new XcalarApiFileT();
          elem14.read(input);
          this.files.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListFilesOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListFilesOutputT');
  if (this.numFiles !== null && this.numFiles !== undefined) {
    output.writeFieldBegin('numFiles', Thrift.Type.I64, 1);
    output.writeI64(this.numFiles);
    output.writeFieldEnd();
  }
  if (this.files !== null && this.files !== undefined) {
    output.writeFieldBegin('files', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.files.length);
    for (var iter15 in this.files)
    {
      if (this.files.hasOwnProperty(iter15))
      {
        iter15 = this.files[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListXdfsInputT = function(args) {
  this.fnNamePattern = null;
  this.categoryPattern = null;
  if (args) {
    if (args.fnNamePattern !== undefined) {
      this.fnNamePattern = args.fnNamePattern;
    }
    if (args.categoryPattern !== undefined) {
      this.categoryPattern = args.categoryPattern;
    }
  }
};
XcalarApiListXdfsInputT.prototype = {};
XcalarApiListXdfsInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fnNamePattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.categoryPattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListXdfsInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListXdfsInputT');
  if (this.fnNamePattern !== null && this.fnNamePattern !== undefined) {
    output.writeFieldBegin('fnNamePattern', Thrift.Type.STRING, 1);
    output.writeString(this.fnNamePattern);
    output.writeFieldEnd();
  }
  if (this.categoryPattern !== null && this.categoryPattern !== undefined) {
    output.writeFieldBegin('categoryPattern', Thrift.Type.STRING, 2);
    output.writeString(this.categoryPattern);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUdfErrorT = function(args) {
  this.message = null;
  this.traceback = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
    if (args.traceback !== undefined) {
      this.traceback = args.traceback;
    }
  }
};
XcalarApiUdfErrorT.prototype = {};
XcalarApiUdfErrorT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.traceback = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUdfErrorT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUdfErrorT');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.traceback !== null && this.traceback !== undefined) {
    output.writeFieldBegin('traceback', Thrift.Type.STRING, 2);
    output.writeString(this.traceback);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUdfAddUpdateOutputT = function(args) {
  this.status = null;
  this.moduleName = null;
  this.error = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.moduleName !== undefined) {
      this.moduleName = args.moduleName;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
XcalarApiUdfAddUpdateOutputT.prototype = {};
XcalarApiUdfAddUpdateOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.moduleName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new XcalarApiUdfErrorT();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUdfAddUpdateOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUdfAddUpdateOutputT');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.moduleName !== null && this.moduleName !== undefined) {
    output.writeFieldBegin('moduleName', Thrift.Type.STRING, 2);
    output.writeString(this.moduleName);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 3);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUdfGetInputT = function(args) {
  this.moduleName = null;
  if (args) {
    if (args.moduleName !== undefined) {
      this.moduleName = args.moduleName;
    }
  }
};
XcalarApiUdfGetInputT.prototype = {};
XcalarApiUdfGetInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.moduleName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUdfGetInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUdfGetInputT');
  if (this.moduleName !== null && this.moduleName !== undefined) {
    output.writeFieldBegin('moduleName', Thrift.Type.STRING, 1);
    output.writeString(this.moduleName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUdfDeleteInputT = function(args) {
  this.moduleName = null;
  if (args) {
    if (args.moduleName !== undefined) {
      this.moduleName = args.moduleName;
    }
  }
};
XcalarApiUdfDeleteInputT.prototype = {};
XcalarApiUdfDeleteInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.moduleName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUdfDeleteInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUdfDeleteInputT');
  if (this.moduleName !== null && this.moduleName !== undefined) {
    output.writeFieldBegin('moduleName', Thrift.Type.STRING, 1);
    output.writeString(this.moduleName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListXdfsOutputT = function(args) {
  this.numXdfs = null;
  this.fnDescs = null;
  if (args) {
    if (args.numXdfs !== undefined) {
      this.numXdfs = args.numXdfs;
    }
    if (args.fnDescs !== undefined) {
      this.fnDescs = args.fnDescs;
    }
  }
};
XcalarApiListXdfsOutputT.prototype = {};
XcalarApiListXdfsOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numXdfs = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.fnDescs = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new XcalarEvalFnDescT();
          elem22.read(input);
          this.fnDescs.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListXdfsOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListXdfsOutputT');
  if (this.numXdfs !== null && this.numXdfs !== undefined) {
    output.writeFieldBegin('numXdfs', Thrift.Type.I32, 1);
    output.writeI32(this.numXdfs);
    output.writeFieldEnd();
  }
  if (this.fnDescs !== null && this.fnDescs !== undefined) {
    output.writeFieldBegin('fnDescs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.fnDescs.length);
    for (var iter23 in this.fnDescs)
    {
      if (this.fnDescs.hasOwnProperty(iter23))
      {
        iter23 = this.fnDescs[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiKeyValuePairT = function(args) {
  this.key = null;
  this.value = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
XcalarApiKeyValuePairT.prototype = {};
XcalarApiKeyValuePairT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiKeyValuePairT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiKeyValuePairT');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiKeyAddOrReplaceInputT = function(args) {
  this.scope = null;
  this.persist = null;
  this.kvPair = null;
  if (args) {
    if (args.scope !== undefined) {
      this.scope = args.scope;
    }
    if (args.persist !== undefined) {
      this.persist = args.persist;
    }
    if (args.kvPair !== undefined) {
      this.kvPair = args.kvPair;
    }
  }
};
XcalarApiKeyAddOrReplaceInputT.prototype = {};
XcalarApiKeyAddOrReplaceInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.scope = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.persist = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.kvPair = new XcalarApiKeyValuePairT();
        this.kvPair.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiKeyAddOrReplaceInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiKeyAddOrReplaceInputT');
  if (this.scope !== null && this.scope !== undefined) {
    output.writeFieldBegin('scope', Thrift.Type.I32, 1);
    output.writeI32(this.scope);
    output.writeFieldEnd();
  }
  if (this.persist !== null && this.persist !== undefined) {
    output.writeFieldBegin('persist', Thrift.Type.BOOL, 2);
    output.writeBool(this.persist);
    output.writeFieldEnd();
  }
  if (this.kvPair !== null && this.kvPair !== undefined) {
    output.writeFieldBegin('kvPair', Thrift.Type.STRUCT, 3);
    this.kvPair.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiKeyAppendInputT = function(args) {
  this.scope = null;
  this.key = null;
  this.suffix = null;
  if (args) {
    if (args.scope !== undefined) {
      this.scope = args.scope;
    }
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.suffix !== undefined) {
      this.suffix = args.suffix;
    }
  }
};
XcalarApiKeyAppendInputT.prototype = {};
XcalarApiKeyAppendInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.scope = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.suffix = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiKeyAppendInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiKeyAppendInputT');
  if (this.scope !== null && this.scope !== undefined) {
    output.writeFieldBegin('scope', Thrift.Type.I32, 1);
    output.writeI32(this.scope);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.suffix !== null && this.suffix !== undefined) {
    output.writeFieldBegin('suffix', Thrift.Type.STRING, 3);
    output.writeString(this.suffix);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiKeySetIfEqualInputT = function(args) {
  this.scope = null;
  this.persist = null;
  this.countSecondaryPairs = null;
  this.keyCompare = null;
  this.valueCompare = null;
  this.valueReplace = null;
  this.keySecondary = null;
  this.valueSecondary = null;
  if (args) {
    if (args.scope !== undefined) {
      this.scope = args.scope;
    }
    if (args.persist !== undefined) {
      this.persist = args.persist;
    }
    if (args.countSecondaryPairs !== undefined) {
      this.countSecondaryPairs = args.countSecondaryPairs;
    }
    if (args.keyCompare !== undefined) {
      this.keyCompare = args.keyCompare;
    }
    if (args.valueCompare !== undefined) {
      this.valueCompare = args.valueCompare;
    }
    if (args.valueReplace !== undefined) {
      this.valueReplace = args.valueReplace;
    }
    if (args.keySecondary !== undefined) {
      this.keySecondary = args.keySecondary;
    }
    if (args.valueSecondary !== undefined) {
      this.valueSecondary = args.valueSecondary;
    }
  }
};
XcalarApiKeySetIfEqualInputT.prototype = {};
XcalarApiKeySetIfEqualInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.scope = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.persist = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.countSecondaryPairs = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.keyCompare = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.valueCompare = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.valueReplace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.keySecondary = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.valueSecondary = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiKeySetIfEqualInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiKeySetIfEqualInputT');
  if (this.scope !== null && this.scope !== undefined) {
    output.writeFieldBegin('scope', Thrift.Type.I32, 1);
    output.writeI32(this.scope);
    output.writeFieldEnd();
  }
  if (this.persist !== null && this.persist !== undefined) {
    output.writeFieldBegin('persist', Thrift.Type.BOOL, 2);
    output.writeBool(this.persist);
    output.writeFieldEnd();
  }
  if (this.countSecondaryPairs !== null && this.countSecondaryPairs !== undefined) {
    output.writeFieldBegin('countSecondaryPairs', Thrift.Type.I32, 3);
    output.writeI32(this.countSecondaryPairs);
    output.writeFieldEnd();
  }
  if (this.keyCompare !== null && this.keyCompare !== undefined) {
    output.writeFieldBegin('keyCompare', Thrift.Type.STRING, 4);
    output.writeString(this.keyCompare);
    output.writeFieldEnd();
  }
  if (this.valueCompare !== null && this.valueCompare !== undefined) {
    output.writeFieldBegin('valueCompare', Thrift.Type.STRING, 5);
    output.writeString(this.valueCompare);
    output.writeFieldEnd();
  }
  if (this.valueReplace !== null && this.valueReplace !== undefined) {
    output.writeFieldBegin('valueReplace', Thrift.Type.STRING, 6);
    output.writeString(this.valueReplace);
    output.writeFieldEnd();
  }
  if (this.keySecondary !== null && this.keySecondary !== undefined) {
    output.writeFieldBegin('keySecondary', Thrift.Type.STRING, 7);
    output.writeString(this.keySecondary);
    output.writeFieldEnd();
  }
  if (this.valueSecondary !== null && this.valueSecondary !== undefined) {
    output.writeFieldBegin('valueSecondary', Thrift.Type.STRING, 8);
    output.writeString(this.valueSecondary);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiKeyLookupInputT = function(args) {
  this.scope = null;
  this.key = null;
  if (args) {
    if (args.scope !== undefined) {
      this.scope = args.scope;
    }
    if (args.key !== undefined) {
      this.key = args.key;
    }
  }
};
XcalarApiKeyLookupInputT.prototype = {};
XcalarApiKeyLookupInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.scope = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiKeyLookupInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiKeyLookupInputT');
  if (this.scope !== null && this.scope !== undefined) {
    output.writeFieldBegin('scope', Thrift.Type.I32, 1);
    output.writeI32(this.scope);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiKeyLookupOutputT = function(args) {
  this.value = null;
  if (args) {
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
XcalarApiKeyLookupOutputT.prototype = {};
XcalarApiKeyLookupOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiKeyLookupOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiKeyLookupOutputT');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 1);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiKeyListInputT = function(args) {
  this.scope = null;
  this.keyRegex = null;
  if (args) {
    if (args.scope !== undefined) {
      this.scope = args.scope;
    }
    if (args.keyRegex !== undefined) {
      this.keyRegex = args.keyRegex;
    }
  }
};
XcalarApiKeyListInputT.prototype = {};
XcalarApiKeyListInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.scope = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.keyRegex = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiKeyListInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiKeyListInputT');
  if (this.scope !== null && this.scope !== undefined) {
    output.writeFieldBegin('scope', Thrift.Type.I32, 1);
    output.writeI32(this.scope);
    output.writeFieldEnd();
  }
  if (this.keyRegex !== null && this.keyRegex !== undefined) {
    output.writeFieldBegin('keyRegex', Thrift.Type.STRING, 2);
    output.writeString(this.keyRegex);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiKeyListOutputT = function(args) {
  this.numKeys = null;
  this.keys = null;
  if (args) {
    if (args.numKeys !== undefined) {
      this.numKeys = args.numKeys;
    }
    if (args.keys !== undefined) {
      this.keys = args.keys;
    }
  }
};
XcalarApiKeyListOutputT.prototype = {};
XcalarApiKeyListOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numKeys = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.keys = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readString().value;
          this.keys.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiKeyListOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiKeyListOutputT');
  if (this.numKeys !== null && this.numKeys !== undefined) {
    output.writeFieldBegin('numKeys', Thrift.Type.I32, 1);
    output.writeI32(this.numKeys);
    output.writeFieldEnd();
  }
  if (this.keys !== null && this.keys !== undefined) {
    output.writeFieldBegin('keys', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.keys.length);
    for (var iter31 in this.keys)
    {
      if (this.keys.hasOwnProperty(iter31))
      {
        iter31 = this.keys[iter31];
        output.writeString(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiKeyDeleteInputT = function(args) {
  this.scope = null;
  this.key = null;
  if (args) {
    if (args.scope !== undefined) {
      this.scope = args.scope;
    }
    if (args.key !== undefined) {
      this.key = args.key;
    }
  }
};
XcalarApiKeyDeleteInputT.prototype = {};
XcalarApiKeyDeleteInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.scope = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiKeyDeleteInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiKeyDeleteInputT');
  if (this.scope !== null && this.scope !== undefined) {
    output.writeFieldBegin('scope', Thrift.Type.I32, 1);
    output.writeI32(this.scope);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiTableInputT = function(args) {
  this.tableName = null;
  this.tableId = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.tableId !== undefined) {
      this.tableId = args.tableId;
    }
  }
};
XcalarApiTableInputT.prototype = {};
XcalarApiTableInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiTableInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiTableInputT');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.tableId !== null && this.tableId !== undefined) {
    output.writeFieldBegin('tableId', Thrift.Type.STRING, 2);
    output.writeString(this.tableId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDatasetT = function(args) {
  this.url = null;
  this.datasetId = null;
  this.formatType = null;
  this.name = null;
  this.loadIsComplete = null;
  this.refCount = null;
  this.isListable = null;
  this.udfName = null;
  if (args) {
    if (args.url !== undefined) {
      this.url = args.url;
    }
    if (args.datasetId !== undefined) {
      this.datasetId = args.datasetId;
    }
    if (args.formatType !== undefined) {
      this.formatType = args.formatType;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.loadIsComplete !== undefined) {
      this.loadIsComplete = args.loadIsComplete;
    }
    if (args.refCount !== undefined) {
      this.refCount = args.refCount;
    }
    if (args.isListable !== undefined) {
      this.isListable = args.isListable;
    }
    if (args.udfName !== undefined) {
      this.udfName = args.udfName;
    }
  }
};
XcalarApiDatasetT.prototype = {};
XcalarApiDatasetT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.datasetId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.formatType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.loadIsComplete = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.refCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.isListable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.udfName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDatasetT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDatasetT');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.datasetId !== null && this.datasetId !== undefined) {
    output.writeFieldBegin('datasetId', Thrift.Type.STRING, 2);
    output.writeString(this.datasetId);
    output.writeFieldEnd();
  }
  if (this.formatType !== null && this.formatType !== undefined) {
    output.writeFieldBegin('formatType', Thrift.Type.I32, 3);
    output.writeI32(this.formatType);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 4);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.loadIsComplete !== null && this.loadIsComplete !== undefined) {
    output.writeFieldBegin('loadIsComplete', Thrift.Type.BOOL, 5);
    output.writeBool(this.loadIsComplete);
    output.writeFieldEnd();
  }
  if (this.refCount !== null && this.refCount !== undefined) {
    output.writeFieldBegin('refCount', Thrift.Type.I32, 6);
    output.writeI32(this.refCount);
    output.writeFieldEnd();
  }
  if (this.isListable !== null && this.isListable !== undefined) {
    output.writeFieldBegin('isListable', Thrift.Type.BOOL, 7);
    output.writeBool(this.isListable);
    output.writeFieldEnd();
  }
  if (this.udfName !== null && this.udfName !== undefined) {
    output.writeFieldBegin('udfName', Thrift.Type.STRING, 8);
    output.writeString(this.udfName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDfCsvLoadArgsT = function(args) {
  this.recordDelim = null;
  this.quoteDelim = null;
  this.linesToSkip = null;
  this.fieldDelim = null;
  this.isCRLF = null;
  this.hasHeader = null;
  if (args) {
    if (args.recordDelim !== undefined) {
      this.recordDelim = args.recordDelim;
    }
    if (args.quoteDelim !== undefined) {
      this.quoteDelim = args.quoteDelim;
    }
    if (args.linesToSkip !== undefined) {
      this.linesToSkip = args.linesToSkip;
    }
    if (args.fieldDelim !== undefined) {
      this.fieldDelim = args.fieldDelim;
    }
    if (args.isCRLF !== undefined) {
      this.isCRLF = args.isCRLF;
    }
    if (args.hasHeader !== undefined) {
      this.hasHeader = args.hasHeader;
    }
  }
};
XcalarApiDfCsvLoadArgsT.prototype = {};
XcalarApiDfCsvLoadArgsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.recordDelim = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.quoteDelim = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.linesToSkip = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.fieldDelim = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.isCRLF = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.hasHeader = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDfCsvLoadArgsT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDfCsvLoadArgsT');
  if (this.recordDelim !== null && this.recordDelim !== undefined) {
    output.writeFieldBegin('recordDelim', Thrift.Type.STRING, 1);
    output.writeString(this.recordDelim);
    output.writeFieldEnd();
  }
  if (this.quoteDelim !== null && this.quoteDelim !== undefined) {
    output.writeFieldBegin('quoteDelim', Thrift.Type.STRING, 2);
    output.writeString(this.quoteDelim);
    output.writeFieldEnd();
  }
  if (this.linesToSkip !== null && this.linesToSkip !== undefined) {
    output.writeFieldBegin('linesToSkip', Thrift.Type.I32, 3);
    output.writeI32(this.linesToSkip);
    output.writeFieldEnd();
  }
  if (this.fieldDelim !== null && this.fieldDelim !== undefined) {
    output.writeFieldBegin('fieldDelim', Thrift.Type.STRING, 4);
    output.writeString(this.fieldDelim);
    output.writeFieldEnd();
  }
  if (this.isCRLF !== null && this.isCRLF !== undefined) {
    output.writeFieldBegin('isCRLF', Thrift.Type.BOOL, 5);
    output.writeBool(this.isCRLF);
    output.writeFieldEnd();
  }
  if (this.hasHeader !== null && this.hasHeader !== undefined) {
    output.writeFieldBegin('hasHeader', Thrift.Type.BOOL, 6);
    output.writeBool(this.hasHeader);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUdfLoadArgsT = function(args) {
  this.fullyQualifiedFnName = null;
  if (args) {
    if (args.fullyQualifiedFnName !== undefined) {
      this.fullyQualifiedFnName = args.fullyQualifiedFnName;
    }
  }
};
XcalarApiUdfLoadArgsT.prototype = {};
XcalarApiUdfLoadArgsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fullyQualifiedFnName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUdfLoadArgsT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUdfLoadArgsT');
  if (this.fullyQualifiedFnName !== null && this.fullyQualifiedFnName !== undefined) {
    output.writeFieldBegin('fullyQualifiedFnName', Thrift.Type.STRING, 1);
    output.writeString(this.fullyQualifiedFnName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDfLoadArgsT = function(args) {
  this.csv = null;
  this.udfLoadArgs = null;
  this.recursive = null;
  this.fileNamePattern = null;
  this.maxSize = null;
  if (args) {
    if (args.csv !== undefined) {
      this.csv = args.csv;
    }
    if (args.udfLoadArgs !== undefined) {
      this.udfLoadArgs = args.udfLoadArgs;
    }
    if (args.recursive !== undefined) {
      this.recursive = args.recursive;
    }
    if (args.fileNamePattern !== undefined) {
      this.fileNamePattern = args.fileNamePattern;
    }
    if (args.maxSize !== undefined) {
      this.maxSize = args.maxSize;
    }
  }
};
XcalarApiDfLoadArgsT.prototype = {};
XcalarApiDfLoadArgsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.csv = new XcalarApiDfCsvLoadArgsT();
        this.csv.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.udfLoadArgs = new XcalarApiUdfLoadArgsT();
        this.udfLoadArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.recursive = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.fileNamePattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.maxSize = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDfLoadArgsT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDfLoadArgsT');
  if (this.csv !== null && this.csv !== undefined) {
    output.writeFieldBegin('csv', Thrift.Type.STRUCT, 1);
    this.csv.write(output);
    output.writeFieldEnd();
  }
  if (this.udfLoadArgs !== null && this.udfLoadArgs !== undefined) {
    output.writeFieldBegin('udfLoadArgs', Thrift.Type.STRUCT, 2);
    this.udfLoadArgs.write(output);
    output.writeFieldEnd();
  }
  if (this.recursive !== null && this.recursive !== undefined) {
    output.writeFieldBegin('recursive', Thrift.Type.BOOL, 3);
    output.writeBool(this.recursive);
    output.writeFieldEnd();
  }
  if (this.fileNamePattern !== null && this.fileNamePattern !== undefined) {
    output.writeFieldBegin('fileNamePattern', Thrift.Type.STRING, 4);
    output.writeString(this.fileNamePattern);
    output.writeFieldEnd();
  }
  if (this.maxSize !== null && this.maxSize !== undefined) {
    output.writeFieldBegin('maxSize', Thrift.Type.I64, 5);
    output.writeI64(this.maxSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListExportTargetsInputT = function(args) {
  this.targetTypePattern = null;
  this.targetNamePattern = null;
  if (args) {
    if (args.targetTypePattern !== undefined) {
      this.targetTypePattern = args.targetTypePattern;
    }
    if (args.targetNamePattern !== undefined) {
      this.targetNamePattern = args.targetNamePattern;
    }
  }
};
XcalarApiListExportTargetsInputT.prototype = {};
XcalarApiListExportTargetsInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.targetTypePattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.targetNamePattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListExportTargetsInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListExportTargetsInputT');
  if (this.targetTypePattern !== null && this.targetTypePattern !== undefined) {
    output.writeFieldBegin('targetTypePattern', Thrift.Type.STRING, 1);
    output.writeString(this.targetTypePattern);
    output.writeFieldEnd();
  }
  if (this.targetNamePattern !== null && this.targetNamePattern !== undefined) {
    output.writeFieldBegin('targetNamePattern', Thrift.Type.STRING, 2);
    output.writeString(this.targetNamePattern);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListExportTargetsOutputT = function(args) {
  this.numTargets = null;
  this.targets = null;
  if (args) {
    if (args.numTargets !== undefined) {
      this.numTargets = args.numTargets;
    }
    if (args.targets !== undefined) {
      this.targets = args.targets;
    }
  }
};
XcalarApiListExportTargetsOutputT.prototype = {};
XcalarApiListExportTargetsOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numTargets = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.targets = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ExExportTargetT();
          elem38.read(input);
          this.targets.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListExportTargetsOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListExportTargetsOutputT');
  if (this.numTargets !== null && this.numTargets !== undefined) {
    output.writeFieldBegin('numTargets', Thrift.Type.I64, 1);
    output.writeI64(this.numTargets);
    output.writeFieldEnd();
  }
  if (this.targets !== null && this.targets !== undefined) {
    output.writeFieldBegin('targets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.targets.length);
    for (var iter39 in this.targets)
    {
      if (this.targets.hasOwnProperty(iter39))
      {
        iter39 = this.targets[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiExportColumnT = function(args) {
  this.columnName = null;
  this.headerName = null;
  if (args) {
    if (args.columnName !== undefined) {
      this.columnName = args.columnName;
    }
    if (args.headerName !== undefined) {
      this.headerName = args.headerName;
    }
  }
};
XcalarApiExportColumnT.prototype = {};
XcalarApiExportColumnT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.columnName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.headerName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiExportColumnT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiExportColumnT');
  if (this.columnName !== null && this.columnName !== undefined) {
    output.writeFieldBegin('columnName', Thrift.Type.STRING, 1);
    output.writeString(this.columnName);
    output.writeFieldEnd();
  }
  if (this.headerName !== null && this.headerName !== undefined) {
    output.writeFieldBegin('headerName', Thrift.Type.STRING, 2);
    output.writeString(this.headerName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiExportInputT = function(args) {
  this.source = null;
  this.fileName = null;
  this.targetName = null;
  this.targetType = null;
  this.dest = null;
  this.columns = null;
  this.splitRule = null;
  this.splitSize = null;
  this.splitNumFiles = null;
  this.headerType = null;
  this.createRule = null;
  this.sorted = null;
  this.format = null;
  this.fieldDelim = null;
  this.recordDelim = null;
  this.quoteDelim = null;
  if (args) {
    if (args.source !== undefined) {
      this.source = args.source;
    }
    if (args.fileName !== undefined) {
      this.fileName = args.fileName;
    }
    if (args.targetName !== undefined) {
      this.targetName = args.targetName;
    }
    if (args.targetType !== undefined) {
      this.targetType = args.targetType;
    }
    if (args.dest !== undefined) {
      this.dest = args.dest;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.splitRule !== undefined) {
      this.splitRule = args.splitRule;
    }
    if (args.splitSize !== undefined) {
      this.splitSize = args.splitSize;
    }
    if (args.splitNumFiles !== undefined) {
      this.splitNumFiles = args.splitNumFiles;
    }
    if (args.headerType !== undefined) {
      this.headerType = args.headerType;
    }
    if (args.createRule !== undefined) {
      this.createRule = args.createRule;
    }
    if (args.sorted !== undefined) {
      this.sorted = args.sorted;
    }
    if (args.format !== undefined) {
      this.format = args.format;
    }
    if (args.fieldDelim !== undefined) {
      this.fieldDelim = args.fieldDelim;
    }
    if (args.recordDelim !== undefined) {
      this.recordDelim = args.recordDelim;
    }
    if (args.quoteDelim !== undefined) {
      this.quoteDelim = args.quoteDelim;
    }
  }
};
XcalarApiExportInputT.prototype = {};
XcalarApiExportInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fileName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.targetName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.targetType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.dest = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.columns = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new XcalarApiExportColumnT();
          elem46.read(input);
          this.columns.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.splitRule = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.splitSize = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.splitNumFiles = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.headerType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.createRule = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.sorted = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.format = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.fieldDelim = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.recordDelim = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.quoteDelim = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiExportInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiExportInputT');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 1);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.fileName !== null && this.fileName !== undefined) {
    output.writeFieldBegin('fileName', Thrift.Type.STRING, 2);
    output.writeString(this.fileName);
    output.writeFieldEnd();
  }
  if (this.targetName !== null && this.targetName !== undefined) {
    output.writeFieldBegin('targetName', Thrift.Type.STRING, 3);
    output.writeString(this.targetName);
    output.writeFieldEnd();
  }
  if (this.targetType !== null && this.targetType !== undefined) {
    output.writeFieldBegin('targetType', Thrift.Type.STRING, 4);
    output.writeString(this.targetType);
    output.writeFieldEnd();
  }
  if (this.dest !== null && this.dest !== undefined) {
    output.writeFieldBegin('dest', Thrift.Type.STRING, 5);
    output.writeString(this.dest);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter47 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter47))
      {
        iter47 = this.columns[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.splitRule !== null && this.splitRule !== undefined) {
    output.writeFieldBegin('splitRule', Thrift.Type.STRING, 7);
    output.writeString(this.splitRule);
    output.writeFieldEnd();
  }
  if (this.splitSize !== null && this.splitSize !== undefined) {
    output.writeFieldBegin('splitSize', Thrift.Type.I64, 8);
    output.writeI64(this.splitSize);
    output.writeFieldEnd();
  }
  if (this.splitNumFiles !== null && this.splitNumFiles !== undefined) {
    output.writeFieldBegin('splitNumFiles', Thrift.Type.I64, 9);
    output.writeI64(this.splitNumFiles);
    output.writeFieldEnd();
  }
  if (this.headerType !== null && this.headerType !== undefined) {
    output.writeFieldBegin('headerType', Thrift.Type.STRING, 10);
    output.writeString(this.headerType);
    output.writeFieldEnd();
  }
  if (this.createRule !== null && this.createRule !== undefined) {
    output.writeFieldBegin('createRule', Thrift.Type.STRING, 11);
    output.writeString(this.createRule);
    output.writeFieldEnd();
  }
  if (this.sorted !== null && this.sorted !== undefined) {
    output.writeFieldBegin('sorted', Thrift.Type.BOOL, 12);
    output.writeBool(this.sorted);
    output.writeFieldEnd();
  }
  if (this.format !== null && this.format !== undefined) {
    output.writeFieldBegin('format', Thrift.Type.STRING, 13);
    output.writeString(this.format);
    output.writeFieldEnd();
  }
  if (this.fieldDelim !== null && this.fieldDelim !== undefined) {
    output.writeFieldBegin('fieldDelim', Thrift.Type.STRING, 14);
    output.writeString(this.fieldDelim);
    output.writeFieldEnd();
  }
  if (this.recordDelim !== null && this.recordDelim !== undefined) {
    output.writeFieldBegin('recordDelim', Thrift.Type.STRING, 15);
    output.writeString(this.recordDelim);
    output.writeFieldEnd();
  }
  if (this.quoteDelim !== null && this.quoteDelim !== undefined) {
    output.writeFieldBegin('quoteDelim', Thrift.Type.STRING, 16);
    output.writeString(this.quoteDelim);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiAppSetInputT = function(args) {
  this.name = null;
  this.hostType = null;
  this.duty = null;
  this.execStr = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.hostType !== undefined) {
      this.hostType = args.hostType;
    }
    if (args.duty !== undefined) {
      this.duty = args.duty;
    }
    if (args.execStr !== undefined) {
      this.execStr = args.execStr;
    }
  }
};
XcalarApiAppSetInputT.prototype = {};
XcalarApiAppSetInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.hostType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.duty = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.execStr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiAppSetInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiAppSetInputT');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.hostType !== null && this.hostType !== undefined) {
    output.writeFieldBegin('hostType', Thrift.Type.STRING, 2);
    output.writeString(this.hostType);
    output.writeFieldEnd();
  }
  if (this.duty !== null && this.duty !== undefined) {
    output.writeFieldBegin('duty', Thrift.Type.STRING, 3);
    output.writeString(this.duty);
    output.writeFieldEnd();
  }
  if (this.execStr !== null && this.execStr !== undefined) {
    output.writeFieldBegin('execStr', Thrift.Type.STRING, 4);
    output.writeString(this.execStr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiAppRunInputT = function(args) {
  this.name = null;
  this.isGlobal = null;
  this.inStr = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.isGlobal !== undefined) {
      this.isGlobal = args.isGlobal;
    }
    if (args.inStr !== undefined) {
      this.inStr = args.inStr;
    }
  }
};
XcalarApiAppRunInputT.prototype = {};
XcalarApiAppRunInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.isGlobal = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.inStr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiAppRunInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiAppRunInputT');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.isGlobal !== null && this.isGlobal !== undefined) {
    output.writeFieldBegin('isGlobal', Thrift.Type.BOOL, 2);
    output.writeBool(this.isGlobal);
    output.writeFieldEnd();
  }
  if (this.inStr !== null && this.inStr !== undefined) {
    output.writeFieldBegin('inStr', Thrift.Type.STRING, 4);
    output.writeString(this.inStr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiAppRunOutputT = function(args) {
  this.appGroupId = null;
  if (args) {
    if (args.appGroupId !== undefined) {
      this.appGroupId = args.appGroupId;
    }
  }
};
XcalarApiAppRunOutputT.prototype = {};
XcalarApiAppRunOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.appGroupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiAppRunOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiAppRunOutputT');
  if (this.appGroupId !== null && this.appGroupId !== undefined) {
    output.writeFieldBegin('appGroupId', Thrift.Type.STRING, 1);
    output.writeString(this.appGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiAppReapInputT = function(args) {
  this.appGroupId = null;
  if (args) {
    if (args.appGroupId !== undefined) {
      this.appGroupId = args.appGroupId;
    }
  }
};
XcalarApiAppReapInputT.prototype = {};
XcalarApiAppReapInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.appGroupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiAppReapInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiAppReapInputT');
  if (this.appGroupId !== null && this.appGroupId !== undefined) {
    output.writeFieldBegin('appGroupId', Thrift.Type.STRING, 1);
    output.writeString(this.appGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiAppReapOutputT = function(args) {
  this.outStr = null;
  this.errStr = null;
  if (args) {
    if (args.outStr !== undefined) {
      this.outStr = args.outStr;
    }
    if (args.errStr !== undefined) {
      this.errStr = args.errStr;
    }
  }
};
XcalarApiAppReapOutputT.prototype = {};
XcalarApiAppReapOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.outStr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.errStr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiAppReapOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiAppReapOutputT');
  if (this.outStr !== null && this.outStr !== undefined) {
    output.writeFieldBegin('outStr', Thrift.Type.STRING, 1);
    output.writeString(this.outStr);
    output.writeFieldEnd();
  }
  if (this.errStr !== null && this.errStr !== undefined) {
    output.writeFieldBegin('errStr', Thrift.Type.STRING, 2);
    output.writeString(this.errStr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiEvalT = function(args) {
  this.evalString = null;
  this.newField = null;
  if (args) {
    if (args.evalString !== undefined) {
      this.evalString = args.evalString;
    }
    if (args.newField !== undefined) {
      this.newField = args.newField;
    }
  }
};
XcalarApiEvalT.prototype = {};
XcalarApiEvalT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.evalString = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.newField = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiEvalT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiEvalT');
  if (this.evalString !== null && this.evalString !== undefined) {
    output.writeFieldBegin('evalString', Thrift.Type.STRING, 1);
    output.writeString(this.evalString);
    output.writeFieldEnd();
  }
  if (this.newField !== null && this.newField !== undefined) {
    output.writeFieldBegin('newField', Thrift.Type.STRING, 2);
    output.writeString(this.newField);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiKeyT = function(args) {
  this.name = null;
  this.type = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
XcalarApiKeyT.prototype = {};
XcalarApiKeyT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiKeyT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiKeyT');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiPreviewInputT = function(args) {
  this.inputJson = null;
  if (args) {
    if (args.inputJson !== undefined) {
      this.inputJson = args.inputJson;
    }
  }
};
XcalarApiPreviewInputT.prototype = {};
XcalarApiPreviewInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.inputJson = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiPreviewInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiPreviewInputT');
  if (this.inputJson !== null && this.inputJson !== undefined) {
    output.writeFieldBegin('inputJson', Thrift.Type.STRING, 1);
    output.writeString(this.inputJson);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiPreviewOutputT = function(args) {
  this.outputJson = null;
  if (args) {
    if (args.outputJson !== undefined) {
      this.outputJson = args.outputJson;
    }
  }
};
XcalarApiPreviewOutputT.prototype = {};
XcalarApiPreviewOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.outputJson = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiPreviewOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiPreviewOutputT');
  if (this.outputJson !== null && this.outputJson !== undefined) {
    output.writeFieldBegin('outputJson', Thrift.Type.STRING, 1);
    output.writeString(this.outputJson);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDemoFileInputT = function(args) {
  this.inputJson = null;
  if (args) {
    if (args.inputJson !== undefined) {
      this.inputJson = args.inputJson;
    }
  }
};
XcalarApiDemoFileInputT.prototype = {};
XcalarApiDemoFileInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.inputJson = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDemoFileInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDemoFileInputT');
  if (this.inputJson !== null && this.inputJson !== undefined) {
    output.writeFieldBegin('inputJson', Thrift.Type.STRING, 1);
    output.writeString(this.inputJson);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDemoFileOutputT = function(args) {
  this.outputJson = null;
  if (args) {
    if (args.outputJson !== undefined) {
      this.outputJson = args.outputJson;
    }
  }
};
XcalarApiDemoFileOutputT.prototype = {};
XcalarApiDemoFileOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.outputJson = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDemoFileOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDemoFileOutputT');
  if (this.outputJson !== null && this.outputJson !== undefined) {
    output.writeFieldBegin('outputJson', Thrift.Type.STRING, 1);
    output.writeString(this.outputJson);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiBulkLoadInputT = function(args) {
  this.url = null;
  this.fileNamePattern = null;
  this.udf = null;
  this.dest = null;
  this.size = null;
  this.format = null;
  this.recordDelim = null;
  this.fieldDelim = null;
  this.quoteDelim = null;
  this.linesToSkip = null;
  this.crlf = null;
  this.header = null;
  this.recursive = null;
  if (args) {
    if (args.url !== undefined) {
      this.url = args.url;
    }
    if (args.fileNamePattern !== undefined) {
      this.fileNamePattern = args.fileNamePattern;
    }
    if (args.udf !== undefined) {
      this.udf = args.udf;
    }
    if (args.dest !== undefined) {
      this.dest = args.dest;
    }
    if (args.size !== undefined) {
      this.size = args.size;
    }
    if (args.format !== undefined) {
      this.format = args.format;
    }
    if (args.recordDelim !== undefined) {
      this.recordDelim = args.recordDelim;
    }
    if (args.fieldDelim !== undefined) {
      this.fieldDelim = args.fieldDelim;
    }
    if (args.quoteDelim !== undefined) {
      this.quoteDelim = args.quoteDelim;
    }
    if (args.linesToSkip !== undefined) {
      this.linesToSkip = args.linesToSkip;
    }
    if (args.crlf !== undefined) {
      this.crlf = args.crlf;
    }
    if (args.header !== undefined) {
      this.header = args.header;
    }
    if (args.recursive !== undefined) {
      this.recursive = args.recursive;
    }
  }
};
XcalarApiBulkLoadInputT.prototype = {};
XcalarApiBulkLoadInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fileNamePattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.udf = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.dest = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.size = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.format = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.recordDelim = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.fieldDelim = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.quoteDelim = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.linesToSkip = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.crlf = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.header = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.recursive = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiBulkLoadInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiBulkLoadInputT');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.fileNamePattern !== null && this.fileNamePattern !== undefined) {
    output.writeFieldBegin('fileNamePattern', Thrift.Type.STRING, 2);
    output.writeString(this.fileNamePattern);
    output.writeFieldEnd();
  }
  if (this.udf !== null && this.udf !== undefined) {
    output.writeFieldBegin('udf', Thrift.Type.STRING, 3);
    output.writeString(this.udf);
    output.writeFieldEnd();
  }
  if (this.dest !== null && this.dest !== undefined) {
    output.writeFieldBegin('dest', Thrift.Type.STRING, 4);
    output.writeString(this.dest);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I64, 5);
    output.writeI64(this.size);
    output.writeFieldEnd();
  }
  if (this.format !== null && this.format !== undefined) {
    output.writeFieldBegin('format', Thrift.Type.STRING, 6);
    output.writeString(this.format);
    output.writeFieldEnd();
  }
  if (this.recordDelim !== null && this.recordDelim !== undefined) {
    output.writeFieldBegin('recordDelim', Thrift.Type.STRING, 7);
    output.writeString(this.recordDelim);
    output.writeFieldEnd();
  }
  if (this.fieldDelim !== null && this.fieldDelim !== undefined) {
    output.writeFieldBegin('fieldDelim', Thrift.Type.STRING, 8);
    output.writeString(this.fieldDelim);
    output.writeFieldEnd();
  }
  if (this.quoteDelim !== null && this.quoteDelim !== undefined) {
    output.writeFieldBegin('quoteDelim', Thrift.Type.STRING, 9);
    output.writeString(this.quoteDelim);
    output.writeFieldEnd();
  }
  if (this.linesToSkip !== null && this.linesToSkip !== undefined) {
    output.writeFieldBegin('linesToSkip', Thrift.Type.I64, 10);
    output.writeI64(this.linesToSkip);
    output.writeFieldEnd();
  }
  if (this.crlf !== null && this.crlf !== undefined) {
    output.writeFieldBegin('crlf', Thrift.Type.BOOL, 11);
    output.writeBool(this.crlf);
    output.writeFieldEnd();
  }
  if (this.header !== null && this.header !== undefined) {
    output.writeFieldBegin('header', Thrift.Type.BOOL, 12);
    output.writeBool(this.header);
    output.writeFieldEnd();
  }
  if (this.recursive !== null && this.recursive !== undefined) {
    output.writeFieldBegin('recursive', Thrift.Type.BOOL, 13);
    output.writeBool(this.recursive);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiIndexInputT = function(args) {
  this.source = null;
  this.dest = null;
  this.key = null;
  this.prefix = null;
  this.ordering = null;
  this.dhtName = null;
  this.delaySort = null;
  if (args) {
    if (args.source !== undefined) {
      this.source = args.source;
    }
    if (args.dest !== undefined) {
      this.dest = args.dest;
    }
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.prefix !== undefined) {
      this.prefix = args.prefix;
    }
    if (args.ordering !== undefined) {
      this.ordering = args.ordering;
    }
    if (args.dhtName !== undefined) {
      this.dhtName = args.dhtName;
    }
    if (args.delaySort !== undefined) {
      this.delaySort = args.delaySort;
    }
  }
};
XcalarApiIndexInputT.prototype = {};
XcalarApiIndexInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dest = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.key = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new XcalarApiKeyT();
          elem54.read(input);
          this.key.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.prefix = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.ordering = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.dhtName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.delaySort = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiIndexInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiIndexInputT');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 1);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.dest !== null && this.dest !== undefined) {
    output.writeFieldBegin('dest', Thrift.Type.STRING, 2);
    output.writeString(this.dest);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.key.length);
    for (var iter55 in this.key)
    {
      if (this.key.hasOwnProperty(iter55))
      {
        iter55 = this.key[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.prefix !== null && this.prefix !== undefined) {
    output.writeFieldBegin('prefix', Thrift.Type.STRING, 4);
    output.writeString(this.prefix);
    output.writeFieldEnd();
  }
  if (this.ordering !== null && this.ordering !== undefined) {
    output.writeFieldBegin('ordering', Thrift.Type.STRING, 5);
    output.writeString(this.ordering);
    output.writeFieldEnd();
  }
  if (this.dhtName !== null && this.dhtName !== undefined) {
    output.writeFieldBegin('dhtName', Thrift.Type.STRING, 6);
    output.writeString(this.dhtName);
    output.writeFieldEnd();
  }
  if (this.delaySort !== null && this.delaySort !== undefined) {
    output.writeFieldBegin('delaySort', Thrift.Type.BOOL, 7);
    output.writeBool(this.delaySort);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiStatInputT = function(args) {
  this.nodeId = null;
  if (args) {
    if (args.nodeId !== undefined) {
      this.nodeId = args.nodeId;
    }
  }
};
XcalarApiStatInputT.prototype = {};
XcalarApiStatInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.nodeId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiStatInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiStatInputT');
  if (this.nodeId !== null && this.nodeId !== undefined) {
    output.writeFieldBegin('nodeId', Thrift.Type.I64, 1);
    output.writeI64(this.nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDagNameT = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
XcalarApiDagNameT.prototype = {};
XcalarApiDagNameT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDagNameT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDagNameT');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiRetinaDstT = function(args) {
  this.numColumns = null;
  this.target = null;
  this.columns = null;
  if (args) {
    if (args.numColumns !== undefined) {
      this.numColumns = args.numColumns;
    }
    if (args.target !== undefined) {
      this.target = args.target;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
  }
};
XcalarApiRetinaDstT.prototype = {};
XcalarApiRetinaDstT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numColumns = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.target = new XcalarApiNamedInputT();
        this.target.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.columns = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new ExColumnNameT();
          elem62.read(input);
          this.columns.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiRetinaDstT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiRetinaDstT');
  if (this.numColumns !== null && this.numColumns !== undefined) {
    output.writeFieldBegin('numColumns', Thrift.Type.I32, 1);
    output.writeI32(this.numColumns);
    output.writeFieldEnd();
  }
  if (this.target !== null && this.target !== undefined) {
    output.writeFieldBegin('target', Thrift.Type.STRUCT, 2);
    this.target.write(output);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter63 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter63))
      {
        iter63 = this.columns[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiMakeRetinaInputT = function(args) {
  this.retinaName = null;
  this.numTables = null;
  this.tableArray = null;
  if (args) {
    if (args.retinaName !== undefined) {
      this.retinaName = args.retinaName;
    }
    if (args.numTables !== undefined) {
      this.numTables = args.numTables;
    }
    if (args.tableArray !== undefined) {
      this.tableArray = args.tableArray;
    }
  }
};
XcalarApiMakeRetinaInputT.prototype = {};
XcalarApiMakeRetinaInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.retinaName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numTables = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.tableArray = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new XcalarApiRetinaDstT();
          elem70.read(input);
          this.tableArray.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiMakeRetinaInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiMakeRetinaInputT');
  if (this.retinaName !== null && this.retinaName !== undefined) {
    output.writeFieldBegin('retinaName', Thrift.Type.STRING, 1);
    output.writeString(this.retinaName);
    output.writeFieldEnd();
  }
  if (this.numTables !== null && this.numTables !== undefined) {
    output.writeFieldBegin('numTables', Thrift.Type.I64, 2);
    output.writeI64(this.numTables);
    output.writeFieldEnd();
  }
  if (this.tableArray !== null && this.tableArray !== undefined) {
    output.writeFieldBegin('tableArray', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.tableArray.length);
    for (var iter71 in this.tableArray)
    {
      if (this.tableArray.hasOwnProperty(iter71))
      {
        iter71 = this.tableArray[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetRetinaInputT = function(args) {
  this.retInput = null;
  if (args) {
    if (args.retInput !== undefined) {
      this.retInput = args.retInput;
    }
  }
};
XcalarApiGetRetinaInputT.prototype = {};
XcalarApiGetRetinaInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.retInput = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetRetinaInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetRetinaInputT');
  if (this.retInput !== null && this.retInput !== undefined) {
    output.writeFieldBegin('retInput', Thrift.Type.STRING, 1);
    output.writeString(this.retInput);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiProjectInputT = function(args) {
  this.source = null;
  this.dest = null;
  this.columns = null;
  if (args) {
    if (args.source !== undefined) {
      this.source = args.source;
    }
    if (args.dest !== undefined) {
      this.dest = args.dest;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
  }
};
XcalarApiProjectInputT.prototype = {};
XcalarApiProjectInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dest = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.columns = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = input.readString().value;
          this.columns.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiProjectInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiProjectInputT');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 1);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.dest !== null && this.dest !== undefined) {
    output.writeFieldBegin('dest', Thrift.Type.STRING, 2);
    output.writeString(this.dest);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter79 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter79))
      {
        iter79 = this.columns[iter79];
        output.writeString(iter79);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiFilterInputT = function(args) {
  this.source = null;
  this.dest = null;
  this.eval = null;
  if (args) {
    if (args.source !== undefined) {
      this.source = args.source;
    }
    if (args.dest !== undefined) {
      this.dest = args.dest;
    }
    if (args.eval !== undefined) {
      this.eval = args.eval;
    }
  }
};
XcalarApiFilterInputT.prototype = {};
XcalarApiFilterInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dest = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.eval = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = new XcalarApiEvalT();
          elem86.read(input);
          this.eval.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiFilterInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiFilterInputT');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 1);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.dest !== null && this.dest !== undefined) {
    output.writeFieldBegin('dest', Thrift.Type.STRING, 2);
    output.writeString(this.dest);
    output.writeFieldEnd();
  }
  if (this.eval !== null && this.eval !== undefined) {
    output.writeFieldBegin('eval', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.eval.length);
    for (var iter87 in this.eval)
    {
      if (this.eval.hasOwnProperty(iter87))
      {
        iter87 = this.eval[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGroupByInputT = function(args) {
  this.source = null;
  this.dest = null;
  this.eval = null;
  this.newKeyField = null;
  this.includeSample = null;
  this.icv = null;
  if (args) {
    if (args.source !== undefined) {
      this.source = args.source;
    }
    if (args.dest !== undefined) {
      this.dest = args.dest;
    }
    if (args.eval !== undefined) {
      this.eval = args.eval;
    }
    if (args.newKeyField !== undefined) {
      this.newKeyField = args.newKeyField;
    }
    if (args.includeSample !== undefined) {
      this.includeSample = args.includeSample;
    }
    if (args.icv !== undefined) {
      this.icv = args.icv;
    }
  }
};
XcalarApiGroupByInputT.prototype = {};
XcalarApiGroupByInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dest = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.eval = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = new XcalarApiEvalT();
          elem94.read(input);
          this.eval.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.newKeyField = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.includeSample = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.icv = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGroupByInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGroupByInputT');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 1);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.dest !== null && this.dest !== undefined) {
    output.writeFieldBegin('dest', Thrift.Type.STRING, 2);
    output.writeString(this.dest);
    output.writeFieldEnd();
  }
  if (this.eval !== null && this.eval !== undefined) {
    output.writeFieldBegin('eval', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.eval.length);
    for (var iter95 in this.eval)
    {
      if (this.eval.hasOwnProperty(iter95))
      {
        iter95 = this.eval[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.newKeyField !== null && this.newKeyField !== undefined) {
    output.writeFieldBegin('newKeyField', Thrift.Type.STRING, 4);
    output.writeString(this.newKeyField);
    output.writeFieldEnd();
  }
  if (this.includeSample !== null && this.includeSample !== undefined) {
    output.writeFieldBegin('includeSample', Thrift.Type.BOOL, 5);
    output.writeBool(this.includeSample);
    output.writeFieldEnd();
  }
  if (this.icv !== null && this.icv !== undefined) {
    output.writeFieldBegin('icv', Thrift.Type.BOOL, 6);
    output.writeBool(this.icv);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiAggregateInputT = function(args) {
  this.source = null;
  this.dest = null;
  this.eval = null;
  if (args) {
    if (args.source !== undefined) {
      this.source = args.source;
    }
    if (args.dest !== undefined) {
      this.dest = args.dest;
    }
    if (args.eval !== undefined) {
      this.eval = args.eval;
    }
  }
};
XcalarApiAggregateInputT.prototype = {};
XcalarApiAggregateInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dest = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.eval = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = new XcalarApiEvalT();
          elem102.read(input);
          this.eval.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiAggregateInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiAggregateInputT');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 1);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.dest !== null && this.dest !== undefined) {
    output.writeFieldBegin('dest', Thrift.Type.STRING, 2);
    output.writeString(this.dest);
    output.writeFieldEnd();
  }
  if (this.eval !== null && this.eval !== undefined) {
    output.writeFieldBegin('eval', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.eval.length);
    for (var iter103 in this.eval)
    {
      if (this.eval.hasOwnProperty(iter103))
      {
        iter103 = this.eval[iter103];
        iter103.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiRenameNodeInputT = function(args) {
  this.oldName = null;
  this.newName = null;
  if (args) {
    if (args.oldName !== undefined) {
      this.oldName = args.oldName;
    }
    if (args.newName !== undefined) {
      this.newName = args.newName;
    }
  }
};
XcalarApiRenameNodeInputT.prototype = {};
XcalarApiRenameNodeInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.oldName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.newName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiRenameNodeInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiRenameNodeInputT');
  if (this.oldName !== null && this.oldName !== undefined) {
    output.writeFieldBegin('oldName', Thrift.Type.STRING, 1);
    output.writeString(this.oldName);
    output.writeFieldEnd();
  }
  if (this.newName !== null && this.newName !== undefined) {
    output.writeFieldBegin('newName', Thrift.Type.STRING, 2);
    output.writeString(this.newName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiResultSetNextInputT = function(args) {
  this.resultSetId = null;
  this.numRecords = null;
  if (args) {
    if (args.resultSetId !== undefined) {
      this.resultSetId = args.resultSetId;
    }
    if (args.numRecords !== undefined) {
      this.numRecords = args.numRecords;
    }
  }
};
XcalarApiResultSetNextInputT.prototype = {};
XcalarApiResultSetNextInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.resultSetId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numRecords = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiResultSetNextInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiResultSetNextInputT');
  if (this.resultSetId !== null && this.resultSetId !== undefined) {
    output.writeFieldBegin('resultSetId', Thrift.Type.STRING, 1);
    output.writeString(this.resultSetId);
    output.writeFieldEnd();
  }
  if (this.numRecords !== null && this.numRecords !== undefined) {
    output.writeFieldBegin('numRecords', Thrift.Type.I64, 2);
    output.writeI64(this.numRecords);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiFreeResultSetInputT = function(args) {
  this.resultSetId = null;
  if (args) {
    if (args.resultSetId !== undefined) {
      this.resultSetId = args.resultSetId;
    }
  }
};
XcalarApiFreeResultSetInputT.prototype = {};
XcalarApiFreeResultSetInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.resultSetId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiFreeResultSetInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiFreeResultSetInputT');
  if (this.resultSetId !== null && this.resultSetId !== undefined) {
    output.writeFieldBegin('resultSetId', Thrift.Type.STRING, 1);
    output.writeString(this.resultSetId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiStatT = function(args) {
  this.statName = null;
  this.statValue = null;
  this.statType = null;
  this.groupId = null;
  if (args) {
    if (args.statName !== undefined) {
      this.statName = args.statName;
    }
    if (args.statValue !== undefined) {
      this.statValue = args.statValue;
    }
    if (args.statType !== undefined) {
      this.statType = args.statType;
    }
    if (args.groupId !== undefined) {
      this.groupId = args.groupId;
    }
  }
};
XcalarApiStatT.prototype = {};
XcalarApiStatT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.statName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.statValue = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.statType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.groupId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiStatT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiStatT');
  if (this.statName !== null && this.statName !== undefined) {
    output.writeFieldBegin('statName', Thrift.Type.STRING, 1);
    output.writeString(this.statName);
    output.writeFieldEnd();
  }
  if (this.statValue !== null && this.statValue !== undefined) {
    output.writeFieldBegin('statValue', Thrift.Type.I64, 2);
    output.writeI64(this.statValue);
    output.writeFieldEnd();
  }
  if (this.statType !== null && this.statType !== undefined) {
    output.writeFieldBegin('statType', Thrift.Type.I32, 3);
    output.writeI32(this.statType);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.I64, 4);
    output.writeI64(this.groupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiRenameMapT = function(args) {
  this.sourceColumn = null;
  this.destColumn = null;
  this.columnType = null;
  if (args) {
    if (args.sourceColumn !== undefined) {
      this.sourceColumn = args.sourceColumn;
    }
    if (args.destColumn !== undefined) {
      this.destColumn = args.destColumn;
    }
    if (args.columnType !== undefined) {
      this.columnType = args.columnType;
    }
  }
};
XcalarApiRenameMapT.prototype = {};
XcalarApiRenameMapT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sourceColumn = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.destColumn = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.columnType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiRenameMapT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiRenameMapT');
  if (this.sourceColumn !== null && this.sourceColumn !== undefined) {
    output.writeFieldBegin('sourceColumn', Thrift.Type.STRING, 1);
    output.writeString(this.sourceColumn);
    output.writeFieldEnd();
  }
  if (this.destColumn !== null && this.destColumn !== undefined) {
    output.writeFieldBegin('destColumn', Thrift.Type.STRING, 2);
    output.writeString(this.destColumn);
    output.writeFieldEnd();
  }
  if (this.columnType !== null && this.columnType !== undefined) {
    output.writeFieldBegin('columnType', Thrift.Type.STRING, 3);
    output.writeString(this.columnType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiJoinInputT = function(args) {
  this.source = null;
  this.dest = null;
  this.joinType = null;
  this.renameMap = null;
  if (args) {
    if (args.source !== undefined) {
      this.source = args.source;
    }
    if (args.dest !== undefined) {
      this.dest = args.dest;
    }
    if (args.joinType !== undefined) {
      this.joinType = args.joinType;
    }
    if (args.renameMap !== undefined) {
      this.renameMap = args.renameMap;
    }
  }
};
XcalarApiJoinInputT.prototype = {};
XcalarApiJoinInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.source = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = input.readString().value;
          this.source.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dest = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.joinType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size111 = 0;
        var _rtmp3115;
        this.renameMap = [];
        var _etype114 = 0;
        _rtmp3115 = input.readListBegin();
        _etype114 = _rtmp3115.etype;
        _size111 = _rtmp3115.size;
        for (var _i116 = 0; _i116 < _size111; ++_i116)
        {
          var elem117 = null;
          var _size118 = 0;
          var _rtmp3122;
          elem117 = [];
          var _etype121 = 0;
          _rtmp3122 = input.readListBegin();
          _etype121 = _rtmp3122.etype;
          _size118 = _rtmp3122.size;
          for (var _i123 = 0; _i123 < _size118; ++_i123)
          {
            var elem124 = null;
            elem124 = new XcalarApiRenameMapT();
            elem124.read(input);
            elem117.push(elem124);
          }
          input.readListEnd();
          this.renameMap.push(elem117);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiJoinInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiJoinInputT');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.source.length);
    for (var iter125 in this.source)
    {
      if (this.source.hasOwnProperty(iter125))
      {
        iter125 = this.source[iter125];
        output.writeString(iter125);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dest !== null && this.dest !== undefined) {
    output.writeFieldBegin('dest', Thrift.Type.STRING, 2);
    output.writeString(this.dest);
    output.writeFieldEnd();
  }
  if (this.joinType !== null && this.joinType !== undefined) {
    output.writeFieldBegin('joinType', Thrift.Type.STRING, 3);
    output.writeString(this.joinType);
    output.writeFieldEnd();
  }
  if (this.renameMap !== null && this.renameMap !== undefined) {
    output.writeFieldBegin('renameMap', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.LIST, this.renameMap.length);
    for (var iter126 in this.renameMap)
    {
      if (this.renameMap.hasOwnProperty(iter126))
      {
        iter126 = this.renameMap[iter126];
        output.writeListBegin(Thrift.Type.STRUCT, iter126.length);
        for (var iter127 in iter126)
        {
          if (iter126.hasOwnProperty(iter127))
          {
            iter127 = iter126[iter127];
            iter127.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUnionInputT = function(args) {
  this.source = null;
  this.dest = null;
  this.dedup = null;
  this.renameMap = null;
  if (args) {
    if (args.source !== undefined) {
      this.source = args.source;
    }
    if (args.dest !== undefined) {
      this.dest = args.dest;
    }
    if (args.dedup !== undefined) {
      this.dedup = args.dedup;
    }
    if (args.renameMap !== undefined) {
      this.renameMap = args.renameMap;
    }
  }
};
XcalarApiUnionInputT.prototype = {};
XcalarApiUnionInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size128 = 0;
        var _rtmp3132;
        this.source = [];
        var _etype131 = 0;
        _rtmp3132 = input.readListBegin();
        _etype131 = _rtmp3132.etype;
        _size128 = _rtmp3132.size;
        for (var _i133 = 0; _i133 < _size128; ++_i133)
        {
          var elem134 = null;
          elem134 = input.readString().value;
          this.source.push(elem134);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dest = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.dedup = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size135 = 0;
        var _rtmp3139;
        this.renameMap = [];
        var _etype138 = 0;
        _rtmp3139 = input.readListBegin();
        _etype138 = _rtmp3139.etype;
        _size135 = _rtmp3139.size;
        for (var _i140 = 0; _i140 < _size135; ++_i140)
        {
          var elem141 = null;
          var _size142 = 0;
          var _rtmp3146;
          elem141 = [];
          var _etype145 = 0;
          _rtmp3146 = input.readListBegin();
          _etype145 = _rtmp3146.etype;
          _size142 = _rtmp3146.size;
          for (var _i147 = 0; _i147 < _size142; ++_i147)
          {
            var elem148 = null;
            elem148 = new XcalarApiRenameMapT();
            elem148.read(input);
            elem141.push(elem148);
          }
          input.readListEnd();
          this.renameMap.push(elem141);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUnionInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUnionInputT');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.source.length);
    for (var iter149 in this.source)
    {
      if (this.source.hasOwnProperty(iter149))
      {
        iter149 = this.source[iter149];
        output.writeString(iter149);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dest !== null && this.dest !== undefined) {
    output.writeFieldBegin('dest', Thrift.Type.STRING, 2);
    output.writeString(this.dest);
    output.writeFieldEnd();
  }
  if (this.dedup !== null && this.dedup !== undefined) {
    output.writeFieldBegin('dedup', Thrift.Type.BOOL, 3);
    output.writeBool(this.dedup);
    output.writeFieldEnd();
  }
  if (this.renameMap !== null && this.renameMap !== undefined) {
    output.writeFieldBegin('renameMap', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.LIST, this.renameMap.length);
    for (var iter150 in this.renameMap)
    {
      if (this.renameMap.hasOwnProperty(iter150))
      {
        iter150 = this.renameMap[iter150];
        output.writeListBegin(Thrift.Type.STRUCT, iter150.length);
        for (var iter151 in iter150)
        {
          if (iter150.hasOwnProperty(iter151))
          {
            iter151 = iter150[iter151];
            iter151.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiResultSetAbsoluteInputT = function(args) {
  this.resultSetId = null;
  this.position = null;
  if (args) {
    if (args.resultSetId !== undefined) {
      this.resultSetId = args.resultSetId;
    }
    if (args.position !== undefined) {
      this.position = args.position;
    }
  }
};
XcalarApiResultSetAbsoluteInputT.prototype = {};
XcalarApiResultSetAbsoluteInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.resultSetId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.position = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiResultSetAbsoluteInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiResultSetAbsoluteInputT');
  if (this.resultSetId !== null && this.resultSetId !== undefined) {
    output.writeFieldBegin('resultSetId', Thrift.Type.STRING, 1);
    output.writeString(this.resultSetId);
    output.writeFieldEnd();
  }
  if (this.position !== null && this.position !== undefined) {
    output.writeFieldBegin('position', Thrift.Type.I64, 2);
    output.writeI64(this.position);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiParameterT = function(args) {
  this.paramName = null;
  this.paramValue = null;
  if (args) {
    if (args.paramName !== undefined) {
      this.paramName = args.paramName;
    }
    if (args.paramValue !== undefined) {
      this.paramValue = args.paramValue;
    }
  }
};
XcalarApiParameterT.prototype = {};
XcalarApiParameterT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.paramName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.paramValue = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiParameterT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiParameterT');
  if (this.paramName !== null && this.paramName !== undefined) {
    output.writeFieldBegin('paramName', Thrift.Type.STRING, 1);
    output.writeString(this.paramName);
    output.writeFieldEnd();
  }
  if (this.paramValue !== null && this.paramValue !== undefined) {
    output.writeFieldBegin('paramValue', Thrift.Type.STRING, 2);
    output.writeString(this.paramValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiParamLoadT = function(args) {
  this.datasetUrl = null;
  this.namePattern = null;
  if (args) {
    if (args.datasetUrl !== undefined) {
      this.datasetUrl = args.datasetUrl;
    }
    if (args.namePattern !== undefined) {
      this.namePattern = args.namePattern;
    }
  }
};
XcalarApiParamLoadT.prototype = {};
XcalarApiParamLoadT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.datasetUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.namePattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiParamLoadT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiParamLoadT');
  if (this.datasetUrl !== null && this.datasetUrl !== undefined) {
    output.writeFieldBegin('datasetUrl', Thrift.Type.STRING, 1);
    output.writeString(this.datasetUrl);
    output.writeFieldEnd();
  }
  if (this.namePattern !== null && this.namePattern !== undefined) {
    output.writeFieldBegin('namePattern', Thrift.Type.STRING, 2);
    output.writeString(this.namePattern);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiParamFilterT = function(args) {
  this.filterStr = null;
  if (args) {
    if (args.filterStr !== undefined) {
      this.filterStr = args.filterStr;
    }
  }
};
XcalarApiParamFilterT.prototype = {};
XcalarApiParamFilterT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filterStr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiParamFilterT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiParamFilterT');
  if (this.filterStr !== null && this.filterStr !== undefined) {
    output.writeFieldBegin('filterStr', Thrift.Type.STRING, 1);
    output.writeString(this.filterStr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiParamExportT = function(args) {
  this.fileName = null;
  this.targetName = null;
  this.targetType = null;
  if (args) {
    if (args.fileName !== undefined) {
      this.fileName = args.fileName;
    }
    if (args.targetName !== undefined) {
      this.targetName = args.targetName;
    }
    if (args.targetType !== undefined) {
      this.targetType = args.targetType;
    }
  }
};
XcalarApiParamExportT.prototype = {};
XcalarApiParamExportT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fileName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.targetName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.targetType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiParamExportT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiParamExportT');
  if (this.fileName !== null && this.fileName !== undefined) {
    output.writeFieldBegin('fileName', Thrift.Type.STRING, 1);
    output.writeString(this.fileName);
    output.writeFieldEnd();
  }
  if (this.targetName !== null && this.targetName !== undefined) {
    output.writeFieldBegin('targetName', Thrift.Type.STRING, 2);
    output.writeString(this.targetName);
    output.writeFieldEnd();
  }
  if (this.targetType !== null && this.targetType !== undefined) {
    output.writeFieldBegin('targetType', Thrift.Type.I32, 3);
    output.writeI32(this.targetType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiParamInputArgsT = function(args) {
  this.paramLoad = null;
  this.paramFilter = null;
  this.paramExport = null;
  if (args) {
    if (args.paramLoad !== undefined) {
      this.paramLoad = args.paramLoad;
    }
    if (args.paramFilter !== undefined) {
      this.paramFilter = args.paramFilter;
    }
    if (args.paramExport !== undefined) {
      this.paramExport = args.paramExport;
    }
  }
};
XcalarApiParamInputArgsT.prototype = {};
XcalarApiParamInputArgsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.paramLoad = new XcalarApiParamLoadT();
        this.paramLoad.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.paramFilter = new XcalarApiParamFilterT();
        this.paramFilter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.paramExport = new XcalarApiParamExportT();
        this.paramExport.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiParamInputArgsT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiParamInputArgsT');
  if (this.paramLoad !== null && this.paramLoad !== undefined) {
    output.writeFieldBegin('paramLoad', Thrift.Type.STRUCT, 1);
    this.paramLoad.write(output);
    output.writeFieldEnd();
  }
  if (this.paramFilter !== null && this.paramFilter !== undefined) {
    output.writeFieldBegin('paramFilter', Thrift.Type.STRUCT, 2);
    this.paramFilter.write(output);
    output.writeFieldEnd();
  }
  if (this.paramExport !== null && this.paramExport !== undefined) {
    output.writeFieldBegin('paramExport', Thrift.Type.STRUCT, 3);
    this.paramExport.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiParamInputT = function(args) {
  this.paramType = null;
  this.paramInputArgs = null;
  if (args) {
    if (args.paramType !== undefined) {
      this.paramType = args.paramType;
    }
    if (args.paramInputArgs !== undefined) {
      this.paramInputArgs = args.paramInputArgs;
    }
  }
};
XcalarApiParamInputT.prototype = {};
XcalarApiParamInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.paramType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.paramInputArgs = new XcalarApiParamInputArgsT();
        this.paramInputArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiParamInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiParamInputT');
  if (this.paramType !== null && this.paramType !== undefined) {
    output.writeFieldBegin('paramType', Thrift.Type.I32, 1);
    output.writeI32(this.paramType);
    output.writeFieldEnd();
  }
  if (this.paramInputArgs !== null && this.paramInputArgs !== undefined) {
    output.writeFieldBegin('paramInputArgs', Thrift.Type.STRUCT, 2);
    this.paramInputArgs.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUpdateRetinaInputT = function(args) {
  this.retinaName = null;
  this.dagNodeId = null;
  this.paramInput = null;
  if (args) {
    if (args.retinaName !== undefined) {
      this.retinaName = args.retinaName;
    }
    if (args.dagNodeId !== undefined) {
      this.dagNodeId = args.dagNodeId;
    }
    if (args.paramInput !== undefined) {
      this.paramInput = args.paramInput;
    }
  }
};
XcalarApiUpdateRetinaInputT.prototype = {};
XcalarApiUpdateRetinaInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.retinaName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dagNodeId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.paramInput = new XcalarApiParamInputT();
        this.paramInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUpdateRetinaInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUpdateRetinaInputT');
  if (this.retinaName !== null && this.retinaName !== undefined) {
    output.writeFieldBegin('retinaName', Thrift.Type.STRING, 1);
    output.writeString(this.retinaName);
    output.writeFieldEnd();
  }
  if (this.dagNodeId !== null && this.dagNodeId !== undefined) {
    output.writeFieldBegin('dagNodeId', Thrift.Type.STRING, 2);
    output.writeString(this.dagNodeId);
    output.writeFieldEnd();
  }
  if (this.paramInput !== null && this.paramInput !== undefined) {
    output.writeFieldBegin('paramInput', Thrift.Type.STRUCT, 3);
    this.paramInput.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUpdateRetinaExportInputT = function(args) {
  this.retinaName = null;
  this.dagNodeId = null;
  this.meta = null;
  if (args) {
    if (args.retinaName !== undefined) {
      this.retinaName = args.retinaName;
    }
    if (args.dagNodeId !== undefined) {
      this.dagNodeId = args.dagNodeId;
    }
    if (args.meta !== undefined) {
      this.meta = args.meta;
    }
  }
};
XcalarApiUpdateRetinaExportInputT.prototype = {};
XcalarApiUpdateRetinaExportInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.retinaName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dagNodeId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.meta = new ExExportMetaT();
        this.meta.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUpdateRetinaExportInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUpdateRetinaExportInputT');
  if (this.retinaName !== null && this.retinaName !== undefined) {
    output.writeFieldBegin('retinaName', Thrift.Type.STRING, 1);
    output.writeString(this.retinaName);
    output.writeFieldEnd();
  }
  if (this.dagNodeId !== null && this.dagNodeId !== undefined) {
    output.writeFieldBegin('dagNodeId', Thrift.Type.STRING, 2);
    output.writeString(this.dagNodeId);
    output.writeFieldEnd();
  }
  if (this.meta !== null && this.meta !== undefined) {
    output.writeFieldBegin('meta', Thrift.Type.STRUCT, 3);
    this.meta.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiAddParameterToRetinaInputT = function(args) {
  this.retinaName = null;
  this.parameter = null;
  if (args) {
    if (args.retinaName !== undefined) {
      this.retinaName = args.retinaName;
    }
    if (args.parameter !== undefined) {
      this.parameter = args.parameter;
    }
  }
};
XcalarApiAddParameterToRetinaInputT.prototype = {};
XcalarApiAddParameterToRetinaInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.retinaName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.parameter = new XcalarApiParameterT();
        this.parameter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiAddParameterToRetinaInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiAddParameterToRetinaInputT');
  if (this.retinaName !== null && this.retinaName !== undefined) {
    output.writeFieldBegin('retinaName', Thrift.Type.STRING, 1);
    output.writeString(this.retinaName);
    output.writeFieldEnd();
  }
  if (this.parameter !== null && this.parameter !== undefined) {
    output.writeFieldBegin('parameter', Thrift.Type.STRUCT, 2);
    this.parameter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListParametersInRetinaOutputT = function(args) {
  this.numParameters = null;
  this.parameters = null;
  if (args) {
    if (args.numParameters !== undefined) {
      this.numParameters = args.numParameters;
    }
    if (args.parameters !== undefined) {
      this.parameters = args.parameters;
    }
  }
};
XcalarApiListParametersInRetinaOutputT.prototype = {};
XcalarApiListParametersInRetinaOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numParameters = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size152 = 0;
        var _rtmp3156;
        this.parameters = [];
        var _etype155 = 0;
        _rtmp3156 = input.readListBegin();
        _etype155 = _rtmp3156.etype;
        _size152 = _rtmp3156.size;
        for (var _i157 = 0; _i157 < _size152; ++_i157)
        {
          var elem158 = null;
          elem158 = new XcalarApiParameterT();
          elem158.read(input);
          this.parameters.push(elem158);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListParametersInRetinaOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListParametersInRetinaOutputT');
  if (this.numParameters !== null && this.numParameters !== undefined) {
    output.writeFieldBegin('numParameters', Thrift.Type.I64, 1);
    output.writeI64(this.numParameters);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.parameters.length);
    for (var iter159 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(iter159))
      {
        iter159 = this.parameters[iter159];
        iter159.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiExecuteRetinaInputT = function(args) {
  this.retinaName = null;
  this.queryName = null;
  this.dest = null;
  this.parameters = null;
  if (args) {
    if (args.retinaName !== undefined) {
      this.retinaName = args.retinaName;
    }
    if (args.queryName !== undefined) {
      this.queryName = args.queryName;
    }
    if (args.dest !== undefined) {
      this.dest = args.dest;
    }
    if (args.parameters !== undefined) {
      this.parameters = args.parameters;
    }
  }
};
XcalarApiExecuteRetinaInputT.prototype = {};
XcalarApiExecuteRetinaInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.retinaName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.queryName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dest = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size160 = 0;
        var _rtmp3164;
        this.parameters = [];
        var _etype163 = 0;
        _rtmp3164 = input.readListBegin();
        _etype163 = _rtmp3164.etype;
        _size160 = _rtmp3164.size;
        for (var _i165 = 0; _i165 < _size160; ++_i165)
        {
          var elem166 = null;
          elem166 = new XcalarApiParameterT();
          elem166.read(input);
          this.parameters.push(elem166);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiExecuteRetinaInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiExecuteRetinaInputT');
  if (this.retinaName !== null && this.retinaName !== undefined) {
    output.writeFieldBegin('retinaName', Thrift.Type.STRING, 1);
    output.writeString(this.retinaName);
    output.writeFieldEnd();
  }
  if (this.queryName !== null && this.queryName !== undefined) {
    output.writeFieldBegin('queryName', Thrift.Type.STRING, 2);
    output.writeString(this.queryName);
    output.writeFieldEnd();
  }
  if (this.dest !== null && this.dest !== undefined) {
    output.writeFieldBegin('dest', Thrift.Type.STRING, 3);
    output.writeString(this.dest);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.parameters.length);
    for (var iter167 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(iter167))
      {
        iter167 = this.parameters[iter167];
        iter167.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetStatOutputT = function(args) {
  this.numStats = null;
  this.truncated = null;
  this.stats = null;
  if (args) {
    if (args.numStats !== undefined) {
      this.numStats = args.numStats;
    }
    if (args.truncated !== undefined) {
      this.truncated = args.truncated;
    }
    if (args.stats !== undefined) {
      this.stats = args.stats;
    }
  }
};
XcalarApiGetStatOutputT.prototype = {};
XcalarApiGetStatOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numStats = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.truncated = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size168 = 0;
        var _rtmp3172;
        this.stats = [];
        var _etype171 = 0;
        _rtmp3172 = input.readListBegin();
        _etype171 = _rtmp3172.etype;
        _size168 = _rtmp3172.size;
        for (var _i173 = 0; _i173 < _size168; ++_i173)
        {
          var elem174 = null;
          elem174 = new XcalarApiStatT();
          elem174.read(input);
          this.stats.push(elem174);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetStatOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetStatOutputT');
  if (this.numStats !== null && this.numStats !== undefined) {
    output.writeFieldBegin('numStats', Thrift.Type.I64, 1);
    output.writeI64(this.numStats);
    output.writeFieldEnd();
  }
  if (this.truncated !== null && this.truncated !== undefined) {
    output.writeFieldBegin('truncated', Thrift.Type.BOOL, 2);
    output.writeBool(this.truncated);
    output.writeFieldEnd();
  }
  if (this.stats !== null && this.stats !== undefined) {
    output.writeFieldBegin('stats', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.stats.length);
    for (var iter175 in this.stats)
    {
      if (this.stats.hasOwnProperty(iter175))
      {
        iter175 = this.stats[iter175];
        iter175.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiStatByGroupIdInputT = function(args) {
  this.numNodeId = null;
  this.nodeId = null;
  this.numGroupId = null;
  this.groupId = null;
  if (args) {
    if (args.numNodeId !== undefined) {
      this.numNodeId = args.numNodeId;
    }
    if (args.nodeId !== undefined) {
      this.nodeId = args.nodeId;
    }
    if (args.numGroupId !== undefined) {
      this.numGroupId = args.numGroupId;
    }
    if (args.groupId !== undefined) {
      this.groupId = args.groupId;
    }
  }
};
XcalarApiStatByGroupIdInputT.prototype = {};
XcalarApiStatByGroupIdInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numNodeId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size176 = 0;
        var _rtmp3180;
        this.nodeId = [];
        var _etype179 = 0;
        _rtmp3180 = input.readListBegin();
        _etype179 = _rtmp3180.etype;
        _size176 = _rtmp3180.size;
        for (var _i181 = 0; _i181 < _size176; ++_i181)
        {
          var elem182 = null;
          elem182 = input.readI32().value;
          this.nodeId.push(elem182);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numGroupId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size183 = 0;
        var _rtmp3187;
        this.groupId = [];
        var _etype186 = 0;
        _rtmp3187 = input.readListBegin();
        _etype186 = _rtmp3187.etype;
        _size183 = _rtmp3187.size;
        for (var _i188 = 0; _i188 < _size183; ++_i188)
        {
          var elem189 = null;
          elem189 = input.readI64().value;
          this.groupId.push(elem189);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiStatByGroupIdInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiStatByGroupIdInputT');
  if (this.numNodeId !== null && this.numNodeId !== undefined) {
    output.writeFieldBegin('numNodeId', Thrift.Type.I64, 1);
    output.writeI64(this.numNodeId);
    output.writeFieldEnd();
  }
  if (this.nodeId !== null && this.nodeId !== undefined) {
    output.writeFieldBegin('nodeId', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.nodeId.length);
    for (var iter190 in this.nodeId)
    {
      if (this.nodeId.hasOwnProperty(iter190))
      {
        iter190 = this.nodeId[iter190];
        output.writeI32(iter190);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.numGroupId !== null && this.numGroupId !== undefined) {
    output.writeFieldBegin('numGroupId', Thrift.Type.I64, 3);
    output.writeI64(this.numGroupId);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.I64, this.groupId.length);
    for (var iter191 in this.groupId)
    {
      if (this.groupId.hasOwnProperty(iter191))
      {
        iter191 = this.groupId[iter191];
        output.writeI64(iter191);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiMapInputT = function(args) {
  this.source = null;
  this.dest = null;
  this.eval = null;
  this.icv = null;
  if (args) {
    if (args.source !== undefined) {
      this.source = args.source;
    }
    if (args.dest !== undefined) {
      this.dest = args.dest;
    }
    if (args.eval !== undefined) {
      this.eval = args.eval;
    }
    if (args.icv !== undefined) {
      this.icv = args.icv;
    }
  }
};
XcalarApiMapInputT.prototype = {};
XcalarApiMapInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dest = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size192 = 0;
        var _rtmp3196;
        this.eval = [];
        var _etype195 = 0;
        _rtmp3196 = input.readListBegin();
        _etype195 = _rtmp3196.etype;
        _size192 = _rtmp3196.size;
        for (var _i197 = 0; _i197 < _size192; ++_i197)
        {
          var elem198 = null;
          elem198 = new XcalarApiEvalT();
          elem198.read(input);
          this.eval.push(elem198);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.icv = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiMapInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiMapInputT');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 1);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.dest !== null && this.dest !== undefined) {
    output.writeFieldBegin('dest', Thrift.Type.STRING, 2);
    output.writeString(this.dest);
    output.writeFieldEnd();
  }
  if (this.eval !== null && this.eval !== undefined) {
    output.writeFieldBegin('eval', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.eval.length);
    for (var iter199 in this.eval)
    {
      if (this.eval.hasOwnProperty(iter199))
      {
        iter199 = this.eval[iter199];
        iter199.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.icv !== null && this.icv !== undefined) {
    output.writeFieldBegin('icv', Thrift.Type.BOOL, 4);
    output.writeBool(this.icv);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetRowNumInputT = function(args) {
  this.source = null;
  this.dest = null;
  this.newField = null;
  if (args) {
    if (args.source !== undefined) {
      this.source = args.source;
    }
    if (args.dest !== undefined) {
      this.dest = args.dest;
    }
    if (args.newField !== undefined) {
      this.newField = args.newField;
    }
  }
};
XcalarApiGetRowNumInputT.prototype = {};
XcalarApiGetRowNumInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dest = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.newField = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetRowNumInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetRowNumInputT');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 1);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.dest !== null && this.dest !== undefined) {
    output.writeFieldBegin('dest', Thrift.Type.STRING, 2);
    output.writeString(this.dest);
    output.writeFieldEnd();
  }
  if (this.newField !== null && this.newField !== undefined) {
    output.writeFieldBegin('newField', Thrift.Type.STRING, 3);
    output.writeString(this.newField);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiQueryNameInputT = function(args) {
  this.queryName = null;
  if (args) {
    if (args.queryName !== undefined) {
      this.queryName = args.queryName;
    }
  }
};
XcalarApiQueryNameInputT.prototype = {};
XcalarApiQueryNameInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queryName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiQueryNameInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiQueryNameInputT');
  if (this.queryName !== null && this.queryName !== undefined) {
    output.writeFieldBegin('queryName', Thrift.Type.STRING, 1);
    output.writeString(this.queryName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiStartNodesInputT = function(args) {
  this.numNodes = null;
  if (args) {
    if (args.numNodes !== undefined) {
      this.numNodes = args.numNodes;
    }
  }
};
XcalarApiStartNodesInputT.prototype = {};
XcalarApiStartNodesInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numNodes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiStartNodesInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiStartNodesInputT');
  if (this.numNodes !== null && this.numNodes !== undefined) {
    output.writeFieldBegin('numNodes', Thrift.Type.I64, 1);
    output.writeI64(this.numNodes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarStatGroupInfoT = function(args) {
  this.groupIdNum = null;
  this.totalSingleStats = null;
  this.statsGroupName = null;
  if (args) {
    if (args.groupIdNum !== undefined) {
      this.groupIdNum = args.groupIdNum;
    }
    if (args.totalSingleStats !== undefined) {
      this.totalSingleStats = args.totalSingleStats;
    }
    if (args.statsGroupName !== undefined) {
      this.statsGroupName = args.statsGroupName;
    }
  }
};
XcalarStatGroupInfoT.prototype = {};
XcalarStatGroupInfoT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.groupIdNum = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.totalSingleStats = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.statsGroupName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarStatGroupInfoT.prototype.write = function(output) {
  output.writeStructBegin('XcalarStatGroupInfoT');
  if (this.groupIdNum !== null && this.groupIdNum !== undefined) {
    output.writeFieldBegin('groupIdNum', Thrift.Type.I64, 1);
    output.writeI64(this.groupIdNum);
    output.writeFieldEnd();
  }
  if (this.totalSingleStats !== null && this.totalSingleStats !== undefined) {
    output.writeFieldBegin('totalSingleStats', Thrift.Type.I64, 2);
    output.writeI64(this.totalSingleStats);
    output.writeFieldEnd();
  }
  if (this.statsGroupName !== null && this.statsGroupName !== undefined) {
    output.writeFieldBegin('statsGroupName', Thrift.Type.STRING, 3);
    output.writeString(this.statsGroupName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetStatGroupIdMapOutputT = function(args) {
  this.numGroupNames = null;
  this.truncated = null;
  this.groupNameInfoArray = null;
  if (args) {
    if (args.numGroupNames !== undefined) {
      this.numGroupNames = args.numGroupNames;
    }
    if (args.truncated !== undefined) {
      this.truncated = args.truncated;
    }
    if (args.groupNameInfoArray !== undefined) {
      this.groupNameInfoArray = args.groupNameInfoArray;
    }
  }
};
XcalarApiGetStatGroupIdMapOutputT.prototype = {};
XcalarApiGetStatGroupIdMapOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numGroupNames = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.truncated = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size200 = 0;
        var _rtmp3204;
        this.groupNameInfoArray = [];
        var _etype203 = 0;
        _rtmp3204 = input.readListBegin();
        _etype203 = _rtmp3204.etype;
        _size200 = _rtmp3204.size;
        for (var _i205 = 0; _i205 < _size200; ++_i205)
        {
          var elem206 = null;
          elem206 = new XcalarStatGroupInfoT();
          elem206.read(input);
          this.groupNameInfoArray.push(elem206);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetStatGroupIdMapOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetStatGroupIdMapOutputT');
  if (this.numGroupNames !== null && this.numGroupNames !== undefined) {
    output.writeFieldBegin('numGroupNames', Thrift.Type.I64, 1);
    output.writeI64(this.numGroupNames);
    output.writeFieldEnd();
  }
  if (this.truncated !== null && this.truncated !== undefined) {
    output.writeFieldBegin('truncated', Thrift.Type.BOOL, 2);
    output.writeBool(this.truncated);
    output.writeFieldEnd();
  }
  if (this.groupNameInfoArray !== null && this.groupNameInfoArray !== undefined) {
    output.writeFieldBegin('groupNameInfoArray', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.groupNameInfoArray.length);
    for (var iter207 in this.groupNameInfoArray)
    {
      if (this.groupNameInfoArray.hasOwnProperty(iter207))
      {
        iter207 = this.groupNameInfoArray[iter207];
        iter207.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiTableMetaT = function(args) {
  this.numRows = null;
  this.numPages = null;
  this.numSlots = null;
  this.size = null;
  this.numRowsPerSlot = null;
  this.numPagesPerSlot = null;
  this.xdbPageConsumedInBytes = null;
  this.xdbPageAllocatedInBytes = null;
  this.numTransPageSent = null;
  this.numTransPageRecv = null;
  if (args) {
    if (args.numRows !== undefined) {
      this.numRows = args.numRows;
    }
    if (args.numPages !== undefined) {
      this.numPages = args.numPages;
    }
    if (args.numSlots !== undefined) {
      this.numSlots = args.numSlots;
    }
    if (args.size !== undefined) {
      this.size = args.size;
    }
    if (args.numRowsPerSlot !== undefined) {
      this.numRowsPerSlot = args.numRowsPerSlot;
    }
    if (args.numPagesPerSlot !== undefined) {
      this.numPagesPerSlot = args.numPagesPerSlot;
    }
    if (args.xdbPageConsumedInBytes !== undefined) {
      this.xdbPageConsumedInBytes = args.xdbPageConsumedInBytes;
    }
    if (args.xdbPageAllocatedInBytes !== undefined) {
      this.xdbPageAllocatedInBytes = args.xdbPageAllocatedInBytes;
    }
    if (args.numTransPageSent !== undefined) {
      this.numTransPageSent = args.numTransPageSent;
    }
    if (args.numTransPageRecv !== undefined) {
      this.numTransPageRecv = args.numTransPageRecv;
    }
  }
};
XcalarApiTableMetaT.prototype = {};
XcalarApiTableMetaT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numRows = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numPages = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numSlots = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.size = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size208 = 0;
        var _rtmp3212;
        this.numRowsPerSlot = [];
        var _etype211 = 0;
        _rtmp3212 = input.readListBegin();
        _etype211 = _rtmp3212.etype;
        _size208 = _rtmp3212.size;
        for (var _i213 = 0; _i213 < _size208; ++_i213)
        {
          var elem214 = null;
          elem214 = input.readI64().value;
          this.numRowsPerSlot.push(elem214);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size215 = 0;
        var _rtmp3219;
        this.numPagesPerSlot = [];
        var _etype218 = 0;
        _rtmp3219 = input.readListBegin();
        _etype218 = _rtmp3219.etype;
        _size215 = _rtmp3219.size;
        for (var _i220 = 0; _i220 < _size215; ++_i220)
        {
          var elem221 = null;
          elem221 = input.readI64().value;
          this.numPagesPerSlot.push(elem221);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.xdbPageConsumedInBytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.xdbPageAllocatedInBytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.numTransPageSent = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.numTransPageRecv = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiTableMetaT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiTableMetaT');
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I64, 1);
    output.writeI64(this.numRows);
    output.writeFieldEnd();
  }
  if (this.numPages !== null && this.numPages !== undefined) {
    output.writeFieldBegin('numPages', Thrift.Type.I64, 2);
    output.writeI64(this.numPages);
    output.writeFieldEnd();
  }
  if (this.numSlots !== null && this.numSlots !== undefined) {
    output.writeFieldBegin('numSlots', Thrift.Type.I64, 3);
    output.writeI64(this.numSlots);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I64, 4);
    output.writeI64(this.size);
    output.writeFieldEnd();
  }
  if (this.numRowsPerSlot !== null && this.numRowsPerSlot !== undefined) {
    output.writeFieldBegin('numRowsPerSlot', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I64, this.numRowsPerSlot.length);
    for (var iter222 in this.numRowsPerSlot)
    {
      if (this.numRowsPerSlot.hasOwnProperty(iter222))
      {
        iter222 = this.numRowsPerSlot[iter222];
        output.writeI64(iter222);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.numPagesPerSlot !== null && this.numPagesPerSlot !== undefined) {
    output.writeFieldBegin('numPagesPerSlot', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.I64, this.numPagesPerSlot.length);
    for (var iter223 in this.numPagesPerSlot)
    {
      if (this.numPagesPerSlot.hasOwnProperty(iter223))
      {
        iter223 = this.numPagesPerSlot[iter223];
        output.writeI64(iter223);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.xdbPageConsumedInBytes !== null && this.xdbPageConsumedInBytes !== undefined) {
    output.writeFieldBegin('xdbPageConsumedInBytes', Thrift.Type.I64, 7);
    output.writeI64(this.xdbPageConsumedInBytes);
    output.writeFieldEnd();
  }
  if (this.xdbPageAllocatedInBytes !== null && this.xdbPageAllocatedInBytes !== undefined) {
    output.writeFieldBegin('xdbPageAllocatedInBytes', Thrift.Type.I64, 8);
    output.writeI64(this.xdbPageAllocatedInBytes);
    output.writeFieldEnd();
  }
  if (this.numTransPageSent !== null && this.numTransPageSent !== undefined) {
    output.writeFieldBegin('numTransPageSent', Thrift.Type.I64, 9);
    output.writeI64(this.numTransPageSent);
    output.writeFieldEnd();
  }
  if (this.numTransPageRecv !== null && this.numTransPageRecv !== undefined) {
    output.writeFieldBegin('numTransPageRecv', Thrift.Type.I64, 10);
    output.writeI64(this.numTransPageRecv);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetTableMetaOutputT = function(args) {
  this.numDatasets = null;
  this.datasets = null;
  this.numResultSets = null;
  this.resultSetIds = null;
  this.numKeys = null;
  this.keyAttr = null;
  this.numValues = null;
  this.numImmediates = null;
  this.valueAttrs = null;
  this.ordering = null;
  this.numMetas = null;
  this.metas = null;
  if (args) {
    if (args.numDatasets !== undefined) {
      this.numDatasets = args.numDatasets;
    }
    if (args.datasets !== undefined) {
      this.datasets = args.datasets;
    }
    if (args.numResultSets !== undefined) {
      this.numResultSets = args.numResultSets;
    }
    if (args.resultSetIds !== undefined) {
      this.resultSetIds = args.resultSetIds;
    }
    if (args.numKeys !== undefined) {
      this.numKeys = args.numKeys;
    }
    if (args.keyAttr !== undefined) {
      this.keyAttr = args.keyAttr;
    }
    if (args.numValues !== undefined) {
      this.numValues = args.numValues;
    }
    if (args.numImmediates !== undefined) {
      this.numImmediates = args.numImmediates;
    }
    if (args.valueAttrs !== undefined) {
      this.valueAttrs = args.valueAttrs;
    }
    if (args.ordering !== undefined) {
      this.ordering = args.ordering;
    }
    if (args.numMetas !== undefined) {
      this.numMetas = args.numMetas;
    }
    if (args.metas !== undefined) {
      this.metas = args.metas;
    }
  }
};
XcalarApiGetTableMetaOutputT.prototype = {};
XcalarApiGetTableMetaOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numDatasets = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size224 = 0;
        var _rtmp3228;
        this.datasets = [];
        var _etype227 = 0;
        _rtmp3228 = input.readListBegin();
        _etype227 = _rtmp3228.etype;
        _size224 = _rtmp3228.size;
        for (var _i229 = 0; _i229 < _size224; ++_i229)
        {
          var elem230 = null;
          elem230 = input.readString().value;
          this.datasets.push(elem230);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numResultSets = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size231 = 0;
        var _rtmp3235;
        this.resultSetIds = [];
        var _etype234 = 0;
        _rtmp3235 = input.readListBegin();
        _etype234 = _rtmp3235.etype;
        _size231 = _rtmp3235.size;
        for (var _i236 = 0; _i236 < _size231; ++_i236)
        {
          var elem237 = null;
          elem237 = input.readString().value;
          this.resultSetIds.push(elem237);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.numKeys = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size238 = 0;
        var _rtmp3242;
        this.keyAttr = [];
        var _etype241 = 0;
        _rtmp3242 = input.readListBegin();
        _etype241 = _rtmp3242.etype;
        _size238 = _rtmp3242.size;
        for (var _i243 = 0; _i243 < _size238; ++_i243)
        {
          var elem244 = null;
          elem244 = new DfFieldAttrHeaderT();
          elem244.read(input);
          this.keyAttr.push(elem244);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.numValues = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.numImmediates = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size245 = 0;
        var _rtmp3249;
        this.valueAttrs = [];
        var _etype248 = 0;
        _rtmp3249 = input.readListBegin();
        _etype248 = _rtmp3249.etype;
        _size245 = _rtmp3249.size;
        for (var _i250 = 0; _i250 < _size245; ++_i250)
        {
          var elem251 = null;
          elem251 = new DfFieldAttrHeaderT();
          elem251.read(input);
          this.valueAttrs.push(elem251);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.ordering = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.numMetas = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size252 = 0;
        var _rtmp3256;
        this.metas = [];
        var _etype255 = 0;
        _rtmp3256 = input.readListBegin();
        _etype255 = _rtmp3256.etype;
        _size252 = _rtmp3256.size;
        for (var _i257 = 0; _i257 < _size252; ++_i257)
        {
          var elem258 = null;
          elem258 = new XcalarApiTableMetaT();
          elem258.read(input);
          this.metas.push(elem258);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetTableMetaOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetTableMetaOutputT');
  if (this.numDatasets !== null && this.numDatasets !== undefined) {
    output.writeFieldBegin('numDatasets', Thrift.Type.I32, 1);
    output.writeI32(this.numDatasets);
    output.writeFieldEnd();
  }
  if (this.datasets !== null && this.datasets !== undefined) {
    output.writeFieldBegin('datasets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.datasets.length);
    for (var iter259 in this.datasets)
    {
      if (this.datasets.hasOwnProperty(iter259))
      {
        iter259 = this.datasets[iter259];
        output.writeString(iter259);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.numResultSets !== null && this.numResultSets !== undefined) {
    output.writeFieldBegin('numResultSets', Thrift.Type.I32, 3);
    output.writeI32(this.numResultSets);
    output.writeFieldEnd();
  }
  if (this.resultSetIds !== null && this.resultSetIds !== undefined) {
    output.writeFieldBegin('resultSetIds', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.resultSetIds.length);
    for (var iter260 in this.resultSetIds)
    {
      if (this.resultSetIds.hasOwnProperty(iter260))
      {
        iter260 = this.resultSetIds[iter260];
        output.writeString(iter260);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.numKeys !== null && this.numKeys !== undefined) {
    output.writeFieldBegin('numKeys', Thrift.Type.I32, 5);
    output.writeI32(this.numKeys);
    output.writeFieldEnd();
  }
  if (this.keyAttr !== null && this.keyAttr !== undefined) {
    output.writeFieldBegin('keyAttr', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.keyAttr.length);
    for (var iter261 in this.keyAttr)
    {
      if (this.keyAttr.hasOwnProperty(iter261))
      {
        iter261 = this.keyAttr[iter261];
        iter261.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.numValues !== null && this.numValues !== undefined) {
    output.writeFieldBegin('numValues', Thrift.Type.I32, 7);
    output.writeI32(this.numValues);
    output.writeFieldEnd();
  }
  if (this.numImmediates !== null && this.numImmediates !== undefined) {
    output.writeFieldBegin('numImmediates', Thrift.Type.I32, 8);
    output.writeI32(this.numImmediates);
    output.writeFieldEnd();
  }
  if (this.valueAttrs !== null && this.valueAttrs !== undefined) {
    output.writeFieldBegin('valueAttrs', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRUCT, this.valueAttrs.length);
    for (var iter262 in this.valueAttrs)
    {
      if (this.valueAttrs.hasOwnProperty(iter262))
      {
        iter262 = this.valueAttrs[iter262];
        iter262.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ordering !== null && this.ordering !== undefined) {
    output.writeFieldBegin('ordering', Thrift.Type.I32, 10);
    output.writeI32(this.ordering);
    output.writeFieldEnd();
  }
  if (this.numMetas !== null && this.numMetas !== undefined) {
    output.writeFieldBegin('numMetas', Thrift.Type.I64, 11);
    output.writeI64(this.numMetas);
    output.writeFieldEnd();
  }
  if (this.metas !== null && this.metas !== undefined) {
    output.writeFieldBegin('metas', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRUCT, this.metas.length);
    for (var iter263 in this.metas)
    {
      if (this.metas.hasOwnProperty(iter263))
      {
        iter263 = this.metas[iter263];
        iter263.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiMakeResultSetOutputT = function(args) {
  this.resultSetId = null;
  this.numEntries = null;
  this.metaOutput = null;
  if (args) {
    if (args.resultSetId !== undefined) {
      this.resultSetId = args.resultSetId;
    }
    if (args.numEntries !== undefined) {
      this.numEntries = args.numEntries;
    }
    if (args.metaOutput !== undefined) {
      this.metaOutput = args.metaOutput;
    }
  }
};
XcalarApiMakeResultSetOutputT.prototype = {};
XcalarApiMakeResultSetOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.resultSetId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numEntries = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.metaOutput = new XcalarApiGetTableMetaOutputT();
        this.metaOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiMakeResultSetOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiMakeResultSetOutputT');
  if (this.resultSetId !== null && this.resultSetId !== undefined) {
    output.writeFieldBegin('resultSetId', Thrift.Type.STRING, 1);
    output.writeString(this.resultSetId);
    output.writeFieldEnd();
  }
  if (this.numEntries !== null && this.numEntries !== undefined) {
    output.writeFieldBegin('numEntries', Thrift.Type.I64, 2);
    output.writeI64(this.numEntries);
    output.writeFieldEnd();
  }
  if (this.metaOutput !== null && this.metaOutput !== undefined) {
    output.writeFieldBegin('metaOutput', Thrift.Type.STRUCT, 3);
    this.metaOutput.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiResultSetNextOutputT = function(args) {
  this.numKvPairs = null;
  this.kvPair = null;
  if (args) {
    if (args.numKvPairs !== undefined) {
      this.numKvPairs = args.numKvPairs;
    }
    if (args.kvPair !== undefined) {
      this.kvPair = args.kvPair;
    }
  }
};
XcalarApiResultSetNextOutputT.prototype = {};
XcalarApiResultSetNextOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numKvPairs = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size264 = 0;
        var _rtmp3268;
        this.kvPair = [];
        var _etype267 = 0;
        _rtmp3268 = input.readListBegin();
        _etype267 = _rtmp3268.etype;
        _size264 = _rtmp3268.size;
        for (var _i269 = 0; _i269 < _size264; ++_i269)
        {
          var elem270 = null;
          elem270 = new XcalarApiKeyValuePairT();
          elem270.read(input);
          this.kvPair.push(elem270);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiResultSetNextOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiResultSetNextOutputT');
  if (this.numKvPairs !== null && this.numKvPairs !== undefined) {
    output.writeFieldBegin('numKvPairs', Thrift.Type.I64, 1);
    output.writeI64(this.numKvPairs);
    output.writeFieldEnd();
  }
  if (this.kvPair !== null && this.kvPair !== undefined) {
    output.writeFieldBegin('kvPair', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.kvPair.length);
    for (var iter271 in this.kvPair)
    {
      if (this.kvPair.hasOwnProperty(iter271))
      {
        iter271 = this.kvPair[iter271];
        iter271.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDagNodeInfoT = function(args) {
  this.name = null;
  this.dagNodeId = null;
  this.state = null;
  this.size = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.dagNodeId !== undefined) {
      this.dagNodeId = args.dagNodeId;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.size !== undefined) {
      this.size = args.size;
    }
  }
};
XcalarApiDagNodeInfoT.prototype = {};
XcalarApiDagNodeInfoT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dagNodeId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.size = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDagNodeInfoT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDagNodeInfoT');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.dagNodeId !== null && this.dagNodeId !== undefined) {
    output.writeFieldBegin('dagNodeId', Thrift.Type.STRING, 2);
    output.writeString(this.dagNodeId);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 3);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I64, 4);
    output.writeI64(this.size);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListDagNodesOutputT = function(args) {
  this.numNodes = null;
  this.nodeInfo = null;
  if (args) {
    if (args.numNodes !== undefined) {
      this.numNodes = args.numNodes;
    }
    if (args.nodeInfo !== undefined) {
      this.nodeInfo = args.nodeInfo;
    }
  }
};
XcalarApiListDagNodesOutputT.prototype = {};
XcalarApiListDagNodesOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numNodes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size272 = 0;
        var _rtmp3276;
        this.nodeInfo = [];
        var _etype275 = 0;
        _rtmp3276 = input.readListBegin();
        _etype275 = _rtmp3276.etype;
        _size272 = _rtmp3276.size;
        for (var _i277 = 0; _i277 < _size272; ++_i277)
        {
          var elem278 = null;
          elem278 = new XcalarApiDagNodeInfoT();
          elem278.read(input);
          this.nodeInfo.push(elem278);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListDagNodesOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListDagNodesOutputT');
  if (this.numNodes !== null && this.numNodes !== undefined) {
    output.writeFieldBegin('numNodes', Thrift.Type.I64, 1);
    output.writeI64(this.numNodes);
    output.writeFieldEnd();
  }
  if (this.nodeInfo !== null && this.nodeInfo !== undefined) {
    output.writeFieldBegin('nodeInfo', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.nodeInfo.length);
    for (var iter279 in this.nodeInfo)
    {
      if (this.nodeInfo.hasOwnProperty(iter279))
      {
        iter279 = this.nodeInfo[iter279];
        iter279.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionGenericOutputT = function(args) {
  this.outputAdded = null;
  this.nodeId = null;
  this.ipAddr = null;
  this.errorMessage = null;
  if (args) {
    if (args.outputAdded !== undefined) {
      this.outputAdded = args.outputAdded;
    }
    if (args.nodeId !== undefined) {
      this.nodeId = args.nodeId;
    }
    if (args.ipAddr !== undefined) {
      this.ipAddr = args.ipAddr;
    }
    if (args.errorMessage !== undefined) {
      this.errorMessage = args.errorMessage;
    }
  }
};
XcalarApiSessionGenericOutputT.prototype = {};
XcalarApiSessionGenericOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.outputAdded = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.nodeId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ipAddr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.errorMessage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionGenericOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionGenericOutputT');
  if (this.outputAdded !== null && this.outputAdded !== undefined) {
    output.writeFieldBegin('outputAdded', Thrift.Type.BOOL, 1);
    output.writeBool(this.outputAdded);
    output.writeFieldEnd();
  }
  if (this.nodeId !== null && this.nodeId !== undefined) {
    output.writeFieldBegin('nodeId', Thrift.Type.I64, 2);
    output.writeI64(this.nodeId);
    output.writeFieldEnd();
  }
  if (this.ipAddr !== null && this.ipAddr !== undefined) {
    output.writeFieldBegin('ipAddr', Thrift.Type.STRING, 3);
    output.writeString(this.ipAddr);
    output.writeFieldEnd();
  }
  if (this.errorMessage !== null && this.errorMessage !== undefined) {
    output.writeFieldBegin('errorMessage', Thrift.Type.STRING, 4);
    output.writeString(this.errorMessage);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionPersistOutputT = function(args) {
  this.sessionGenericOutput = null;
  if (args) {
    if (args.sessionGenericOutput !== undefined) {
      this.sessionGenericOutput = args.sessionGenericOutput;
    }
  }
};
XcalarApiSessionPersistOutputT.prototype = {};
XcalarApiSessionPersistOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionGenericOutput = new XcalarApiSessionGenericOutputT();
        this.sessionGenericOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionPersistOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionPersistOutputT');
  if (this.sessionGenericOutput !== null && this.sessionGenericOutput !== undefined) {
    output.writeFieldBegin('sessionGenericOutput', Thrift.Type.STRUCT, 1);
    this.sessionGenericOutput.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListDatasetsOutputT = function(args) {
  this.numDatasets = null;
  this.datasets = null;
  if (args) {
    if (args.numDatasets !== undefined) {
      this.numDatasets = args.numDatasets;
    }
    if (args.datasets !== undefined) {
      this.datasets = args.datasets;
    }
  }
};
XcalarApiListDatasetsOutputT.prototype = {};
XcalarApiListDatasetsOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numDatasets = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size280 = 0;
        var _rtmp3284;
        this.datasets = [];
        var _etype283 = 0;
        _rtmp3284 = input.readListBegin();
        _etype283 = _rtmp3284.etype;
        _size280 = _rtmp3284.size;
        for (var _i285 = 0; _i285 < _size280; ++_i285)
        {
          var elem286 = null;
          elem286 = new XcalarApiDatasetT();
          elem286.read(input);
          this.datasets.push(elem286);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListDatasetsOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListDatasetsOutputT');
  if (this.numDatasets !== null && this.numDatasets !== undefined) {
    output.writeFieldBegin('numDatasets', Thrift.Type.I32, 1);
    output.writeI32(this.numDatasets);
    output.writeFieldEnd();
  }
  if (this.datasets !== null && this.datasets !== undefined) {
    output.writeFieldBegin('datasets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.datasets.length);
    for (var iter287 in this.datasets)
    {
      if (this.datasets.hasOwnProperty(iter287))
      {
        iter287 = this.datasets[iter287];
        iter287.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDeleteDagNodeStatusT = function(args) {
  this.nodeInfo = null;
  this.status = null;
  this.numRefs = null;
  this.refs = null;
  if (args) {
    if (args.nodeInfo !== undefined) {
      this.nodeInfo = args.nodeInfo;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.numRefs !== undefined) {
      this.numRefs = args.numRefs;
    }
    if (args.refs !== undefined) {
      this.refs = args.refs;
    }
  }
};
XcalarApiDeleteDagNodeStatusT.prototype = {};
XcalarApiDeleteDagNodeStatusT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nodeInfo = new XcalarApiDagNodeInfoT();
        this.nodeInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numRefs = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size288 = 0;
        var _rtmp3292;
        this.refs = [];
        var _etype291 = 0;
        _rtmp3292 = input.readListBegin();
        _etype291 = _rtmp3292.etype;
        _size288 = _rtmp3292.size;
        for (var _i293 = 0; _i293 < _size288; ++_i293)
        {
          var elem294 = null;
          elem294 = new DagRefT();
          elem294.read(input);
          this.refs.push(elem294);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDeleteDagNodeStatusT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDeleteDagNodeStatusT');
  if (this.nodeInfo !== null && this.nodeInfo !== undefined) {
    output.writeFieldBegin('nodeInfo', Thrift.Type.STRUCT, 1);
    this.nodeInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.numRefs !== null && this.numRefs !== undefined) {
    output.writeFieldBegin('numRefs', Thrift.Type.I64, 3);
    output.writeI64(this.numRefs);
    output.writeFieldEnd();
  }
  if (this.refs !== null && this.refs !== undefined) {
    output.writeFieldBegin('refs', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.refs.length);
    for (var iter295 in this.refs)
    {
      if (this.refs.hasOwnProperty(iter295))
      {
        iter295 = this.refs[iter295];
        iter295.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDeleteDagNodeOutputT = function(args) {
  this.numNodes = null;
  this.statuses = null;
  if (args) {
    if (args.numNodes !== undefined) {
      this.numNodes = args.numNodes;
    }
    if (args.statuses !== undefined) {
      this.statuses = args.statuses;
    }
  }
};
XcalarApiDeleteDagNodeOutputT.prototype = {};
XcalarApiDeleteDagNodeOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numNodes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size296 = 0;
        var _rtmp3300;
        this.statuses = [];
        var _etype299 = 0;
        _rtmp3300 = input.readListBegin();
        _etype299 = _rtmp3300.etype;
        _size296 = _rtmp3300.size;
        for (var _i301 = 0; _i301 < _size296; ++_i301)
        {
          var elem302 = null;
          elem302 = new XcalarApiDeleteDagNodeStatusT();
          elem302.read(input);
          this.statuses.push(elem302);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDeleteDagNodeOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDeleteDagNodeOutputT');
  if (this.numNodes !== null && this.numNodes !== undefined) {
    output.writeFieldBegin('numNodes', Thrift.Type.I64, 1);
    output.writeI64(this.numNodes);
    output.writeFieldEnd();
  }
  if (this.statuses !== null && this.statuses !== undefined) {
    output.writeFieldBegin('statuses', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.statuses.length);
    for (var iter303 in this.statuses)
    {
      if (this.statuses.hasOwnProperty(iter303))
      {
        iter303 = this.statuses[iter303];
        iter303.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDeleteDatasetStatusT = function(args) {
  this.dataset = null;
  this.status = null;
  if (args) {
    if (args.dataset !== undefined) {
      this.dataset = args.dataset;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
  }
};
XcalarApiDeleteDatasetStatusT.prototype = {};
XcalarApiDeleteDatasetStatusT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.dataset = new XcalarApiDatasetT();
        this.dataset.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDeleteDatasetStatusT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDeleteDatasetStatusT');
  if (this.dataset !== null && this.dataset !== undefined) {
    output.writeFieldBegin('dataset', Thrift.Type.STRUCT, 1);
    this.dataset.write(output);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDeleteDatasetsOutputT = function(args) {
  this.numDatasets = null;
  this.statuses = null;
  if (args) {
    if (args.numDatasets !== undefined) {
      this.numDatasets = args.numDatasets;
    }
    if (args.statuses !== undefined) {
      this.statuses = args.statuses;
    }
  }
};
XcalarApiDeleteDatasetsOutputT.prototype = {};
XcalarApiDeleteDatasetsOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numDatasets = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size304 = 0;
        var _rtmp3308;
        this.statuses = [];
        var _etype307 = 0;
        _rtmp3308 = input.readListBegin();
        _etype307 = _rtmp3308.etype;
        _size304 = _rtmp3308.size;
        for (var _i309 = 0; _i309 < _size304; ++_i309)
        {
          var elem310 = null;
          elem310 = new XcalarApiDeleteDatasetStatusT();
          elem310.read(input);
          this.statuses.push(elem310);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDeleteDatasetsOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDeleteDatasetsOutputT');
  if (this.numDatasets !== null && this.numDatasets !== undefined) {
    output.writeFieldBegin('numDatasets', Thrift.Type.I64, 1);
    output.writeI64(this.numDatasets);
    output.writeFieldEnd();
  }
  if (this.statuses !== null && this.statuses !== undefined) {
    output.writeFieldBegin('statuses', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.statuses.length);
    for (var iter311 in this.statuses)
    {
      if (this.statuses.hasOwnProperty(iter311))
      {
        iter311 = this.statuses[iter311];
        iter311.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiNewTableOutputT = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
XcalarApiNewTableOutputT.prototype = {};
XcalarApiNewTableOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiNewTableOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiNewTableOutputT');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetTableRefCountOutputT = function(args) {
  this.refCount = null;
  if (args) {
    if (args.refCount !== undefined) {
      this.refCount = args.refCount;
    }
  }
};
XcalarApiGetTableRefCountOutputT.prototype = {};
XcalarApiGetTableRefCountOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.refCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetTableRefCountOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetTableRefCountOutputT');
  if (this.refCount !== null && this.refCount !== undefined) {
    output.writeFieldBegin('refCount', Thrift.Type.I64, 1);
    output.writeI64(this.refCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiQueryOutputT = function(args) {
  this.queryName = null;
  if (args) {
    if (args.queryName !== undefined) {
      this.queryName = args.queryName;
    }
  }
};
XcalarApiQueryOutputT.prototype = {};
XcalarApiQueryOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queryName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiQueryOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiQueryOutputT');
  if (this.queryName !== null && this.queryName !== undefined) {
    output.writeFieldBegin('queryName', Thrift.Type.STRING, 1);
    output.writeString(this.queryName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiBulkLoadOutputT = function(args) {
  this.dataset = null;
  this.numFiles = null;
  this.numBytes = null;
  this.errorString = null;
  this.errorFile = null;
  if (args) {
    if (args.dataset !== undefined) {
      this.dataset = args.dataset;
    }
    if (args.numFiles !== undefined) {
      this.numFiles = args.numFiles;
    }
    if (args.numBytes !== undefined) {
      this.numBytes = args.numBytes;
    }
    if (args.errorString !== undefined) {
      this.errorString = args.errorString;
    }
    if (args.errorFile !== undefined) {
      this.errorFile = args.errorFile;
    }
  }
};
XcalarApiBulkLoadOutputT.prototype = {};
XcalarApiBulkLoadOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.dataset = new XcalarApiDatasetT();
        this.dataset.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numFiles = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numBytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.errorString = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.errorFile = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiBulkLoadOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiBulkLoadOutputT');
  if (this.dataset !== null && this.dataset !== undefined) {
    output.writeFieldBegin('dataset', Thrift.Type.STRUCT, 1);
    this.dataset.write(output);
    output.writeFieldEnd();
  }
  if (this.numFiles !== null && this.numFiles !== undefined) {
    output.writeFieldBegin('numFiles', Thrift.Type.I64, 2);
    output.writeI64(this.numFiles);
    output.writeFieldEnd();
  }
  if (this.numBytes !== null && this.numBytes !== undefined) {
    output.writeFieldBegin('numBytes', Thrift.Type.I64, 3);
    output.writeI64(this.numBytes);
    output.writeFieldEnd();
  }
  if (this.errorString !== null && this.errorString !== undefined) {
    output.writeFieldBegin('errorString', Thrift.Type.STRING, 4);
    output.writeString(this.errorString);
    output.writeFieldEnd();
  }
  if (this.errorFile !== null && this.errorFile !== undefined) {
    output.writeFieldBegin('errorFile', Thrift.Type.STRING, 5);
    output.writeString(this.errorFile);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetVersionOutputT = function(args) {
  this.version = null;
  this.apiVersionSignatureFull = null;
  this.apiVersionSignatureShort = null;
  if (args) {
    if (args.version !== undefined) {
      this.version = args.version;
    }
    if (args.apiVersionSignatureFull !== undefined) {
      this.apiVersionSignatureFull = args.apiVersionSignatureFull;
    }
    if (args.apiVersionSignatureShort !== undefined) {
      this.apiVersionSignatureShort = args.apiVersionSignatureShort;
    }
  }
};
XcalarApiGetVersionOutputT.prototype = {};
XcalarApiGetVersionOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.apiVersionSignatureFull = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.apiVersionSignatureShort = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetVersionOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetVersionOutputT');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 1);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.apiVersionSignatureFull !== null && this.apiVersionSignatureFull !== undefined) {
    output.writeFieldBegin('apiVersionSignatureFull', Thrift.Type.STRING, 2);
    output.writeString(this.apiVersionSignatureFull);
    output.writeFieldEnd();
  }
  if (this.apiVersionSignatureShort !== null && this.apiVersionSignatureShort !== undefined) {
    output.writeFieldBegin('apiVersionSignatureShort', Thrift.Type.I32, 3);
    output.writeI32(this.apiVersionSignatureShort);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetLicenseOutputT = function(args) {
  this.loaded = null;
  this.expired = null;
  this.platform = null;
  this.product = null;
  this.productFamily = null;
  this.productVersion = null;
  this.expiration = null;
  this.nodeCount = null;
  this.userCount = null;
  if (args) {
    if (args.loaded !== undefined) {
      this.loaded = args.loaded;
    }
    if (args.expired !== undefined) {
      this.expired = args.expired;
    }
    if (args.platform !== undefined) {
      this.platform = args.platform;
    }
    if (args.product !== undefined) {
      this.product = args.product;
    }
    if (args.productFamily !== undefined) {
      this.productFamily = args.productFamily;
    }
    if (args.productVersion !== undefined) {
      this.productVersion = args.productVersion;
    }
    if (args.expiration !== undefined) {
      this.expiration = args.expiration;
    }
    if (args.nodeCount !== undefined) {
      this.nodeCount = args.nodeCount;
    }
    if (args.userCount !== undefined) {
      this.userCount = args.userCount;
    }
  }
};
XcalarApiGetLicenseOutputT.prototype = {};
XcalarApiGetLicenseOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.loaded = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.expired = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.platform = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.product = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.productFamily = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.productVersion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.expiration = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.nodeCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.userCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetLicenseOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetLicenseOutputT');
  if (this.loaded !== null && this.loaded !== undefined) {
    output.writeFieldBegin('loaded', Thrift.Type.BOOL, 1);
    output.writeBool(this.loaded);
    output.writeFieldEnd();
  }
  if (this.expired !== null && this.expired !== undefined) {
    output.writeFieldBegin('expired', Thrift.Type.BOOL, 2);
    output.writeBool(this.expired);
    output.writeFieldEnd();
  }
  if (this.platform !== null && this.platform !== undefined) {
    output.writeFieldBegin('platform', Thrift.Type.STRING, 3);
    output.writeString(this.platform);
    output.writeFieldEnd();
  }
  if (this.product !== null && this.product !== undefined) {
    output.writeFieldBegin('product', Thrift.Type.STRING, 4);
    output.writeString(this.product);
    output.writeFieldEnd();
  }
  if (this.productFamily !== null && this.productFamily !== undefined) {
    output.writeFieldBegin('productFamily', Thrift.Type.STRING, 5);
    output.writeString(this.productFamily);
    output.writeFieldEnd();
  }
  if (this.productVersion !== null && this.productVersion !== undefined) {
    output.writeFieldBegin('productVersion', Thrift.Type.STRING, 6);
    output.writeString(this.productVersion);
    output.writeFieldEnd();
  }
  if (this.expiration !== null && this.expiration !== undefined) {
    output.writeFieldBegin('expiration', Thrift.Type.STRING, 7);
    output.writeString(this.expiration);
    output.writeFieldEnd();
  }
  if (this.nodeCount !== null && this.nodeCount !== undefined) {
    output.writeFieldBegin('nodeCount', Thrift.Type.I64, 8);
    output.writeI64(this.nodeCount);
    output.writeFieldEnd();
  }
  if (this.userCount !== null && this.userCount !== undefined) {
    output.writeFieldBegin('userCount', Thrift.Type.I32, 9);
    output.writeI32(this.userCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiAggregateOutputT = function(args) {
  this.tableName = null;
  this.jsonAnswer = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.jsonAnswer !== undefined) {
      this.jsonAnswer = args.jsonAnswer;
    }
  }
};
XcalarApiAggregateOutputT.prototype = {};
XcalarApiAggregateOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.jsonAnswer = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiAggregateOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiAggregateOutputT');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.jsonAnswer !== null && this.jsonAnswer !== undefined) {
    output.writeFieldBegin('jsonAnswer', Thrift.Type.STRING, 2);
    output.writeString(this.jsonAnswer);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSingleQueryT = function(args) {
  this.singleQuery = null;
  this.status = null;
  if (args) {
    if (args.singleQuery !== undefined) {
      this.singleQuery = args.singleQuery;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
  }
};
XcalarApiSingleQueryT.prototype = {};
XcalarApiSingleQueryT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.singleQuery = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSingleQueryT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSingleQueryT');
  if (this.singleQuery !== null && this.singleQuery !== undefined) {
    output.writeFieldBegin('singleQuery', Thrift.Type.STRING, 1);
    output.writeString(this.singleQuery);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiTopInputT = function(args) {
  this.measureIntervalInMs = null;
  this.cacheValidityInMs = null;
  this.topStatsRequestType = null;
  if (args) {
    if (args.measureIntervalInMs !== undefined) {
      this.measureIntervalInMs = args.measureIntervalInMs;
    }
    if (args.cacheValidityInMs !== undefined) {
      this.cacheValidityInMs = args.cacheValidityInMs;
    }
    if (args.topStatsRequestType !== undefined) {
      this.topStatsRequestType = args.topStatsRequestType;
    }
  }
};
XcalarApiTopInputT.prototype = {};
XcalarApiTopInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.measureIntervalInMs = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.cacheValidityInMs = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.topStatsRequestType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiTopInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiTopInputT');
  if (this.measureIntervalInMs !== null && this.measureIntervalInMs !== undefined) {
    output.writeFieldBegin('measureIntervalInMs', Thrift.Type.I64, 1);
    output.writeI64(this.measureIntervalInMs);
    output.writeFieldEnd();
  }
  if (this.cacheValidityInMs !== null && this.cacheValidityInMs !== undefined) {
    output.writeFieldBegin('cacheValidityInMs', Thrift.Type.I64, 2);
    output.writeI64(this.cacheValidityInMs);
    output.writeFieldEnd();
  }
  if (this.topStatsRequestType !== null && this.topStatsRequestType !== undefined) {
    output.writeFieldBegin('topStatsRequestType', Thrift.Type.I32, 3);
    output.writeI32(this.topStatsRequestType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiTopOutputPerNodeT = function(args) {
  this.nodeId = null;
  this.cpuUsageInPercent = null;
  this.memUsageInPercent = null;
  this.memUsedInBytes = null;
  this.totalAvailableMemInBytes = null;
  this.networkRecvInBytesPerSec = null;
  this.networkSendInBytesPerSec = null;
  this.xdbUsedBytes = null;
  this.xdbTotalBytes = null;
  this.parentCpuUsageInPercent = null;
  this.childrenCpuUsageInPercent = null;
  this.numCores = null;
  this.sysSwapUsedInBytes = null;
  this.sysSwapTotalInBytes = null;
  this.uptimeInSeconds = null;
  this.datasetUsedBytes = null;
  if (args) {
    if (args.nodeId !== undefined) {
      this.nodeId = args.nodeId;
    }
    if (args.cpuUsageInPercent !== undefined) {
      this.cpuUsageInPercent = args.cpuUsageInPercent;
    }
    if (args.memUsageInPercent !== undefined) {
      this.memUsageInPercent = args.memUsageInPercent;
    }
    if (args.memUsedInBytes !== undefined) {
      this.memUsedInBytes = args.memUsedInBytes;
    }
    if (args.totalAvailableMemInBytes !== undefined) {
      this.totalAvailableMemInBytes = args.totalAvailableMemInBytes;
    }
    if (args.networkRecvInBytesPerSec !== undefined) {
      this.networkRecvInBytesPerSec = args.networkRecvInBytesPerSec;
    }
    if (args.networkSendInBytesPerSec !== undefined) {
      this.networkSendInBytesPerSec = args.networkSendInBytesPerSec;
    }
    if (args.xdbUsedBytes !== undefined) {
      this.xdbUsedBytes = args.xdbUsedBytes;
    }
    if (args.xdbTotalBytes !== undefined) {
      this.xdbTotalBytes = args.xdbTotalBytes;
    }
    if (args.parentCpuUsageInPercent !== undefined) {
      this.parentCpuUsageInPercent = args.parentCpuUsageInPercent;
    }
    if (args.childrenCpuUsageInPercent !== undefined) {
      this.childrenCpuUsageInPercent = args.childrenCpuUsageInPercent;
    }
    if (args.numCores !== undefined) {
      this.numCores = args.numCores;
    }
    if (args.sysSwapUsedInBytes !== undefined) {
      this.sysSwapUsedInBytes = args.sysSwapUsedInBytes;
    }
    if (args.sysSwapTotalInBytes !== undefined) {
      this.sysSwapTotalInBytes = args.sysSwapTotalInBytes;
    }
    if (args.uptimeInSeconds !== undefined) {
      this.uptimeInSeconds = args.uptimeInSeconds;
    }
    if (args.datasetUsedBytes !== undefined) {
      this.datasetUsedBytes = args.datasetUsedBytes;
    }
  }
};
XcalarApiTopOutputPerNodeT.prototype = {};
XcalarApiTopOutputPerNodeT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.nodeId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.cpuUsageInPercent = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.memUsageInPercent = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.memUsedInBytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.totalAvailableMemInBytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.networkRecvInBytesPerSec = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.networkSendInBytesPerSec = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.xdbUsedBytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.xdbTotalBytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.DOUBLE) {
        this.parentCpuUsageInPercent = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.DOUBLE) {
        this.childrenCpuUsageInPercent = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.numCores = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.sysSwapUsedInBytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.sysSwapTotalInBytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.uptimeInSeconds = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I64) {
        this.datasetUsedBytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiTopOutputPerNodeT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiTopOutputPerNodeT');
  if (this.nodeId !== null && this.nodeId !== undefined) {
    output.writeFieldBegin('nodeId', Thrift.Type.I64, 1);
    output.writeI64(this.nodeId);
    output.writeFieldEnd();
  }
  if (this.cpuUsageInPercent !== null && this.cpuUsageInPercent !== undefined) {
    output.writeFieldBegin('cpuUsageInPercent', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.cpuUsageInPercent);
    output.writeFieldEnd();
  }
  if (this.memUsageInPercent !== null && this.memUsageInPercent !== undefined) {
    output.writeFieldBegin('memUsageInPercent', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.memUsageInPercent);
    output.writeFieldEnd();
  }
  if (this.memUsedInBytes !== null && this.memUsedInBytes !== undefined) {
    output.writeFieldBegin('memUsedInBytes', Thrift.Type.I64, 4);
    output.writeI64(this.memUsedInBytes);
    output.writeFieldEnd();
  }
  if (this.totalAvailableMemInBytes !== null && this.totalAvailableMemInBytes !== undefined) {
    output.writeFieldBegin('totalAvailableMemInBytes', Thrift.Type.I64, 5);
    output.writeI64(this.totalAvailableMemInBytes);
    output.writeFieldEnd();
  }
  if (this.networkRecvInBytesPerSec !== null && this.networkRecvInBytesPerSec !== undefined) {
    output.writeFieldBegin('networkRecvInBytesPerSec', Thrift.Type.I64, 6);
    output.writeI64(this.networkRecvInBytesPerSec);
    output.writeFieldEnd();
  }
  if (this.networkSendInBytesPerSec !== null && this.networkSendInBytesPerSec !== undefined) {
    output.writeFieldBegin('networkSendInBytesPerSec', Thrift.Type.I64, 7);
    output.writeI64(this.networkSendInBytesPerSec);
    output.writeFieldEnd();
  }
  if (this.xdbUsedBytes !== null && this.xdbUsedBytes !== undefined) {
    output.writeFieldBegin('xdbUsedBytes', Thrift.Type.I64, 8);
    output.writeI64(this.xdbUsedBytes);
    output.writeFieldEnd();
  }
  if (this.xdbTotalBytes !== null && this.xdbTotalBytes !== undefined) {
    output.writeFieldBegin('xdbTotalBytes', Thrift.Type.I64, 9);
    output.writeI64(this.xdbTotalBytes);
    output.writeFieldEnd();
  }
  if (this.parentCpuUsageInPercent !== null && this.parentCpuUsageInPercent !== undefined) {
    output.writeFieldBegin('parentCpuUsageInPercent', Thrift.Type.DOUBLE, 10);
    output.writeDouble(this.parentCpuUsageInPercent);
    output.writeFieldEnd();
  }
  if (this.childrenCpuUsageInPercent !== null && this.childrenCpuUsageInPercent !== undefined) {
    output.writeFieldBegin('childrenCpuUsageInPercent', Thrift.Type.DOUBLE, 11);
    output.writeDouble(this.childrenCpuUsageInPercent);
    output.writeFieldEnd();
  }
  if (this.numCores !== null && this.numCores !== undefined) {
    output.writeFieldBegin('numCores', Thrift.Type.I64, 12);
    output.writeI64(this.numCores);
    output.writeFieldEnd();
  }
  if (this.sysSwapUsedInBytes !== null && this.sysSwapUsedInBytes !== undefined) {
    output.writeFieldBegin('sysSwapUsedInBytes', Thrift.Type.I64, 13);
    output.writeI64(this.sysSwapUsedInBytes);
    output.writeFieldEnd();
  }
  if (this.sysSwapTotalInBytes !== null && this.sysSwapTotalInBytes !== undefined) {
    output.writeFieldBegin('sysSwapTotalInBytes', Thrift.Type.I64, 14);
    output.writeI64(this.sysSwapTotalInBytes);
    output.writeFieldEnd();
  }
  if (this.uptimeInSeconds !== null && this.uptimeInSeconds !== undefined) {
    output.writeFieldBegin('uptimeInSeconds', Thrift.Type.I64, 15);
    output.writeI64(this.uptimeInSeconds);
    output.writeFieldEnd();
  }
  if (this.datasetUsedBytes !== null && this.datasetUsedBytes !== undefined) {
    output.writeFieldBegin('datasetUsedBytes', Thrift.Type.I64, 16);
    output.writeI64(this.datasetUsedBytes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiTopOutputT = function(args) {
  this.status = null;
  this.numNodes = null;
  this.topOutputPerNode = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.numNodes !== undefined) {
      this.numNodes = args.numNodes;
    }
    if (args.topOutputPerNode !== undefined) {
      this.topOutputPerNode = args.topOutputPerNode;
    }
  }
};
XcalarApiTopOutputT.prototype = {};
XcalarApiTopOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numNodes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size312 = 0;
        var _rtmp3316;
        this.topOutputPerNode = [];
        var _etype315 = 0;
        _rtmp3316 = input.readListBegin();
        _etype315 = _rtmp3316.etype;
        _size312 = _rtmp3316.size;
        for (var _i317 = 0; _i317 < _size312; ++_i317)
        {
          var elem318 = null;
          elem318 = new XcalarApiTopOutputPerNodeT();
          elem318.read(input);
          this.topOutputPerNode.push(elem318);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiTopOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiTopOutputT');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.numNodes !== null && this.numNodes !== undefined) {
    output.writeFieldBegin('numNodes', Thrift.Type.I64, 2);
    output.writeI64(this.numNodes);
    output.writeFieldEnd();
  }
  if (this.topOutputPerNode !== null && this.topOutputPerNode !== undefined) {
    output.writeFieldBegin('topOutputPerNode', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.topOutputPerNode.length);
    for (var iter319 in this.topOutputPerNode)
    {
      if (this.topOutputPerNode.hasOwnProperty(iter319))
      {
        iter319 = this.topOutputPerNode[iter319];
        iter319.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiMemoryInputT = function(args) {
  this.tagName = null;
  if (args) {
    if (args.tagName !== undefined) {
      this.tagName = args.tagName;
    }
  }
};
XcalarApiMemoryInputT.prototype = {};
XcalarApiMemoryInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tagName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiMemoryInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiMemoryInputT');
  if (this.tagName !== null && this.tagName !== undefined) {
    output.writeFieldBegin('tagName', Thrift.Type.STRING, 1);
    output.writeString(this.tagName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiQueryInputT = function(args) {
  this.querySession = null;
  this.queryName = null;
  this.queryStr = null;
  this.sameSession = null;
  if (args) {
    if (args.querySession !== undefined) {
      this.querySession = args.querySession;
    }
    if (args.queryName !== undefined) {
      this.queryName = args.queryName;
    }
    if (args.queryStr !== undefined) {
      this.queryStr = args.queryStr;
    }
    if (args.sameSession !== undefined) {
      this.sameSession = args.sameSession;
    }
  }
};
XcalarApiQueryInputT.prototype = {};
XcalarApiQueryInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.querySession = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.queryName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.queryStr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.sameSession = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiQueryInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiQueryInputT');
  if (this.querySession !== null && this.querySession !== undefined) {
    output.writeFieldBegin('querySession', Thrift.Type.I64, 1);
    output.writeI64(this.querySession);
    output.writeFieldEnd();
  }
  if (this.queryName !== null && this.queryName !== undefined) {
    output.writeFieldBegin('queryName', Thrift.Type.STRING, 2);
    output.writeString(this.queryName);
    output.writeFieldEnd();
  }
  if (this.queryStr !== null && this.queryStr !== undefined) {
    output.writeFieldBegin('queryStr', Thrift.Type.STRING, 3);
    output.writeString(this.queryStr);
    output.writeFieldEnd();
  }
  if (this.sameSession !== null && this.sameSession !== undefined) {
    output.writeFieldBegin('sameSession', Thrift.Type.BOOL, 4);
    output.writeBool(this.sameSession);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUserIdT = function(args) {
  this.userIdName = null;
  if (args) {
    if (args.userIdName !== undefined) {
      this.userIdName = args.userIdName;
    }
  }
};
XcalarApiUserIdT.prototype = {};
XcalarApiUserIdT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userIdName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUserIdT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUserIdT');
  if (this.userIdName !== null && this.userIdName !== undefined) {
    output.writeFieldBegin('userIdName', Thrift.Type.STRING, 1);
    output.writeString(this.userIdName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionNewInputT = function(args) {
  this.sessionName = null;
  this.fork = null;
  this.forkedSessionName = null;
  if (args) {
    if (args.sessionName !== undefined) {
      this.sessionName = args.sessionName;
    }
    if (args.fork !== undefined) {
      this.fork = args.fork;
    }
    if (args.forkedSessionName !== undefined) {
      this.forkedSessionName = args.forkedSessionName;
    }
  }
};
XcalarApiSessionNewInputT.prototype = {};
XcalarApiSessionNewInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.fork = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.forkedSessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionNewInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionNewInputT');
  if (this.sessionName !== null && this.sessionName !== undefined) {
    output.writeFieldBegin('sessionName', Thrift.Type.STRING, 1);
    output.writeString(this.sessionName);
    output.writeFieldEnd();
  }
  if (this.fork !== null && this.fork !== undefined) {
    output.writeFieldBegin('fork', Thrift.Type.BOOL, 2);
    output.writeBool(this.fork);
    output.writeFieldEnd();
  }
  if (this.forkedSessionName !== null && this.forkedSessionName !== undefined) {
    output.writeFieldBegin('forkedSessionName', Thrift.Type.STRING, 3);
    output.writeString(this.forkedSessionName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionNewOutputT = function(args) {
  this.sessionGenericOutput = null;
  if (args) {
    if (args.sessionGenericOutput !== undefined) {
      this.sessionGenericOutput = args.sessionGenericOutput;
    }
  }
};
XcalarApiSessionNewOutputT.prototype = {};
XcalarApiSessionNewOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionGenericOutput = new XcalarApiSessionGenericOutputT();
        this.sessionGenericOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionNewOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionNewOutputT');
  if (this.sessionGenericOutput !== null && this.sessionGenericOutput !== undefined) {
    output.writeFieldBegin('sessionGenericOutput', Thrift.Type.STRUCT, 1);
    this.sessionGenericOutput.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionDeleteInputT = function(args) {
  this.sessionName = null;
  this.noCleanup = null;
  if (args) {
    if (args.sessionName !== undefined) {
      this.sessionName = args.sessionName;
    }
    if (args.noCleanup !== undefined) {
      this.noCleanup = args.noCleanup;
    }
  }
};
XcalarApiSessionDeleteInputT.prototype = {};
XcalarApiSessionDeleteInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.noCleanup = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionDeleteInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionDeleteInputT');
  if (this.sessionName !== null && this.sessionName !== undefined) {
    output.writeFieldBegin('sessionName', Thrift.Type.STRING, 1);
    output.writeString(this.sessionName);
    output.writeFieldEnd();
  }
  if (this.noCleanup !== null && this.noCleanup !== undefined) {
    output.writeFieldBegin('noCleanup', Thrift.Type.BOOL, 2);
    output.writeBool(this.noCleanup);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionSwitchInputT = function(args) {
  this.sessionName = null;
  this.origSessionName = null;
  this.noCleanup = null;
  if (args) {
    if (args.sessionName !== undefined) {
      this.sessionName = args.sessionName;
    }
    if (args.origSessionName !== undefined) {
      this.origSessionName = args.origSessionName;
    }
    if (args.noCleanup !== undefined) {
      this.noCleanup = args.noCleanup;
    }
  }
};
XcalarApiSessionSwitchInputT.prototype = {};
XcalarApiSessionSwitchInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.origSessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.noCleanup = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionSwitchInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionSwitchInputT');
  if (this.sessionName !== null && this.sessionName !== undefined) {
    output.writeFieldBegin('sessionName', Thrift.Type.STRING, 1);
    output.writeString(this.sessionName);
    output.writeFieldEnd();
  }
  if (this.origSessionName !== null && this.origSessionName !== undefined) {
    output.writeFieldBegin('origSessionName', Thrift.Type.STRING, 2);
    output.writeString(this.origSessionName);
    output.writeFieldEnd();
  }
  if (this.noCleanup !== null && this.noCleanup !== undefined) {
    output.writeFieldBegin('noCleanup', Thrift.Type.BOOL, 3);
    output.writeBool(this.noCleanup);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionRenameInputT = function(args) {
  this.sessionName = null;
  this.origSessionName = null;
  if (args) {
    if (args.sessionName !== undefined) {
      this.sessionName = args.sessionName;
    }
    if (args.origSessionName !== undefined) {
      this.origSessionName = args.origSessionName;
    }
  }
};
XcalarApiSessionRenameInputT.prototype = {};
XcalarApiSessionRenameInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.origSessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionRenameInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionRenameInputT');
  if (this.sessionName !== null && this.sessionName !== undefined) {
    output.writeFieldBegin('sessionName', Thrift.Type.STRING, 1);
    output.writeString(this.sessionName);
    output.writeFieldEnd();
  }
  if (this.origSessionName !== null && this.origSessionName !== undefined) {
    output.writeFieldBegin('origSessionName', Thrift.Type.STRING, 2);
    output.writeString(this.origSessionName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetQueryOutputT = function(args) {
  this.query = null;
  if (args) {
    if (args.query !== undefined) {
      this.query = args.query;
    }
  }
};
XcalarApiGetQueryOutputT.prototype = {};
XcalarApiGetQueryOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetQueryOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetQueryOutputT');
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 1);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDagNodeNamePatternInputT = function(args) {
  this.namePattern = null;
  this.srcType = null;
  if (args) {
    if (args.namePattern !== undefined) {
      this.namePattern = args.namePattern;
    }
    if (args.srcType !== undefined) {
      this.srcType = args.srcType;
    }
  }
};
XcalarApiDagNodeNamePatternInputT.prototype = {};
XcalarApiDagNodeNamePatternInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.namePattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.srcType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDagNodeNamePatternInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDagNodeNamePatternInputT');
  if (this.namePattern !== null && this.namePattern !== undefined) {
    output.writeFieldBegin('namePattern', Thrift.Type.STRING, 1);
    output.writeString(this.namePattern);
    output.writeFieldEnd();
  }
  if (this.srcType !== null && this.srcType !== undefined) {
    output.writeFieldBegin('srcType', Thrift.Type.I32, 2);
    output.writeI32(this.srcType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DhtArgsT = function(args) {
  this.upperBound = null;
  this.lowerBound = null;
  this.ordering = null;
  if (args) {
    if (args.upperBound !== undefined) {
      this.upperBound = args.upperBound;
    }
    if (args.lowerBound !== undefined) {
      this.lowerBound = args.lowerBound;
    }
    if (args.ordering !== undefined) {
      this.ordering = args.ordering;
    }
  }
};
DhtArgsT.prototype = {};
DhtArgsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.upperBound = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.lowerBound = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.ordering = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DhtArgsT.prototype.write = function(output) {
  output.writeStructBegin('DhtArgsT');
  if (this.upperBound !== null && this.upperBound !== undefined) {
    output.writeFieldBegin('upperBound', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.upperBound);
    output.writeFieldEnd();
  }
  if (this.lowerBound !== null && this.lowerBound !== undefined) {
    output.writeFieldBegin('lowerBound', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.lowerBound);
    output.writeFieldEnd();
  }
  if (this.ordering !== null && this.ordering !== undefined) {
    output.writeFieldBegin('ordering', Thrift.Type.I32, 3);
    output.writeI32(this.ordering);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiCreateDhtInputT = function(args) {
  this.dhtName = null;
  this.dhtArgs = null;
  if (args) {
    if (args.dhtName !== undefined) {
      this.dhtName = args.dhtName;
    }
    if (args.dhtArgs !== undefined) {
      this.dhtArgs = args.dhtArgs;
    }
  }
};
XcalarApiCreateDhtInputT.prototype = {};
XcalarApiCreateDhtInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dhtName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.dhtArgs = new DhtArgsT();
        this.dhtArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiCreateDhtInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiCreateDhtInputT');
  if (this.dhtName !== null && this.dhtName !== undefined) {
    output.writeFieldBegin('dhtName', Thrift.Type.STRING, 1);
    output.writeString(this.dhtName);
    output.writeFieldEnd();
  }
  if (this.dhtArgs !== null && this.dhtArgs !== undefined) {
    output.writeFieldBegin('dhtArgs', Thrift.Type.STRUCT, 2);
    this.dhtArgs.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDeleteDhtInputT = function(args) {
  this.dhtNameLen = null;
  this.dhtName = null;
  if (args) {
    if (args.dhtNameLen !== undefined) {
      this.dhtNameLen = args.dhtNameLen;
    }
    if (args.dhtName !== undefined) {
      this.dhtName = args.dhtName;
    }
  }
};
XcalarApiDeleteDhtInputT.prototype = {};
XcalarApiDeleteDhtInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.dhtNameLen = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dhtName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDeleteDhtInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDeleteDhtInputT');
  if (this.dhtNameLen !== null && this.dhtNameLen !== undefined) {
    output.writeFieldBegin('dhtNameLen', Thrift.Type.I64, 1);
    output.writeI64(this.dhtNameLen);
    output.writeFieldEnd();
  }
  if (this.dhtName !== null && this.dhtName !== undefined) {
    output.writeFieldBegin('dhtName', Thrift.Type.STRING, 2);
    output.writeString(this.dhtName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSupportGenerateInputT = function(args) {
  this.generateMiniBundle = null;
  this.supportCaseId = null;
  if (args) {
    if (args.generateMiniBundle !== undefined) {
      this.generateMiniBundle = args.generateMiniBundle;
    }
    if (args.supportCaseId !== undefined) {
      this.supportCaseId = args.supportCaseId;
    }
  }
};
XcalarApiSupportGenerateInputT.prototype = {};
XcalarApiSupportGenerateInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.generateMiniBundle = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.supportCaseId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSupportGenerateInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSupportGenerateInputT');
  if (this.generateMiniBundle !== null && this.generateMiniBundle !== undefined) {
    output.writeFieldBegin('generateMiniBundle', Thrift.Type.BOOL, 1);
    output.writeBool(this.generateMiniBundle);
    output.writeFieldEnd();
  }
  if (this.supportCaseId !== null && this.supportCaseId !== undefined) {
    output.writeFieldBegin('supportCaseId', Thrift.Type.I64, 2);
    output.writeI64(this.supportCaseId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSupportGenerateOutputT = function(args) {
  this.supportId = null;
  this.supportBundleSent = null;
  this.bundlePath = null;
  if (args) {
    if (args.supportId !== undefined) {
      this.supportId = args.supportId;
    }
    if (args.supportBundleSent !== undefined) {
      this.supportBundleSent = args.supportBundleSent;
    }
    if (args.bundlePath !== undefined) {
      this.bundlePath = args.bundlePath;
    }
  }
};
XcalarApiSupportGenerateOutputT.prototype = {};
XcalarApiSupportGenerateOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.supportId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.supportBundleSent = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.bundlePath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSupportGenerateOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSupportGenerateOutputT');
  if (this.supportId !== null && this.supportId !== undefined) {
    output.writeFieldBegin('supportId', Thrift.Type.STRING, 1);
    output.writeString(this.supportId);
    output.writeFieldEnd();
  }
  if (this.supportBundleSent !== null && this.supportBundleSent !== undefined) {
    output.writeFieldBegin('supportBundleSent', Thrift.Type.BOOL, 2);
    output.writeBool(this.supportBundleSent);
    output.writeFieldEnd();
  }
  if (this.bundlePath !== null && this.bundlePath !== undefined) {
    output.writeFieldBegin('bundlePath', Thrift.Type.STRING, 3);
    output.writeString(this.bundlePath);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IndexErrorStatsT = function(args) {
  this.numParseError = null;
  this.numFieldNoExist = null;
  this.numTypeMismatch = null;
  this.numOtherError = null;
  if (args) {
    if (args.numParseError !== undefined) {
      this.numParseError = args.numParseError;
    }
    if (args.numFieldNoExist !== undefined) {
      this.numFieldNoExist = args.numFieldNoExist;
    }
    if (args.numTypeMismatch !== undefined) {
      this.numTypeMismatch = args.numTypeMismatch;
    }
    if (args.numOtherError !== undefined) {
      this.numOtherError = args.numOtherError;
    }
  }
};
IndexErrorStatsT.prototype = {};
IndexErrorStatsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numParseError = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numFieldNoExist = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numTypeMismatch = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.numOtherError = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IndexErrorStatsT.prototype.write = function(output) {
  output.writeStructBegin('IndexErrorStatsT');
  if (this.numParseError !== null && this.numParseError !== undefined) {
    output.writeFieldBegin('numParseError', Thrift.Type.I64, 1);
    output.writeI64(this.numParseError);
    output.writeFieldEnd();
  }
  if (this.numFieldNoExist !== null && this.numFieldNoExist !== undefined) {
    output.writeFieldBegin('numFieldNoExist', Thrift.Type.I64, 2);
    output.writeI64(this.numFieldNoExist);
    output.writeFieldEnd();
  }
  if (this.numTypeMismatch !== null && this.numTypeMismatch !== undefined) {
    output.writeFieldBegin('numTypeMismatch', Thrift.Type.I64, 3);
    output.writeI64(this.numTypeMismatch);
    output.writeFieldEnd();
  }
  if (this.numOtherError !== null && this.numOtherError !== undefined) {
    output.writeFieldBegin('numOtherError', Thrift.Type.I64, 4);
    output.writeI64(this.numOtherError);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LoadErrorStatsT = function(args) {
  this.numFileOpenFailure = null;
  this.numDirOpenFailure = null;
  if (args) {
    if (args.numFileOpenFailure !== undefined) {
      this.numFileOpenFailure = args.numFileOpenFailure;
    }
    if (args.numDirOpenFailure !== undefined) {
      this.numDirOpenFailure = args.numDirOpenFailure;
    }
  }
};
LoadErrorStatsT.prototype = {};
LoadErrorStatsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numFileOpenFailure = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numDirOpenFailure = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LoadErrorStatsT.prototype.write = function(output) {
  output.writeStructBegin('LoadErrorStatsT');
  if (this.numFileOpenFailure !== null && this.numFileOpenFailure !== undefined) {
    output.writeFieldBegin('numFileOpenFailure', Thrift.Type.I64, 1);
    output.writeI64(this.numFileOpenFailure);
    output.writeFieldEnd();
  }
  if (this.numDirOpenFailure !== null && this.numDirOpenFailure !== undefined) {
    output.writeFieldBegin('numDirOpenFailure', Thrift.Type.I64, 2);
    output.writeI64(this.numDirOpenFailure);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EvalErrorStatsT = function(args) {
  this.numUnsubstituted = null;
  this.numUnspportedTypes = null;
  this.numMixedTypeNotSupported = null;
  this.numEvalCastError = null;
  this.numDivByZero = null;
  this.numEvalFunctionError = null;
  if (args) {
    if (args.numUnsubstituted !== undefined) {
      this.numUnsubstituted = args.numUnsubstituted;
    }
    if (args.numUnspportedTypes !== undefined) {
      this.numUnspportedTypes = args.numUnspportedTypes;
    }
    if (args.numMixedTypeNotSupported !== undefined) {
      this.numMixedTypeNotSupported = args.numMixedTypeNotSupported;
    }
    if (args.numEvalCastError !== undefined) {
      this.numEvalCastError = args.numEvalCastError;
    }
    if (args.numDivByZero !== undefined) {
      this.numDivByZero = args.numDivByZero;
    }
    if (args.numEvalFunctionError !== undefined) {
      this.numEvalFunctionError = args.numEvalFunctionError;
    }
  }
};
EvalErrorStatsT.prototype = {};
EvalErrorStatsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numUnsubstituted = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numUnspportedTypes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numMixedTypeNotSupported = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.numEvalCastError = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.numDivByZero = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.numEvalFunctionError = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EvalErrorStatsT.prototype.write = function(output) {
  output.writeStructBegin('EvalErrorStatsT');
  if (this.numUnsubstituted !== null && this.numUnsubstituted !== undefined) {
    output.writeFieldBegin('numUnsubstituted', Thrift.Type.I64, 1);
    output.writeI64(this.numUnsubstituted);
    output.writeFieldEnd();
  }
  if (this.numUnspportedTypes !== null && this.numUnspportedTypes !== undefined) {
    output.writeFieldBegin('numUnspportedTypes', Thrift.Type.I64, 2);
    output.writeI64(this.numUnspportedTypes);
    output.writeFieldEnd();
  }
  if (this.numMixedTypeNotSupported !== null && this.numMixedTypeNotSupported !== undefined) {
    output.writeFieldBegin('numMixedTypeNotSupported', Thrift.Type.I64, 3);
    output.writeI64(this.numMixedTypeNotSupported);
    output.writeFieldEnd();
  }
  if (this.numEvalCastError !== null && this.numEvalCastError !== undefined) {
    output.writeFieldBegin('numEvalCastError', Thrift.Type.I64, 4);
    output.writeI64(this.numEvalCastError);
    output.writeFieldEnd();
  }
  if (this.numDivByZero !== null && this.numDivByZero !== undefined) {
    output.writeFieldBegin('numDivByZero', Thrift.Type.I64, 5);
    output.writeI64(this.numDivByZero);
    output.writeFieldEnd();
  }
  if (this.numEvalFunctionError !== null && this.numEvalFunctionError !== undefined) {
    output.writeFieldBegin('numEvalFunctionError', Thrift.Type.I64, 6);
    output.writeI64(this.numEvalFunctionError);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpErrorStatsT = function(args) {
  this.loadErrorStats = null;
  this.indexErrorStats = null;
  this.evalErrorStats = null;
  if (args) {
    if (args.loadErrorStats !== undefined) {
      this.loadErrorStats = args.loadErrorStats;
    }
    if (args.indexErrorStats !== undefined) {
      this.indexErrorStats = args.indexErrorStats;
    }
    if (args.evalErrorStats !== undefined) {
      this.evalErrorStats = args.evalErrorStats;
    }
  }
};
OpErrorStatsT.prototype = {};
OpErrorStatsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.loadErrorStats = new LoadErrorStatsT();
        this.loadErrorStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.indexErrorStats = new IndexErrorStatsT();
        this.indexErrorStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.evalErrorStats = new EvalErrorStatsT();
        this.evalErrorStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpErrorStatsT.prototype.write = function(output) {
  output.writeStructBegin('OpErrorStatsT');
  if (this.loadErrorStats !== null && this.loadErrorStats !== undefined) {
    output.writeFieldBegin('loadErrorStats', Thrift.Type.STRUCT, 1);
    this.loadErrorStats.write(output);
    output.writeFieldEnd();
  }
  if (this.indexErrorStats !== null && this.indexErrorStats !== undefined) {
    output.writeFieldBegin('indexErrorStats', Thrift.Type.STRUCT, 2);
    this.indexErrorStats.write(output);
    output.writeFieldEnd();
  }
  if (this.evalErrorStats !== null && this.evalErrorStats !== undefined) {
    output.writeFieldBegin('evalErrorStats', Thrift.Type.STRUCT, 3);
    this.evalErrorStats.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiOpDetailsT = function(args) {
  this.numWorkCompleted = null;
  this.numWorkTotal = null;
  this.cancelled = null;
  this.errorStats = null;
  this.numRowsTotal = null;
  if (args) {
    if (args.numWorkCompleted !== undefined) {
      this.numWorkCompleted = args.numWorkCompleted;
    }
    if (args.numWorkTotal !== undefined) {
      this.numWorkTotal = args.numWorkTotal;
    }
    if (args.cancelled !== undefined) {
      this.cancelled = args.cancelled;
    }
    if (args.errorStats !== undefined) {
      this.errorStats = args.errorStats;
    }
    if (args.numRowsTotal !== undefined) {
      this.numRowsTotal = args.numRowsTotal;
    }
  }
};
XcalarApiOpDetailsT.prototype = {};
XcalarApiOpDetailsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numWorkCompleted = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numWorkTotal = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.cancelled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.errorStats = new OpErrorStatsT();
        this.errorStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.numRowsTotal = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiOpDetailsT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiOpDetailsT');
  if (this.numWorkCompleted !== null && this.numWorkCompleted !== undefined) {
    output.writeFieldBegin('numWorkCompleted', Thrift.Type.I64, 1);
    output.writeI64(this.numWorkCompleted);
    output.writeFieldEnd();
  }
  if (this.numWorkTotal !== null && this.numWorkTotal !== undefined) {
    output.writeFieldBegin('numWorkTotal', Thrift.Type.I64, 2);
    output.writeI64(this.numWorkTotal);
    output.writeFieldEnd();
  }
  if (this.cancelled !== null && this.cancelled !== undefined) {
    output.writeFieldBegin('cancelled', Thrift.Type.BOOL, 3);
    output.writeBool(this.cancelled);
    output.writeFieldEnd();
  }
  if (this.errorStats !== null && this.errorStats !== undefined) {
    output.writeFieldBegin('errorStats', Thrift.Type.STRUCT, 4);
    this.errorStats.write(output);
    output.writeFieldEnd();
  }
  if (this.numRowsTotal !== null && this.numRowsTotal !== undefined) {
    output.writeFieldBegin('numRowsTotal', Thrift.Type.I64, 5);
    output.writeI64(this.numRowsTotal);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiNodeOpStatsT = function(args) {
  this.status = null;
  this.nodeId = null;
  this.opDetails = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.nodeId !== undefined) {
      this.nodeId = args.nodeId;
    }
    if (args.opDetails !== undefined) {
      this.opDetails = args.opDetails;
    }
  }
};
XcalarApiNodeOpStatsT.prototype = {};
XcalarApiNodeOpStatsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.nodeId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.opDetails = new XcalarApiOpDetailsT();
        this.opDetails.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiNodeOpStatsT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiNodeOpStatsT');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.nodeId !== null && this.nodeId !== undefined) {
    output.writeFieldBegin('nodeId', Thrift.Type.I64, 2);
    output.writeI64(this.nodeId);
    output.writeFieldEnd();
  }
  if (this.opDetails !== null && this.opDetails !== undefined) {
    output.writeFieldBegin('opDetails', Thrift.Type.STRUCT, 3);
    this.opDetails.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiPerNodeOpStatsT = function(args) {
  this.numNodes = null;
  this.api = null;
  this.nodeOpStats = null;
  if (args) {
    if (args.numNodes !== undefined) {
      this.numNodes = args.numNodes;
    }
    if (args.api !== undefined) {
      this.api = args.api;
    }
    if (args.nodeOpStats !== undefined) {
      this.nodeOpStats = args.nodeOpStats;
    }
  }
};
XcalarApiPerNodeOpStatsT.prototype = {};
XcalarApiPerNodeOpStatsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numNodes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.api = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size320 = 0;
        var _rtmp3324;
        this.nodeOpStats = [];
        var _etype323 = 0;
        _rtmp3324 = input.readListBegin();
        _etype323 = _rtmp3324.etype;
        _size320 = _rtmp3324.size;
        for (var _i325 = 0; _i325 < _size320; ++_i325)
        {
          var elem326 = null;
          elem326 = new XcalarApiNodeOpStatsT();
          elem326.read(input);
          this.nodeOpStats.push(elem326);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiPerNodeOpStatsT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiPerNodeOpStatsT');
  if (this.numNodes !== null && this.numNodes !== undefined) {
    output.writeFieldBegin('numNodes', Thrift.Type.I64, 1);
    output.writeI64(this.numNodes);
    output.writeFieldEnd();
  }
  if (this.api !== null && this.api !== undefined) {
    output.writeFieldBegin('api', Thrift.Type.I32, 2);
    output.writeI32(this.api);
    output.writeFieldEnd();
  }
  if (this.nodeOpStats !== null && this.nodeOpStats !== undefined) {
    output.writeFieldBegin('nodeOpStats', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.nodeOpStats.length);
    for (var iter327 in this.nodeOpStats)
    {
      if (this.nodeOpStats.hasOwnProperty(iter327))
      {
        iter327 = this.nodeOpStats[iter327];
        iter327.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiOpStatsOutT = function(args) {
  this.api = null;
  this.opDetails = null;
  if (args) {
    if (args.api !== undefined) {
      this.api = args.api;
    }
    if (args.opDetails !== undefined) {
      this.opDetails = args.opDetails;
    }
  }
};
XcalarApiOpStatsOutT.prototype = {};
XcalarApiOpStatsOutT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.api = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.opDetails = new XcalarApiOpDetailsT();
        this.opDetails.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiOpStatsOutT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiOpStatsOutT');
  if (this.api !== null && this.api !== undefined) {
    output.writeFieldBegin('api', Thrift.Type.I32, 1);
    output.writeI32(this.api);
    output.writeFieldEnd();
  }
  if (this.opDetails !== null && this.opDetails !== undefined) {
    output.writeFieldBegin('opDetails', Thrift.Type.STRUCT, 2);
    this.opDetails.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiErrorpointSetInputT = function(args) {
  this.moduleName = null;
  this.pointName = null;
  this.exactNameMatch = null;
  this.probability = null;
  this.fireNTimes = null;
  this.opaque = null;
  if (args) {
    if (args.moduleName !== undefined) {
      this.moduleName = args.moduleName;
    }
    if (args.pointName !== undefined) {
      this.pointName = args.pointName;
    }
    if (args.exactNameMatch !== undefined) {
      this.exactNameMatch = args.exactNameMatch;
    }
    if (args.probability !== undefined) {
      this.probability = args.probability;
    }
    if (args.fireNTimes !== undefined) {
      this.fireNTimes = args.fireNTimes;
    }
    if (args.opaque !== undefined) {
      this.opaque = args.opaque;
    }
  }
};
XcalarApiErrorpointSetInputT.prototype = {};
XcalarApiErrorpointSetInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.moduleName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.pointName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.exactNameMatch = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.probability = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.fireNTimes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.opaque = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiErrorpointSetInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiErrorpointSetInputT');
  if (this.moduleName !== null && this.moduleName !== undefined) {
    output.writeFieldBegin('moduleName', Thrift.Type.STRING, 1);
    output.writeString(this.moduleName);
    output.writeFieldEnd();
  }
  if (this.pointName !== null && this.pointName !== undefined) {
    output.writeFieldBegin('pointName', Thrift.Type.STRING, 2);
    output.writeString(this.pointName);
    output.writeFieldEnd();
  }
  if (this.exactNameMatch !== null && this.exactNameMatch !== undefined) {
    output.writeFieldBegin('exactNameMatch', Thrift.Type.BOOL, 3);
    output.writeBool(this.exactNameMatch);
    output.writeFieldEnd();
  }
  if (this.probability !== null && this.probability !== undefined) {
    output.writeFieldBegin('probability', Thrift.Type.I64, 4);
    output.writeI64(this.probability);
    output.writeFieldEnd();
  }
  if (this.fireNTimes !== null && this.fireNTimes !== undefined) {
    output.writeFieldBegin('fireNTimes', Thrift.Type.I64, 5);
    output.writeI64(this.fireNTimes);
    output.writeFieldEnd();
  }
  if (this.opaque !== null && this.opaque !== undefined) {
    output.writeFieldBegin('opaque', Thrift.Type.STRING, 6);
    output.writeString(this.opaque);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiImportRetinaInputT = function(args) {
  this.retinaName = null;
  this.overwriteExistingUdf = null;
  this.retinaCount = null;
  this.retina = null;
  this.loadFromPersistedRetina = null;
  this.persistedRetinaUrl = null;
  if (args) {
    if (args.retinaName !== undefined) {
      this.retinaName = args.retinaName;
    }
    if (args.overwriteExistingUdf !== undefined) {
      this.overwriteExistingUdf = args.overwriteExistingUdf;
    }
    if (args.retinaCount !== undefined) {
      this.retinaCount = args.retinaCount;
    }
    if (args.retina !== undefined) {
      this.retina = args.retina;
    }
    if (args.loadFromPersistedRetina !== undefined) {
      this.loadFromPersistedRetina = args.loadFromPersistedRetina;
    }
    if (args.persistedRetinaUrl !== undefined) {
      this.persistedRetinaUrl = args.persistedRetinaUrl;
    }
  }
};
XcalarApiImportRetinaInputT.prototype = {};
XcalarApiImportRetinaInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.retinaName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.overwriteExistingUdf = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.retinaCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.retina = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.loadFromPersistedRetina = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.persistedRetinaUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiImportRetinaInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiImportRetinaInputT');
  if (this.retinaName !== null && this.retinaName !== undefined) {
    output.writeFieldBegin('retinaName', Thrift.Type.STRING, 1);
    output.writeString(this.retinaName);
    output.writeFieldEnd();
  }
  if (this.overwriteExistingUdf !== null && this.overwriteExistingUdf !== undefined) {
    output.writeFieldBegin('overwriteExistingUdf', Thrift.Type.BOOL, 2);
    output.writeBool(this.overwriteExistingUdf);
    output.writeFieldEnd();
  }
  if (this.retinaCount !== null && this.retinaCount !== undefined) {
    output.writeFieldBegin('retinaCount', Thrift.Type.I64, 3);
    output.writeI64(this.retinaCount);
    output.writeFieldEnd();
  }
  if (this.retina !== null && this.retina !== undefined) {
    output.writeFieldBegin('retina', Thrift.Type.STRING, 4);
    output.writeString(this.retina);
    output.writeFieldEnd();
  }
  if (this.loadFromPersistedRetina !== null && this.loadFromPersistedRetina !== undefined) {
    output.writeFieldBegin('loadFromPersistedRetina', Thrift.Type.BOOL, 5);
    output.writeBool(this.loadFromPersistedRetina);
    output.writeFieldEnd();
  }
  if (this.persistedRetinaUrl !== null && this.persistedRetinaUrl !== undefined) {
    output.writeFieldBegin('persistedRetinaUrl', Thrift.Type.STRING, 6);
    output.writeString(this.persistedRetinaUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiExportRetinaInputT = function(args) {
  this.retinaName = null;
  if (args) {
    if (args.retinaName !== undefined) {
      this.retinaName = args.retinaName;
    }
  }
};
XcalarApiExportRetinaInputT.prototype = {};
XcalarApiExportRetinaInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.retinaName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiExportRetinaInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiExportRetinaInputT');
  if (this.retinaName !== null && this.retinaName !== undefined) {
    output.writeFieldBegin('retinaName', Thrift.Type.STRING, 1);
    output.writeString(this.retinaName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiStartFuncTestInputT = function(args) {
  this.parallel = null;
  this.runAllTests = null;
  this.runOnAllNodes = null;
  this.numTestPatterns = null;
  this.testNamePatterns = null;
  if (args) {
    if (args.parallel !== undefined) {
      this.parallel = args.parallel;
    }
    if (args.runAllTests !== undefined) {
      this.runAllTests = args.runAllTests;
    }
    if (args.runOnAllNodes !== undefined) {
      this.runOnAllNodes = args.runOnAllNodes;
    }
    if (args.numTestPatterns !== undefined) {
      this.numTestPatterns = args.numTestPatterns;
    }
    if (args.testNamePatterns !== undefined) {
      this.testNamePatterns = args.testNamePatterns;
    }
  }
};
XcalarApiStartFuncTestInputT.prototype = {};
XcalarApiStartFuncTestInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.parallel = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.runAllTests = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.runOnAllNodes = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.numTestPatterns = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size328 = 0;
        var _rtmp3332;
        this.testNamePatterns = [];
        var _etype331 = 0;
        _rtmp3332 = input.readListBegin();
        _etype331 = _rtmp3332.etype;
        _size328 = _rtmp3332.size;
        for (var _i333 = 0; _i333 < _size328; ++_i333)
        {
          var elem334 = null;
          elem334 = input.readString().value;
          this.testNamePatterns.push(elem334);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiStartFuncTestInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiStartFuncTestInputT');
  if (this.parallel !== null && this.parallel !== undefined) {
    output.writeFieldBegin('parallel', Thrift.Type.BOOL, 1);
    output.writeBool(this.parallel);
    output.writeFieldEnd();
  }
  if (this.runAllTests !== null && this.runAllTests !== undefined) {
    output.writeFieldBegin('runAllTests', Thrift.Type.BOOL, 2);
    output.writeBool(this.runAllTests);
    output.writeFieldEnd();
  }
  if (this.runOnAllNodes !== null && this.runOnAllNodes !== undefined) {
    output.writeFieldBegin('runOnAllNodes', Thrift.Type.BOOL, 3);
    output.writeBool(this.runOnAllNodes);
    output.writeFieldEnd();
  }
  if (this.numTestPatterns !== null && this.numTestPatterns !== undefined) {
    output.writeFieldBegin('numTestPatterns', Thrift.Type.I32, 4);
    output.writeI32(this.numTestPatterns);
    output.writeFieldEnd();
  }
  if (this.testNamePatterns !== null && this.testNamePatterns !== undefined) {
    output.writeFieldBegin('testNamePatterns', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.testNamePatterns.length);
    for (var iter335 in this.testNamePatterns)
    {
      if (this.testNamePatterns.hasOwnProperty(iter335))
      {
        iter335 = this.testNamePatterns[iter335];
        output.writeString(iter335);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListFuncTestInputT = function(args) {
  this.namePattern = null;
  if (args) {
    if (args.namePattern !== undefined) {
      this.namePattern = args.namePattern;
    }
  }
};
XcalarApiListFuncTestInputT.prototype = {};
XcalarApiListFuncTestInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.namePattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListFuncTestInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListFuncTestInputT');
  if (this.namePattern !== null && this.namePattern !== undefined) {
    output.writeFieldBegin('namePattern', Thrift.Type.STRING, 1);
    output.writeString(this.namePattern);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiConfigParamT = function(args) {
  this.paramName = null;
  this.paramValue = null;
  this.visible = null;
  this.changeable = null;
  this.restartRequired = null;
  this.defaultValue = null;
  if (args) {
    if (args.paramName !== undefined) {
      this.paramName = args.paramName;
    }
    if (args.paramValue !== undefined) {
      this.paramValue = args.paramValue;
    }
    if (args.visible !== undefined) {
      this.visible = args.visible;
    }
    if (args.changeable !== undefined) {
      this.changeable = args.changeable;
    }
    if (args.restartRequired !== undefined) {
      this.restartRequired = args.restartRequired;
    }
    if (args.defaultValue !== undefined) {
      this.defaultValue = args.defaultValue;
    }
  }
};
XcalarApiConfigParamT.prototype = {};
XcalarApiConfigParamT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.paramName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.paramValue = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.visible = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.changeable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.restartRequired = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.defaultValue = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiConfigParamT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiConfigParamT');
  if (this.paramName !== null && this.paramName !== undefined) {
    output.writeFieldBegin('paramName', Thrift.Type.STRING, 1);
    output.writeString(this.paramName);
    output.writeFieldEnd();
  }
  if (this.paramValue !== null && this.paramValue !== undefined) {
    output.writeFieldBegin('paramValue', Thrift.Type.STRING, 2);
    output.writeString(this.paramValue);
    output.writeFieldEnd();
  }
  if (this.visible !== null && this.visible !== undefined) {
    output.writeFieldBegin('visible', Thrift.Type.BOOL, 3);
    output.writeBool(this.visible);
    output.writeFieldEnd();
  }
  if (this.changeable !== null && this.changeable !== undefined) {
    output.writeFieldBegin('changeable', Thrift.Type.BOOL, 4);
    output.writeBool(this.changeable);
    output.writeFieldEnd();
  }
  if (this.restartRequired !== null && this.restartRequired !== undefined) {
    output.writeFieldBegin('restartRequired', Thrift.Type.BOOL, 5);
    output.writeBool(this.restartRequired);
    output.writeFieldEnd();
  }
  if (this.defaultValue !== null && this.defaultValue !== undefined) {
    output.writeFieldBegin('defaultValue', Thrift.Type.STRING, 6);
    output.writeString(this.defaultValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetConfigParamsOutputT = function(args) {
  this.numParams = null;
  this.parameter = null;
  if (args) {
    if (args.numParams !== undefined) {
      this.numParams = args.numParams;
    }
    if (args.parameter !== undefined) {
      this.parameter = args.parameter;
    }
  }
};
XcalarApiGetConfigParamsOutputT.prototype = {};
XcalarApiGetConfigParamsOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numParams = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size336 = 0;
        var _rtmp3340;
        this.parameter = [];
        var _etype339 = 0;
        _rtmp3340 = input.readListBegin();
        _etype339 = _rtmp3340.etype;
        _size336 = _rtmp3340.size;
        for (var _i341 = 0; _i341 < _size336; ++_i341)
        {
          var elem342 = null;
          elem342 = new XcalarApiConfigParamT();
          elem342.read(input);
          this.parameter.push(elem342);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetConfigParamsOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetConfigParamsOutputT');
  if (this.numParams !== null && this.numParams !== undefined) {
    output.writeFieldBegin('numParams', Thrift.Type.I64, 1);
    output.writeI64(this.numParams);
    output.writeFieldEnd();
  }
  if (this.parameter !== null && this.parameter !== undefined) {
    output.writeFieldBegin('parameter', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.parameter.length);
    for (var iter343 in this.parameter)
    {
      if (this.parameter.hasOwnProperty(iter343))
      {
        iter343 = this.parameter[iter343];
        iter343.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSetConfigParamInputT = function(args) {
  this.paramName = null;
  this.paramValue = null;
  if (args) {
    if (args.paramName !== undefined) {
      this.paramName = args.paramName;
    }
    if (args.paramValue !== undefined) {
      this.paramValue = args.paramValue;
    }
  }
};
XcalarApiSetConfigParamInputT.prototype = {};
XcalarApiSetConfigParamInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.paramName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.paramValue = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSetConfigParamInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSetConfigParamInputT');
  if (this.paramName !== null && this.paramName !== undefined) {
    output.writeFieldBegin('paramName', Thrift.Type.STRING, 1);
    output.writeString(this.paramName);
    output.writeFieldEnd();
  }
  if (this.paramValue !== null && this.paramValue !== undefined) {
    output.writeFieldBegin('paramValue', Thrift.Type.STRING, 2);
    output.writeString(this.paramValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetTableMetaInputT = function(args) {
  this.tableNameInput = null;
  this.isPrecise = null;
  if (args) {
    if (args.tableNameInput !== undefined) {
      this.tableNameInput = args.tableNameInput;
    }
    if (args.isPrecise !== undefined) {
      this.isPrecise = args.isPrecise;
    }
  }
};
XcalarApiGetTableMetaInputT.prototype = {};
XcalarApiGetTableMetaInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tableNameInput = new XcalarApiNamedInputT();
        this.tableNameInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.isPrecise = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetTableMetaInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetTableMetaInputT');
  if (this.tableNameInput !== null && this.tableNameInput !== undefined) {
    output.writeFieldBegin('tableNameInput', Thrift.Type.STRUCT, 1);
    this.tableNameInput.write(output);
    output.writeFieldEnd();
  }
  if (this.isPrecise !== null && this.isPrecise !== undefined) {
    output.writeFieldBegin('isPrecise', Thrift.Type.BOOL, 2);
    output.writeBool(this.isPrecise);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetMemoryUsageInputT = function(args) {
  this.userName = null;
  this.userId = null;
  if (args) {
    if (args.userName !== undefined) {
      this.userName = args.userName;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
XcalarApiGetMemoryUsageInputT.prototype = {};
XcalarApiGetMemoryUsageInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetMemoryUsageInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetMemoryUsageInputT');
  if (this.userName !== null && this.userName !== undefined) {
    output.writeFieldBegin('userName', Thrift.Type.STRING, 1);
    output.writeString(this.userName);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 2);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiLogLevelSetInputT = function(args) {
  this.logLevel = null;
  this.logFlush = null;
  this.logFlushLevel = null;
  this.logFlushPeriod = null;
  if (args) {
    if (args.logLevel !== undefined) {
      this.logLevel = args.logLevel;
    }
    if (args.logFlush !== undefined) {
      this.logFlush = args.logFlush;
    }
    if (args.logFlushLevel !== undefined) {
      this.logFlushLevel = args.logFlushLevel;
    }
    if (args.logFlushPeriod !== undefined) {
      this.logFlushPeriod = args.logFlushPeriod;
    }
  }
};
XcalarApiLogLevelSetInputT.prototype = {};
XcalarApiLogLevelSetInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.logLevel = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.logFlush = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.logFlushLevel = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.logFlushPeriod = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiLogLevelSetInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiLogLevelSetInputT');
  if (this.logLevel !== null && this.logLevel !== undefined) {
    output.writeFieldBegin('logLevel', Thrift.Type.I32, 1);
    output.writeI32(this.logLevel);
    output.writeFieldEnd();
  }
  if (this.logFlush !== null && this.logFlush !== undefined) {
    output.writeFieldBegin('logFlush', Thrift.Type.BOOL, 2);
    output.writeBool(this.logFlush);
    output.writeFieldEnd();
  }
  if (this.logFlushLevel !== null && this.logFlushLevel !== undefined) {
    output.writeFieldBegin('logFlushLevel', Thrift.Type.I32, 3);
    output.writeI32(this.logFlushLevel);
    output.writeFieldEnd();
  }
  if (this.logFlushPeriod !== null && this.logFlushPeriod !== undefined) {
    output.writeFieldBegin('logFlushPeriod', Thrift.Type.I32, 4);
    output.writeI32(this.logFlushPeriod);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDagTableNameInputT = function(args) {
  this.tableInput = null;
  if (args) {
    if (args.tableInput !== undefined) {
      this.tableInput = args.tableInput;
    }
  }
};
XcalarApiDagTableNameInputT.prototype = {};
XcalarApiDagTableNameInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableInput = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDagTableNameInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDagTableNameInputT');
  if (this.tableInput !== null && this.tableInput !== undefined) {
    output.writeFieldBegin('tableInput', Thrift.Type.STRING, 1);
    output.writeString(this.tableInput);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListParametersInRetinaInputT = function(args) {
  this.listRetInput = null;
  if (args) {
    if (args.listRetInput !== undefined) {
      this.listRetInput = args.listRetInput;
    }
  }
};
XcalarApiListParametersInRetinaInputT.prototype = {};
XcalarApiListParametersInRetinaInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.listRetInput = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListParametersInRetinaInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListParametersInRetinaInputT');
  if (this.listRetInput !== null && this.listRetInput !== undefined) {
    output.writeFieldBegin('listRetInput', Thrift.Type.STRING, 1);
    output.writeString(this.listRetInput);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionListArrayInputT = function(args) {
  this.sesListInput = null;
  if (args) {
    if (args.sesListInput !== undefined) {
      this.sesListInput = args.sesListInput;
    }
  }
};
XcalarApiSessionListArrayInputT.prototype = {};
XcalarApiSessionListArrayInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sesListInput = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionListArrayInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionListArrayInputT');
  if (this.sesListInput !== null && this.sesListInput !== undefined) {
    output.writeFieldBegin('sesListInput', Thrift.Type.STRING, 1);
    output.writeString(this.sesListInput);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDeleteRetinaInputT = function(args) {
  this.delRetInput = null;
  if (args) {
    if (args.delRetInput !== undefined) {
      this.delRetInput = args.delRetInput;
    }
  }
};
XcalarApiDeleteRetinaInputT.prototype = {};
XcalarApiDeleteRetinaInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.delRetInput = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDeleteRetinaInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDeleteRetinaInputT');
  if (this.delRetInput !== null && this.delRetInput !== undefined) {
    output.writeFieldBegin('delRetInput', Thrift.Type.STRING, 1);
    output.writeString(this.delRetInput);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiLicenseUpdateInputT = function(args) {
  this.licUpdateInput = null;
  if (args) {
    if (args.licUpdateInput !== undefined) {
      this.licUpdateInput = args.licUpdateInput;
    }
  }
};
XcalarApiLicenseUpdateInputT.prototype = {};
XcalarApiLicenseUpdateInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.licUpdateInput = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiLicenseUpdateInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiLicenseUpdateInputT');
  if (this.licUpdateInput !== null && this.licUpdateInput !== undefined) {
    output.writeFieldBegin('licUpdateInput', Thrift.Type.STRING, 1);
    output.writeString(this.licUpdateInput);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDeleteDatasetsInputT = function(args) {
  this.delInput = null;
  if (args) {
    if (args.delInput !== undefined) {
      this.delInput = args.delInput;
    }
  }
};
XcalarApiDeleteDatasetsInputT.prototype = {};
XcalarApiDeleteDatasetsInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.delInput = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDeleteDatasetsInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDeleteDatasetsInputT');
  if (this.delInput !== null && this.delInput !== undefined) {
    output.writeFieldBegin('delInput', Thrift.Type.STRING, 1);
    output.writeString(this.delInput);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiShutdownInputT = function(args) {
  this.doShutdown = null;
  if (args) {
    if (args.doShutdown !== undefined) {
      this.doShutdown = args.doShutdown;
    }
  }
};
XcalarApiShutdownInputT.prototype = {};
XcalarApiShutdownInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.doShutdown = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiShutdownInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiShutdownInputT');
  if (this.doShutdown !== null && this.doShutdown !== undefined) {
    output.writeFieldBegin('doShutdown', Thrift.Type.BOOL, 1);
    output.writeBool(this.doShutdown);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetIpAddrInputT = function(args) {
  this.nodeId = null;
  if (args) {
    if (args.nodeId !== undefined) {
      this.nodeId = args.nodeId;
    }
  }
};
XcalarApiGetIpAddrInputT.prototype = {};
XcalarApiGetIpAddrInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.nodeId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetIpAddrInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetIpAddrInputT');
  if (this.nodeId !== null && this.nodeId !== undefined) {
    output.writeFieldBegin('nodeId', Thrift.Type.I64, 1);
    output.writeI64(this.nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiTagDagNodesInputT = function(args) {
  this.numDagNodes = null;
  this.dagNodeNames = null;
  this.tag = null;
  if (args) {
    if (args.numDagNodes !== undefined) {
      this.numDagNodes = args.numDagNodes;
    }
    if (args.dagNodeNames !== undefined) {
      this.dagNodeNames = args.dagNodeNames;
    }
    if (args.tag !== undefined) {
      this.tag = args.tag;
    }
  }
};
XcalarApiTagDagNodesInputT.prototype = {};
XcalarApiTagDagNodesInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numDagNodes = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size344 = 0;
        var _rtmp3348;
        this.dagNodeNames = [];
        var _etype347 = 0;
        _rtmp3348 = input.readListBegin();
        _etype347 = _rtmp3348.etype;
        _size344 = _rtmp3348.size;
        for (var _i349 = 0; _i349 < _size344; ++_i349)
        {
          var elem350 = null;
          elem350 = input.readString().value;
          this.dagNodeNames.push(elem350);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.tag = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiTagDagNodesInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiTagDagNodesInputT');
  if (this.numDagNodes !== null && this.numDagNodes !== undefined) {
    output.writeFieldBegin('numDagNodes', Thrift.Type.I32, 1);
    output.writeI32(this.numDagNodes);
    output.writeFieldEnd();
  }
  if (this.dagNodeNames !== null && this.dagNodeNames !== undefined) {
    output.writeFieldBegin('dagNodeNames', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.dagNodeNames.length);
    for (var iter351 in this.dagNodeNames)
    {
      if (this.dagNodeNames.hasOwnProperty(iter351))
      {
        iter351 = this.dagNodeNames[iter351];
        output.writeString(iter351);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tag !== null && this.tag !== undefined) {
    output.writeFieldBegin('tag', Thrift.Type.STRING, 3);
    output.writeString(this.tag);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiCommentDagNodesInputT = function(args) {
  this.numDagNodes = null;
  this.dagNodeNames = null;
  this.comment = null;
  if (args) {
    if (args.numDagNodes !== undefined) {
      this.numDagNodes = args.numDagNodes;
    }
    if (args.dagNodeNames !== undefined) {
      this.dagNodeNames = args.dagNodeNames;
    }
    if (args.comment !== undefined) {
      this.comment = args.comment;
    }
  }
};
XcalarApiCommentDagNodesInputT.prototype = {};
XcalarApiCommentDagNodesInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numDagNodes = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size352 = 0;
        var _rtmp3356;
        this.dagNodeNames = [];
        var _etype355 = 0;
        _rtmp3356 = input.readListBegin();
        _etype355 = _rtmp3356.etype;
        _size352 = _rtmp3356.size;
        for (var _i357 = 0; _i357 < _size352; ++_i357)
        {
          var elem358 = null;
          elem358 = input.readString().value;
          this.dagNodeNames.push(elem358);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiCommentDagNodesInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiCommentDagNodesInputT');
  if (this.numDagNodes !== null && this.numDagNodes !== undefined) {
    output.writeFieldBegin('numDagNodes', Thrift.Type.I32, 1);
    output.writeI32(this.numDagNodes);
    output.writeFieldEnd();
  }
  if (this.dagNodeNames !== null && this.dagNodeNames !== undefined) {
    output.writeFieldBegin('dagNodeNames', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.dagNodeNames.length);
    for (var iter359 in this.dagNodeNames)
    {
      if (this.dagNodeNames.hasOwnProperty(iter359))
      {
        iter359 = this.dagNodeNames[iter359];
        output.writeString(iter359);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 3);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListDatasetUsersInputT = function(args) {
  this.datasetName = null;
  if (args) {
    if (args.datasetName !== undefined) {
      this.datasetName = args.datasetName;
    }
  }
};
XcalarApiListDatasetUsersInputT.prototype = {};
XcalarApiListDatasetUsersInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.datasetName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListDatasetUsersInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListDatasetUsersInputT');
  if (this.datasetName !== null && this.datasetName !== undefined) {
    output.writeFieldBegin('datasetName', Thrift.Type.STRING, 1);
    output.writeString(this.datasetName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiLockDatasetInputT = function(args) {
  this.datasetName = null;
  if (args) {
    if (args.datasetName !== undefined) {
      this.datasetName = args.datasetName;
    }
  }
};
XcalarApiLockDatasetInputT.prototype = {};
XcalarApiLockDatasetInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.datasetName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiLockDatasetInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiLockDatasetInputT');
  if (this.datasetName !== null && this.datasetName !== undefined) {
    output.writeFieldBegin('datasetName', Thrift.Type.STRING, 1);
    output.writeString(this.datasetName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListUserDatasetsInputT = function(args) {
  this.userIdName = null;
  if (args) {
    if (args.userIdName !== undefined) {
      this.userIdName = args.userIdName;
    }
  }
};
XcalarApiListUserDatasetsInputT.prototype = {};
XcalarApiListUserDatasetsInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userIdName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListUserDatasetsInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListUserDatasetsInputT');
  if (this.userIdName !== null && this.userIdName !== undefined) {
    output.writeFieldBegin('userIdName', Thrift.Type.STRING, 1);
    output.writeString(this.userIdName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiInputT = function(args) {
  this.loadInput = null;
  this.indexInput = null;
  this.statInput = null;
  this.getTableMetaInput = null;
  this.resultSetNextInput = null;
  this.joinInput = null;
  this.filterInput = null;
  this.groupByInput = null;
  this.resultSetAbsoluteInput = null;
  this.freeResultSetInput = null;
  this.getTableRefCountInput = null;
  this.listDagNodesInput = null;
  this.deleteDagNodeInput = null;
  this.queryInput = null;
  this.statByGroupIdInput = null;
  this.makeResultSetInput = null;
  this.mapInput = null;
  this.aggregateInput = null;
  this.queryStateInput = null;
  this.addTargetInput = null;
  this.listTargetsInput = null;
  this.exportInput = null;
  this.dagTableNameInput = null;
  this.listFilesInput = null;
  this.startNodesInput = null;
  this.makeRetinaInput = null;
  this.getRetinaInput = null;
  this.executeRetinaInput = null;
  this.updateRetinaInput = null;
  this.addParameterToRetinaInput = null;
  this.listParametersInRetinaInput = null;
  this.keyLookupInput = null;
  this.keyAddOrReplaceInput = null;
  this.keyDeleteInput = null;
  this.topInput = null;
  this.shutdownInput = null;
  this.listXdfsInput = null;
  this.renameNodeInput = null;
  this.memoryInput = null;
  this.sessionNewInput = null;
  this.sessionDeleteInput = null;
  this.sessionSwitchInput = null;
  this.sessionListInput = null;
  this.sessionRenameInput = null;
  this.createDhtInput = null;
  this.keyAppendInput = null;
  this.keySetIfEqualInput = null;
  this.deleteDhtInput = null;
  this.deleteRetinaInput = null;
  this.projectInput = null;
  this.getRowNumInput = null;
  this.udfAddUpdateInput = null;
  this.udfGetInput = null;
  this.udfDeleteInput = null;
  this.previewInput = null;
  this.importRetinaInput = null;
  this.exportRetinaInput = null;
  this.startFuncTestInput = null;
  this.listFuncTestInput = null;
  this.deleteDatasetsInput = null;
  this.setConfigParamInput = null;
  this.removeTargetInput = null;
  this.appSetInput = null;
  this.errorpointSetInput = null;
  this.appRunInput = null;
  this.appReapInput = null;
  this.demoFileInput = null;
  this.updateLicenseInput = null;
  this.memoryUsageInput = null;
  this.logLevelSetInput = null;
  this.updateRetinaExportInput = null;
  this.getIpAddrInput = null;
  this.supportGenerateInput = null;
  this.tagDagNodesInput = null;
  this.commentDagNodesInput = null;
  this.listDatasetUsersInput = null;
  this.lockDatasetInput = null;
  this.keyListInput = null;
  this.listUserDatasetsInput = null;
  this.unionInput = null;
  if (args) {
    if (args.loadInput !== undefined) {
      this.loadInput = args.loadInput;
    }
    if (args.indexInput !== undefined) {
      this.indexInput = args.indexInput;
    }
    if (args.statInput !== undefined) {
      this.statInput = args.statInput;
    }
    if (args.getTableMetaInput !== undefined) {
      this.getTableMetaInput = args.getTableMetaInput;
    }
    if (args.resultSetNextInput !== undefined) {
      this.resultSetNextInput = args.resultSetNextInput;
    }
    if (args.joinInput !== undefined) {
      this.joinInput = args.joinInput;
    }
    if (args.filterInput !== undefined) {
      this.filterInput = args.filterInput;
    }
    if (args.groupByInput !== undefined) {
      this.groupByInput = args.groupByInput;
    }
    if (args.resultSetAbsoluteInput !== undefined) {
      this.resultSetAbsoluteInput = args.resultSetAbsoluteInput;
    }
    if (args.freeResultSetInput !== undefined) {
      this.freeResultSetInput = args.freeResultSetInput;
    }
    if (args.getTableRefCountInput !== undefined) {
      this.getTableRefCountInput = args.getTableRefCountInput;
    }
    if (args.listDagNodesInput !== undefined) {
      this.listDagNodesInput = args.listDagNodesInput;
    }
    if (args.deleteDagNodeInput !== undefined) {
      this.deleteDagNodeInput = args.deleteDagNodeInput;
    }
    if (args.queryInput !== undefined) {
      this.queryInput = args.queryInput;
    }
    if (args.statByGroupIdInput !== undefined) {
      this.statByGroupIdInput = args.statByGroupIdInput;
    }
    if (args.makeResultSetInput !== undefined) {
      this.makeResultSetInput = args.makeResultSetInput;
    }
    if (args.mapInput !== undefined) {
      this.mapInput = args.mapInput;
    }
    if (args.aggregateInput !== undefined) {
      this.aggregateInput = args.aggregateInput;
    }
    if (args.queryStateInput !== undefined) {
      this.queryStateInput = args.queryStateInput;
    }
    if (args.addTargetInput !== undefined) {
      this.addTargetInput = args.addTargetInput;
    }
    if (args.listTargetsInput !== undefined) {
      this.listTargetsInput = args.listTargetsInput;
    }
    if (args.exportInput !== undefined) {
      this.exportInput = args.exportInput;
    }
    if (args.dagTableNameInput !== undefined) {
      this.dagTableNameInput = args.dagTableNameInput;
    }
    if (args.listFilesInput !== undefined) {
      this.listFilesInput = args.listFilesInput;
    }
    if (args.startNodesInput !== undefined) {
      this.startNodesInput = args.startNodesInput;
    }
    if (args.makeRetinaInput !== undefined) {
      this.makeRetinaInput = args.makeRetinaInput;
    }
    if (args.getRetinaInput !== undefined) {
      this.getRetinaInput = args.getRetinaInput;
    }
    if (args.executeRetinaInput !== undefined) {
      this.executeRetinaInput = args.executeRetinaInput;
    }
    if (args.updateRetinaInput !== undefined) {
      this.updateRetinaInput = args.updateRetinaInput;
    }
    if (args.addParameterToRetinaInput !== undefined) {
      this.addParameterToRetinaInput = args.addParameterToRetinaInput;
    }
    if (args.listParametersInRetinaInput !== undefined) {
      this.listParametersInRetinaInput = args.listParametersInRetinaInput;
    }
    if (args.keyLookupInput !== undefined) {
      this.keyLookupInput = args.keyLookupInput;
    }
    if (args.keyAddOrReplaceInput !== undefined) {
      this.keyAddOrReplaceInput = args.keyAddOrReplaceInput;
    }
    if (args.keyDeleteInput !== undefined) {
      this.keyDeleteInput = args.keyDeleteInput;
    }
    if (args.topInput !== undefined) {
      this.topInput = args.topInput;
    }
    if (args.shutdownInput !== undefined) {
      this.shutdownInput = args.shutdownInput;
    }
    if (args.listXdfsInput !== undefined) {
      this.listXdfsInput = args.listXdfsInput;
    }
    if (args.renameNodeInput !== undefined) {
      this.renameNodeInput = args.renameNodeInput;
    }
    if (args.memoryInput !== undefined) {
      this.memoryInput = args.memoryInput;
    }
    if (args.sessionNewInput !== undefined) {
      this.sessionNewInput = args.sessionNewInput;
    }
    if (args.sessionDeleteInput !== undefined) {
      this.sessionDeleteInput = args.sessionDeleteInput;
    }
    if (args.sessionSwitchInput !== undefined) {
      this.sessionSwitchInput = args.sessionSwitchInput;
    }
    if (args.sessionListInput !== undefined) {
      this.sessionListInput = args.sessionListInput;
    }
    if (args.sessionRenameInput !== undefined) {
      this.sessionRenameInput = args.sessionRenameInput;
    }
    if (args.createDhtInput !== undefined) {
      this.createDhtInput = args.createDhtInput;
    }
    if (args.keyAppendInput !== undefined) {
      this.keyAppendInput = args.keyAppendInput;
    }
    if (args.keySetIfEqualInput !== undefined) {
      this.keySetIfEqualInput = args.keySetIfEqualInput;
    }
    if (args.deleteDhtInput !== undefined) {
      this.deleteDhtInput = args.deleteDhtInput;
    }
    if (args.deleteRetinaInput !== undefined) {
      this.deleteRetinaInput = args.deleteRetinaInput;
    }
    if (args.projectInput !== undefined) {
      this.projectInput = args.projectInput;
    }
    if (args.getRowNumInput !== undefined) {
      this.getRowNumInput = args.getRowNumInput;
    }
    if (args.udfAddUpdateInput !== undefined) {
      this.udfAddUpdateInput = args.udfAddUpdateInput;
    }
    if (args.udfGetInput !== undefined) {
      this.udfGetInput = args.udfGetInput;
    }
    if (args.udfDeleteInput !== undefined) {
      this.udfDeleteInput = args.udfDeleteInput;
    }
    if (args.previewInput !== undefined) {
      this.previewInput = args.previewInput;
    }
    if (args.importRetinaInput !== undefined) {
      this.importRetinaInput = args.importRetinaInput;
    }
    if (args.exportRetinaInput !== undefined) {
      this.exportRetinaInput = args.exportRetinaInput;
    }
    if (args.startFuncTestInput !== undefined) {
      this.startFuncTestInput = args.startFuncTestInput;
    }
    if (args.listFuncTestInput !== undefined) {
      this.listFuncTestInput = args.listFuncTestInput;
    }
    if (args.deleteDatasetsInput !== undefined) {
      this.deleteDatasetsInput = args.deleteDatasetsInput;
    }
    if (args.setConfigParamInput !== undefined) {
      this.setConfigParamInput = args.setConfigParamInput;
    }
    if (args.removeTargetInput !== undefined) {
      this.removeTargetInput = args.removeTargetInput;
    }
    if (args.appSetInput !== undefined) {
      this.appSetInput = args.appSetInput;
    }
    if (args.errorpointSetInput !== undefined) {
      this.errorpointSetInput = args.errorpointSetInput;
    }
    if (args.appRunInput !== undefined) {
      this.appRunInput = args.appRunInput;
    }
    if (args.appReapInput !== undefined) {
      this.appReapInput = args.appReapInput;
    }
    if (args.demoFileInput !== undefined) {
      this.demoFileInput = args.demoFileInput;
    }
    if (args.updateLicenseInput !== undefined) {
      this.updateLicenseInput = args.updateLicenseInput;
    }
    if (args.memoryUsageInput !== undefined) {
      this.memoryUsageInput = args.memoryUsageInput;
    }
    if (args.logLevelSetInput !== undefined) {
      this.logLevelSetInput = args.logLevelSetInput;
    }
    if (args.updateRetinaExportInput !== undefined) {
      this.updateRetinaExportInput = args.updateRetinaExportInput;
    }
    if (args.getIpAddrInput !== undefined) {
      this.getIpAddrInput = args.getIpAddrInput;
    }
    if (args.supportGenerateInput !== undefined) {
      this.supportGenerateInput = args.supportGenerateInput;
    }
    if (args.tagDagNodesInput !== undefined) {
      this.tagDagNodesInput = args.tagDagNodesInput;
    }
    if (args.commentDagNodesInput !== undefined) {
      this.commentDagNodesInput = args.commentDagNodesInput;
    }
    if (args.listDatasetUsersInput !== undefined) {
      this.listDatasetUsersInput = args.listDatasetUsersInput;
    }
    if (args.lockDatasetInput !== undefined) {
      this.lockDatasetInput = args.lockDatasetInput;
    }
    if (args.keyListInput !== undefined) {
      this.keyListInput = args.keyListInput;
    }
    if (args.listUserDatasetsInput !== undefined) {
      this.listUserDatasetsInput = args.listUserDatasetsInput;
    }
    if (args.unionInput !== undefined) {
      this.unionInput = args.unionInput;
    }
  }
};
XcalarApiInputT.prototype = {};
XcalarApiInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.loadInput = new XcalarApiBulkLoadInputT();
        this.loadInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.indexInput = new XcalarApiIndexInputT();
        this.indexInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.statInput = new XcalarApiStatInputT();
        this.statInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.getTableMetaInput = new XcalarApiGetTableMetaInputT();
        this.getTableMetaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.resultSetNextInput = new XcalarApiResultSetNextInputT();
        this.resultSetNextInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.joinInput = new XcalarApiJoinInputT();
        this.joinInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.filterInput = new XcalarApiFilterInputT();
        this.filterInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.groupByInput = new XcalarApiGroupByInputT();
        this.groupByInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.resultSetAbsoluteInput = new XcalarApiResultSetAbsoluteInputT();
        this.resultSetAbsoluteInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.freeResultSetInput = new XcalarApiFreeResultSetInputT();
        this.freeResultSetInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.getTableRefCountInput = new XcalarApiTableInputT();
        this.getTableRefCountInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.listDagNodesInput = new XcalarApiDagNodeNamePatternInputT();
        this.listDagNodesInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.deleteDagNodeInput = new XcalarApiDagNodeNamePatternInputT();
        this.deleteDagNodeInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.queryInput = new XcalarApiQueryInputT();
        this.queryInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.statByGroupIdInput = new XcalarApiStatByGroupIdInputT();
        this.statByGroupIdInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRUCT) {
        this.makeResultSetInput = new XcalarApiNamedInputT();
        this.makeResultSetInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRUCT) {
        this.mapInput = new XcalarApiMapInputT();
        this.mapInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRUCT) {
        this.aggregateInput = new XcalarApiAggregateInputT();
        this.aggregateInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRUCT) {
        this.queryStateInput = new XcalarApiQueryNameInputT();
        this.queryStateInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.addTargetInput = new ExExportTargetT();
        this.addTargetInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRUCT) {
        this.listTargetsInput = new XcalarApiListExportTargetsInputT();
        this.listTargetsInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRUCT) {
        this.exportInput = new XcalarApiExportInputT();
        this.exportInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRUCT) {
        this.dagTableNameInput = new XcalarApiDagTableNameInputT();
        this.dagTableNameInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRUCT) {
        this.listFilesInput = new XcalarApiListFilesInputT();
        this.listFilesInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRUCT) {
        this.startNodesInput = new XcalarApiStartNodesInputT();
        this.startNodesInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRUCT) {
        this.makeRetinaInput = new XcalarApiMakeRetinaInputT();
        this.makeRetinaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.STRUCT) {
        this.getRetinaInput = new XcalarApiGetRetinaInputT();
        this.getRetinaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.STRUCT) {
        this.executeRetinaInput = new XcalarApiExecuteRetinaInputT();
        this.executeRetinaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.STRUCT) {
        this.updateRetinaInput = new XcalarApiUpdateRetinaInputT();
        this.updateRetinaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRUCT) {
        this.addParameterToRetinaInput = new XcalarApiAddParameterToRetinaInputT();
        this.addParameterToRetinaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.STRUCT) {
        this.listParametersInRetinaInput = new XcalarApiListParametersInRetinaInputT();
        this.listParametersInRetinaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.STRUCT) {
        this.keyLookupInput = new XcalarApiKeyLookupInputT();
        this.keyLookupInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.STRUCT) {
        this.keyAddOrReplaceInput = new XcalarApiKeyAddOrReplaceInputT();
        this.keyAddOrReplaceInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.STRUCT) {
        this.keyDeleteInput = new XcalarApiKeyDeleteInputT();
        this.keyDeleteInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.STRUCT) {
        this.topInput = new XcalarApiTopInputT();
        this.topInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 36:
      if (ftype == Thrift.Type.STRUCT) {
        this.shutdownInput = new XcalarApiShutdownInputT();
        this.shutdownInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 37:
      if (ftype == Thrift.Type.STRUCT) {
        this.listXdfsInput = new XcalarApiListXdfsInputT();
        this.listXdfsInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 38:
      if (ftype == Thrift.Type.STRUCT) {
        this.renameNodeInput = new XcalarApiRenameNodeInputT();
        this.renameNodeInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 39:
      if (ftype == Thrift.Type.STRUCT) {
        this.memoryInput = new XcalarApiMemoryInputT();
        this.memoryInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionNewInput = new XcalarApiSessionNewInputT();
        this.sessionNewInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionDeleteInput = new XcalarApiSessionDeleteInputT();
        this.sessionDeleteInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 42:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionSwitchInput = new XcalarApiSessionSwitchInputT();
        this.sessionSwitchInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 43:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionListInput = new XcalarApiSessionListArrayInputT();
        this.sessionListInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 44:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionRenameInput = new XcalarApiSessionRenameInputT();
        this.sessionRenameInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 45:
      if (ftype == Thrift.Type.STRUCT) {
        this.createDhtInput = new XcalarApiCreateDhtInputT();
        this.createDhtInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 46:
      if (ftype == Thrift.Type.STRUCT) {
        this.keyAppendInput = new XcalarApiKeyAppendInputT();
        this.keyAppendInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 47:
      if (ftype == Thrift.Type.STRUCT) {
        this.keySetIfEqualInput = new XcalarApiKeySetIfEqualInputT();
        this.keySetIfEqualInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 48:
      if (ftype == Thrift.Type.STRUCT) {
        this.deleteDhtInput = new XcalarApiDeleteDhtInputT();
        this.deleteDhtInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 49:
      if (ftype == Thrift.Type.STRUCT) {
        this.deleteRetinaInput = new XcalarApiDeleteRetinaInputT();
        this.deleteRetinaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 53:
      if (ftype == Thrift.Type.STRUCT) {
        this.projectInput = new XcalarApiProjectInputT();
        this.projectInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 54:
      if (ftype == Thrift.Type.STRUCT) {
        this.getRowNumInput = new XcalarApiGetRowNumInputT();
        this.getRowNumInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 55:
      if (ftype == Thrift.Type.STRUCT) {
        this.udfAddUpdateInput = new UdfModuleSrcT();
        this.udfAddUpdateInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 56:
      if (ftype == Thrift.Type.STRUCT) {
        this.udfGetInput = new XcalarApiUdfGetInputT();
        this.udfGetInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 57:
      if (ftype == Thrift.Type.STRUCT) {
        this.udfDeleteInput = new XcalarApiUdfDeleteInputT();
        this.udfDeleteInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 58:
      if (ftype == Thrift.Type.STRUCT) {
        this.previewInput = new XcalarApiPreviewInputT();
        this.previewInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 59:
      if (ftype == Thrift.Type.STRUCT) {
        this.importRetinaInput = new XcalarApiImportRetinaInputT();
        this.importRetinaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 60:
      if (ftype == Thrift.Type.STRUCT) {
        this.exportRetinaInput = new XcalarApiExportRetinaInputT();
        this.exportRetinaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 61:
      if (ftype == Thrift.Type.STRUCT) {
        this.startFuncTestInput = new XcalarApiStartFuncTestInputT();
        this.startFuncTestInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 62:
      if (ftype == Thrift.Type.STRUCT) {
        this.listFuncTestInput = new XcalarApiListFuncTestInputT();
        this.listFuncTestInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 63:
      if (ftype == Thrift.Type.STRUCT) {
        this.deleteDatasetsInput = new XcalarApiDeleteDatasetsInputT();
        this.deleteDatasetsInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 64:
      if (ftype == Thrift.Type.STRUCT) {
        this.setConfigParamInput = new XcalarApiSetConfigParamInputT();
        this.setConfigParamInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 65:
      if (ftype == Thrift.Type.STRUCT) {
        this.removeTargetInput = new ExExportTargetHdrT();
        this.removeTargetInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 66:
      if (ftype == Thrift.Type.STRUCT) {
        this.appSetInput = new XcalarApiAppSetInputT();
        this.appSetInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 67:
      if (ftype == Thrift.Type.STRUCT) {
        this.errorpointSetInput = new XcalarApiErrorpointSetInputT();
        this.errorpointSetInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 68:
      if (ftype == Thrift.Type.STRUCT) {
        this.appRunInput = new XcalarApiAppRunInputT();
        this.appRunInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 69:
      if (ftype == Thrift.Type.STRUCT) {
        this.appReapInput = new XcalarApiAppReapInputT();
        this.appReapInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 70:
      if (ftype == Thrift.Type.STRUCT) {
        this.demoFileInput = new XcalarApiDemoFileInputT();
        this.demoFileInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 71:
      if (ftype == Thrift.Type.STRUCT) {
        this.updateLicenseInput = new XcalarApiLicenseUpdateInputT();
        this.updateLicenseInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 72:
      if (ftype == Thrift.Type.STRUCT) {
        this.memoryUsageInput = new XcalarApiGetMemoryUsageInputT();
        this.memoryUsageInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 73:
      if (ftype == Thrift.Type.STRUCT) {
        this.logLevelSetInput = new XcalarApiLogLevelSetInputT();
        this.logLevelSetInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 74:
      if (ftype == Thrift.Type.STRUCT) {
        this.updateRetinaExportInput = new XcalarApiUpdateRetinaExportInputT();
        this.updateRetinaExportInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 75:
      if (ftype == Thrift.Type.STRUCT) {
        this.getIpAddrInput = new XcalarApiGetIpAddrInputT();
        this.getIpAddrInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 76:
      if (ftype == Thrift.Type.STRUCT) {
        this.supportGenerateInput = new XcalarApiSupportGenerateInputT();
        this.supportGenerateInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 77:
      if (ftype == Thrift.Type.STRUCT) {
        this.tagDagNodesInput = new XcalarApiTagDagNodesInputT();
        this.tagDagNodesInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 78:
      if (ftype == Thrift.Type.STRUCT) {
        this.commentDagNodesInput = new XcalarApiCommentDagNodesInputT();
        this.commentDagNodesInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 79:
      if (ftype == Thrift.Type.STRUCT) {
        this.listDatasetUsersInput = new XcalarApiListDatasetUsersInputT();
        this.listDatasetUsersInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 80:
      if (ftype == Thrift.Type.STRUCT) {
        this.lockDatasetInput = new XcalarApiLockDatasetInputT();
        this.lockDatasetInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 81:
      if (ftype == Thrift.Type.STRUCT) {
        this.keyListInput = new XcalarApiKeyListInputT();
        this.keyListInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 82:
      if (ftype == Thrift.Type.STRUCT) {
        this.listUserDatasetsInput = new XcalarApiListUserDatasetsInputT();
        this.listUserDatasetsInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 83:
      if (ftype == Thrift.Type.STRUCT) {
        this.unionInput = new XcalarApiUnionInputT();
        this.unionInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiInputT');
  if (this.loadInput !== null && this.loadInput !== undefined) {
    output.writeFieldBegin('loadInput', Thrift.Type.STRUCT, 1);
    this.loadInput.write(output);
    output.writeFieldEnd();
  }
  if (this.indexInput !== null && this.indexInput !== undefined) {
    output.writeFieldBegin('indexInput', Thrift.Type.STRUCT, 2);
    this.indexInput.write(output);
    output.writeFieldEnd();
  }
  if (this.statInput !== null && this.statInput !== undefined) {
    output.writeFieldBegin('statInput', Thrift.Type.STRUCT, 3);
    this.statInput.write(output);
    output.writeFieldEnd();
  }
  if (this.getTableMetaInput !== null && this.getTableMetaInput !== undefined) {
    output.writeFieldBegin('getTableMetaInput', Thrift.Type.STRUCT, 4);
    this.getTableMetaInput.write(output);
    output.writeFieldEnd();
  }
  if (this.resultSetNextInput !== null && this.resultSetNextInput !== undefined) {
    output.writeFieldBegin('resultSetNextInput', Thrift.Type.STRUCT, 5);
    this.resultSetNextInput.write(output);
    output.writeFieldEnd();
  }
  if (this.joinInput !== null && this.joinInput !== undefined) {
    output.writeFieldBegin('joinInput', Thrift.Type.STRUCT, 6);
    this.joinInput.write(output);
    output.writeFieldEnd();
  }
  if (this.filterInput !== null && this.filterInput !== undefined) {
    output.writeFieldBegin('filterInput', Thrift.Type.STRUCT, 7);
    this.filterInput.write(output);
    output.writeFieldEnd();
  }
  if (this.groupByInput !== null && this.groupByInput !== undefined) {
    output.writeFieldBegin('groupByInput', Thrift.Type.STRUCT, 8);
    this.groupByInput.write(output);
    output.writeFieldEnd();
  }
  if (this.resultSetAbsoluteInput !== null && this.resultSetAbsoluteInput !== undefined) {
    output.writeFieldBegin('resultSetAbsoluteInput', Thrift.Type.STRUCT, 9);
    this.resultSetAbsoluteInput.write(output);
    output.writeFieldEnd();
  }
  if (this.freeResultSetInput !== null && this.freeResultSetInput !== undefined) {
    output.writeFieldBegin('freeResultSetInput', Thrift.Type.STRUCT, 10);
    this.freeResultSetInput.write(output);
    output.writeFieldEnd();
  }
  if (this.getTableRefCountInput !== null && this.getTableRefCountInput !== undefined) {
    output.writeFieldBegin('getTableRefCountInput', Thrift.Type.STRUCT, 11);
    this.getTableRefCountInput.write(output);
    output.writeFieldEnd();
  }
  if (this.listDagNodesInput !== null && this.listDagNodesInput !== undefined) {
    output.writeFieldBegin('listDagNodesInput', Thrift.Type.STRUCT, 12);
    this.listDagNodesInput.write(output);
    output.writeFieldEnd();
  }
  if (this.deleteDagNodeInput !== null && this.deleteDagNodeInput !== undefined) {
    output.writeFieldBegin('deleteDagNodeInput', Thrift.Type.STRUCT, 13);
    this.deleteDagNodeInput.write(output);
    output.writeFieldEnd();
  }
  if (this.queryInput !== null && this.queryInput !== undefined) {
    output.writeFieldBegin('queryInput', Thrift.Type.STRUCT, 14);
    this.queryInput.write(output);
    output.writeFieldEnd();
  }
  if (this.statByGroupIdInput !== null && this.statByGroupIdInput !== undefined) {
    output.writeFieldBegin('statByGroupIdInput', Thrift.Type.STRUCT, 15);
    this.statByGroupIdInput.write(output);
    output.writeFieldEnd();
  }
  if (this.makeResultSetInput !== null && this.makeResultSetInput !== undefined) {
    output.writeFieldBegin('makeResultSetInput', Thrift.Type.STRUCT, 16);
    this.makeResultSetInput.write(output);
    output.writeFieldEnd();
  }
  if (this.mapInput !== null && this.mapInput !== undefined) {
    output.writeFieldBegin('mapInput', Thrift.Type.STRUCT, 17);
    this.mapInput.write(output);
    output.writeFieldEnd();
  }
  if (this.aggregateInput !== null && this.aggregateInput !== undefined) {
    output.writeFieldBegin('aggregateInput', Thrift.Type.STRUCT, 18);
    this.aggregateInput.write(output);
    output.writeFieldEnd();
  }
  if (this.queryStateInput !== null && this.queryStateInput !== undefined) {
    output.writeFieldBegin('queryStateInput', Thrift.Type.STRUCT, 19);
    this.queryStateInput.write(output);
    output.writeFieldEnd();
  }
  if (this.addTargetInput !== null && this.addTargetInput !== undefined) {
    output.writeFieldBegin('addTargetInput', Thrift.Type.STRUCT, 20);
    this.addTargetInput.write(output);
    output.writeFieldEnd();
  }
  if (this.listTargetsInput !== null && this.listTargetsInput !== undefined) {
    output.writeFieldBegin('listTargetsInput', Thrift.Type.STRUCT, 21);
    this.listTargetsInput.write(output);
    output.writeFieldEnd();
  }
  if (this.exportInput !== null && this.exportInput !== undefined) {
    output.writeFieldBegin('exportInput', Thrift.Type.STRUCT, 22);
    this.exportInput.write(output);
    output.writeFieldEnd();
  }
  if (this.dagTableNameInput !== null && this.dagTableNameInput !== undefined) {
    output.writeFieldBegin('dagTableNameInput', Thrift.Type.STRUCT, 23);
    this.dagTableNameInput.write(output);
    output.writeFieldEnd();
  }
  if (this.listFilesInput !== null && this.listFilesInput !== undefined) {
    output.writeFieldBegin('listFilesInput', Thrift.Type.STRUCT, 24);
    this.listFilesInput.write(output);
    output.writeFieldEnd();
  }
  if (this.startNodesInput !== null && this.startNodesInput !== undefined) {
    output.writeFieldBegin('startNodesInput', Thrift.Type.STRUCT, 25);
    this.startNodesInput.write(output);
    output.writeFieldEnd();
  }
  if (this.makeRetinaInput !== null && this.makeRetinaInput !== undefined) {
    output.writeFieldBegin('makeRetinaInput', Thrift.Type.STRUCT, 26);
    this.makeRetinaInput.write(output);
    output.writeFieldEnd();
  }
  if (this.getRetinaInput !== null && this.getRetinaInput !== undefined) {
    output.writeFieldBegin('getRetinaInput', Thrift.Type.STRUCT, 27);
    this.getRetinaInput.write(output);
    output.writeFieldEnd();
  }
  if (this.executeRetinaInput !== null && this.executeRetinaInput !== undefined) {
    output.writeFieldBegin('executeRetinaInput', Thrift.Type.STRUCT, 28);
    this.executeRetinaInput.write(output);
    output.writeFieldEnd();
  }
  if (this.updateRetinaInput !== null && this.updateRetinaInput !== undefined) {
    output.writeFieldBegin('updateRetinaInput', Thrift.Type.STRUCT, 29);
    this.updateRetinaInput.write(output);
    output.writeFieldEnd();
  }
  if (this.addParameterToRetinaInput !== null && this.addParameterToRetinaInput !== undefined) {
    output.writeFieldBegin('addParameterToRetinaInput', Thrift.Type.STRUCT, 30);
    this.addParameterToRetinaInput.write(output);
    output.writeFieldEnd();
  }
  if (this.listParametersInRetinaInput !== null && this.listParametersInRetinaInput !== undefined) {
    output.writeFieldBegin('listParametersInRetinaInput', Thrift.Type.STRUCT, 31);
    this.listParametersInRetinaInput.write(output);
    output.writeFieldEnd();
  }
  if (this.keyLookupInput !== null && this.keyLookupInput !== undefined) {
    output.writeFieldBegin('keyLookupInput', Thrift.Type.STRUCT, 32);
    this.keyLookupInput.write(output);
    output.writeFieldEnd();
  }
  if (this.keyAddOrReplaceInput !== null && this.keyAddOrReplaceInput !== undefined) {
    output.writeFieldBegin('keyAddOrReplaceInput', Thrift.Type.STRUCT, 33);
    this.keyAddOrReplaceInput.write(output);
    output.writeFieldEnd();
  }
  if (this.keyDeleteInput !== null && this.keyDeleteInput !== undefined) {
    output.writeFieldBegin('keyDeleteInput', Thrift.Type.STRUCT, 34);
    this.keyDeleteInput.write(output);
    output.writeFieldEnd();
  }
  if (this.topInput !== null && this.topInput !== undefined) {
    output.writeFieldBegin('topInput', Thrift.Type.STRUCT, 35);
    this.topInput.write(output);
    output.writeFieldEnd();
  }
  if (this.shutdownInput !== null && this.shutdownInput !== undefined) {
    output.writeFieldBegin('shutdownInput', Thrift.Type.STRUCT, 36);
    this.shutdownInput.write(output);
    output.writeFieldEnd();
  }
  if (this.listXdfsInput !== null && this.listXdfsInput !== undefined) {
    output.writeFieldBegin('listXdfsInput', Thrift.Type.STRUCT, 37);
    this.listXdfsInput.write(output);
    output.writeFieldEnd();
  }
  if (this.renameNodeInput !== null && this.renameNodeInput !== undefined) {
    output.writeFieldBegin('renameNodeInput', Thrift.Type.STRUCT, 38);
    this.renameNodeInput.write(output);
    output.writeFieldEnd();
  }
  if (this.memoryInput !== null && this.memoryInput !== undefined) {
    output.writeFieldBegin('memoryInput', Thrift.Type.STRUCT, 39);
    this.memoryInput.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionNewInput !== null && this.sessionNewInput !== undefined) {
    output.writeFieldBegin('sessionNewInput', Thrift.Type.STRUCT, 40);
    this.sessionNewInput.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionDeleteInput !== null && this.sessionDeleteInput !== undefined) {
    output.writeFieldBegin('sessionDeleteInput', Thrift.Type.STRUCT, 41);
    this.sessionDeleteInput.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionSwitchInput !== null && this.sessionSwitchInput !== undefined) {
    output.writeFieldBegin('sessionSwitchInput', Thrift.Type.STRUCT, 42);
    this.sessionSwitchInput.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionListInput !== null && this.sessionListInput !== undefined) {
    output.writeFieldBegin('sessionListInput', Thrift.Type.STRUCT, 43);
    this.sessionListInput.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionRenameInput !== null && this.sessionRenameInput !== undefined) {
    output.writeFieldBegin('sessionRenameInput', Thrift.Type.STRUCT, 44);
    this.sessionRenameInput.write(output);
    output.writeFieldEnd();
  }
  if (this.createDhtInput !== null && this.createDhtInput !== undefined) {
    output.writeFieldBegin('createDhtInput', Thrift.Type.STRUCT, 45);
    this.createDhtInput.write(output);
    output.writeFieldEnd();
  }
  if (this.keyAppendInput !== null && this.keyAppendInput !== undefined) {
    output.writeFieldBegin('keyAppendInput', Thrift.Type.STRUCT, 46);
    this.keyAppendInput.write(output);
    output.writeFieldEnd();
  }
  if (this.keySetIfEqualInput !== null && this.keySetIfEqualInput !== undefined) {
    output.writeFieldBegin('keySetIfEqualInput', Thrift.Type.STRUCT, 47);
    this.keySetIfEqualInput.write(output);
    output.writeFieldEnd();
  }
  if (this.deleteDhtInput !== null && this.deleteDhtInput !== undefined) {
    output.writeFieldBegin('deleteDhtInput', Thrift.Type.STRUCT, 48);
    this.deleteDhtInput.write(output);
    output.writeFieldEnd();
  }
  if (this.deleteRetinaInput !== null && this.deleteRetinaInput !== undefined) {
    output.writeFieldBegin('deleteRetinaInput', Thrift.Type.STRUCT, 49);
    this.deleteRetinaInput.write(output);
    output.writeFieldEnd();
  }
  if (this.projectInput !== null && this.projectInput !== undefined) {
    output.writeFieldBegin('projectInput', Thrift.Type.STRUCT, 53);
    this.projectInput.write(output);
    output.writeFieldEnd();
  }
  if (this.getRowNumInput !== null && this.getRowNumInput !== undefined) {
    output.writeFieldBegin('getRowNumInput', Thrift.Type.STRUCT, 54);
    this.getRowNumInput.write(output);
    output.writeFieldEnd();
  }
  if (this.udfAddUpdateInput !== null && this.udfAddUpdateInput !== undefined) {
    output.writeFieldBegin('udfAddUpdateInput', Thrift.Type.STRUCT, 55);
    this.udfAddUpdateInput.write(output);
    output.writeFieldEnd();
  }
  if (this.udfGetInput !== null && this.udfGetInput !== undefined) {
    output.writeFieldBegin('udfGetInput', Thrift.Type.STRUCT, 56);
    this.udfGetInput.write(output);
    output.writeFieldEnd();
  }
  if (this.udfDeleteInput !== null && this.udfDeleteInput !== undefined) {
    output.writeFieldBegin('udfDeleteInput', Thrift.Type.STRUCT, 57);
    this.udfDeleteInput.write(output);
    output.writeFieldEnd();
  }
  if (this.previewInput !== null && this.previewInput !== undefined) {
    output.writeFieldBegin('previewInput', Thrift.Type.STRUCT, 58);
    this.previewInput.write(output);
    output.writeFieldEnd();
  }
  if (this.importRetinaInput !== null && this.importRetinaInput !== undefined) {
    output.writeFieldBegin('importRetinaInput', Thrift.Type.STRUCT, 59);
    this.importRetinaInput.write(output);
    output.writeFieldEnd();
  }
  if (this.exportRetinaInput !== null && this.exportRetinaInput !== undefined) {
    output.writeFieldBegin('exportRetinaInput', Thrift.Type.STRUCT, 60);
    this.exportRetinaInput.write(output);
    output.writeFieldEnd();
  }
  if (this.startFuncTestInput !== null && this.startFuncTestInput !== undefined) {
    output.writeFieldBegin('startFuncTestInput', Thrift.Type.STRUCT, 61);
    this.startFuncTestInput.write(output);
    output.writeFieldEnd();
  }
  if (this.listFuncTestInput !== null && this.listFuncTestInput !== undefined) {
    output.writeFieldBegin('listFuncTestInput', Thrift.Type.STRUCT, 62);
    this.listFuncTestInput.write(output);
    output.writeFieldEnd();
  }
  if (this.deleteDatasetsInput !== null && this.deleteDatasetsInput !== undefined) {
    output.writeFieldBegin('deleteDatasetsInput', Thrift.Type.STRUCT, 63);
    this.deleteDatasetsInput.write(output);
    output.writeFieldEnd();
  }
  if (this.setConfigParamInput !== null && this.setConfigParamInput !== undefined) {
    output.writeFieldBegin('setConfigParamInput', Thrift.Type.STRUCT, 64);
    this.setConfigParamInput.write(output);
    output.writeFieldEnd();
  }
  if (this.removeTargetInput !== null && this.removeTargetInput !== undefined) {
    output.writeFieldBegin('removeTargetInput', Thrift.Type.STRUCT, 65);
    this.removeTargetInput.write(output);
    output.writeFieldEnd();
  }
  if (this.appSetInput !== null && this.appSetInput !== undefined) {
    output.writeFieldBegin('appSetInput', Thrift.Type.STRUCT, 66);
    this.appSetInput.write(output);
    output.writeFieldEnd();
  }
  if (this.errorpointSetInput !== null && this.errorpointSetInput !== undefined) {
    output.writeFieldBegin('errorpointSetInput', Thrift.Type.STRUCT, 67);
    this.errorpointSetInput.write(output);
    output.writeFieldEnd();
  }
  if (this.appRunInput !== null && this.appRunInput !== undefined) {
    output.writeFieldBegin('appRunInput', Thrift.Type.STRUCT, 68);
    this.appRunInput.write(output);
    output.writeFieldEnd();
  }
  if (this.appReapInput !== null && this.appReapInput !== undefined) {
    output.writeFieldBegin('appReapInput', Thrift.Type.STRUCT, 69);
    this.appReapInput.write(output);
    output.writeFieldEnd();
  }
  if (this.demoFileInput !== null && this.demoFileInput !== undefined) {
    output.writeFieldBegin('demoFileInput', Thrift.Type.STRUCT, 70);
    this.demoFileInput.write(output);
    output.writeFieldEnd();
  }
  if (this.updateLicenseInput !== null && this.updateLicenseInput !== undefined) {
    output.writeFieldBegin('updateLicenseInput', Thrift.Type.STRUCT, 71);
    this.updateLicenseInput.write(output);
    output.writeFieldEnd();
  }
  if (this.memoryUsageInput !== null && this.memoryUsageInput !== undefined) {
    output.writeFieldBegin('memoryUsageInput', Thrift.Type.STRUCT, 72);
    this.memoryUsageInput.write(output);
    output.writeFieldEnd();
  }
  if (this.logLevelSetInput !== null && this.logLevelSetInput !== undefined) {
    output.writeFieldBegin('logLevelSetInput', Thrift.Type.STRUCT, 73);
    this.logLevelSetInput.write(output);
    output.writeFieldEnd();
  }
  if (this.updateRetinaExportInput !== null && this.updateRetinaExportInput !== undefined) {
    output.writeFieldBegin('updateRetinaExportInput', Thrift.Type.STRUCT, 74);
    this.updateRetinaExportInput.write(output);
    output.writeFieldEnd();
  }
  if (this.getIpAddrInput !== null && this.getIpAddrInput !== undefined) {
    output.writeFieldBegin('getIpAddrInput', Thrift.Type.STRUCT, 75);
    this.getIpAddrInput.write(output);
    output.writeFieldEnd();
  }
  if (this.supportGenerateInput !== null && this.supportGenerateInput !== undefined) {
    output.writeFieldBegin('supportGenerateInput', Thrift.Type.STRUCT, 76);
    this.supportGenerateInput.write(output);
    output.writeFieldEnd();
  }
  if (this.tagDagNodesInput !== null && this.tagDagNodesInput !== undefined) {
    output.writeFieldBegin('tagDagNodesInput', Thrift.Type.STRUCT, 77);
    this.tagDagNodesInput.write(output);
    output.writeFieldEnd();
  }
  if (this.commentDagNodesInput !== null && this.commentDagNodesInput !== undefined) {
    output.writeFieldBegin('commentDagNodesInput', Thrift.Type.STRUCT, 78);
    this.commentDagNodesInput.write(output);
    output.writeFieldEnd();
  }
  if (this.listDatasetUsersInput !== null && this.listDatasetUsersInput !== undefined) {
    output.writeFieldBegin('listDatasetUsersInput', Thrift.Type.STRUCT, 79);
    this.listDatasetUsersInput.write(output);
    output.writeFieldEnd();
  }
  if (this.lockDatasetInput !== null && this.lockDatasetInput !== undefined) {
    output.writeFieldBegin('lockDatasetInput', Thrift.Type.STRUCT, 80);
    this.lockDatasetInput.write(output);
    output.writeFieldEnd();
  }
  if (this.keyListInput !== null && this.keyListInput !== undefined) {
    output.writeFieldBegin('keyListInput', Thrift.Type.STRUCT, 81);
    this.keyListInput.write(output);
    output.writeFieldEnd();
  }
  if (this.listUserDatasetsInput !== null && this.listUserDatasetsInput !== undefined) {
    output.writeFieldBegin('listUserDatasetsInput', Thrift.Type.STRUCT, 82);
    this.listUserDatasetsInput.write(output);
    output.writeFieldEnd();
  }
  if (this.unionInput !== null && this.unionInput !== undefined) {
    output.writeFieldBegin('unionInput', Thrift.Type.STRUCT, 83);
    this.unionInput.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDagNodeT = function(args) {
  this.name = null;
  this.tag = null;
  this.comment = null;
  this.numParent = null;
  this.dagNodeId = null;
  this.api = null;
  this.state = null;
  this.xdbBytesRequired = null;
  this.xdbBytesConsumed = null;
  this.numTransPageSent = null;
  this.numTransPageRecv = null;
  this.numWorkCompleted = null;
  this.numWorkTotal = null;
  this.elapsed = null;
  this.inputSize = null;
  this.input = null;
  this.numRowsTotal = null;
  this.numNodes = null;
  this.numRowsPerNode = null;
  this.sizeTotal = null;
  this.sizePerNode = null;
  this.numTransPagesReceivedPerNode = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.tag !== undefined) {
      this.tag = args.tag;
    }
    if (args.comment !== undefined) {
      this.comment = args.comment;
    }
    if (args.numParent !== undefined) {
      this.numParent = args.numParent;
    }
    if (args.dagNodeId !== undefined) {
      this.dagNodeId = args.dagNodeId;
    }
    if (args.api !== undefined) {
      this.api = args.api;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.xdbBytesRequired !== undefined) {
      this.xdbBytesRequired = args.xdbBytesRequired;
    }
    if (args.xdbBytesConsumed !== undefined) {
      this.xdbBytesConsumed = args.xdbBytesConsumed;
    }
    if (args.numTransPageSent !== undefined) {
      this.numTransPageSent = args.numTransPageSent;
    }
    if (args.numTransPageRecv !== undefined) {
      this.numTransPageRecv = args.numTransPageRecv;
    }
    if (args.numWorkCompleted !== undefined) {
      this.numWorkCompleted = args.numWorkCompleted;
    }
    if (args.numWorkTotal !== undefined) {
      this.numWorkTotal = args.numWorkTotal;
    }
    if (args.elapsed !== undefined) {
      this.elapsed = args.elapsed;
    }
    if (args.inputSize !== undefined) {
      this.inputSize = args.inputSize;
    }
    if (args.input !== undefined) {
      this.input = args.input;
    }
    if (args.numRowsTotal !== undefined) {
      this.numRowsTotal = args.numRowsTotal;
    }
    if (args.numNodes !== undefined) {
      this.numNodes = args.numNodes;
    }
    if (args.numRowsPerNode !== undefined) {
      this.numRowsPerNode = args.numRowsPerNode;
    }
    if (args.sizeTotal !== undefined) {
      this.sizeTotal = args.sizeTotal;
    }
    if (args.sizePerNode !== undefined) {
      this.sizePerNode = args.sizePerNode;
    }
    if (args.numTransPagesReceivedPerNode !== undefined) {
      this.numTransPagesReceivedPerNode = args.numTransPagesReceivedPerNode;
    }
  }
};
XcalarApiDagNodeT.prototype = {};
XcalarApiDagNodeT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.name = new XcalarApiDagNameT();
        this.name.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tag = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.numParent = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.dagNodeId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.api = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.xdbBytesRequired = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.xdbBytesConsumed = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.numTransPageSent = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.numTransPageRecv = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.numWorkCompleted = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.numWorkTotal = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.elapsed = new XcalarApiTimeT();
        this.elapsed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.inputSize = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRUCT) {
        this.input = new XcalarApiInputT();
        this.input.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I64) {
        this.numRowsTotal = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I32) {
        this.numNodes = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.LIST) {
        var _size360 = 0;
        var _rtmp3364;
        this.numRowsPerNode = [];
        var _etype363 = 0;
        _rtmp3364 = input.readListBegin();
        _etype363 = _rtmp3364.etype;
        _size360 = _rtmp3364.size;
        for (var _i365 = 0; _i365 < _size360; ++_i365)
        {
          var elem366 = null;
          elem366 = input.readI64().value;
          this.numRowsPerNode.push(elem366);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I64) {
        this.sizeTotal = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.LIST) {
        var _size367 = 0;
        var _rtmp3371;
        this.sizePerNode = [];
        var _etype370 = 0;
        _rtmp3371 = input.readListBegin();
        _etype370 = _rtmp3371.etype;
        _size367 = _rtmp3371.size;
        for (var _i372 = 0; _i372 < _size367; ++_i372)
        {
          var elem373 = null;
          elem373 = input.readI64().value;
          this.sizePerNode.push(elem373);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.LIST) {
        var _size374 = 0;
        var _rtmp3378;
        this.numTransPagesReceivedPerNode = [];
        var _etype377 = 0;
        _rtmp3378 = input.readListBegin();
        _etype377 = _rtmp3378.etype;
        _size374 = _rtmp3378.size;
        for (var _i379 = 0; _i379 < _size374; ++_i379)
        {
          var elem380 = null;
          elem380 = input.readI64().value;
          this.numTransPagesReceivedPerNode.push(elem380);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDagNodeT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDagNodeT');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRUCT, 1);
    this.name.write(output);
    output.writeFieldEnd();
  }
  if (this.tag !== null && this.tag !== undefined) {
    output.writeFieldBegin('tag', Thrift.Type.STRING, 2);
    output.writeString(this.tag);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 3);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  if (this.numParent !== null && this.numParent !== undefined) {
    output.writeFieldBegin('numParent', Thrift.Type.I64, 4);
    output.writeI64(this.numParent);
    output.writeFieldEnd();
  }
  if (this.dagNodeId !== null && this.dagNodeId !== undefined) {
    output.writeFieldBegin('dagNodeId', Thrift.Type.STRING, 5);
    output.writeString(this.dagNodeId);
    output.writeFieldEnd();
  }
  if (this.api !== null && this.api !== undefined) {
    output.writeFieldBegin('api', Thrift.Type.I32, 6);
    output.writeI32(this.api);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 7);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.xdbBytesRequired !== null && this.xdbBytesRequired !== undefined) {
    output.writeFieldBegin('xdbBytesRequired', Thrift.Type.I64, 8);
    output.writeI64(this.xdbBytesRequired);
    output.writeFieldEnd();
  }
  if (this.xdbBytesConsumed !== null && this.xdbBytesConsumed !== undefined) {
    output.writeFieldBegin('xdbBytesConsumed', Thrift.Type.I64, 9);
    output.writeI64(this.xdbBytesConsumed);
    output.writeFieldEnd();
  }
  if (this.numTransPageSent !== null && this.numTransPageSent !== undefined) {
    output.writeFieldBegin('numTransPageSent', Thrift.Type.I64, 10);
    output.writeI64(this.numTransPageSent);
    output.writeFieldEnd();
  }
  if (this.numTransPageRecv !== null && this.numTransPageRecv !== undefined) {
    output.writeFieldBegin('numTransPageRecv', Thrift.Type.I64, 11);
    output.writeI64(this.numTransPageRecv);
    output.writeFieldEnd();
  }
  if (this.numWorkCompleted !== null && this.numWorkCompleted !== undefined) {
    output.writeFieldBegin('numWorkCompleted', Thrift.Type.I64, 12);
    output.writeI64(this.numWorkCompleted);
    output.writeFieldEnd();
  }
  if (this.numWorkTotal !== null && this.numWorkTotal !== undefined) {
    output.writeFieldBegin('numWorkTotal', Thrift.Type.I64, 13);
    output.writeI64(this.numWorkTotal);
    output.writeFieldEnd();
  }
  if (this.elapsed !== null && this.elapsed !== undefined) {
    output.writeFieldBegin('elapsed', Thrift.Type.STRUCT, 14);
    this.elapsed.write(output);
    output.writeFieldEnd();
  }
  if (this.inputSize !== null && this.inputSize !== undefined) {
    output.writeFieldBegin('inputSize', Thrift.Type.I64, 15);
    output.writeI64(this.inputSize);
    output.writeFieldEnd();
  }
  if (this.input !== null && this.input !== undefined) {
    output.writeFieldBegin('input', Thrift.Type.STRUCT, 16);
    this.input.write(output);
    output.writeFieldEnd();
  }
  if (this.numRowsTotal !== null && this.numRowsTotal !== undefined) {
    output.writeFieldBegin('numRowsTotal', Thrift.Type.I64, 17);
    output.writeI64(this.numRowsTotal);
    output.writeFieldEnd();
  }
  if (this.numNodes !== null && this.numNodes !== undefined) {
    output.writeFieldBegin('numNodes', Thrift.Type.I32, 18);
    output.writeI32(this.numNodes);
    output.writeFieldEnd();
  }
  if (this.numRowsPerNode !== null && this.numRowsPerNode !== undefined) {
    output.writeFieldBegin('numRowsPerNode', Thrift.Type.LIST, 19);
    output.writeListBegin(Thrift.Type.I64, this.numRowsPerNode.length);
    for (var iter381 in this.numRowsPerNode)
    {
      if (this.numRowsPerNode.hasOwnProperty(iter381))
      {
        iter381 = this.numRowsPerNode[iter381];
        output.writeI64(iter381);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sizeTotal !== null && this.sizeTotal !== undefined) {
    output.writeFieldBegin('sizeTotal', Thrift.Type.I64, 20);
    output.writeI64(this.sizeTotal);
    output.writeFieldEnd();
  }
  if (this.sizePerNode !== null && this.sizePerNode !== undefined) {
    output.writeFieldBegin('sizePerNode', Thrift.Type.LIST, 21);
    output.writeListBegin(Thrift.Type.I64, this.sizePerNode.length);
    for (var iter382 in this.sizePerNode)
    {
      if (this.sizePerNode.hasOwnProperty(iter382))
      {
        iter382 = this.sizePerNode[iter382];
        output.writeI64(iter382);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.numTransPagesReceivedPerNode !== null && this.numTransPagesReceivedPerNode !== undefined) {
    output.writeFieldBegin('numTransPagesReceivedPerNode', Thrift.Type.LIST, 22);
    output.writeListBegin(Thrift.Type.I64, this.numTransPagesReceivedPerNode.length);
    for (var iter383 in this.numTransPagesReceivedPerNode)
    {
      if (this.numTransPagesReceivedPerNode.hasOwnProperty(iter383))
      {
        iter383 = this.numTransPagesReceivedPerNode[iter383];
        output.writeI64(iter383);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDagOutputT = function(args) {
  this.numNodes = null;
  this.node = null;
  if (args) {
    if (args.numNodes !== undefined) {
      this.numNodes = args.numNodes;
    }
    if (args.node !== undefined) {
      this.node = args.node;
    }
  }
};
XcalarApiDagOutputT.prototype = {};
XcalarApiDagOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numNodes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size384 = 0;
        var _rtmp3388;
        this.node = [];
        var _etype387 = 0;
        _rtmp3388 = input.readListBegin();
        _etype387 = _rtmp3388.etype;
        _size384 = _rtmp3388.size;
        for (var _i389 = 0; _i389 < _size384; ++_i389)
        {
          var elem390 = null;
          elem390 = new XcalarApiDagNodeT();
          elem390.read(input);
          this.node.push(elem390);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDagOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDagOutputT');
  if (this.numNodes !== null && this.numNodes !== undefined) {
    output.writeFieldBegin('numNodes', Thrift.Type.I64, 1);
    output.writeI64(this.numNodes);
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.node.length);
    for (var iter391 in this.node)
    {
      if (this.node.hasOwnProperty(iter391))
      {
        iter391 = this.node[iter391];
        iter391.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DagRetinaDescT = function(args) {
  this.retinaName = null;
  if (args) {
    if (args.retinaName !== undefined) {
      this.retinaName = args.retinaName;
    }
  }
};
DagRetinaDescT.prototype = {};
DagRetinaDescT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.retinaName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DagRetinaDescT.prototype.write = function(output) {
  output.writeStructBegin('DagRetinaDescT');
  if (this.retinaName !== null && this.retinaName !== undefined) {
    output.writeFieldBegin('retinaName', Thrift.Type.STRING, 1);
    output.writeString(this.retinaName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiRetinaT = function(args) {
  this.retinaDesc = null;
  this.retinaDag = null;
  if (args) {
    if (args.retinaDesc !== undefined) {
      this.retinaDesc = args.retinaDesc;
    }
    if (args.retinaDag !== undefined) {
      this.retinaDag = args.retinaDag;
    }
  }
};
XcalarApiRetinaT.prototype = {};
XcalarApiRetinaT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.retinaDesc = new DagRetinaDescT();
        this.retinaDesc.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.retinaDag = new XcalarApiDagOutputT();
        this.retinaDag.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiRetinaT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiRetinaT');
  if (this.retinaDesc !== null && this.retinaDesc !== undefined) {
    output.writeFieldBegin('retinaDesc', Thrift.Type.STRUCT, 1);
    this.retinaDesc.write(output);
    output.writeFieldEnd();
  }
  if (this.retinaDag !== null && this.retinaDag !== undefined) {
    output.writeFieldBegin('retinaDag', Thrift.Type.STRUCT, 2);
    this.retinaDag.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiQueryStateOutputT = function(args) {
  this.queryState = null;
  this.queryStatus = null;
  this.query = null;
  this.numQueuedWorkItem = null;
  this.numCompletedWorkItem = null;
  this.numFailedWorkItem = null;
  this.elapsed = null;
  this.queryGraph = null;
  this.queryNodeId = null;
  if (args) {
    if (args.queryState !== undefined) {
      this.queryState = args.queryState;
    }
    if (args.queryStatus !== undefined) {
      this.queryStatus = args.queryStatus;
    }
    if (args.query !== undefined) {
      this.query = args.query;
    }
    if (args.numQueuedWorkItem !== undefined) {
      this.numQueuedWorkItem = args.numQueuedWorkItem;
    }
    if (args.numCompletedWorkItem !== undefined) {
      this.numCompletedWorkItem = args.numCompletedWorkItem;
    }
    if (args.numFailedWorkItem !== undefined) {
      this.numFailedWorkItem = args.numFailedWorkItem;
    }
    if (args.elapsed !== undefined) {
      this.elapsed = args.elapsed;
    }
    if (args.queryGraph !== undefined) {
      this.queryGraph = args.queryGraph;
    }
    if (args.queryNodeId !== undefined) {
      this.queryNodeId = args.queryNodeId;
    }
  }
};
XcalarApiQueryStateOutputT.prototype = {};
XcalarApiQueryStateOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.queryState = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.queryStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.numQueuedWorkItem = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.numCompletedWorkItem = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.numFailedWorkItem = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.elapsed = new XcalarApiTimeT();
        this.elapsed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.queryGraph = new XcalarApiDagOutputT();
        this.queryGraph.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.queryNodeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiQueryStateOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiQueryStateOutputT');
  if (this.queryState !== null && this.queryState !== undefined) {
    output.writeFieldBegin('queryState', Thrift.Type.I32, 1);
    output.writeI32(this.queryState);
    output.writeFieldEnd();
  }
  if (this.queryStatus !== null && this.queryStatus !== undefined) {
    output.writeFieldBegin('queryStatus', Thrift.Type.I32, 2);
    output.writeI32(this.queryStatus);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 3);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.numQueuedWorkItem !== null && this.numQueuedWorkItem !== undefined) {
    output.writeFieldBegin('numQueuedWorkItem', Thrift.Type.I64, 4);
    output.writeI64(this.numQueuedWorkItem);
    output.writeFieldEnd();
  }
  if (this.numCompletedWorkItem !== null && this.numCompletedWorkItem !== undefined) {
    output.writeFieldBegin('numCompletedWorkItem', Thrift.Type.I64, 5);
    output.writeI64(this.numCompletedWorkItem);
    output.writeFieldEnd();
  }
  if (this.numFailedWorkItem !== null && this.numFailedWorkItem !== undefined) {
    output.writeFieldBegin('numFailedWorkItem', Thrift.Type.I64, 6);
    output.writeI64(this.numFailedWorkItem);
    output.writeFieldEnd();
  }
  if (this.elapsed !== null && this.elapsed !== undefined) {
    output.writeFieldBegin('elapsed', Thrift.Type.STRUCT, 7);
    this.elapsed.write(output);
    output.writeFieldEnd();
  }
  if (this.queryGraph !== null && this.queryGraph !== undefined) {
    output.writeFieldBegin('queryGraph', Thrift.Type.STRUCT, 8);
    this.queryGraph.write(output);
    output.writeFieldEnd();
  }
  if (this.queryNodeId !== null && this.queryNodeId !== undefined) {
    output.writeFieldBegin('queryNodeId', Thrift.Type.I32, 9);
    output.writeI32(this.queryNodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListRetinasOutputT = function(args) {
  this.numRetinas = null;
  this.retinaDescs = null;
  if (args) {
    if (args.numRetinas !== undefined) {
      this.numRetinas = args.numRetinas;
    }
    if (args.retinaDescs !== undefined) {
      this.retinaDescs = args.retinaDescs;
    }
  }
};
XcalarApiListRetinasOutputT.prototype = {};
XcalarApiListRetinasOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numRetinas = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size392 = 0;
        var _rtmp3396;
        this.retinaDescs = [];
        var _etype395 = 0;
        _rtmp3396 = input.readListBegin();
        _etype395 = _rtmp3396.etype;
        _size392 = _rtmp3396.size;
        for (var _i397 = 0; _i397 < _size392; ++_i397)
        {
          var elem398 = null;
          elem398 = new DagRetinaDescT();
          elem398.read(input);
          this.retinaDescs.push(elem398);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListRetinasOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListRetinasOutputT');
  if (this.numRetinas !== null && this.numRetinas !== undefined) {
    output.writeFieldBegin('numRetinas', Thrift.Type.I64, 1);
    output.writeI64(this.numRetinas);
    output.writeFieldEnd();
  }
  if (this.retinaDescs !== null && this.retinaDescs !== undefined) {
    output.writeFieldBegin('retinaDescs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.retinaDescs.length);
    for (var iter399 in this.retinaDescs)
    {
      if (this.retinaDescs.hasOwnProperty(iter399))
      {
        iter399 = this.retinaDescs[iter399];
        iter399.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetRetinaOutputT = function(args) {
  this.retina = null;
  if (args) {
    if (args.retina !== undefined) {
      this.retina = args.retina;
    }
  }
};
XcalarApiGetRetinaOutputT.prototype = {};
XcalarApiGetRetinaOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.retina = new XcalarApiRetinaT();
        this.retina.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetRetinaOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetRetinaOutputT');
  if (this.retina !== null && this.retina !== undefined) {
    output.writeFieldBegin('retina', Thrift.Type.STRUCT, 1);
    this.retina.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionT = function(args) {
  this.name = null;
  this.state = null;
  this.info = null;
  this.activeNode = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.info !== undefined) {
      this.info = args.info;
    }
    if (args.activeNode !== undefined) {
      this.activeNode = args.activeNode;
    }
  }
};
XcalarApiSessionT.prototype = {};
XcalarApiSessionT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.state = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.info = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.activeNode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionT');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.STRING, 2);
    output.writeString(this.state);
    output.writeFieldEnd();
  }
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.STRING, 3);
    output.writeString(this.info);
    output.writeFieldEnd();
  }
  if (this.activeNode !== null && this.activeNode !== undefined) {
    output.writeFieldBegin('activeNode', Thrift.Type.I32, 4);
    output.writeI32(this.activeNode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionListOutputT = function(args) {
  this.numSessions = null;
  this.sessions = null;
  this.sessionGenericOutput = null;
  if (args) {
    if (args.numSessions !== undefined) {
      this.numSessions = args.numSessions;
    }
    if (args.sessions !== undefined) {
      this.sessions = args.sessions;
    }
    if (args.sessionGenericOutput !== undefined) {
      this.sessionGenericOutput = args.sessionGenericOutput;
    }
  }
};
XcalarApiSessionListOutputT.prototype = {};
XcalarApiSessionListOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numSessions = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size400 = 0;
        var _rtmp3404;
        this.sessions = [];
        var _etype403 = 0;
        _rtmp3404 = input.readListBegin();
        _etype403 = _rtmp3404.etype;
        _size400 = _rtmp3404.size;
        for (var _i405 = 0; _i405 < _size400; ++_i405)
        {
          var elem406 = null;
          elem406 = new XcalarApiSessionT();
          elem406.read(input);
          this.sessions.push(elem406);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionGenericOutput = new XcalarApiSessionGenericOutputT();
        this.sessionGenericOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionListOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionListOutputT');
  if (this.numSessions !== null && this.numSessions !== undefined) {
    output.writeFieldBegin('numSessions', Thrift.Type.I64, 1);
    output.writeI64(this.numSessions);
    output.writeFieldEnd();
  }
  if (this.sessions !== null && this.sessions !== undefined) {
    output.writeFieldBegin('sessions', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.sessions.length);
    for (var iter407 in this.sessions)
    {
      if (this.sessions.hasOwnProperty(iter407))
      {
        iter407 = this.sessions[iter407];
        iter407.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sessionGenericOutput !== null && this.sessionGenericOutput !== undefined) {
    output.writeFieldBegin('sessionGenericOutput', Thrift.Type.STRUCT, 3);
    this.sessionGenericOutput.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiImportRetinaOutputT = function(args) {
  this.numUdfModules = null;
  this.udfModuleStatuses = null;
  if (args) {
    if (args.numUdfModules !== undefined) {
      this.numUdfModules = args.numUdfModules;
    }
    if (args.udfModuleStatuses !== undefined) {
      this.udfModuleStatuses = args.udfModuleStatuses;
    }
  }
};
XcalarApiImportRetinaOutputT.prototype = {};
XcalarApiImportRetinaOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numUdfModules = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size408 = 0;
        var _rtmp3412;
        this.udfModuleStatuses = [];
        var _etype411 = 0;
        _rtmp3412 = input.readListBegin();
        _etype411 = _rtmp3412.etype;
        _size408 = _rtmp3412.size;
        for (var _i413 = 0; _i413 < _size408; ++_i413)
        {
          var elem414 = null;
          elem414 = new XcalarApiUdfAddUpdateOutputT();
          elem414.read(input);
          this.udfModuleStatuses.push(elem414);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiImportRetinaOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiImportRetinaOutputT');
  if (this.numUdfModules !== null && this.numUdfModules !== undefined) {
    output.writeFieldBegin('numUdfModules', Thrift.Type.I64, 1);
    output.writeI64(this.numUdfModules);
    output.writeFieldEnd();
  }
  if (this.udfModuleStatuses !== null && this.udfModuleStatuses !== undefined) {
    output.writeFieldBegin('udfModuleStatuses', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.udfModuleStatuses.length);
    for (var iter415 in this.udfModuleStatuses)
    {
      if (this.udfModuleStatuses.hasOwnProperty(iter415))
      {
        iter415 = this.udfModuleStatuses[iter415];
        iter415.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiExportRetinaOutputT = function(args) {
  this.retinaCount = null;
  this.retina = null;
  if (args) {
    if (args.retinaCount !== undefined) {
      this.retinaCount = args.retinaCount;
    }
    if (args.retina !== undefined) {
      this.retina = args.retina;
    }
  }
};
XcalarApiExportRetinaOutputT.prototype = {};
XcalarApiExportRetinaOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.retinaCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.retina = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiExportRetinaOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiExportRetinaOutputT');
  if (this.retinaCount !== null && this.retinaCount !== undefined) {
    output.writeFieldBegin('retinaCount', Thrift.Type.I64, 1);
    output.writeI64(this.retinaCount);
    output.writeFieldEnd();
  }
  if (this.retina !== null && this.retina !== undefined) {
    output.writeFieldBegin('retina', Thrift.Type.STRING, 2);
    output.writeString(this.retina);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiFuncTestOutputT = function(args) {
  this.testName = null;
  this.status = null;
  if (args) {
    if (args.testName !== undefined) {
      this.testName = args.testName;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
  }
};
XcalarApiFuncTestOutputT.prototype = {};
XcalarApiFuncTestOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.testName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiFuncTestOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiFuncTestOutputT');
  if (this.testName !== null && this.testName !== undefined) {
    output.writeFieldBegin('testName', Thrift.Type.STRING, 1);
    output.writeString(this.testName);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiStartFuncTestOutputT = function(args) {
  this.numTests = null;
  this.testOutputs = null;
  if (args) {
    if (args.numTests !== undefined) {
      this.numTests = args.numTests;
    }
    if (args.testOutputs !== undefined) {
      this.testOutputs = args.testOutputs;
    }
  }
};
XcalarApiStartFuncTestOutputT.prototype = {};
XcalarApiStartFuncTestOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numTests = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size416 = 0;
        var _rtmp3420;
        this.testOutputs = [];
        var _etype419 = 0;
        _rtmp3420 = input.readListBegin();
        _etype419 = _rtmp3420.etype;
        _size416 = _rtmp3420.size;
        for (var _i421 = 0; _i421 < _size416; ++_i421)
        {
          var elem422 = null;
          elem422 = new XcalarApiFuncTestOutputT();
          elem422.read(input);
          this.testOutputs.push(elem422);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiStartFuncTestOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiStartFuncTestOutputT');
  if (this.numTests !== null && this.numTests !== undefined) {
    output.writeFieldBegin('numTests', Thrift.Type.I32, 1);
    output.writeI32(this.numTests);
    output.writeFieldEnd();
  }
  if (this.testOutputs !== null && this.testOutputs !== undefined) {
    output.writeFieldBegin('testOutputs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.testOutputs.length);
    for (var iter423 in this.testOutputs)
    {
      if (this.testOutputs.hasOwnProperty(iter423))
      {
        iter423 = this.testOutputs[iter423];
        iter423.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListFuncTestOutputT = function(args) {
  this.numTests = null;
  this.testNames = null;
  if (args) {
    if (args.numTests !== undefined) {
      this.numTests = args.numTests;
    }
    if (args.testNames !== undefined) {
      this.testNames = args.testNames;
    }
  }
};
XcalarApiListFuncTestOutputT.prototype = {};
XcalarApiListFuncTestOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numTests = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size424 = 0;
        var _rtmp3428;
        this.testNames = [];
        var _etype427 = 0;
        _rtmp3428 = input.readListBegin();
        _etype427 = _rtmp3428.etype;
        _size424 = _rtmp3428.size;
        for (var _i429 = 0; _i429 < _size424; ++_i429)
        {
          var elem430 = null;
          elem430 = input.readString().value;
          this.testNames.push(elem430);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListFuncTestOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListFuncTestOutputT');
  if (this.numTests !== null && this.numTests !== undefined) {
    output.writeFieldBegin('numTests', Thrift.Type.I32, 1);
    output.writeI32(this.numTests);
    output.writeFieldEnd();
  }
  if (this.testNames !== null && this.testNames !== undefined) {
    output.writeFieldBegin('testNames', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.testNames.length);
    for (var iter431 in this.testNames)
    {
      if (this.testNames.hasOwnProperty(iter431))
      {
        iter431 = this.testNames[iter431];
        output.writeString(iter431);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDatasetMemoryUsageT = function(args) {
  this.datasetName = null;
  this.datsetId = null;
  this.totalBytes = null;
  this.numNodes = null;
  this.bytesPerNode = null;
  if (args) {
    if (args.datasetName !== undefined) {
      this.datasetName = args.datasetName;
    }
    if (args.datsetId !== undefined) {
      this.datsetId = args.datsetId;
    }
    if (args.totalBytes !== undefined) {
      this.totalBytes = args.totalBytes;
    }
    if (args.numNodes !== undefined) {
      this.numNodes = args.numNodes;
    }
    if (args.bytesPerNode !== undefined) {
      this.bytesPerNode = args.bytesPerNode;
    }
  }
};
XcalarApiDatasetMemoryUsageT.prototype = {};
XcalarApiDatasetMemoryUsageT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.datasetName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.datsetId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.totalBytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.numNodes = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size432 = 0;
        var _rtmp3436;
        this.bytesPerNode = [];
        var _etype435 = 0;
        _rtmp3436 = input.readListBegin();
        _etype435 = _rtmp3436.etype;
        _size432 = _rtmp3436.size;
        for (var _i437 = 0; _i437 < _size432; ++_i437)
        {
          var elem438 = null;
          elem438 = input.readI64().value;
          this.bytesPerNode.push(elem438);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDatasetMemoryUsageT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDatasetMemoryUsageT');
  if (this.datasetName !== null && this.datasetName !== undefined) {
    output.writeFieldBegin('datasetName', Thrift.Type.STRING, 1);
    output.writeString(this.datasetName);
    output.writeFieldEnd();
  }
  if (this.datsetId !== null && this.datsetId !== undefined) {
    output.writeFieldBegin('datsetId', Thrift.Type.STRING, 2);
    output.writeString(this.datsetId);
    output.writeFieldEnd();
  }
  if (this.totalBytes !== null && this.totalBytes !== undefined) {
    output.writeFieldBegin('totalBytes', Thrift.Type.I64, 3);
    output.writeI64(this.totalBytes);
    output.writeFieldEnd();
  }
  if (this.numNodes !== null && this.numNodes !== undefined) {
    output.writeFieldBegin('numNodes', Thrift.Type.I32, 4);
    output.writeI32(this.numNodes);
    output.writeFieldEnd();
  }
  if (this.bytesPerNode !== null && this.bytesPerNode !== undefined) {
    output.writeFieldBegin('bytesPerNode', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I64, this.bytesPerNode.length);
    for (var iter439 in this.bytesPerNode)
    {
      if (this.bytesPerNode.hasOwnProperty(iter439))
      {
        iter439 = this.bytesPerNode[iter439];
        output.writeI64(iter439);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiTableMemoryUsageT = function(args) {
  this.tableName = null;
  this.tableId = null;
  this.totalBytes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.tableId !== undefined) {
      this.tableId = args.tableId;
    }
    if (args.totalBytes !== undefined) {
      this.totalBytes = args.totalBytes;
    }
  }
};
XcalarApiTableMemoryUsageT.prototype = {};
XcalarApiTableMemoryUsageT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.totalBytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiTableMemoryUsageT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiTableMemoryUsageT');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.tableId !== null && this.tableId !== undefined) {
    output.writeFieldBegin('tableId', Thrift.Type.STRING, 2);
    output.writeString(this.tableId);
    output.writeFieldEnd();
  }
  if (this.totalBytes !== null && this.totalBytes !== undefined) {
    output.writeFieldBegin('totalBytes', Thrift.Type.I64, 3);
    output.writeI64(this.totalBytes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionMemoryUsageT = function(args) {
  this.sessionName = null;
  this.numTables = null;
  this.tableMemory = null;
  if (args) {
    if (args.sessionName !== undefined) {
      this.sessionName = args.sessionName;
    }
    if (args.numTables !== undefined) {
      this.numTables = args.numTables;
    }
    if (args.tableMemory !== undefined) {
      this.tableMemory = args.tableMemory;
    }
  }
};
XcalarApiSessionMemoryUsageT.prototype = {};
XcalarApiSessionMemoryUsageT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.numTables = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size440 = 0;
        var _rtmp3444;
        this.tableMemory = [];
        var _etype443 = 0;
        _rtmp3444 = input.readListBegin();
        _etype443 = _rtmp3444.etype;
        _size440 = _rtmp3444.size;
        for (var _i445 = 0; _i445 < _size440; ++_i445)
        {
          var elem446 = null;
          elem446 = new XcalarApiTableMemoryUsageT();
          elem446.read(input);
          this.tableMemory.push(elem446);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionMemoryUsageT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionMemoryUsageT');
  if (this.sessionName !== null && this.sessionName !== undefined) {
    output.writeFieldBegin('sessionName', Thrift.Type.STRING, 1);
    output.writeString(this.sessionName);
    output.writeFieldEnd();
  }
  if (this.numTables !== null && this.numTables !== undefined) {
    output.writeFieldBegin('numTables', Thrift.Type.I32, 2);
    output.writeI32(this.numTables);
    output.writeFieldEnd();
  }
  if (this.tableMemory !== null && this.tableMemory !== undefined) {
    output.writeFieldBegin('tableMemory', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.tableMemory.length);
    for (var iter447 in this.tableMemory)
    {
      if (this.tableMemory.hasOwnProperty(iter447))
      {
        iter447 = this.tableMemory[iter447];
        iter447.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUserMemoryUsageT = function(args) {
  this.userName = null;
  this.userId = null;
  this.numSessions = null;
  this.sessionMemory = null;
  if (args) {
    if (args.userName !== undefined) {
      this.userName = args.userName;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.numSessions !== undefined) {
      this.numSessions = args.numSessions;
    }
    if (args.sessionMemory !== undefined) {
      this.sessionMemory = args.sessionMemory;
    }
  }
};
XcalarApiUserMemoryUsageT.prototype = {};
XcalarApiUserMemoryUsageT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numSessions = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size448 = 0;
        var _rtmp3452;
        this.sessionMemory = [];
        var _etype451 = 0;
        _rtmp3452 = input.readListBegin();
        _etype451 = _rtmp3452.etype;
        _size448 = _rtmp3452.size;
        for (var _i453 = 0; _i453 < _size448; ++_i453)
        {
          var elem454 = null;
          elem454 = new XcalarApiSessionMemoryUsageT();
          elem454.read(input);
          this.sessionMemory.push(elem454);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUserMemoryUsageT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUserMemoryUsageT');
  if (this.userName !== null && this.userName !== undefined) {
    output.writeFieldBegin('userName', Thrift.Type.STRING, 1);
    output.writeString(this.userName);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.numSessions !== null && this.numSessions !== undefined) {
    output.writeFieldBegin('numSessions', Thrift.Type.I32, 3);
    output.writeI32(this.numSessions);
    output.writeFieldEnd();
  }
  if (this.sessionMemory !== null && this.sessionMemory !== undefined) {
    output.writeFieldBegin('sessionMemory', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.sessionMemory.length);
    for (var iter455 in this.sessionMemory)
    {
      if (this.sessionMemory.hasOwnProperty(iter455))
      {
        iter455 = this.sessionMemory[iter455];
        iter455.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XemClientConfigParamsT = function(args) {
  this.enableStatsShipment = null;
  this.isVirtualCluster = null;
  this.xemHostPortNumber = null;
  this.statsPushHeartBeat = null;
  this.xemHostAddress = null;
  this.clusterName = null;
  if (args) {
    if (args.enableStatsShipment !== undefined) {
      this.enableStatsShipment = args.enableStatsShipment;
    }
    if (args.isVirtualCluster !== undefined) {
      this.isVirtualCluster = args.isVirtualCluster;
    }
    if (args.xemHostPortNumber !== undefined) {
      this.xemHostPortNumber = args.xemHostPortNumber;
    }
    if (args.statsPushHeartBeat !== undefined) {
      this.statsPushHeartBeat = args.statsPushHeartBeat;
    }
    if (args.xemHostAddress !== undefined) {
      this.xemHostAddress = args.xemHostAddress;
    }
    if (args.clusterName !== undefined) {
      this.clusterName = args.clusterName;
    }
  }
};
XemClientConfigParamsT.prototype = {};
XemClientConfigParamsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.enableStatsShipment = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.isVirtualCluster = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.xemHostPortNumber = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.statsPushHeartBeat = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.xemHostAddress = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.clusterName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XemClientConfigParamsT.prototype.write = function(output) {
  output.writeStructBegin('XemClientConfigParamsT');
  if (this.enableStatsShipment !== null && this.enableStatsShipment !== undefined) {
    output.writeFieldBegin('enableStatsShipment', Thrift.Type.BOOL, 1);
    output.writeBool(this.enableStatsShipment);
    output.writeFieldEnd();
  }
  if (this.isVirtualCluster !== null && this.isVirtualCluster !== undefined) {
    output.writeFieldBegin('isVirtualCluster', Thrift.Type.BOOL, 2);
    output.writeBool(this.isVirtualCluster);
    output.writeFieldEnd();
  }
  if (this.xemHostPortNumber !== null && this.xemHostPortNumber !== undefined) {
    output.writeFieldBegin('xemHostPortNumber', Thrift.Type.I64, 3);
    output.writeI64(this.xemHostPortNumber);
    output.writeFieldEnd();
  }
  if (this.statsPushHeartBeat !== null && this.statsPushHeartBeat !== undefined) {
    output.writeFieldBegin('statsPushHeartBeat', Thrift.Type.I64, 4);
    output.writeI64(this.statsPushHeartBeat);
    output.writeFieldEnd();
  }
  if (this.xemHostAddress !== null && this.xemHostAddress !== undefined) {
    output.writeFieldBegin('xemHostAddress', Thrift.Type.STRING, 5);
    output.writeString(this.xemHostAddress);
    output.writeFieldEnd();
  }
  if (this.clusterName !== null && this.clusterName !== undefined) {
    output.writeFieldBegin('clusterName', Thrift.Type.STRING, 6);
    output.writeString(this.clusterName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetMemoryUsageOutputT = function(args) {
  this.userMemory = null;
  if (args) {
    if (args.userMemory !== undefined) {
      this.userMemory = args.userMemory;
    }
  }
};
XcalarApiGetMemoryUsageOutputT.prototype = {};
XcalarApiGetMemoryUsageOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userMemory = new XcalarApiUserMemoryUsageT();
        this.userMemory.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetMemoryUsageOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetMemoryUsageOutputT');
  if (this.userMemory !== null && this.userMemory !== undefined) {
    output.writeFieldBegin('userMemory', Thrift.Type.STRUCT, 1);
    this.userMemory.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetIpAddrOutputT = function(args) {
  this.ipAddr = null;
  if (args) {
    if (args.ipAddr !== undefined) {
      this.ipAddr = args.ipAddr;
    }
  }
};
XcalarApiGetIpAddrOutputT.prototype = {};
XcalarApiGetIpAddrOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ipAddr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetIpAddrOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetIpAddrOutputT');
  if (this.ipAddr !== null && this.ipAddr !== undefined) {
    output.writeFieldBegin('ipAddr', Thrift.Type.STRING, 1);
    output.writeString(this.ipAddr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetNumNodesOutputT = function(args) {
  this.numNodes = null;
  if (args) {
    if (args.numNodes !== undefined) {
      this.numNodes = args.numNodes;
    }
  }
};
XcalarApiGetNumNodesOutputT.prototype = {};
XcalarApiGetNumNodesOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numNodes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetNumNodesOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetNumNodesOutputT');
  if (this.numNodes !== null && this.numNodes !== undefined) {
    output.writeFieldBegin('numNodes', Thrift.Type.I64, 1);
    output.writeI64(this.numNodes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDatasetUserT = function(args) {
  this.userId = null;
  this.referenceCount = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.referenceCount !== undefined) {
      this.referenceCount = args.referenceCount;
    }
  }
};
XcalarApiDatasetUserT.prototype = {};
XcalarApiDatasetUserT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userId = new XcalarApiUserIdT();
        this.userId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.referenceCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDatasetUserT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDatasetUserT');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRUCT, 1);
    this.userId.write(output);
    output.writeFieldEnd();
  }
  if (this.referenceCount !== null && this.referenceCount !== undefined) {
    output.writeFieldBegin('referenceCount', Thrift.Type.I64, 2);
    output.writeI64(this.referenceCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListDatasetUsersOutputT = function(args) {
  this.usersCount = null;
  this.user = null;
  if (args) {
    if (args.usersCount !== undefined) {
      this.usersCount = args.usersCount;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
  }
};
XcalarApiListDatasetUsersOutputT.prototype = {};
XcalarApiListDatasetUsersOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.usersCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size456 = 0;
        var _rtmp3460;
        this.user = [];
        var _etype459 = 0;
        _rtmp3460 = input.readListBegin();
        _etype459 = _rtmp3460.etype;
        _size456 = _rtmp3460.size;
        for (var _i461 = 0; _i461 < _size456; ++_i461)
        {
          var elem462 = null;
          elem462 = new XcalarApiDatasetUserT();
          elem462.read(input);
          this.user.push(elem462);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListDatasetUsersOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListDatasetUsersOutputT');
  if (this.usersCount !== null && this.usersCount !== undefined) {
    output.writeFieldBegin('usersCount', Thrift.Type.I64, 1);
    output.writeI64(this.usersCount);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.user.length);
    for (var iter463 in this.user)
    {
      if (this.user.hasOwnProperty(iter463))
      {
        iter463 = this.user[iter463];
        iter463.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUserDatasetT = function(args) {
  this.datasetName = null;
  this.isLocked = null;
  if (args) {
    if (args.datasetName !== undefined) {
      this.datasetName = args.datasetName;
    }
    if (args.isLocked !== undefined) {
      this.isLocked = args.isLocked;
    }
  }
};
XcalarApiUserDatasetT.prototype = {};
XcalarApiUserDatasetT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.datasetName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.isLocked = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUserDatasetT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUserDatasetT');
  if (this.datasetName !== null && this.datasetName !== undefined) {
    output.writeFieldBegin('datasetName', Thrift.Type.STRING, 1);
    output.writeString(this.datasetName);
    output.writeFieldEnd();
  }
  if (this.isLocked !== null && this.isLocked !== undefined) {
    output.writeFieldBegin('isLocked', Thrift.Type.BOOL, 2);
    output.writeBool(this.isLocked);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListUserDatasetsOutputT = function(args) {
  this.datasetCount = null;
  this.dataset = null;
  if (args) {
    if (args.datasetCount !== undefined) {
      this.datasetCount = args.datasetCount;
    }
    if (args.dataset !== undefined) {
      this.dataset = args.dataset;
    }
  }
};
XcalarApiListUserDatasetsOutputT.prototype = {};
XcalarApiListUserDatasetsOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.datasetCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size464 = 0;
        var _rtmp3468;
        this.dataset = [];
        var _etype467 = 0;
        _rtmp3468 = input.readListBegin();
        _etype467 = _rtmp3468.etype;
        _size464 = _rtmp3468.size;
        for (var _i469 = 0; _i469 < _size464; ++_i469)
        {
          var elem470 = null;
          elem470 = new XcalarApiUserDatasetT();
          elem470.read(input);
          this.dataset.push(elem470);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListUserDatasetsOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListUserDatasetsOutputT');
  if (this.datasetCount !== null && this.datasetCount !== undefined) {
    output.writeFieldBegin('datasetCount', Thrift.Type.I64, 1);
    output.writeI64(this.datasetCount);
    output.writeFieldEnd();
  }
  if (this.dataset !== null && this.dataset !== undefined) {
    output.writeFieldBegin('dataset', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.dataset.length);
    for (var iter471 in this.dataset)
    {
      if (this.dataset.hasOwnProperty(iter471))
      {
        iter471 = this.dataset[iter471];
        iter471.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiLogLevelGetOutputT = function(args) {
  this.logLevel = null;
  this.logFlushPeriod = null;
  if (args) {
    if (args.logLevel !== undefined) {
      this.logLevel = args.logLevel;
    }
    if (args.logFlushPeriod !== undefined) {
      this.logFlushPeriod = args.logFlushPeriod;
    }
  }
};
XcalarApiLogLevelGetOutputT.prototype = {};
XcalarApiLogLevelGetOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.logLevel = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.logFlushPeriod = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiLogLevelGetOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiLogLevelGetOutputT');
  if (this.logLevel !== null && this.logLevel !== undefined) {
    output.writeFieldBegin('logLevel', Thrift.Type.I32, 1);
    output.writeI32(this.logLevel);
    output.writeFieldEnd();
  }
  if (this.logFlushPeriod !== null && this.logFlushPeriod !== undefined) {
    output.writeFieldBegin('logFlushPeriod', Thrift.Type.I32, 2);
    output.writeI32(this.logFlushPeriod);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiOutputResultT = function(args) {
  this.getVersionOutput = null;
  this.statusOutput = null;
  this.statOutput = null;
  this.listNodesOutput = null;
  this.makeResultSetOutput = null;
  this.resultSetNextOutput = null;
  this.getTableMetaOutput = null;
  this.indexOutput = null;
  this.loadOutput = null;
  this.getTableRefCountOutput = null;
  this.deleteDagNodesOutput = null;
  this.joinOutput = null;
  this.statGroupIdMapOutput = null;
  this.listDatasetsOutput = null;
  this.mapOutput = null;
  this.aggregateOutput = null;
  this.filterOutput = null;
  this.queryOutput = null;
  this.queryStateOutput = null;
  this.listTargetsOutput = null;
  this.dagOutput = null;
  this.listFilesOutput = null;
  this.groupByOutput = null;
  this.listRetinasOutput = null;
  this.getRetinaOutput = null;
  this.listParametersInRetinaOutput = null;
  this.keyLookupOutput = null;
  this.topOutput = null;
  this.listXdfsOutput = null;
  this.sessionListOutput = null;
  this.getQueryOutput = null;
  this.supportGenerateOutput = null;
  this.projectOutput = null;
  this.getRowNumOutput = null;
  this.udfAddUpdateOutput = null;
  this.udfGetOutput = null;
  this.perNodeOpStatsOutput = null;
  this.opStatsOutput = null;
  this.importRetinaOutput = null;
  this.previewOutput = null;
  this.exportRetinaOutput = null;
  this.startFuncTestOutput = null;
  this.listFuncTestOutput = null;
  this.executeRetinaOutput = null;
  this.deleteDatasetsOutput = null;
  this.getConfigParamsOutput = null;
  this.getLicenseOutput = null;
  this.appRunOutput = null;
  this.appReapOutput = null;
  this.demoFileOutput = null;
  this.memoryUsageOutput = null;
  this.getIpAddrOutput = null;
  this.getNumNodesOutput = null;
  this.sessionGenericOutput = null;
  this.sessionNewOutput = null;
  this.listDatasetUsersOutput = null;
  this.logLevelGetOutput = null;
  this.keyListOutput = null;
  this.getCurrentXemConfigOutput = null;
  this.listUserDatasetsOutput = null;
  this.unionOutput = null;
  if (args) {
    if (args.getVersionOutput !== undefined) {
      this.getVersionOutput = args.getVersionOutput;
    }
    if (args.statusOutput !== undefined) {
      this.statusOutput = args.statusOutput;
    }
    if (args.statOutput !== undefined) {
      this.statOutput = args.statOutput;
    }
    if (args.listNodesOutput !== undefined) {
      this.listNodesOutput = args.listNodesOutput;
    }
    if (args.makeResultSetOutput !== undefined) {
      this.makeResultSetOutput = args.makeResultSetOutput;
    }
    if (args.resultSetNextOutput !== undefined) {
      this.resultSetNextOutput = args.resultSetNextOutput;
    }
    if (args.getTableMetaOutput !== undefined) {
      this.getTableMetaOutput = args.getTableMetaOutput;
    }
    if (args.indexOutput !== undefined) {
      this.indexOutput = args.indexOutput;
    }
    if (args.loadOutput !== undefined) {
      this.loadOutput = args.loadOutput;
    }
    if (args.getTableRefCountOutput !== undefined) {
      this.getTableRefCountOutput = args.getTableRefCountOutput;
    }
    if (args.deleteDagNodesOutput !== undefined) {
      this.deleteDagNodesOutput = args.deleteDagNodesOutput;
    }
    if (args.joinOutput !== undefined) {
      this.joinOutput = args.joinOutput;
    }
    if (args.statGroupIdMapOutput !== undefined) {
      this.statGroupIdMapOutput = args.statGroupIdMapOutput;
    }
    if (args.listDatasetsOutput !== undefined) {
      this.listDatasetsOutput = args.listDatasetsOutput;
    }
    if (args.mapOutput !== undefined) {
      this.mapOutput = args.mapOutput;
    }
    if (args.aggregateOutput !== undefined) {
      this.aggregateOutput = args.aggregateOutput;
    }
    if (args.filterOutput !== undefined) {
      this.filterOutput = args.filterOutput;
    }
    if (args.queryOutput !== undefined) {
      this.queryOutput = args.queryOutput;
    }
    if (args.queryStateOutput !== undefined) {
      this.queryStateOutput = args.queryStateOutput;
    }
    if (args.listTargetsOutput !== undefined) {
      this.listTargetsOutput = args.listTargetsOutput;
    }
    if (args.dagOutput !== undefined) {
      this.dagOutput = args.dagOutput;
    }
    if (args.listFilesOutput !== undefined) {
      this.listFilesOutput = args.listFilesOutput;
    }
    if (args.groupByOutput !== undefined) {
      this.groupByOutput = args.groupByOutput;
    }
    if (args.listRetinasOutput !== undefined) {
      this.listRetinasOutput = args.listRetinasOutput;
    }
    if (args.getRetinaOutput !== undefined) {
      this.getRetinaOutput = args.getRetinaOutput;
    }
    if (args.listParametersInRetinaOutput !== undefined) {
      this.listParametersInRetinaOutput = args.listParametersInRetinaOutput;
    }
    if (args.keyLookupOutput !== undefined) {
      this.keyLookupOutput = args.keyLookupOutput;
    }
    if (args.topOutput !== undefined) {
      this.topOutput = args.topOutput;
    }
    if (args.listXdfsOutput !== undefined) {
      this.listXdfsOutput = args.listXdfsOutput;
    }
    if (args.sessionListOutput !== undefined) {
      this.sessionListOutput = args.sessionListOutput;
    }
    if (args.getQueryOutput !== undefined) {
      this.getQueryOutput = args.getQueryOutput;
    }
    if (args.supportGenerateOutput !== undefined) {
      this.supportGenerateOutput = args.supportGenerateOutput;
    }
    if (args.projectOutput !== undefined) {
      this.projectOutput = args.projectOutput;
    }
    if (args.getRowNumOutput !== undefined) {
      this.getRowNumOutput = args.getRowNumOutput;
    }
    if (args.udfAddUpdateOutput !== undefined) {
      this.udfAddUpdateOutput = args.udfAddUpdateOutput;
    }
    if (args.udfGetOutput !== undefined) {
      this.udfGetOutput = args.udfGetOutput;
    }
    if (args.perNodeOpStatsOutput !== undefined) {
      this.perNodeOpStatsOutput = args.perNodeOpStatsOutput;
    }
    if (args.opStatsOutput !== undefined) {
      this.opStatsOutput = args.opStatsOutput;
    }
    if (args.importRetinaOutput !== undefined) {
      this.importRetinaOutput = args.importRetinaOutput;
    }
    if (args.previewOutput !== undefined) {
      this.previewOutput = args.previewOutput;
    }
    if (args.exportRetinaOutput !== undefined) {
      this.exportRetinaOutput = args.exportRetinaOutput;
    }
    if (args.startFuncTestOutput !== undefined) {
      this.startFuncTestOutput = args.startFuncTestOutput;
    }
    if (args.listFuncTestOutput !== undefined) {
      this.listFuncTestOutput = args.listFuncTestOutput;
    }
    if (args.executeRetinaOutput !== undefined) {
      this.executeRetinaOutput = args.executeRetinaOutput;
    }
    if (args.deleteDatasetsOutput !== undefined) {
      this.deleteDatasetsOutput = args.deleteDatasetsOutput;
    }
    if (args.getConfigParamsOutput !== undefined) {
      this.getConfigParamsOutput = args.getConfigParamsOutput;
    }
    if (args.getLicenseOutput !== undefined) {
      this.getLicenseOutput = args.getLicenseOutput;
    }
    if (args.appRunOutput !== undefined) {
      this.appRunOutput = args.appRunOutput;
    }
    if (args.appReapOutput !== undefined) {
      this.appReapOutput = args.appReapOutput;
    }
    if (args.demoFileOutput !== undefined) {
      this.demoFileOutput = args.demoFileOutput;
    }
    if (args.memoryUsageOutput !== undefined) {
      this.memoryUsageOutput = args.memoryUsageOutput;
    }
    if (args.getIpAddrOutput !== undefined) {
      this.getIpAddrOutput = args.getIpAddrOutput;
    }
    if (args.getNumNodesOutput !== undefined) {
      this.getNumNodesOutput = args.getNumNodesOutput;
    }
    if (args.sessionGenericOutput !== undefined) {
      this.sessionGenericOutput = args.sessionGenericOutput;
    }
    if (args.sessionNewOutput !== undefined) {
      this.sessionNewOutput = args.sessionNewOutput;
    }
    if (args.listDatasetUsersOutput !== undefined) {
      this.listDatasetUsersOutput = args.listDatasetUsersOutput;
    }
    if (args.logLevelGetOutput !== undefined) {
      this.logLevelGetOutput = args.logLevelGetOutput;
    }
    if (args.keyListOutput !== undefined) {
      this.keyListOutput = args.keyListOutput;
    }
    if (args.getCurrentXemConfigOutput !== undefined) {
      this.getCurrentXemConfigOutput = args.getCurrentXemConfigOutput;
    }
    if (args.listUserDatasetsOutput !== undefined) {
      this.listUserDatasetsOutput = args.listUserDatasetsOutput;
    }
    if (args.unionOutput !== undefined) {
      this.unionOutput = args.unionOutput;
    }
  }
};
XcalarApiOutputResultT.prototype = {};
XcalarApiOutputResultT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.getVersionOutput = new XcalarApiGetVersionOutputT();
        this.getVersionOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.statusOutput = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.statOutput = new XcalarApiGetStatOutputT();
        this.statOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.listNodesOutput = new XcalarApiListDagNodesOutputT();
        this.listNodesOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.makeResultSetOutput = new XcalarApiMakeResultSetOutputT();
        this.makeResultSetOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.resultSetNextOutput = new XcalarApiResultSetNextOutputT();
        this.resultSetNextOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.getTableMetaOutput = new XcalarApiGetTableMetaOutputT();
        this.getTableMetaOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.indexOutput = new XcalarApiNewTableOutputT();
        this.indexOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.loadOutput = new XcalarApiBulkLoadOutputT();
        this.loadOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.getTableRefCountOutput = new XcalarApiGetTableRefCountOutputT();
        this.getTableRefCountOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.deleteDagNodesOutput = new XcalarApiDeleteDagNodeOutputT();
        this.deleteDagNodesOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.joinOutput = new XcalarApiNewTableOutputT();
        this.joinOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.statGroupIdMapOutput = new XcalarApiGetStatGroupIdMapOutputT();
        this.statGroupIdMapOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.listDatasetsOutput = new XcalarApiListDatasetsOutputT();
        this.listDatasetsOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.mapOutput = new XcalarApiNewTableOutputT();
        this.mapOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRUCT) {
        this.aggregateOutput = new XcalarApiAggregateOutputT();
        this.aggregateOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRUCT) {
        this.filterOutput = new XcalarApiNewTableOutputT();
        this.filterOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRUCT) {
        this.queryOutput = new XcalarApiQueryOutputT();
        this.queryOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRUCT) {
        this.queryStateOutput = new XcalarApiQueryStateOutputT();
        this.queryStateOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.listTargetsOutput = new XcalarApiListExportTargetsOutputT();
        this.listTargetsOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRUCT) {
        this.dagOutput = new XcalarApiDagOutputT();
        this.dagOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRUCT) {
        this.listFilesOutput = new XcalarApiListFilesOutputT();
        this.listFilesOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRUCT) {
        this.groupByOutput = new XcalarApiNewTableOutputT();
        this.groupByOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRUCT) {
        this.listRetinasOutput = new XcalarApiListRetinasOutputT();
        this.listRetinasOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRUCT) {
        this.getRetinaOutput = new XcalarApiGetRetinaOutputT();
        this.getRetinaOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRUCT) {
        this.listParametersInRetinaOutput = new XcalarApiListParametersInRetinaOutputT();
        this.listParametersInRetinaOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.STRUCT) {
        this.keyLookupOutput = new XcalarApiKeyLookupOutputT();
        this.keyLookupOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.STRUCT) {
        this.topOutput = new XcalarApiTopOutputT();
        this.topOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.STRUCT) {
        this.listXdfsOutput = new XcalarApiListXdfsOutputT();
        this.listXdfsOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionListOutput = new XcalarApiSessionListOutputT();
        this.sessionListOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.STRUCT) {
        this.getQueryOutput = new XcalarApiGetQueryOutputT();
        this.getQueryOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.STRUCT) {
        this.supportGenerateOutput = new XcalarApiSupportGenerateOutputT();
        this.supportGenerateOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.STRUCT) {
        this.projectOutput = new XcalarApiNewTableOutputT();
        this.projectOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 36:
      if (ftype == Thrift.Type.STRUCT) {
        this.getRowNumOutput = new XcalarApiNewTableOutputT();
        this.getRowNumOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 37:
      if (ftype == Thrift.Type.STRUCT) {
        this.udfAddUpdateOutput = new XcalarApiUdfAddUpdateOutputT();
        this.udfAddUpdateOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 38:
      if (ftype == Thrift.Type.STRUCT) {
        this.udfGetOutput = new UdfModuleSrcT();
        this.udfGetOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 39:
      if (ftype == Thrift.Type.STRUCT) {
        this.perNodeOpStatsOutput = new XcalarApiPerNodeOpStatsT();
        this.perNodeOpStatsOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.STRUCT) {
        this.opStatsOutput = new XcalarApiOpStatsOutT();
        this.opStatsOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.STRUCT) {
        this.importRetinaOutput = new XcalarApiImportRetinaOutputT();
        this.importRetinaOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 42:
      if (ftype == Thrift.Type.STRUCT) {
        this.previewOutput = new XcalarApiPreviewOutputT();
        this.previewOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 43:
      if (ftype == Thrift.Type.STRUCT) {
        this.exportRetinaOutput = new XcalarApiExportRetinaOutputT();
        this.exportRetinaOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 44:
      if (ftype == Thrift.Type.STRUCT) {
        this.startFuncTestOutput = new XcalarApiStartFuncTestOutputT();
        this.startFuncTestOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 45:
      if (ftype == Thrift.Type.STRUCT) {
        this.listFuncTestOutput = new XcalarApiListFuncTestOutputT();
        this.listFuncTestOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 46:
      if (ftype == Thrift.Type.STRUCT) {
        this.executeRetinaOutput = new XcalarApiNewTableOutputT();
        this.executeRetinaOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 47:
      if (ftype == Thrift.Type.STRUCT) {
        this.deleteDatasetsOutput = new XcalarApiDeleteDatasetsOutputT();
        this.deleteDatasetsOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 48:
      if (ftype == Thrift.Type.STRUCT) {
        this.getConfigParamsOutput = new XcalarApiGetConfigParamsOutputT();
        this.getConfigParamsOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 49:
      if (ftype == Thrift.Type.STRUCT) {
        this.getLicenseOutput = new XcalarApiGetLicenseOutputT();
        this.getLicenseOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 50:
      if (ftype == Thrift.Type.STRUCT) {
        this.appRunOutput = new XcalarApiAppRunOutputT();
        this.appRunOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 51:
      if (ftype == Thrift.Type.STRUCT) {
        this.appReapOutput = new XcalarApiAppReapOutputT();
        this.appReapOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 52:
      if (ftype == Thrift.Type.STRUCT) {
        this.demoFileOutput = new XcalarApiDemoFileOutputT();
        this.demoFileOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 53:
      if (ftype == Thrift.Type.STRUCT) {
        this.memoryUsageOutput = new XcalarApiGetMemoryUsageOutputT();
        this.memoryUsageOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 54:
      if (ftype == Thrift.Type.STRUCT) {
        this.getIpAddrOutput = new XcalarApiGetIpAddrOutputT();
        this.getIpAddrOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 55:
      if (ftype == Thrift.Type.STRUCT) {
        this.getNumNodesOutput = new XcalarApiGetNumNodesOutputT();
        this.getNumNodesOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 56:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionGenericOutput = new XcalarApiSessionGenericOutputT();
        this.sessionGenericOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 57:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionNewOutput = new XcalarApiSessionNewOutputT();
        this.sessionNewOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 58:
      if (ftype == Thrift.Type.STRUCT) {
        this.listDatasetUsersOutput = new XcalarApiListDatasetUsersOutputT();
        this.listDatasetUsersOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 59:
      if (ftype == Thrift.Type.STRUCT) {
        this.logLevelGetOutput = new XcalarApiLogLevelGetOutputT();
        this.logLevelGetOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 60:
      if (ftype == Thrift.Type.STRUCT) {
        this.keyListOutput = new XcalarApiKeyListOutputT();
        this.keyListOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 61:
      if (ftype == Thrift.Type.STRUCT) {
        this.getCurrentXemConfigOutput = new XemClientConfigParamsT();
        this.getCurrentXemConfigOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 62:
      if (ftype == Thrift.Type.STRUCT) {
        this.listUserDatasetsOutput = new XcalarApiListUserDatasetsOutputT();
        this.listUserDatasetsOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 63:
      if (ftype == Thrift.Type.STRUCT) {
        this.unionOutput = new XcalarApiNewTableOutputT();
        this.unionOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiOutputResultT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiOutputResultT');
  if (this.getVersionOutput !== null && this.getVersionOutput !== undefined) {
    output.writeFieldBegin('getVersionOutput', Thrift.Type.STRUCT, 1);
    this.getVersionOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.statusOutput !== null && this.statusOutput !== undefined) {
    output.writeFieldBegin('statusOutput', Thrift.Type.I32, 2);
    output.writeI32(this.statusOutput);
    output.writeFieldEnd();
  }
  if (this.statOutput !== null && this.statOutput !== undefined) {
    output.writeFieldBegin('statOutput', Thrift.Type.STRUCT, 3);
    this.statOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listNodesOutput !== null && this.listNodesOutput !== undefined) {
    output.writeFieldBegin('listNodesOutput', Thrift.Type.STRUCT, 4);
    this.listNodesOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.makeResultSetOutput !== null && this.makeResultSetOutput !== undefined) {
    output.writeFieldBegin('makeResultSetOutput', Thrift.Type.STRUCT, 5);
    this.makeResultSetOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.resultSetNextOutput !== null && this.resultSetNextOutput !== undefined) {
    output.writeFieldBegin('resultSetNextOutput', Thrift.Type.STRUCT, 6);
    this.resultSetNextOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.getTableMetaOutput !== null && this.getTableMetaOutput !== undefined) {
    output.writeFieldBegin('getTableMetaOutput', Thrift.Type.STRUCT, 7);
    this.getTableMetaOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.indexOutput !== null && this.indexOutput !== undefined) {
    output.writeFieldBegin('indexOutput', Thrift.Type.STRUCT, 8);
    this.indexOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.loadOutput !== null && this.loadOutput !== undefined) {
    output.writeFieldBegin('loadOutput', Thrift.Type.STRUCT, 9);
    this.loadOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.getTableRefCountOutput !== null && this.getTableRefCountOutput !== undefined) {
    output.writeFieldBegin('getTableRefCountOutput', Thrift.Type.STRUCT, 10);
    this.getTableRefCountOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.deleteDagNodesOutput !== null && this.deleteDagNodesOutput !== undefined) {
    output.writeFieldBegin('deleteDagNodesOutput', Thrift.Type.STRUCT, 11);
    this.deleteDagNodesOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.joinOutput !== null && this.joinOutput !== undefined) {
    output.writeFieldBegin('joinOutput', Thrift.Type.STRUCT, 12);
    this.joinOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.statGroupIdMapOutput !== null && this.statGroupIdMapOutput !== undefined) {
    output.writeFieldBegin('statGroupIdMapOutput', Thrift.Type.STRUCT, 13);
    this.statGroupIdMapOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listDatasetsOutput !== null && this.listDatasetsOutput !== undefined) {
    output.writeFieldBegin('listDatasetsOutput', Thrift.Type.STRUCT, 14);
    this.listDatasetsOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.mapOutput !== null && this.mapOutput !== undefined) {
    output.writeFieldBegin('mapOutput', Thrift.Type.STRUCT, 15);
    this.mapOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.aggregateOutput !== null && this.aggregateOutput !== undefined) {
    output.writeFieldBegin('aggregateOutput', Thrift.Type.STRUCT, 16);
    this.aggregateOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.filterOutput !== null && this.filterOutput !== undefined) {
    output.writeFieldBegin('filterOutput', Thrift.Type.STRUCT, 17);
    this.filterOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.queryOutput !== null && this.queryOutput !== undefined) {
    output.writeFieldBegin('queryOutput', Thrift.Type.STRUCT, 18);
    this.queryOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.queryStateOutput !== null && this.queryStateOutput !== undefined) {
    output.writeFieldBegin('queryStateOutput', Thrift.Type.STRUCT, 19);
    this.queryStateOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listTargetsOutput !== null && this.listTargetsOutput !== undefined) {
    output.writeFieldBegin('listTargetsOutput', Thrift.Type.STRUCT, 20);
    this.listTargetsOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.dagOutput !== null && this.dagOutput !== undefined) {
    output.writeFieldBegin('dagOutput', Thrift.Type.STRUCT, 21);
    this.dagOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listFilesOutput !== null && this.listFilesOutput !== undefined) {
    output.writeFieldBegin('listFilesOutput', Thrift.Type.STRUCT, 22);
    this.listFilesOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.groupByOutput !== null && this.groupByOutput !== undefined) {
    output.writeFieldBegin('groupByOutput', Thrift.Type.STRUCT, 23);
    this.groupByOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listRetinasOutput !== null && this.listRetinasOutput !== undefined) {
    output.writeFieldBegin('listRetinasOutput', Thrift.Type.STRUCT, 24);
    this.listRetinasOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.getRetinaOutput !== null && this.getRetinaOutput !== undefined) {
    output.writeFieldBegin('getRetinaOutput', Thrift.Type.STRUCT, 25);
    this.getRetinaOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listParametersInRetinaOutput !== null && this.listParametersInRetinaOutput !== undefined) {
    output.writeFieldBegin('listParametersInRetinaOutput', Thrift.Type.STRUCT, 26);
    this.listParametersInRetinaOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.keyLookupOutput !== null && this.keyLookupOutput !== undefined) {
    output.writeFieldBegin('keyLookupOutput', Thrift.Type.STRUCT, 27);
    this.keyLookupOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.topOutput !== null && this.topOutput !== undefined) {
    output.writeFieldBegin('topOutput', Thrift.Type.STRUCT, 28);
    this.topOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listXdfsOutput !== null && this.listXdfsOutput !== undefined) {
    output.writeFieldBegin('listXdfsOutput', Thrift.Type.STRUCT, 29);
    this.listXdfsOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionListOutput !== null && this.sessionListOutput !== undefined) {
    output.writeFieldBegin('sessionListOutput', Thrift.Type.STRUCT, 31);
    this.sessionListOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.getQueryOutput !== null && this.getQueryOutput !== undefined) {
    output.writeFieldBegin('getQueryOutput', Thrift.Type.STRUCT, 32);
    this.getQueryOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.supportGenerateOutput !== null && this.supportGenerateOutput !== undefined) {
    output.writeFieldBegin('supportGenerateOutput', Thrift.Type.STRUCT, 34);
    this.supportGenerateOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.projectOutput !== null && this.projectOutput !== undefined) {
    output.writeFieldBegin('projectOutput', Thrift.Type.STRUCT, 35);
    this.projectOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.getRowNumOutput !== null && this.getRowNumOutput !== undefined) {
    output.writeFieldBegin('getRowNumOutput', Thrift.Type.STRUCT, 36);
    this.getRowNumOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.udfAddUpdateOutput !== null && this.udfAddUpdateOutput !== undefined) {
    output.writeFieldBegin('udfAddUpdateOutput', Thrift.Type.STRUCT, 37);
    this.udfAddUpdateOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.udfGetOutput !== null && this.udfGetOutput !== undefined) {
    output.writeFieldBegin('udfGetOutput', Thrift.Type.STRUCT, 38);
    this.udfGetOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.perNodeOpStatsOutput !== null && this.perNodeOpStatsOutput !== undefined) {
    output.writeFieldBegin('perNodeOpStatsOutput', Thrift.Type.STRUCT, 39);
    this.perNodeOpStatsOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.opStatsOutput !== null && this.opStatsOutput !== undefined) {
    output.writeFieldBegin('opStatsOutput', Thrift.Type.STRUCT, 40);
    this.opStatsOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.importRetinaOutput !== null && this.importRetinaOutput !== undefined) {
    output.writeFieldBegin('importRetinaOutput', Thrift.Type.STRUCT, 41);
    this.importRetinaOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.previewOutput !== null && this.previewOutput !== undefined) {
    output.writeFieldBegin('previewOutput', Thrift.Type.STRUCT, 42);
    this.previewOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.exportRetinaOutput !== null && this.exportRetinaOutput !== undefined) {
    output.writeFieldBegin('exportRetinaOutput', Thrift.Type.STRUCT, 43);
    this.exportRetinaOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.startFuncTestOutput !== null && this.startFuncTestOutput !== undefined) {
    output.writeFieldBegin('startFuncTestOutput', Thrift.Type.STRUCT, 44);
    this.startFuncTestOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listFuncTestOutput !== null && this.listFuncTestOutput !== undefined) {
    output.writeFieldBegin('listFuncTestOutput', Thrift.Type.STRUCT, 45);
    this.listFuncTestOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.executeRetinaOutput !== null && this.executeRetinaOutput !== undefined) {
    output.writeFieldBegin('executeRetinaOutput', Thrift.Type.STRUCT, 46);
    this.executeRetinaOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.deleteDatasetsOutput !== null && this.deleteDatasetsOutput !== undefined) {
    output.writeFieldBegin('deleteDatasetsOutput', Thrift.Type.STRUCT, 47);
    this.deleteDatasetsOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.getConfigParamsOutput !== null && this.getConfigParamsOutput !== undefined) {
    output.writeFieldBegin('getConfigParamsOutput', Thrift.Type.STRUCT, 48);
    this.getConfigParamsOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.getLicenseOutput !== null && this.getLicenseOutput !== undefined) {
    output.writeFieldBegin('getLicenseOutput', Thrift.Type.STRUCT, 49);
    this.getLicenseOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.appRunOutput !== null && this.appRunOutput !== undefined) {
    output.writeFieldBegin('appRunOutput', Thrift.Type.STRUCT, 50);
    this.appRunOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.appReapOutput !== null && this.appReapOutput !== undefined) {
    output.writeFieldBegin('appReapOutput', Thrift.Type.STRUCT, 51);
    this.appReapOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.demoFileOutput !== null && this.demoFileOutput !== undefined) {
    output.writeFieldBegin('demoFileOutput', Thrift.Type.STRUCT, 52);
    this.demoFileOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.memoryUsageOutput !== null && this.memoryUsageOutput !== undefined) {
    output.writeFieldBegin('memoryUsageOutput', Thrift.Type.STRUCT, 53);
    this.memoryUsageOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.getIpAddrOutput !== null && this.getIpAddrOutput !== undefined) {
    output.writeFieldBegin('getIpAddrOutput', Thrift.Type.STRUCT, 54);
    this.getIpAddrOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.getNumNodesOutput !== null && this.getNumNodesOutput !== undefined) {
    output.writeFieldBegin('getNumNodesOutput', Thrift.Type.STRUCT, 55);
    this.getNumNodesOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionGenericOutput !== null && this.sessionGenericOutput !== undefined) {
    output.writeFieldBegin('sessionGenericOutput', Thrift.Type.STRUCT, 56);
    this.sessionGenericOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionNewOutput !== null && this.sessionNewOutput !== undefined) {
    output.writeFieldBegin('sessionNewOutput', Thrift.Type.STRUCT, 57);
    this.sessionNewOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listDatasetUsersOutput !== null && this.listDatasetUsersOutput !== undefined) {
    output.writeFieldBegin('listDatasetUsersOutput', Thrift.Type.STRUCT, 58);
    this.listDatasetUsersOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.logLevelGetOutput !== null && this.logLevelGetOutput !== undefined) {
    output.writeFieldBegin('logLevelGetOutput', Thrift.Type.STRUCT, 59);
    this.logLevelGetOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.keyListOutput !== null && this.keyListOutput !== undefined) {
    output.writeFieldBegin('keyListOutput', Thrift.Type.STRUCT, 60);
    this.keyListOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.getCurrentXemConfigOutput !== null && this.getCurrentXemConfigOutput !== undefined) {
    output.writeFieldBegin('getCurrentXemConfigOutput', Thrift.Type.STRUCT, 61);
    this.getCurrentXemConfigOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listUserDatasetsOutput !== null && this.listUserDatasetsOutput !== undefined) {
    output.writeFieldBegin('listUserDatasetsOutput', Thrift.Type.STRUCT, 62);
    this.listUserDatasetsOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.unionOutput !== null && this.unionOutput !== undefined) {
    output.writeFieldBegin('unionOutput', Thrift.Type.STRUCT, 63);
    this.unionOutput.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiOutputHeaderT = function(args) {
  this.status = null;
  this.elapsed = null;
  this.log = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.elapsed !== undefined) {
      this.elapsed = args.elapsed;
    }
    if (args.log !== undefined) {
      this.log = args.log;
    }
  }
};
XcalarApiOutputHeaderT.prototype = {};
XcalarApiOutputHeaderT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.elapsed = new XcalarApiTimeT();
        this.elapsed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.log = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiOutputHeaderT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiOutputHeaderT');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.elapsed !== null && this.elapsed !== undefined) {
    output.writeFieldBegin('elapsed', Thrift.Type.STRUCT, 2);
    this.elapsed.write(output);
    output.writeFieldEnd();
  }
  if (this.log !== null && this.log !== undefined) {
    output.writeFieldBegin('log', Thrift.Type.STRING, 3);
    output.writeString(this.log);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiOutputT = function(args) {
  this.hdr = null;
  this.outputResult = null;
  if (args) {
    if (args.hdr !== undefined) {
      this.hdr = args.hdr;
    }
    if (args.outputResult !== undefined) {
      this.outputResult = args.outputResult;
    }
  }
};
XcalarApiOutputT.prototype = {};
XcalarApiOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.hdr = new XcalarApiOutputHeaderT();
        this.hdr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.outputResult = new XcalarApiOutputResultT();
        this.outputResult.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiOutputT');
  if (this.hdr !== null && this.hdr !== undefined) {
    output.writeFieldBegin('hdr', Thrift.Type.STRUCT, 1);
    this.hdr.write(output);
    output.writeFieldEnd();
  }
  if (this.outputResult !== null && this.outputResult !== undefined) {
    output.writeFieldBegin('outputResult', Thrift.Type.STRUCT, 2);
    this.outputResult.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiWorkItemT = function(args) {
  this.apiVersionSignature = null;
  this.api = null;
  this.input = null;
  this.userId = null;
  this.userIdUnique = null;
  this.origApi = null;
  this.sessionName = null;
  if (args) {
    if (args.apiVersionSignature !== undefined) {
      this.apiVersionSignature = args.apiVersionSignature;
    }
    if (args.api !== undefined) {
      this.api = args.api;
    }
    if (args.input !== undefined) {
      this.input = args.input;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.userIdUnique !== undefined) {
      this.userIdUnique = args.userIdUnique;
    }
    if (args.origApi !== undefined) {
      this.origApi = args.origApi;
    }
    if (args.sessionName !== undefined) {
      this.sessionName = args.sessionName;
    }
  }
};
XcalarApiWorkItemT.prototype = {};
XcalarApiWorkItemT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.apiVersionSignature = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.api = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.input = new XcalarApiInputT();
        this.input.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.userIdUnique = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.origApi = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.sessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiWorkItemT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiWorkItemT');
  if (this.apiVersionSignature !== null && this.apiVersionSignature !== undefined) {
    output.writeFieldBegin('apiVersionSignature', Thrift.Type.I32, 1);
    output.writeI32(this.apiVersionSignature);
    output.writeFieldEnd();
  }
  if (this.api !== null && this.api !== undefined) {
    output.writeFieldBegin('api', Thrift.Type.I32, 2);
    output.writeI32(this.api);
    output.writeFieldEnd();
  }
  if (this.input !== null && this.input !== undefined) {
    output.writeFieldBegin('input', Thrift.Type.STRUCT, 3);
    this.input.write(output);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 4);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.userIdUnique !== null && this.userIdUnique !== undefined) {
    output.writeFieldBegin('userIdUnique', Thrift.Type.I64, 5);
    output.writeI64(this.userIdUnique);
    output.writeFieldEnd();
  }
  if (this.origApi !== null && this.origApi !== undefined) {
    output.writeFieldBegin('origApi', Thrift.Type.I32, 6);
    output.writeI32(this.origApi);
    output.writeFieldEnd();
  }
  if (this.sessionName !== null && this.sessionName !== undefined) {
    output.writeFieldBegin('sessionName', Thrift.Type.STRING, 7);
    output.writeString(this.sessionName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiWorkItemResult = function(args) {
  this.jobStatus = null;
  this.output = null;
  if (args) {
    if (args.jobStatus !== undefined) {
      this.jobStatus = args.jobStatus;
    }
    if (args.output !== undefined) {
      this.output = args.output;
    }
  }
};
XcalarApiWorkItemResult.prototype = {};
XcalarApiWorkItemResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.jobStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.output = new XcalarApiOutputT();
        this.output.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiWorkItemResult.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiWorkItemResult');
  if (this.jobStatus !== null && this.jobStatus !== undefined) {
    output.writeFieldBegin('jobStatus', Thrift.Type.I32, 1);
    output.writeI32(this.jobStatus);
    output.writeFieldEnd();
  }
  if (this.output !== null && this.output !== undefined) {
    output.writeFieldBegin('output', Thrift.Type.STRUCT, 2);
    this.output.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDatasetIdInvalidT = '';
XcalarApiTableIdInvalidT = '';
XcalarApiDagNodeIdInvalidT = '';
XcalarApiMaxKeyLenT = 255;
XcalarApiDefaultRecordDelimT = '\n';
XcalarApiDefaultFieldDelimT = '\t';
XcalarApiDefaultQuoteDelimT = '\"';
