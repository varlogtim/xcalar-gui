//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


DsAddTargetODBCInputT = function(args) {
  this.connectionString = null;
  if (args) {
    if (args.connectionString !== undefined) {
      this.connectionString = args.connectionString;
    }
  }
};
DsAddTargetODBCInputT.prototype = {};
DsAddTargetODBCInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.connectionString = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DsAddTargetODBCInputT.prototype.write = function(output) {
  output.writeStructBegin('DsAddTargetODBCInputT');
  if (this.connectionString !== null && this.connectionString !== undefined) {
    output.writeFieldBegin('connectionString', Thrift.Type.STRING, 1);
    output.writeString(this.connectionString);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DsAddTargetSFInputT = function(args) {
  this.url = null;
  if (args) {
    if (args.url !== undefined) {
      this.url = args.url;
    }
  }
};
DsAddTargetSFInputT.prototype = {};
DsAddTargetSFInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DsAddTargetSFInputT.prototype.write = function(output) {
  output.writeStructBegin('DsAddTargetSFInputT');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DsAddTargetSpecificInputT = function(args) {
  this.odbcInput = null;
  this.sfInput = null;
  if (args) {
    if (args.odbcInput !== undefined) {
      this.odbcInput = args.odbcInput;
    }
    if (args.sfInput !== undefined) {
      this.sfInput = args.sfInput;
    }
  }
};
DsAddTargetSpecificInputT.prototype = {};
DsAddTargetSpecificInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.odbcInput = new DsAddTargetODBCInputT();
        this.odbcInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sfInput = new DsAddTargetSFInputT();
        this.sfInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DsAddTargetSpecificInputT.prototype.write = function(output) {
  output.writeStructBegin('DsAddTargetSpecificInputT');
  if (this.odbcInput !== null && this.odbcInput !== undefined) {
    output.writeFieldBegin('odbcInput', Thrift.Type.STRUCT, 1);
    this.odbcInput.write(output);
    output.writeFieldEnd();
  }
  if (this.sfInput !== null && this.sfInput !== undefined) {
    output.writeFieldBegin('sfInput', Thrift.Type.STRUCT, 2);
    this.sfInput.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DsExportTargetHdrT = function(args) {
  this.type = null;
  this.name = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
DsExportTargetHdrT.prototype = {};
DsExportTargetHdrT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DsExportTargetHdrT.prototype.write = function(output) {
  output.writeStructBegin('DsExportTargetHdrT');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DsExportTargetT = function(args) {
  this.hdr = null;
  this.specificInput = null;
  if (args) {
    if (args.hdr !== undefined) {
      this.hdr = args.hdr;
    }
    if (args.specificInput !== undefined) {
      this.specificInput = args.specificInput;
    }
  }
};
DsExportTargetT.prototype = {};
DsExportTargetT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.hdr = new DsExportTargetHdrT();
        this.hdr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.specificInput = new DsAddTargetSpecificInputT();
        this.specificInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DsExportTargetT.prototype.write = function(output) {
  output.writeStructBegin('DsExportTargetT');
  if (this.hdr !== null && this.hdr !== undefined) {
    output.writeFieldBegin('hdr', Thrift.Type.STRUCT, 1);
    this.hdr.write(output);
    output.writeFieldEnd();
  }
  if (this.specificInput !== null && this.specificInput !== undefined) {
    output.writeFieldBegin('specificInput', Thrift.Type.STRUCT, 2);
    this.specificInput.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DsInitExportODBCInputT = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
DsInitExportODBCInputT.prototype = {};
DsInitExportODBCInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DsInitExportODBCInputT.prototype.write = function(output) {
  output.writeStructBegin('DsInitExportODBCInputT');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DsInitExportCSVArgsT = function(args) {
  this.fieldDelim = null;
  this.recordDelim = null;
  if (args) {
    if (args.fieldDelim !== undefined) {
      this.fieldDelim = args.fieldDelim;
    }
    if (args.recordDelim !== undefined) {
      this.recordDelim = args.recordDelim;
    }
  }
};
DsInitExportCSVArgsT.prototype = {};
DsInitExportCSVArgsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fieldDelim = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.recordDelim = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DsInitExportCSVArgsT.prototype.write = function(output) {
  output.writeStructBegin('DsInitExportCSVArgsT');
  if (this.fieldDelim !== null && this.fieldDelim !== undefined) {
    output.writeFieldBegin('fieldDelim', Thrift.Type.STRING, 1);
    output.writeString(this.fieldDelim);
    output.writeFieldEnd();
  }
  if (this.recordDelim !== null && this.recordDelim !== undefined) {
    output.writeFieldBegin('recordDelim', Thrift.Type.STRING, 2);
    output.writeString(this.recordDelim);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DsInitExportJSONArgsT = function(args) {
  this.array = null;
  if (args) {
    if (args.array !== undefined) {
      this.array = args.array;
    }
  }
};
DsInitExportJSONArgsT.prototype = {};
DsInitExportJSONArgsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.array = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DsInitExportJSONArgsT.prototype.write = function(output) {
  output.writeStructBegin('DsInitExportJSONArgsT');
  if (this.array !== null && this.array !== undefined) {
    output.writeFieldBegin('array', Thrift.Type.BOOL, 1);
    output.writeBool(this.array);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DsInitExportFormatSpecificArgsT = function(args) {
  this.csv = null;
  this.json = null;
  if (args) {
    if (args.csv !== undefined) {
      this.csv = args.csv;
    }
    if (args.json !== undefined) {
      this.json = args.json;
    }
  }
};
DsInitExportFormatSpecificArgsT.prototype = {};
DsInitExportFormatSpecificArgsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.csv = new DsInitExportCSVArgsT();
        this.csv.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.json = new DsInitExportJSONArgsT();
        this.json.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DsInitExportFormatSpecificArgsT.prototype.write = function(output) {
  output.writeStructBegin('DsInitExportFormatSpecificArgsT');
  if (this.csv !== null && this.csv !== undefined) {
    output.writeFieldBegin('csv', Thrift.Type.STRUCT, 1);
    this.csv.write(output);
    output.writeFieldEnd();
  }
  if (this.json !== null && this.json !== undefined) {
    output.writeFieldBegin('json', Thrift.Type.STRUCT, 2);
    this.json.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DsInitExportSFInputT = function(args) {
  this.fileName = null;
  this.format = null;
  this.formatArgs = null;
  if (args) {
    if (args.fileName !== undefined) {
      this.fileName = args.fileName;
    }
    if (args.format !== undefined) {
      this.format = args.format;
    }
    if (args.formatArgs !== undefined) {
      this.formatArgs = args.formatArgs;
    }
  }
};
DsInitExportSFInputT.prototype = {};
DsInitExportSFInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fileName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.format = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.formatArgs = new DsInitExportFormatSpecificArgsT();
        this.formatArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DsInitExportSFInputT.prototype.write = function(output) {
  output.writeStructBegin('DsInitExportSFInputT');
  if (this.fileName !== null && this.fileName !== undefined) {
    output.writeFieldBegin('fileName', Thrift.Type.STRING, 1);
    output.writeString(this.fileName);
    output.writeFieldEnd();
  }
  if (this.format !== null && this.format !== undefined) {
    output.writeFieldBegin('format', Thrift.Type.I32, 2);
    output.writeI32(this.format);
    output.writeFieldEnd();
  }
  if (this.formatArgs !== null && this.formatArgs !== undefined) {
    output.writeFieldBegin('formatArgs', Thrift.Type.STRUCT, 3);
    this.formatArgs.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DsInitExportSpecificInputT = function(args) {
  this.odbcInput = null;
  this.sfInput = null;
  if (args) {
    if (args.odbcInput !== undefined) {
      this.odbcInput = args.odbcInput;
    }
    if (args.sfInput !== undefined) {
      this.sfInput = args.sfInput;
    }
  }
};
DsInitExportSpecificInputT.prototype = {};
DsInitExportSpecificInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.odbcInput = new DsInitExportODBCInputT();
        this.odbcInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sfInput = new DsInitExportSFInputT();
        this.sfInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DsInitExportSpecificInputT.prototype.write = function(output) {
  output.writeStructBegin('DsInitExportSpecificInputT');
  if (this.odbcInput !== null && this.odbcInput !== undefined) {
    output.writeFieldBegin('odbcInput', Thrift.Type.STRUCT, 1);
    this.odbcInput.write(output);
    output.writeFieldEnd();
  }
  if (this.sfInput !== null && this.sfInput !== undefined) {
    output.writeFieldBegin('sfInput', Thrift.Type.STRUCT, 2);
    this.sfInput.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DsExportMetaT = function(args) {
  this.target = null;
  this.specificInput = null;
  this.createRule = null;
  this.numColumns = null;
  this.columnNames = null;
  if (args) {
    if (args.target !== undefined) {
      this.target = args.target;
    }
    if (args.specificInput !== undefined) {
      this.specificInput = args.specificInput;
    }
    if (args.createRule !== undefined) {
      this.createRule = args.createRule;
    }
    if (args.numColumns !== undefined) {
      this.numColumns = args.numColumns;
    }
    if (args.columnNames !== undefined) {
      this.columnNames = args.columnNames;
    }
  }
};
DsExportMetaT.prototype = {};
DsExportMetaT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.target = new DsExportTargetHdrT();
        this.target.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.specificInput = new DsInitExportSpecificInputT();
        this.specificInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.createRule = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.numColumns = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.columnNames = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.columnNames.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DsExportMetaT.prototype.write = function(output) {
  output.writeStructBegin('DsExportMetaT');
  if (this.target !== null && this.target !== undefined) {
    output.writeFieldBegin('target', Thrift.Type.STRUCT, 1);
    this.target.write(output);
    output.writeFieldEnd();
  }
  if (this.specificInput !== null && this.specificInput !== undefined) {
    output.writeFieldBegin('specificInput', Thrift.Type.STRUCT, 2);
    this.specificInput.write(output);
    output.writeFieldEnd();
  }
  if (this.createRule !== null && this.createRule !== undefined) {
    output.writeFieldBegin('createRule', Thrift.Type.I32, 3);
    output.writeI32(this.createRule);
    output.writeFieldEnd();
  }
  if (this.numColumns !== null && this.numColumns !== undefined) {
    output.writeFieldBegin('numColumns', Thrift.Type.I64, 4);
    output.writeI64(this.numColumns);
    output.writeFieldEnd();
  }
  if (this.columnNames !== null && this.columnNames !== undefined) {
    output.writeFieldBegin('columnNames', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.columnNames.length);
    for (var iter7 in this.columnNames)
    {
      if (this.columnNames.hasOwnProperty(iter7))
      {
        iter7 = this.columnNames[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

