#!/usr/bin/phantomjs --web-security=false
//
// *********************************************
// *** DO NOT EDIT!  This file was autogenerated
// by Makefile.am. Please edit MgmtTest.js instead
// *********************************************
//
/*!
 * jQuery JavaScript Library v2.1.3
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-18T15:11Z
 */

(function( global, factory ) {

    if ( typeof module === "object" && typeof module.exports === "object" ) {
        // For CommonJS and CommonJS-like environments where a proper `window`
        // is present, execute the factory and get jQuery.
        // For environments that do not have a `window` with a `document`
        // (such as Node.js), expose a factory as module.exports.
        // This accentuates the need for the creation of a real `window`.
        // e.g. var jQuery = require("jquery")(window);
        // See ticket #14549 for more info.
        module.exports = global.document ?
            factory( global, true ) :
            function( w ) {
                if ( !w.document ) {
                    throw new Error( "jQuery requires a window with a document" );
                }
                return factory( w );
            };
    } else {
        factory( global );
    }

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Support: Firefox 18+
// Can't be in strict mode, several libs including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
//

var arr = [];

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
    // Use the correct document accordingly with window argument (sandbox)
    document = window.document,

    version = "2.1.3",

    // Define a local copy of jQuery
    jQuery = function( selector, context ) {
        // The jQuery object is actually just the init constructor 'enhanced'
        // Need init if jQuery is called (just allow error to be thrown if not included)
        return new jQuery.fn.init( selector, context );
    },

    // Support: Android<4.1
    // Make sure we trim BOM and NBSP
    rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

    // Matches dashed string for camelizing
    rmsPrefix = /^-ms-/,
    rdashAlpha = /-([\da-z])/gi,

    // Used by jQuery.camelCase as callback to replace()
    fcamelCase = function( all, letter ) {
        return letter.toUpperCase();
    };

jQuery.fn = jQuery.prototype = {
    // The current version of jQuery being used
    jquery: version,

    constructor: jQuery,

    // Start with an empty selector
    selector: "",

    // The default length of a jQuery object is 0
    length: 0,

    toArray: function() {
        return slice.call( this );
    },

    // Get the Nth element in the matched element set OR
    // Get the whole matched element set as a clean array
    get: function( num ) {
        return num != null ?

            // Return just the one element from the set
            ( num < 0 ? this[ num + this.length ] : this[ num ] ) :

            // Return all the elements in a clean array
            slice.call( this );
    },

    // Take an array of elements and push it onto the stack
    // (returning the new matched element set)
    pushStack: function( elems ) {

        // Build a new jQuery matched element set
        var ret = jQuery.merge( this.constructor(), elems );

        // Add the old object onto the stack (as a reference)
        ret.prevObject = this;
        ret.context = this.context;

        // Return the newly-formed element set
        return ret;
    },

    // Execute a callback for every element in the matched set.
    // (You can seed the arguments with an array of args, but this is
    // only used internally.)
    each: function( callback, args ) {
        return jQuery.each( this, callback, args );
    },

    map: function( callback ) {
        return this.pushStack( jQuery.map(this, function( elem, i ) {
            return callback.call( elem, i, elem );
        }));
    },

    slice: function() {
        return this.pushStack( slice.apply( this, arguments ) );
    },

    first: function() {
        return this.eq( 0 );
    },

    last: function() {
        return this.eq( -1 );
    },

    eq: function( i ) {
        var len = this.length,
            j = +i + ( i < 0 ? len : 0 );
        return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
    },

    end: function() {
        return this.prevObject || this.constructor(null);
    },

    // For internal use only.
    // Behaves like an Array's method, not like a jQuery method.
    push: push,
    sort: arr.sort,
    splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
    var options, name, src, copy, copyIsArray, clone,
        target = arguments[0] || {},
        i = 1,
        length = arguments.length,
        deep = false;

    // Handle a deep copy situation
    if ( typeof target === "boolean" ) {
        deep = target;

        // Skip the boolean and the target
        target = arguments[ i ] || {};
        i++;
    }

    // Handle case when target is a string or something (possible in deep copy)
    if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
        target = {};
    }

    // Extend jQuery itself if only one argument is passed
    if ( i === length ) {
        target = this;
        i--;
    }

    for ( ; i < length; i++ ) {
        // Only deal with non-null/undefined values
        if ( (options = arguments[ i ]) != null ) {
            // Extend the base object
            for ( name in options ) {
                src = target[ name ];
                copy = options[ name ];

                // Prevent never-ending loop
                if ( target === copy ) {
                    continue;
                }

                // Recurse if we're merging plain objects or arrays
                if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
                    if ( copyIsArray ) {
                        copyIsArray = false;
                        clone = src && jQuery.isArray(src) ? src : [];

                    } else {
                        clone = src && jQuery.isPlainObject(src) ? src : {};
                    }

                    // Never move original objects, clone them
                    target[ name ] = jQuery.extend( deep, clone, copy );

                // Don't bring in undefined values
                } else if ( copy !== undefined ) {
                    target[ name ] = copy;
                }
            }
        }
    }

    // Return the modified object
    return target;
};

jQuery.extend({
    // Unique for each copy of jQuery on the page
    expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

    // Assume jQuery is ready without the ready module
    isReady: true,

    error: function( msg ) {
        throw new Error( msg );
    },

    noop: function() {},

    isFunction: function( obj ) {
        return jQuery.type(obj) === "function";
    },

    isArray: Array.isArray,

    isWindow: function( obj ) {
        return obj != null && obj === obj.window;
    },

    isNumeric: function( obj ) {
        // parseFloat NaNs numeric-cast false positives (null|true|false|"")
        // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
        // subtraction forces infinities to NaN
        // adding 1 corrects loss of precision from parseFloat (#15100)
        return !jQuery.isArray( obj ) && (obj - parseFloat( obj ) + 1) >= 0;
    },

    isPlainObject: function( obj ) {
        // Not plain objects:
        // - Any object or value whose internal [[Class]] property is not "[object Object]"
        // - DOM nodes
        // - window
        if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
            return false;
        }

        if ( obj.constructor &&
                !hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
            return false;
        }

        // If the function hasn't returned already, we're confident that
        // |obj| is a plain object, created by {} or constructed with new Object
        return true;
    },

    isEmptyObject: function( obj ) {
        var name;
        for ( name in obj ) {
            return false;
        }
        return true;
    },

    type: function( obj ) {
        if ( obj == null ) {
            return obj + "";
        }
        // Support: Android<4.0, iOS<6 (functionish RegExp)
        return typeof obj === "object" || typeof obj === "function" ?
            class2type[ toString.call(obj) ] || "object" :
            typeof obj;
    },

    // Evaluates a script in a global context
    globalEval: function( code ) {
        var script,
            indirect = eval;

        code = jQuery.trim( code );

        if ( code ) {
            // If the code includes a valid, prologue position
            // strict mode pragma, execute code by injecting a
            // script tag into the document.
            if ( code.indexOf("use strict") === 1 ) {
                script = document.createElement("script");
                script.text = code;
                document.head.appendChild( script ).parentNode.removeChild( script );
            } else {
            // Otherwise, avoid the DOM node creation, insertion
            // and removal by using an indirect global eval
                indirect( code );
            }
        }
    },

    // Convert dashed to camelCase; used by the css and data modules
    // Support: IE9-11+
    // Microsoft forgot to hump their vendor prefix (#9572)
    camelCase: function( string ) {
        return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
    },

    nodeName: function( elem, name ) {
        return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
    },

    // args is for internal usage only
    each: function( obj, callback, args ) {
        var value,
            i = 0,
            length = obj.length,
            isArray = isArraylike( obj );

        if ( args ) {
            if ( isArray ) {
                for ( ; i < length; i++ ) {
                    value = callback.apply( obj[ i ], args );

                    if ( value === false ) {
                        break;
                    }
                }
            } else {
                for ( i in obj ) {
                    value = callback.apply( obj[ i ], args );

                    if ( value === false ) {
                        break;
                    }
                }
            }

        // A special, fast, case for the most common use of each
        } else {
            if ( isArray ) {
                for ( ; i < length; i++ ) {
                    value = callback.call( obj[ i ], i, obj[ i ] );

                    if ( value === false ) {
                        break;
                    }
                }
            } else {
                for ( i in obj ) {
                    value = callback.call( obj[ i ], i, obj[ i ] );

                    if ( value === false ) {
                        break;
                    }
                }
            }
        }

        return obj;
    },

    // Support: Android<4.1
    trim: function( text ) {
        return text == null ?
            "" :
            ( text + "" ).replace( rtrim, "" );
    },

    // results is for internal usage only
    makeArray: function( arr, results ) {
        var ret = results || [];

        if ( arr != null ) {
            if ( isArraylike( Object(arr) ) ) {
                jQuery.merge( ret,
                    typeof arr === "string" ?
                    [ arr ] : arr
                );
            } else {
                push.call( ret, arr );
            }
        }

        return ret;
    },

    inArray: function( elem, arr, i ) {
        return arr == null ? -1 : indexOf.call( arr, elem, i );
    },

    merge: function( first, second ) {
        var len = +second.length,
            j = 0,
            i = first.length;

        for ( ; j < len; j++ ) {
            first[ i++ ] = second[ j ];
        }

        first.length = i;

        return first;
    },

    grep: function( elems, callback, invert ) {
        var callbackInverse,
            matches = [],
            i = 0,
            length = elems.length,
            callbackExpect = !invert;

        // Go through the array, only saving the items
        // that pass the validator function
        for ( ; i < length; i++ ) {
            callbackInverse = !callback( elems[ i ], i );
            if ( callbackInverse !== callbackExpect ) {
                matches.push( elems[ i ] );
            }
        }

        return matches;
    },

    // arg is for internal usage only
    map: function( elems, callback, arg ) {
        var value,
            i = 0,
            length = elems.length,
            isArray = isArraylike( elems ),
            ret = [];

        // Go through the array, translating each of the items to their new values
        if ( isArray ) {
            for ( ; i < length; i++ ) {
                value = callback( elems[ i ], i, arg );

                if ( value != null ) {
                    ret.push( value );
                }
            }

        // Go through every key on the object,
        } else {
            for ( i in elems ) {
                value = callback( elems[ i ], i, arg );

                if ( value != null ) {
                    ret.push( value );
                }
            }
        }

        // Flatten any nested arrays
        return concat.apply( [], ret );
    },

    // A global GUID counter for objects
    guid: 1,

    // Bind a function to a context, optionally partially applying any
    // arguments.
    proxy: function( fn, context ) {
        var tmp, args, proxy;

        if ( typeof context === "string" ) {
            tmp = fn[ context ];
            context = fn;
            fn = tmp;
        }

        // Quick check to determine if target is callable, in the spec
        // this throws a TypeError, but we will just return undefined.
        if ( !jQuery.isFunction( fn ) ) {
            return undefined;
        }

        // Simulated bind
        args = slice.call( arguments, 2 );
        proxy = function() {
            return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
        };

        // Set the guid of unique handler to the same of original handler, so it can be removed
        proxy.guid = fn.guid = fn.guid || jQuery.guid++;

        return proxy;
    },

    now: Date.now,

    // jQuery.support is not used in Core but other projects attach their
    // properties to it so it needs to exist.
    support: support
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
    class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
    var length = obj.length,
        type = jQuery.type( obj );

    if ( type === "function" || jQuery.isWindow( obj ) ) {
        return false;
    }

    if ( obj.nodeType === 1 && length ) {
        return true;
    }

    return type === "array" || length === 0 ||
        typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.2.0-pre
 * http://sizzlejs.com/
 *
 * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-16
 */
(function( window ) {

var i,
    support,
    Expr,
    getText,
    isXML,
    tokenize,
    compile,
    select,
    outermostContext,
    sortInput,
    hasDuplicate,

    // Local document vars
    setDocument,
    document,
    docElem,
    documentIsHTML,
    rbuggyQSA,
    rbuggyMatches,
    matches,
    contains,

    // Instance-specific data
    expando = "sizzle" + 1 * new Date(),
    preferredDoc = window.document,
    dirruns = 0,
    done = 0,
    classCache = createCache(),
    tokenCache = createCache(),
    compilerCache = createCache(),
    sortOrder = function( a, b ) {
        if ( a === b ) {
            hasDuplicate = true;
        }
        return 0;
    },

    // General-purpose constants
    MAX_NEGATIVE = 1 << 31,

    // Instance methods
    hasOwn = ({}).hasOwnProperty,
    arr = [],
    pop = arr.pop,
    push_native = arr.push,
    push = arr.push,
    slice = arr.slice,
    // Use a stripped-down indexOf as it's faster than native
    // http://jsperf.com/thor-indexof-vs-for/5
    indexOf = function( list, elem ) {
        var i = 0,
            len = list.length;
        for ( ; i < len; i++ ) {
            if ( list[i] === elem ) {
                return i;
            }
        }
        return -1;
    },

    booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

    // Regular expressions

    // Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
    whitespace = "[\\x20\\t\\r\\n\\f]",
    // http://www.w3.org/TR/css3-syntax/#characters
    characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

    // Loosely modeled on CSS identifier characters
    // An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
    // Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
    identifier = characterEncoding.replace( "w", "w#" ),

    // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
    attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
        // Operator (capture 2)
        "*([*^$|!~]?=)" + whitespace +
        // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
        "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
        "*\\]",

    pseudos = ":(" + characterEncoding + ")(?:\\((" +
        // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
        // 1. quoted (capture 3; capture 4 or capture 5)
        "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
        // 2. simple (capture 6)
        "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
        // 3. anything else (capture 2)
        ".*" +
        ")\\)|)",

    // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
    rwhitespace = new RegExp( whitespace + "+", "g" ),
    rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

    rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
    rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

    rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

    rpseudo = new RegExp( pseudos ),
    ridentifier = new RegExp( "^" + identifier + "$" ),

    matchExpr = {
        "ID": new RegExp( "^#(" + characterEncoding + ")" ),
        "CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
        "TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
        "ATTR": new RegExp( "^" + attributes ),
        "PSEUDO": new RegExp( "^" + pseudos ),
        "CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
            "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
            "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
        "bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
        // For use in libraries implementing .is()
        // We use this for POS matching in `select`
        "needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
            whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
    },

    rinputs = /^(?:input|select|textarea|button)$/i,
    rheader = /^h\d$/i,

    rnative = /^[^{]+\{\s*\[native \w/,

    // Easily-parseable/retrievable ID or TAG or CLASS selectors
    rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

    rsibling = /[+~]/,
    rescape = /'|\\/g,

    // CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
    runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
    funescape = function( _, escaped, escapedWhitespace ) {
        var high = "0x" + escaped - 0x10000;
        // NaN means non-codepoint
        // Support: Firefox<24
        // Workaround erroneous numeric interpretation of +"0x"
        return high !== high || escapedWhitespace ?
            escaped :
            high < 0 ?
                // BMP codepoint
                String.fromCharCode( high + 0x10000 ) :
                // Supplemental Plane codepoint (surrogate pair)
                String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
    },

    // Used for iframes
    // See setDocument()
    // Removing the function wrapper causes a "Permission Denied"
    // error in IE
    unloadHandler = function() {
        setDocument();
    };

// Optimize for push.apply( _, NodeList )
try {
    push.apply(
        (arr = slice.call( preferredDoc.childNodes )),
        preferredDoc.childNodes
    );
    // Support: Android<4.0
    // Detect silently failing push.apply
    arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
    push = { apply: arr.length ?

        // Leverage slice if possible
        function( target, els ) {
            push_native.apply( target, slice.call(els) );
        } :

        // Support: IE<9
        // Otherwise append directly
        function( target, els ) {
            var j = target.length,
                i = 0;
            // Can't trust NodeList.length
            while ( (target[j++] = els[i++]) ) {}
            target.length = j - 1;
        }
    };
}

function Sizzle( selector, context, results, seed ) {
    var match, elem, m, nodeType,
        // QSA vars
        i, groups, old, nid, newContext, newSelector;

    if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
        setDocument( context );
    }

    context = context || document;
    results = results || [];
    nodeType = context.nodeType;

    if ( typeof selector !== "string" || !selector ||
        nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

        return results;
    }

    if ( !seed && documentIsHTML ) {

        // Try to shortcut find operations when possible (e.g., not under DocumentFragment)
        if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
            // Speed-up: Sizzle("#ID")
            if ( (m = match[1]) ) {
                if ( nodeType === 9 ) {
                    elem = context.getElementById( m );
                    // Check parentNode to catch when Blackberry 4.6 returns
                    // nodes that are no longer in the document (jQuery #6963)
                    if ( elem && elem.parentNode ) {
                        // Handle the case where IE, Opera, and Webkit return items
                        // by name instead of ID
                        if ( elem.id === m ) {
                            results.push( elem );
                            return results;
                        }
                    } else {
                        return results;
                    }
                } else {
                    // Context is not a document
                    if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
                        contains( context, elem ) && elem.id === m ) {
                        results.push( elem );
                        return results;
                    }
                }

            // Speed-up: Sizzle("TAG")
            } else if ( match[2] ) {
                push.apply( results, context.getElementsByTagName( selector ) );
                return results;

            // Speed-up: Sizzle(".CLASS")
            } else if ( (m = match[3]) && support.getElementsByClassName ) {
                push.apply( results, context.getElementsByClassName( m ) );
                return results;
            }
        }

        // QSA path
        if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
            nid = old = expando;
            newContext = context;
            newSelector = nodeType !== 1 && selector;

            // qSA works strangely on Element-rooted queries
            // We can work around this by specifying an extra ID on the root
            // and working up from there (Thanks to Andrew Dupont for the technique)
            // IE 8 doesn't work on object elements
            if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
                groups = tokenize( selector );

                if ( (old = context.getAttribute("id")) ) {
                    nid = old.replace( rescape, "\\$&" );
                } else {
                    context.setAttribute( "id", nid );
                }
                nid = "[id='" + nid + "'] ";

                i = groups.length;
                while ( i-- ) {
                    groups[i] = nid + toSelector( groups[i] );
                }
                newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
                newSelector = groups.join(",");
            }

            if ( newSelector ) {
                try {
                    push.apply( results,
                        newContext.querySelectorAll( newSelector )
                    );
                    return results;
                } catch(qsaError) {
                } finally {
                    if ( !old ) {
                        context.removeAttribute("id");
                    }
                }
            }
        }
    }

    // All others
    return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *  property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *  deleting the oldest entry
 */
function createCache() {
    var keys = [];

    function cache( key, value ) {
        // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
        if ( keys.push( key + " " ) > Expr.cacheLength ) {
            // Only keep the most recent entries
            delete cache[ keys.shift() ];
        }
        return (cache[ key + " " ] = value);
    }
    return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
    fn[ expando ] = true;
    return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
    var div = document.createElement("div");

    try {
        return !!fn( div );
    } catch (e) {
        return false;
    } finally {
        // Remove from its parent by default
        if ( div.parentNode ) {
            div.parentNode.removeChild( div );
        }
        // release memory in IE
        div = null;
    }
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
    var arr = attrs.split("|"),
        i = attrs.length;

    while ( i-- ) {
        Expr.attrHandle[ arr[i] ] = handler;
    }
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
    var cur = b && a,
        diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
            ( ~b.sourceIndex || MAX_NEGATIVE ) -
            ( ~a.sourceIndex || MAX_NEGATIVE );

    // Use IE sourceIndex if available on both nodes
    if ( diff ) {
        return diff;
    }

    // Check if b follows a
    if ( cur ) {
        while ( (cur = cur.nextSibling) ) {
            if ( cur === b ) {
                return -1;
            }
        }
    }

    return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
    return function( elem ) {
        var name = elem.nodeName.toLowerCase();
        return name === "input" && elem.type === type;
    };
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
    return function( elem ) {
        var name = elem.nodeName.toLowerCase();
        return (name === "input" || name === "button") && elem.type === type;
    };
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
    return markFunction(function( argument ) {
        argument = +argument;
        return markFunction(function( seed, matches ) {
            var j,
                matchIndexes = fn( [], seed.length, argument ),
                i = matchIndexes.length;

            // Match elements found at the specified indexes
            while ( i-- ) {
                if ( seed[ (j = matchIndexes[i]) ] ) {
                    seed[j] = !(matches[j] = seed[j]);
                }
            }
        });
    });
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
    return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
    // documentElement is verified for cases where it doesn't yet exist
    // (such as loading iframes in IE - #4833)
    var documentElement = elem && (elem.ownerDocument || elem).documentElement;
    return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
    var hasCompare, parent,
        doc = node ? node.ownerDocument || node : preferredDoc;

    // If no document and documentElement is available, return
    if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
        return document;
    }

    // Set our document
    document = doc;
    docElem = doc.documentElement;
    parent = doc.defaultView;

    // Support: IE>8
    // If iframe document is assigned to "document" variable and if iframe has been reloaded,
    // IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
    // IE6-8 do not support the defaultView property so parent will be undefined
    if ( parent && parent !== parent.top ) {
        // IE11 does not have attachEvent, so all must suffer
        if ( parent.addEventListener ) {
            parent.addEventListener( "unload", unloadHandler, false );
        } else if ( parent.attachEvent ) {
            parent.attachEvent( "onunload", unloadHandler );
        }
    }

    /* Support tests
    ---------------------------------------------------------------------- */
    documentIsHTML = !isXML( doc );

    /* Attributes
    ---------------------------------------------------------------------- */

    // Support: IE<8
    // Verify that getAttribute really returns attributes and not properties
    // (excepting IE8 booleans)
    support.attributes = assert(function( div ) {
        div.className = "i";
        return !div.getAttribute("className");
    });

    /* getElement(s)By*
    ---------------------------------------------------------------------- */

    // Check if getElementsByTagName("*") returns only elements
    support.getElementsByTagName = assert(function( div ) {
        div.appendChild( doc.createComment("") );
        return !div.getElementsByTagName("*").length;
    });

    // Support: IE<9
    support.getElementsByClassName = rnative.test( doc.getElementsByClassName );

    // Support: IE<10
    // Check if getElementById returns elements by name
    // The broken getElementById methods don't pick up programatically-set names,
    // so use a roundabout getElementsByName test
    support.getById = assert(function( div ) {
        docElem.appendChild( div ).id = expando;
        return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
    });

    // ID find and filter
    if ( support.getById ) {
        Expr.find["ID"] = function( id, context ) {
            if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
                var m = context.getElementById( id );
                // Check parentNode to catch when Blackberry 4.6 returns
                // nodes that are no longer in the document #6963
                return m && m.parentNode ? [ m ] : [];
            }
        };
        Expr.filter["ID"] = function( id ) {
            var attrId = id.replace( runescape, funescape );
            return function( elem ) {
                return elem.getAttribute("id") === attrId;
            };
        };
    } else {
        // Support: IE6/7
        // getElementById is not reliable as a find shortcut
        delete Expr.find["ID"];

        Expr.filter["ID"] =  function( id ) {
            var attrId = id.replace( runescape, funescape );
            return function( elem ) {
                var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                return node && node.value === attrId;
            };
        };
    }

    // Tag
    Expr.find["TAG"] = support.getElementsByTagName ?
        function( tag, context ) {
            if ( typeof context.getElementsByTagName !== "undefined" ) {
                return context.getElementsByTagName( tag );

            // DocumentFragment nodes don't have gEBTN
            } else if ( support.qsa ) {
                return context.querySelectorAll( tag );
            }
        } :

        function( tag, context ) {
            var elem,
                tmp = [],
                i = 0,
                // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
                results = context.getElementsByTagName( tag );

            // Filter out possible comments
            if ( tag === "*" ) {
                while ( (elem = results[i++]) ) {
                    if ( elem.nodeType === 1 ) {
                        tmp.push( elem );
                    }
                }

                return tmp;
            }
            return results;
        };

    // Class
    Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
        if ( documentIsHTML ) {
            return context.getElementsByClassName( className );
        }
    };

    /* QSA/matchesSelector
    ---------------------------------------------------------------------- */

    // QSA and matchesSelector support

    // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
    rbuggyMatches = [];

    // qSa(:focus) reports false when true (Chrome 21)
    // We allow this because of a bug in IE8/9 that throws an error
    // whenever `document.activeElement` is accessed on an iframe
    // So, we allow :focus to pass through QSA all the time to avoid the IE error
    // See http://bugs.jquery.com/ticket/13378
    rbuggyQSA = [];

    if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
        // Build QSA regex
        // Regex strategy adopted from Diego Perini
        assert(function( div ) {
            // Select is set to empty string on purpose
            // This is to test IE's treatment of not explicitly
            // setting a boolean content attribute,
            // since its presence should be enough
            // http://bugs.jquery.com/ticket/12359
            docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
                "<select id='" + expando + "-\f]' msallowcapture=''>" +
                "<option selected=''></option></select>";

            // Support: IE8, Opera 11-12.16
            // Nothing should be selected when empty strings follow ^= or $= or *=
            // The test attribute must be unknown in Opera but "safe" for WinRT
            // http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
            if ( div.querySelectorAll("[msallowcapture^='']").length ) {
                rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
            }

            // Support: IE8
            // Boolean attributes and "value" are not treated correctly
            if ( !div.querySelectorAll("[selected]").length ) {
                rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
            }

            // Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
            if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
                rbuggyQSA.push("~=");
            }

            // Webkit/Opera - :checked should return selected option elements
            // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
            // IE8 throws error here and will not see later tests
            if ( !div.querySelectorAll(":checked").length ) {
                rbuggyQSA.push(":checked");
            }

            // Support: Safari 8+, iOS 8+
            // https://bugs.webkit.org/show_bug.cgi?id=136851
            // In-page `selector#id sibing-combinator selector` fails
            if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
                rbuggyQSA.push(".#.+[+~]");
            }
        });

        assert(function( div ) {
            // Support: Windows 8 Native Apps
            // The type and name attributes are restricted during .innerHTML assignment
            var input = doc.createElement("input");
            input.setAttribute( "type", "hidden" );
            div.appendChild( input ).setAttribute( "name", "D" );

            // Support: IE8
            // Enforce case-sensitivity of name attribute
            if ( div.querySelectorAll("[name=d]").length ) {
                rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
            }

            // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
            // IE8 throws error here and will not see later tests
            if ( !div.querySelectorAll(":enabled").length ) {
                rbuggyQSA.push( ":enabled", ":disabled" );
            }

            // Opera 10-11 does not throw on post-comma invalid pseudos
            div.querySelectorAll("*,:x");
            rbuggyQSA.push(",.*:");
        });
    }

    if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
        docElem.webkitMatchesSelector ||
        docElem.mozMatchesSelector ||
        docElem.oMatchesSelector ||
        docElem.msMatchesSelector) )) ) {

        assert(function( div ) {
            // Check to see if it's possible to do matchesSelector
            // on a disconnected node (IE 9)
            support.disconnectedMatch = matches.call( div, "div" );

            // This should fail with an exception
            // Gecko does not error, returns false instead
            matches.call( div, "[s!='']:x" );
            rbuggyMatches.push( "!=", pseudos );
        });
    }

    rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
    rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

    /* Contains
    ---------------------------------------------------------------------- */
    hasCompare = rnative.test( docElem.compareDocumentPosition );

    // Element contains another
    // Purposefully does not implement inclusive descendent
    // As in, an element does not contain itself
    contains = hasCompare || rnative.test( docElem.contains ) ?
        function( a, b ) {
            var adown = a.nodeType === 9 ? a.documentElement : a,
                bup = b && b.parentNode;
            return a === bup || !!( bup && bup.nodeType === 1 && (
                adown.contains ?
                    adown.contains( bup ) :
                    a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
            ));
        } :
        function( a, b ) {
            if ( b ) {
                while ( (b = b.parentNode) ) {
                    if ( b === a ) {
                        return true;
                    }
                }
            }
            return false;
        };

    /* Sorting
    ---------------------------------------------------------------------- */

    // Document order sorting
    sortOrder = hasCompare ?
    function( a, b ) {

        // Flag for duplicate removal
        if ( a === b ) {
            hasDuplicate = true;
            return 0;
        }

        // Sort on method existence if only one input has compareDocumentPosition
        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
        if ( compare ) {
            return compare;
        }

        // Calculate position if both inputs belong to the same document
        compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
            a.compareDocumentPosition( b ) :

            // Otherwise we know they are disconnected
            1;

        // Disconnected nodes
        if ( compare & 1 ||
            (!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

            // Choose the first element that is related to our preferred document
            if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
                return -1;
            }
            if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
                return 1;
            }

            // Maintain original order
            return sortInput ?
                ( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
                0;
        }

        return compare & 4 ? -1 : 1;
    } :
    function( a, b ) {
        // Exit early if the nodes are identical
        if ( a === b ) {
            hasDuplicate = true;
            return 0;
        }

        var cur,
            i = 0,
            aup = a.parentNode,
            bup = b.parentNode,
            ap = [ a ],
            bp = [ b ];

        // Parentless nodes are either documents or disconnected
        if ( !aup || !bup ) {
            return a === doc ? -1 :
                b === doc ? 1 :
                aup ? -1 :
                bup ? 1 :
                sortInput ?
                ( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
                0;

        // If the nodes are siblings, we can do a quick check
        } else if ( aup === bup ) {
            return siblingCheck( a, b );
        }

        // Otherwise we need full lists of their ancestors for comparison
        cur = a;
        while ( (cur = cur.parentNode) ) {
            ap.unshift( cur );
        }
        cur = b;
        while ( (cur = cur.parentNode) ) {
            bp.unshift( cur );
        }

        // Walk down the tree looking for a discrepancy
        while ( ap[i] === bp[i] ) {
            i++;
        }

        return i ?
            // Do a sibling check if the nodes have a common ancestor
            siblingCheck( ap[i], bp[i] ) :

            // Otherwise nodes in our document sort first
            ap[i] === preferredDoc ? -1 :
            bp[i] === preferredDoc ? 1 :
            0;
    };

    return doc;
};

Sizzle.matches = function( expr, elements ) {
    return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
    // Set document vars if needed
    if ( ( elem.ownerDocument || elem ) !== document ) {
        setDocument( elem );
    }

    // Make sure that attribute selectors are quoted
    expr = expr.replace( rattributeQuotes, "='$1']" );

    if ( support.matchesSelector && documentIsHTML &&
        ( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
        ( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

        try {
            var ret = matches.call( elem, expr );

            // IE 9's matchesSelector returns false on disconnected nodes
            if ( ret || support.disconnectedMatch ||
                    // As well, disconnected nodes are said to be in a document
                    // fragment in IE 9
                    elem.document && elem.document.nodeType !== 11 ) {
                return ret;
            }
        } catch (e) {}
    }

    return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
    // Set document vars if needed
    if ( ( context.ownerDocument || context ) !== document ) {
        setDocument( context );
    }
    return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
    // Set document vars if needed
    if ( ( elem.ownerDocument || elem ) !== document ) {
        setDocument( elem );
    }

    var fn = Expr.attrHandle[ name.toLowerCase() ],
        // Don't get fooled by Object.prototype properties (jQuery #13807)
        val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
            fn( elem, name, !documentIsHTML ) :
            undefined;

    return val !== undefined ?
        val :
        support.attributes || !documentIsHTML ?
            elem.getAttribute( name ) :
            (val = elem.getAttributeNode(name)) && val.specified ?
                val.value :
                null;
};

Sizzle.error = function( msg ) {
    throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
    var elem,
        duplicates = [],
        j = 0,
        i = 0;

    // Unless we *know* we can detect duplicates, assume their presence
    hasDuplicate = !support.detectDuplicates;
    sortInput = !support.sortStable && results.slice( 0 );
    results.sort( sortOrder );

    if ( hasDuplicate ) {
        while ( (elem = results[i++]) ) {
            if ( elem === results[ i ] ) {
                j = duplicates.push( i );
            }
        }
        while ( j-- ) {
            results.splice( duplicates[ j ], 1 );
        }
    }

    // Clear input after sorting to release objects
    // See https://github.com/jquery/sizzle/pull/225
    sortInput = null;

    return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
    var node,
        ret = "",
        i = 0,
        nodeType = elem.nodeType;

    if ( !nodeType ) {
        // If no nodeType, this is expected to be an array
        while ( (node = elem[i++]) ) {
            // Do not traverse comment nodes
            ret += getText( node );
        }
    } else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
        // Use textContent for elements
        // innerText usage removed for consistency of new lines (jQuery #11153)
        if ( typeof elem.textContent === "string" ) {
            return elem.textContent;
        } else {
            // Traverse its children
            for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
                ret += getText( elem );
            }
        }
    } else if ( nodeType === 3 || nodeType === 4 ) {
        return elem.nodeValue;
    }
    // Do not include comment or processing instruction nodes

    return ret;
};

Expr = Sizzle.selectors = {

    // Can be adjusted by the user
    cacheLength: 50,

    createPseudo: markFunction,

    match: matchExpr,

    attrHandle: {},

    find: {},

    relative: {
        ">": { dir: "parentNode", first: true },
        " ": { dir: "parentNode" },
        "+": { dir: "previousSibling", first: true },
        "~": { dir: "previousSibling" }
    },

    preFilter: {
        "ATTR": function( match ) {
            match[1] = match[1].replace( runescape, funescape );

            // Move the given value to match[3] whether quoted or unquoted
            match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

            if ( match[2] === "~=" ) {
                match[3] = " " + match[3] + " ";
            }

            return match.slice( 0, 4 );
        },

        "CHILD": function( match ) {
            /* matches from matchExpr["CHILD"]
                1 type (only|nth|...)
                2 what (child|of-type)
                3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
                4 xn-component of xn+y argument ([+-]?\d*n|)
                5 sign of xn-component
                6 x of xn-component
                7 sign of y-component
                8 y of y-component
            */
            match[1] = match[1].toLowerCase();

            if ( match[1].slice( 0, 3 ) === "nth" ) {
                // nth-* requires argument
                if ( !match[3] ) {
                    Sizzle.error( match[0] );
                }

                // numeric x and y parameters for Expr.filter.CHILD
                // remember that false/true cast respectively to 0/1
                match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
                match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

            // other types prohibit arguments
            } else if ( match[3] ) {
                Sizzle.error( match[0] );
            }

            return match;
        },

        "PSEUDO": function( match ) {
            var excess,
                unquoted = !match[6] && match[2];

            if ( matchExpr["CHILD"].test( match[0] ) ) {
                return null;
            }

            // Accept quoted arguments as-is
            if ( match[3] ) {
                match[2] = match[4] || match[5] || "";

            // Strip excess characters from unquoted arguments
            } else if ( unquoted && rpseudo.test( unquoted ) &&
                // Get excess from tokenize (recursively)
                (excess = tokenize( unquoted, true )) &&
                // advance to the next closing parenthesis
                (excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

                // excess is a negative index
                match[0] = match[0].slice( 0, excess );
                match[2] = unquoted.slice( 0, excess );
            }

            // Return only captures needed by the pseudo filter method (type and argument)
            return match.slice( 0, 3 );
        }
    },

    filter: {

        "TAG": function( nodeNameSelector ) {
            var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
            return nodeNameSelector === "*" ?
                function() { return true; } :
                function( elem ) {
                    return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                };
        },

        "CLASS": function( className ) {
            var pattern = classCache[ className + " " ];

            return pattern ||
                (pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
                classCache( className, function( elem ) {
                    return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
                });
        },

        "ATTR": function( name, operator, check ) {
            return function( elem ) {
                var result = Sizzle.attr( elem, name );

                if ( result == null ) {
                    return operator === "!=";
                }
                if ( !operator ) {
                    return true;
                }

                result += "";

                return operator === "=" ? result === check :
                    operator === "!=" ? result !== check :
                    operator === "^=" ? check && result.indexOf( check ) === 0 :
                    operator === "*=" ? check && result.indexOf( check ) > -1 :
                    operator === "$=" ? check && result.slice( -check.length ) === check :
                    operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
                    operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
                    false;
            };
        },

        "CHILD": function( type, what, argument, first, last ) {
            var simple = type.slice( 0, 3 ) !== "nth",
                forward = type.slice( -4 ) !== "last",
                ofType = what === "of-type";

            return first === 1 && last === 0 ?

                // Shortcut for :nth-*(n)
                function( elem ) {
                    return !!elem.parentNode;
                } :

                function( elem, context, xml ) {
                    var cache, outerCache, node, diff, nodeIndex, start,
                        dir = simple !== forward ? "nextSibling" : "previousSibling",
                        parent = elem.parentNode,
                        name = ofType && elem.nodeName.toLowerCase(),
                        useCache = !xml && !ofType;

                    if ( parent ) {

                        // :(first|last|only)-(child|of-type)
                        if ( simple ) {
                            while ( dir ) {
                                node = elem;
                                while ( (node = node[ dir ]) ) {
                                    if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
                                        return false;
                                    }
                                }
                                // Reverse direction for :only-* (if we haven't yet done so)
                                start = dir = type === "only" && !start && "nextSibling";
                            }
                            return true;
                        }

                        start = [ forward ? parent.firstChild : parent.lastChild ];

                        // non-xml :nth-child(...) stores cache data on `parent`
                        if ( forward && useCache ) {
                            // Seek `elem` from a previously-cached index
                            outerCache = parent[ expando ] || (parent[ expando ] = {});
                            cache = outerCache[ type ] || [];
                            nodeIndex = cache[0] === dirruns && cache[1];
                            diff = cache[0] === dirruns && cache[2];
                            node = nodeIndex && parent.childNodes[ nodeIndex ];

                            while ( (node = ++nodeIndex && node && node[ dir ] ||

                                // Fallback to seeking `elem` from the start
                                (diff = nodeIndex = 0) || start.pop()) ) {

                                // When found, cache indexes on `parent` and break
                                if ( node.nodeType === 1 && ++diff && node === elem ) {
                                    outerCache[ type ] = [ dirruns, nodeIndex, diff ];
                                    break;
                                }
                            }

                        // Use previously-cached element index if available
                        } else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
                            diff = cache[1];

                        // xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
                        } else {
                            // Use the same loop as above to seek `elem` from the start
                            while ( (node = ++nodeIndex && node && node[ dir ] ||
                                (diff = nodeIndex = 0) || start.pop()) ) {

                                if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
                                    // Cache the index of each encountered element
                                    if ( useCache ) {
                                        (node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
                                    }

                                    if ( node === elem ) {
                                        break;
                                    }
                                }
                            }
                        }

                        // Incorporate the offset, then check against cycle size
                        diff -= last;
                        return diff === first || ( diff % first === 0 && diff / first >= 0 );
                    }
                };
        },

        "PSEUDO": function( pseudo, argument ) {
            // pseudo-class names are case-insensitive
            // http://www.w3.org/TR/selectors/#pseudo-classes
            // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
            // Remember that setFilters inherits from pseudos
            var args,
                fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
                    Sizzle.error( "unsupported pseudo: " + pseudo );

            // The user may use createPseudo to indicate that
            // arguments are needed to create the filter function
            // just as Sizzle does
            if ( fn[ expando ] ) {
                return fn( argument );
            }

            // But maintain support for old signatures
            if ( fn.length > 1 ) {
                args = [ pseudo, pseudo, "", argument ];
                return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
                    markFunction(function( seed, matches ) {
                        var idx,
                            matched = fn( seed, argument ),
                            i = matched.length;
                        while ( i-- ) {
                            idx = indexOf( seed, matched[i] );
                            seed[ idx ] = !( matches[ idx ] = matched[i] );
                        }
                    }) :
                    function( elem ) {
                        return fn( elem, 0, args );
                    };
            }

            return fn;
        }
    },

    pseudos: {
        // Potentially complex pseudos
        "not": markFunction(function( selector ) {
            // Trim the selector passed to compile
            // to avoid treating leading and trailing
            // spaces as combinators
            var input = [],
                results = [],
                matcher = compile( selector.replace( rtrim, "$1" ) );

            return matcher[ expando ] ?
                markFunction(function( seed, matches, context, xml ) {
                    var elem,
                        unmatched = matcher( seed, null, xml, [] ),
                        i = seed.length;

                    // Match elements unmatched by `matcher`
                    while ( i-- ) {
                        if ( (elem = unmatched[i]) ) {
                            seed[i] = !(matches[i] = elem);
                        }
                    }
                }) :
                function( elem, context, xml ) {
                    input[0] = elem;
                    matcher( input, null, xml, results );
                    // Don't keep the element (issue #299)
                    input[0] = null;
                    return !results.pop();
                };
        }),

        "has": markFunction(function( selector ) {
            return function( elem ) {
                return Sizzle( selector, elem ).length > 0;
            };
        }),

        "contains": markFunction(function( text ) {
            text = text.replace( runescape, funescape );
            return function( elem ) {
                return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
            };
        }),

        // "Whether an element is represented by a :lang() selector
        // is based solely on the element's language value
        // being equal to the identifier C,
        // or beginning with the identifier C immediately followed by "-".
        // The matching of C against the element's language value is performed case-insensitively.
        // The identifier C does not have to be a valid language name."
        // http://www.w3.org/TR/selectors/#lang-pseudo
        "lang": markFunction( function( lang ) {
            // lang value must be a valid identifier
            if ( !ridentifier.test(lang || "") ) {
                Sizzle.error( "unsupported lang: " + lang );
            }
            lang = lang.replace( runescape, funescape ).toLowerCase();
            return function( elem ) {
                var elemLang;
                do {
                    if ( (elemLang = documentIsHTML ?
                        elem.lang :
                        elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

                        elemLang = elemLang.toLowerCase();
                        return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
                    }
                } while ( (elem = elem.parentNode) && elem.nodeType === 1 );
                return false;
            };
        }),

        // Miscellaneous
        "target": function( elem ) {
            var hash = window.location && window.location.hash;
            return hash && hash.slice( 1 ) === elem.id;
        },

        "root": function( elem ) {
            return elem === docElem;
        },

        "focus": function( elem ) {
            return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
        },

        // Boolean properties
        "enabled": function( elem ) {
            return elem.disabled === false;
        },

        "disabled": function( elem ) {
            return elem.disabled === true;
        },

        "checked": function( elem ) {
            // In CSS3, :checked should return both checked and selected elements
            // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
            var nodeName = elem.nodeName.toLowerCase();
            return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
        },

        "selected": function( elem ) {
            // Accessing this property makes selected-by-default
            // options in Safari work properly
            if ( elem.parentNode ) {
                elem.parentNode.selectedIndex;
            }

            return elem.selected === true;
        },

        // Contents
        "empty": function( elem ) {
            // http://www.w3.org/TR/selectors/#empty-pseudo
            // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
            //   but not by others (comment: 8; processing instruction: 7; etc.)
            // nodeType < 6 works because attributes (2) do not appear as children
            for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
                if ( elem.nodeType < 6 ) {
                    return false;
                }
            }
            return true;
        },

        "parent": function( elem ) {
            return !Expr.pseudos["empty"]( elem );
        },

        // Element/input types
        "header": function( elem ) {
            return rheader.test( elem.nodeName );
        },

        "input": function( elem ) {
            return rinputs.test( elem.nodeName );
        },

        "button": function( elem ) {
            var name = elem.nodeName.toLowerCase();
            return name === "input" && elem.type === "button" || name === "button";
        },

        "text": function( elem ) {
            var attr;
            return elem.nodeName.toLowerCase() === "input" &&
                elem.type === "text" &&

                // Support: IE<8
                // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
                ( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
        },

        // Position-in-collection
        "first": createPositionalPseudo(function() {
            return [ 0 ];
        }),

        "last": createPositionalPseudo(function( matchIndexes, length ) {
            return [ length - 1 ];
        }),

        "eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
            return [ argument < 0 ? argument + length : argument ];
        }),

        "even": createPositionalPseudo(function( matchIndexes, length ) {
            var i = 0;
            for ( ; i < length; i += 2 ) {
                matchIndexes.push( i );
            }
            return matchIndexes;
        }),

        "odd": createPositionalPseudo(function( matchIndexes, length ) {
            var i = 1;
            for ( ; i < length; i += 2 ) {
                matchIndexes.push( i );
            }
            return matchIndexes;
        }),

        "lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
            var i = argument < 0 ? argument + length : argument;
            for ( ; --i >= 0; ) {
                matchIndexes.push( i );
            }
            return matchIndexes;
        }),

        "gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
            var i = argument < 0 ? argument + length : argument;
            for ( ; ++i < length; ) {
                matchIndexes.push( i );
            }
            return matchIndexes;
        })
    }
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
    Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
    Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
    var matched, match, tokens, type,
        soFar, groups, preFilters,
        cached = tokenCache[ selector + " " ];

    if ( cached ) {
        return parseOnly ? 0 : cached.slice( 0 );
    }

    soFar = selector;
    groups = [];
    preFilters = Expr.preFilter;

    while ( soFar ) {

        // Comma and first run
        if ( !matched || (match = rcomma.exec( soFar )) ) {
            if ( match ) {
                // Don't consume trailing commas as valid
                soFar = soFar.slice( match[0].length ) || soFar;
            }
            groups.push( (tokens = []) );
        }

        matched = false;

        // Combinators
        if ( (match = rcombinators.exec( soFar )) ) {
            matched = match.shift();
            tokens.push({
                value: matched,
                // Cast descendant combinators to space
                type: match[0].replace( rtrim, " " )
            });
            soFar = soFar.slice( matched.length );
        }

        // Filters
        for ( type in Expr.filter ) {
            if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
                (match = preFilters[ type ]( match ))) ) {
                matched = match.shift();
                tokens.push({
                    value: matched,
                    type: type,
                    matches: match
                });
                soFar = soFar.slice( matched.length );
            }
        }

        if ( !matched ) {
            break;
        }
    }

    // Return the length of the invalid excess
    // if we're just parsing
    // Otherwise, throw an error or return tokens
    return parseOnly ?
        soFar.length :
        soFar ?
            Sizzle.error( selector ) :
            // Cache the tokens
            tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
    var i = 0,
        len = tokens.length,
        selector = "";
    for ( ; i < len; i++ ) {
        selector += tokens[i].value;
    }
    return selector;
}

function addCombinator( matcher, combinator, base ) {
    var dir = combinator.dir,
        checkNonElements = base && dir === "parentNode",
        doneName = done++;

    return combinator.first ?
        // Check against closest ancestor/preceding element
        function( elem, context, xml ) {
            while ( (elem = elem[ dir ]) ) {
                if ( elem.nodeType === 1 || checkNonElements ) {
                    return matcher( elem, context, xml );
                }
            }
        } :

        // Check against all ancestor/preceding elements
        function( elem, context, xml ) {
            var oldCache, outerCache,
                newCache = [ dirruns, doneName ];

            // We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
            if ( xml ) {
                while ( (elem = elem[ dir ]) ) {
                    if ( elem.nodeType === 1 || checkNonElements ) {
                        if ( matcher( elem, context, xml ) ) {
                            return true;
                        }
                    }
                }
            } else {
                while ( (elem = elem[ dir ]) ) {
                    if ( elem.nodeType === 1 || checkNonElements ) {
                        outerCache = elem[ expando ] || (elem[ expando ] = {});
                        if ( (oldCache = outerCache[ dir ]) &&
                            oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

                            // Assign to newCache so results back-propagate to previous elements
                            return (newCache[ 2 ] = oldCache[ 2 ]);
                        } else {
                            // Reuse newcache so results back-propagate to previous elements
                            outerCache[ dir ] = newCache;

                            // A match means we're done; a fail means we have to keep checking
                            if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
                                return true;
                            }
                        }
                    }
                }
            }
        };
}

function elementMatcher( matchers ) {
    return matchers.length > 1 ?
        function( elem, context, xml ) {
            var i = matchers.length;
            while ( i-- ) {
                if ( !matchers[i]( elem, context, xml ) ) {
                    return false;
                }
            }
            return true;
        } :
        matchers[0];
}

function multipleContexts( selector, contexts, results ) {
    var i = 0,
        len = contexts.length;
    for ( ; i < len; i++ ) {
        Sizzle( selector, contexts[i], results );
    }
    return results;
}

function condense( unmatched, map, filter, context, xml ) {
    var elem,
        newUnmatched = [],
        i = 0,
        len = unmatched.length,
        mapped = map != null;

    for ( ; i < len; i++ ) {
        if ( (elem = unmatched[i]) ) {
            if ( !filter || filter( elem, context, xml ) ) {
                newUnmatched.push( elem );
                if ( mapped ) {
                    map.push( i );
                }
            }
        }
    }

    return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
    if ( postFilter && !postFilter[ expando ] ) {
        postFilter = setMatcher( postFilter );
    }
    if ( postFinder && !postFinder[ expando ] ) {
        postFinder = setMatcher( postFinder, postSelector );
    }
    return markFunction(function( seed, results, context, xml ) {
        var temp, i, elem,
            preMap = [],
            postMap = [],
            preexisting = results.length,

            // Get initial elements from seed or context
            elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

            // Prefilter to get matcher input, preserving a map for seed-results synchronization
            matcherIn = preFilter && ( seed || !selector ) ?
                condense( elems, preMap, preFilter, context, xml ) :
                elems,

            matcherOut = matcher ?
                // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

                    // ...intermediate processing is necessary
                    [] :

                    // ...otherwise use results directly
                    results :
                matcherIn;

        // Find primary matches
        if ( matcher ) {
            matcher( matcherIn, matcherOut, context, xml );
        }

        // Apply postFilter
        if ( postFilter ) {
            temp = condense( matcherOut, postMap );
            postFilter( temp, [], context, xml );

            // Un-match failing elements by moving them back to matcherIn
            i = temp.length;
            while ( i-- ) {
                if ( (elem = temp[i]) ) {
                    matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
                }
            }
        }

        if ( seed ) {
            if ( postFinder || preFilter ) {
                if ( postFinder ) {
                    // Get the final matcherOut by condensing this intermediate into postFinder contexts
                    temp = [];
                    i = matcherOut.length;
                    while ( i-- ) {
                        if ( (elem = matcherOut[i]) ) {
                            // Restore matcherIn since elem is not yet a final match
                            temp.push( (matcherIn[i] = elem) );
                        }
                    }
                    postFinder( null, (matcherOut = []), temp, xml );
                }

                // Move matched elements from seed to results to keep them synchronized
                i = matcherOut.length;
                while ( i-- ) {
                    if ( (elem = matcherOut[i]) &&
                        (temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

                        seed[temp] = !(results[temp] = elem);
                    }
                }
            }

        // Add elements to results, through postFinder if defined
        } else {
            matcherOut = condense(
                matcherOut === results ?
                    matcherOut.splice( preexisting, matcherOut.length ) :
                    matcherOut
            );
            if ( postFinder ) {
                postFinder( null, results, matcherOut, xml );
            } else {
                push.apply( results, matcherOut );
            }
        }
    });
}

function matcherFromTokens( tokens ) {
    var checkContext, matcher, j,
        len = tokens.length,
        leadingRelative = Expr.relative[ tokens[0].type ],
        implicitRelative = leadingRelative || Expr.relative[" "],
        i = leadingRelative ? 1 : 0,

        // The foundational matcher ensures that elements are reachable from top-level context(s)
        matchContext = addCombinator( function( elem ) {
            return elem === checkContext;
        }, implicitRelative, true ),
        matchAnyContext = addCombinator( function( elem ) {
            return indexOf( checkContext, elem ) > -1;
        }, implicitRelative, true ),
        matchers = [ function( elem, context, xml ) {
            var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
                (checkContext = context).nodeType ?
                    matchContext( elem, context, xml ) :
                    matchAnyContext( elem, context, xml ) );
            // Avoid hanging onto element (issue #299)
            checkContext = null;
            return ret;
        } ];

    for ( ; i < len; i++ ) {
        if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
            matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
        } else {
            matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

            // Return special upon seeing a positional matcher
            if ( matcher[ expando ] ) {
                // Find the next relative operator (if any) for proper handling
                j = ++i;
                for ( ; j < len; j++ ) {
                    if ( Expr.relative[ tokens[j].type ] ) {
                        break;
                    }
                }
                return setMatcher(
                    i > 1 && elementMatcher( matchers ),
                    i > 1 && toSelector(
                        // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                        tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
                    ).replace( rtrim, "$1" ),
                    matcher,
                    i < j && matcherFromTokens( tokens.slice( i, j ) ),
                    j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
                    j < len && toSelector( tokens )
                );
            }
            matchers.push( matcher );
        }
    }

    return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
    var bySet = setMatchers.length > 0,
        byElement = elementMatchers.length > 0,
        superMatcher = function( seed, context, xml, results, outermost ) {
            var elem, j, matcher,
                matchedCount = 0,
                i = "0",
                unmatched = seed && [],
                setMatched = [],
                contextBackup = outermostContext,
                // We must always have either seed elements or outermost context
                elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
                // Use integer dirruns iff this is the outermost matcher
                dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
                len = elems.length;

            if ( outermost ) {
                outermostContext = context !== document && context;
            }

            // Add elements passing elementMatchers directly to results
            // Keep `i` a string if there are no elements so `matchedCount` will be "00" below
            // Support: IE<9, Safari
            // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
            for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
                if ( byElement && elem ) {
                    j = 0;
                    while ( (matcher = elementMatchers[j++]) ) {
                        if ( matcher( elem, context, xml ) ) {
                            results.push( elem );
                            break;
                        }
                    }
                    if ( outermost ) {
                        dirruns = dirrunsUnique;
                    }
                }

                // Track unmatched elements for set filters
                if ( bySet ) {
                    // They will have gone through all possible matchers
                    if ( (elem = !matcher && elem) ) {
                        matchedCount--;
                    }

                    // Lengthen the array for every element, matched or not
                    if ( seed ) {
                        unmatched.push( elem );
                    }
                }
            }

            // Apply set filters to unmatched elements
            matchedCount += i;
            if ( bySet && i !== matchedCount ) {
                j = 0;
                while ( (matcher = setMatchers[j++]) ) {
                    matcher( unmatched, setMatched, context, xml );
                }

                if ( seed ) {
                    // Reintegrate element matches to eliminate the need for sorting
                    if ( matchedCount > 0 ) {
                        while ( i-- ) {
                            if ( !(unmatched[i] || setMatched[i]) ) {
                                setMatched[i] = pop.call( results );
                            }
                        }
                    }

                    // Discard index placeholder values to get only actual matches
                    setMatched = condense( setMatched );
                }

                // Add matches to results
                push.apply( results, setMatched );

                // Seedless set matches succeeding multiple successful matchers stipulate sorting
                if ( outermost && !seed && setMatched.length > 0 &&
                    ( matchedCount + setMatchers.length ) > 1 ) {

                    Sizzle.uniqueSort( results );
                }
            }

            // Override manipulation of globals by nested matchers
            if ( outermost ) {
                dirruns = dirrunsUnique;
                outermostContext = contextBackup;
            }

            return unmatched;
        };

    return bySet ?
        markFunction( superMatcher ) :
        superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
    var i,
        setMatchers = [],
        elementMatchers = [],
        cached = compilerCache[ selector + " " ];

    if ( !cached ) {
        // Generate a function of recursive functions that can be used to check each element
        if ( !match ) {
            match = tokenize( selector );
        }
        i = match.length;
        while ( i-- ) {
            cached = matcherFromTokens( match[i] );
            if ( cached[ expando ] ) {
                setMatchers.push( cached );
            } else {
                elementMatchers.push( cached );
            }
        }

        // Cache the compiled function
        cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

        // Save selector and tokenization
        cached.selector = selector;
    }
    return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
    var i, tokens, token, type, find,
        compiled = typeof selector === "function" && selector,
        match = !seed && tokenize( (selector = compiled.selector || selector) );

    results = results || [];

    // Try to minimize operations if there is no seed and only one group
    if ( match.length === 1 ) {

        // Take a shortcut and set the context if the root selector is an ID
        tokens = match[0] = match[0].slice( 0 );
        if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
                support.getById && context.nodeType === 9 && documentIsHTML &&
                Expr.relative[ tokens[1].type ] ) {

            context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
            if ( !context ) {
                return results;

            // Precompiled matchers will still verify ancestry, so step up a level
            } else if ( compiled ) {
                context = context.parentNode;
            }

            selector = selector.slice( tokens.shift().value.length );
        }

        // Fetch a seed set for right-to-left matching
        i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
        while ( i-- ) {
            token = tokens[i];

            // Abort if we hit a combinator
            if ( Expr.relative[ (type = token.type) ] ) {
                break;
            }
            if ( (find = Expr.find[ type ]) ) {
                // Search, expanding context for leading sibling combinators
                if ( (seed = find(
                    token.matches[0].replace( runescape, funescape ),
                    rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
                )) ) {

                    // If seed is empty or no tokens remain, we can return early
                    tokens.splice( i, 1 );
                    selector = seed.length && toSelector( tokens );
                    if ( !selector ) {
                        push.apply( results, seed );
                        return results;
                    }

                    break;
                }
            }
        }
    }

    // Compile and execute a filtering function if one is not provided
    // Provide `match` to avoid retokenization if we modified the selector above
    ( compiled || compile( selector, match ) )(
        seed,
        context,
        !documentIsHTML,
        results,
        rsibling.test( selector ) && testContext( context.parentNode ) || context
    );
    return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
    // Should return 1, but returns 4 (following)
    return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
    div.innerHTML = "<a href='#'></a>";
    return div.firstChild.getAttribute("href") === "#" ;
}) ) {
    addHandle( "type|href|height|width", function( elem, name, isXML ) {
        if ( !isXML ) {
            return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
        }
    });
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
    div.innerHTML = "<input/>";
    div.firstChild.setAttribute( "value", "" );
    return div.firstChild.getAttribute( "value" ) === "";
}) ) {
    addHandle( "value", function( elem, name, isXML ) {
        if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
            return elem.defaultValue;
        }
    });
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
    return div.getAttribute("disabled") == null;
}) ) {
    addHandle( booleans, function( elem, name, isXML ) {
        var val;
        if ( !isXML ) {
            return elem[ name ] === true ? name.toLowerCase() :
                    (val = elem.getAttributeNode( name )) && val.specified ?
                    val.value :
                null;
        }
    });
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
    if ( jQuery.isFunction( qualifier ) ) {
        return jQuery.grep( elements, function( elem, i ) {
            /* jshint -W018 */
            return !!qualifier.call( elem, i, elem ) !== not;
        });

    }

    if ( qualifier.nodeType ) {
        return jQuery.grep( elements, function( elem ) {
            return ( elem === qualifier ) !== not;
        });

    }

    if ( typeof qualifier === "string" ) {
        if ( risSimple.test( qualifier ) ) {
            return jQuery.filter( qualifier, elements, not );
        }

        qualifier = jQuery.filter( qualifier, elements );
    }

    return jQuery.grep( elements, function( elem ) {
        return ( indexOf.call( qualifier, elem ) >= 0 ) !== not;
    });
}

jQuery.filter = function( expr, elems, not ) {
    var elem = elems[ 0 ];

    if ( not ) {
        expr = ":not(" + expr + ")";
    }

    return elems.length === 1 && elem.nodeType === 1 ?
        jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
        jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
            return elem.nodeType === 1;
        }));
};

jQuery.fn.extend({
    find: function( selector ) {
        var i,
            len = this.length,
            ret = [],
            self = this;

        if ( typeof selector !== "string" ) {
            return this.pushStack( jQuery( selector ).filter(function() {
                for ( i = 0; i < len; i++ ) {
                    if ( jQuery.contains( self[ i ], this ) ) {
                        return true;
                    }
                }
            }) );
        }

        for ( i = 0; i < len; i++ ) {
            jQuery.find( selector, self[ i ], ret );
        }

        // Needed because $( selector, context ) becomes $( context ).find( selector )
        ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
        ret.selector = this.selector ? this.selector + " " + selector : selector;
        return ret;
    },
    filter: function( selector ) {
        return this.pushStack( winnow(this, selector || [], false) );
    },
    not: function( selector ) {
        return this.pushStack( winnow(this, selector || [], true) );
    },
    is: function( selector ) {
        return !!winnow(
            this,

            // If this is a positional/relative selector, check membership in the returned set
            // so $("p:first").is("p:last") won't return true for a doc with two "p".
            typeof selector === "string" && rneedsContext.test( selector ) ?
                jQuery( selector ) :
                selector || [],
            false
        ).length;
    }
});


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

    // A simple way to check for HTML strings
    // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
    // Strict HTML recognition (#11290: must start with <)
    rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

    init = jQuery.fn.init = function( selector, context ) {
        var match, elem;

        // HANDLE: $(""), $(null), $(undefined), $(false)
        if ( !selector ) {
            return this;
        }

        // Handle HTML strings
        if ( typeof selector === "string" ) {
            if ( selector[0] === "<" && selector[ selector.length - 1 ] === ">" && selector.length >= 3 ) {
                // Assume that strings that start and end with <> are HTML and skip the regex check
                match = [ null, selector, null ];

            } else {
                match = rquickExpr.exec( selector );
            }

            // Match html or make sure no context is specified for #id
            if ( match && (match[1] || !context) ) {

                // HANDLE: $(html) -> $(array)
                if ( match[1] ) {
                    context = context instanceof jQuery ? context[0] : context;

                    // Option to run scripts is true for back-compat
                    // Intentionally let the error be thrown if parseHTML is not present
                    jQuery.merge( this, jQuery.parseHTML(
                        match[1],
                        context && context.nodeType ? context.ownerDocument || context : document,
                        true
                    ) );

                    // HANDLE: $(html, props)
                    if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
                        for ( match in context ) {
                            // Properties of context are called as methods if possible
                            if ( jQuery.isFunction( this[ match ] ) ) {
                                this[ match ]( context[ match ] );

                            // ...and otherwise set as attributes
                            } else {
                                this.attr( match, context[ match ] );
                            }
                        }
                    }

                    return this;

                // HANDLE: $(#id)
                } else {
                    elem = document.getElementById( match[2] );

                    // Support: Blackberry 4.6
                    // gEBID returns nodes no longer in the document (#6963)
                    if ( elem && elem.parentNode ) {
                        // Inject the element directly into the jQuery object
                        this.length = 1;
                        this[0] = elem;
                    }

                    this.context = document;
                    this.selector = selector;
                    return this;
                }

            // HANDLE: $(expr, $(...))
            } else if ( !context || context.jquery ) {
                return ( context || rootjQuery ).find( selector );

            // HANDLE: $(expr, context)
            // (which is just equivalent to: $(context).find(expr)
            } else {
                return this.constructor( context ).find( selector );
            }

        // HANDLE: $(DOMElement)
        } else if ( selector.nodeType ) {
            this.context = this[0] = selector;
            this.length = 1;
            return this;

        // HANDLE: $(function)
        // Shortcut for document ready
        } else if ( jQuery.isFunction( selector ) ) {
            return typeof rootjQuery.ready !== "undefined" ?
                rootjQuery.ready( selector ) :
                // Execute immediately if ready is not present
                selector( jQuery );
        }

        if ( selector.selector !== undefined ) {
            this.selector = selector.selector;
            this.context = selector.context;
        }

        return jQuery.makeArray( selector, this );
    };

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,
    // Methods guaranteed to produce a unique set when starting from a unique set
    guaranteedUnique = {
        children: true,
        contents: true,
        next: true,
        prev: true
    };

jQuery.extend({
    dir: function( elem, dir, until ) {
        var matched = [],
            truncate = until !== undefined;

        while ( (elem = elem[ dir ]) && elem.nodeType !== 9 ) {
            if ( elem.nodeType === 1 ) {
                if ( truncate && jQuery( elem ).is( until ) ) {
                    break;
                }
                matched.push( elem );
            }
        }
        return matched;
    },

    sibling: function( n, elem ) {
        var matched = [];

        for ( ; n; n = n.nextSibling ) {
            if ( n.nodeType === 1 && n !== elem ) {
                matched.push( n );
            }
        }

        return matched;
    }
});

jQuery.fn.extend({
    has: function( target ) {
        var targets = jQuery( target, this ),
            l = targets.length;

        return this.filter(function() {
            var i = 0;
            for ( ; i < l; i++ ) {
                if ( jQuery.contains( this, targets[i] ) ) {
                    return true;
                }
            }
        });
    },

    closest: function( selectors, context ) {
        var cur,
            i = 0,
            l = this.length,
            matched = [],
            pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
                jQuery( selectors, context || this.context ) :
                0;

        for ( ; i < l; i++ ) {
            for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
                // Always skip document fragments
                if ( cur.nodeType < 11 && (pos ?
                    pos.index(cur) > -1 :

                    // Don't pass non-elements to Sizzle
                    cur.nodeType === 1 &&
                        jQuery.find.matchesSelector(cur, selectors)) ) {

                    matched.push( cur );
                    break;
                }
            }
        }

        return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
    },

    // Determine the position of an element within the set
    index: function( elem ) {

        // No argument, return index in parent
        if ( !elem ) {
            return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
        }

        // Index in selector
        if ( typeof elem === "string" ) {
            return indexOf.call( jQuery( elem ), this[ 0 ] );
        }

        // Locate the position of the desired element
        return indexOf.call( this,

            // If it receives a jQuery object, the first element is used
            elem.jquery ? elem[ 0 ] : elem
        );
    },

    add: function( selector, context ) {
        return this.pushStack(
            jQuery.unique(
                jQuery.merge( this.get(), jQuery( selector, context ) )
            )
        );
    },

    addBack: function( selector ) {
        return this.add( selector == null ?
            this.prevObject : this.prevObject.filter(selector)
        );
    }
});

function sibling( cur, dir ) {
    while ( (cur = cur[dir]) && cur.nodeType !== 1 ) {}
    return cur;
}

jQuery.each({
    parent: function( elem ) {
        var parent = elem.parentNode;
        return parent && parent.nodeType !== 11 ? parent : null;
    },
    parents: function( elem ) {
        return jQuery.dir( elem, "parentNode" );
    },
    parentsUntil: function( elem, i, until ) {
        return jQuery.dir( elem, "parentNode", until );
    },
    next: function( elem ) {
        return sibling( elem, "nextSibling" );
    },
    prev: function( elem ) {
        return sibling( elem, "previousSibling" );
    },
    nextAll: function( elem ) {
        return jQuery.dir( elem, "nextSibling" );
    },
    prevAll: function( elem ) {
        return jQuery.dir( elem, "previousSibling" );
    },
    nextUntil: function( elem, i, until ) {
        return jQuery.dir( elem, "nextSibling", until );
    },
    prevUntil: function( elem, i, until ) {
        return jQuery.dir( elem, "previousSibling", until );
    },
    siblings: function( elem ) {
        return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
    },
    children: function( elem ) {
        return jQuery.sibling( elem.firstChild );
    },
    contents: function( elem ) {
        return elem.contentDocument || jQuery.merge( [], elem.childNodes );
    }
}, function( name, fn ) {
    jQuery.fn[ name ] = function( until, selector ) {
        var matched = jQuery.map( this, fn, until );

        if ( name.slice( -5 ) !== "Until" ) {
            selector = until;
        }

        if ( selector && typeof selector === "string" ) {
            matched = jQuery.filter( selector, matched );
        }

        if ( this.length > 1 ) {
            // Remove duplicates
            if ( !guaranteedUnique[ name ] ) {
                jQuery.unique( matched );
            }

            // Reverse order for parents* and prev-derivatives
            if ( rparentsprev.test( name ) ) {
                matched.reverse();
            }
        }

        return this.pushStack( matched );
    };
});
var rnotwhite = (/\S+/g);



// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
    var object = optionsCache[ options ] = {};
    jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
        object[ flag ] = true;
    });
    return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *  options: an optional list of space-separated options that will change how
 *          the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *  once:           will ensure the callback list can only be fired once (like a Deferred)
 *
 *  memory:         will keep track of previous values and will call any callback added
 *                  after the list has been fired right away with the latest "memorized"
 *                  values (like a Deferred)
 *
 *  unique:         will ensure a callback can only be added once (no duplicate in the list)
 *
 *  stopOnFalse:    interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

    // Convert options from String-formatted to Object-formatted if needed
    // (we check in cache first)
    options = typeof options === "string" ?
        ( optionsCache[ options ] || createOptions( options ) ) :
        jQuery.extend( {}, options );

    var // Last fire value (for non-forgettable lists)
        memory,
        // Flag to know if list was already fired
        fired,
        // Flag to know if list is currently firing
        firing,
        // First callback to fire (used internally by add and fireWith)
        firingStart,
        // End of the loop when firing
        firingLength,
        // Index of currently firing callback (modified by remove if needed)
        firingIndex,
        // Actual callback list
        list = [],
        // Stack of fire calls for repeatable lists
        stack = !options.once && [],
        // Fire callbacks
        fire = function( data ) {
            memory = options.memory && data;
            fired = true;
            firingIndex = firingStart || 0;
            firingStart = 0;
            firingLength = list.length;
            firing = true;
            for ( ; list && firingIndex < firingLength; firingIndex++ ) {
                if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
                    memory = false; // To prevent further calls using add
                    break;
                }
            }
            firing = false;
            if ( list ) {
                if ( stack ) {
                    if ( stack.length ) {
                        fire( stack.shift() );
                    }
                } else if ( memory ) {
                    list = [];
                } else {
                    self.disable();
                }
            }
        },
        // Actual Callbacks object
        self = {
            // Add a callback or a collection of callbacks to the list
            add: function() {
                if ( list ) {
                    // First, we save the current length
                    var start = list.length;
                    (function add( args ) {
                        jQuery.each( args, function( _, arg ) {
                            var type = jQuery.type( arg );
                            if ( type === "function" ) {
                                if ( !options.unique || !self.has( arg ) ) {
                                    list.push( arg );
                                }
                            } else if ( arg && arg.length && type !== "string" ) {
                                // Inspect recursively
                                add( arg );
                            }
                        });
                    })( arguments );
                    // Do we need to add the callbacks to the
                    // current firing batch?
                    if ( firing ) {
                        firingLength = list.length;
                    // With memory, if we're not firing then
                    // we should call right away
                    } else if ( memory ) {
                        firingStart = start;
                        fire( memory );
                    }
                }
                return this;
            },
            // Remove a callback from the list
            remove: function() {
                if ( list ) {
                    jQuery.each( arguments, function( _, arg ) {
                        var index;
                        while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
                            list.splice( index, 1 );
                            // Handle firing indexes
                            if ( firing ) {
                                if ( index <= firingLength ) {
                                    firingLength--;
                                }
                                if ( index <= firingIndex ) {
                                    firingIndex--;
                                }
                            }
                        }
                    });
                }
                return this;
            },
            // Check if a given callback is in the list.
            // If no argument is given, return whether or not list has callbacks attached.
            has: function( fn ) {
                return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
            },
            // Remove all callbacks from the list
            empty: function() {
                list = [];
                firingLength = 0;
                return this;
            },
            // Have the list do nothing anymore
            disable: function() {
                list = stack = memory = undefined;
                return this;
            },
            // Is it disabled?
            disabled: function() {
                return !list;
            },
            // Lock the list in its current state
            lock: function() {
                stack = undefined;
                if ( !memory ) {
                    self.disable();
                }
                return this;
            },
            // Is it locked?
            locked: function() {
                return !stack;
            },
            // Call all callbacks with the given context and arguments
            fireWith: function( context, args ) {
                if ( list && ( !fired || stack ) ) {
                    args = args || [];
                    args = [ context, args.slice ? args.slice() : args ];
                    if ( firing ) {
                        stack.push( args );
                    } else {
                        fire( args );
                    }
                }
                return this;
            },
            // Call all the callbacks with the given arguments
            fire: function() {
                self.fireWith( this, arguments );
                return this;
            },
            // To know if the callbacks have already been called at least once
            fired: function() {
                return !!fired;
            }
        };

    return self;
};


jQuery.extend({

    Deferred: function( func ) {
        var tuples = [
                // action, add listener, listener list, final state
                [ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
                [ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
                [ "notify", "progress", jQuery.Callbacks("memory") ]
            ],
            state = "pending",
            promise = {
                state: function() {
                    return state;
                },
                always: function() {
                    deferred.done( arguments ).fail( arguments );
                    return this;
                },
                then: function( /* fnDone, fnFail, fnProgress */ ) {
                    var fns = arguments;
                    return jQuery.Deferred(function( newDefer ) {
                        jQuery.each( tuples, function( i, tuple ) {
                            var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
                            // deferred[ done | fail | progress ] for forwarding actions to newDefer
                            deferred[ tuple[1] ](function() {
                                var returned = fn && fn.apply( this, arguments );
                                if ( returned && jQuery.isFunction( returned.promise ) ) {
                                    returned.promise()
                                        .done( newDefer.resolve )
                                        .fail( newDefer.reject )
                                        .progress( newDefer.notify );
                                } else {
                                    newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
                                }
                            });
                        });
                        fns = null;
                    }).promise();
                },
                // Get a promise for this deferred
                // If obj is provided, the promise aspect is added to the object
                promise: function( obj ) {
                    return obj != null ? jQuery.extend( obj, promise ) : promise;
                }
            },
            deferred = {};

        // Keep pipe for back-compat
        promise.pipe = promise.then;

        // Add list-specific methods
        jQuery.each( tuples, function( i, tuple ) {
            var list = tuple[ 2 ],
                stateString = tuple[ 3 ];

            // promise[ done | fail | progress ] = list.add
            promise[ tuple[1] ] = list.add;

            // Handle state
            if ( stateString ) {
                list.add(function() {
                    // state = [ resolved | rejected ]
                    state = stateString;

                // [ reject_list | resolve_list ].disable; progress_list.lock
                }, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
            }

            // deferred[ resolve | reject | notify ]
            deferred[ tuple[0] ] = function() {
                deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
                return this;
            };
            deferred[ tuple[0] + "With" ] = list.fireWith;
        });

        // Make the deferred a promise
        promise.promise( deferred );

        // Call given func if any
        if ( func ) {
            func.call( deferred, deferred );
        }

        // All done!
        return deferred;
    },

    // Deferred helper
    when: function( subordinate /* , ..., subordinateN */ ) {
        var i = 0,
            resolveValues = slice.call( arguments ),
            length = resolveValues.length,

            // the count of uncompleted subordinates
            remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

            // the master Deferred. If resolveValues consist of only a single Deferred, just use that.
            deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

            // Update function for both resolve and progress values
            updateFunc = function( i, contexts, values ) {
                return function( value ) {
                    contexts[ i ] = this;
                    values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
                    if ( values === progressValues ) {
                        deferred.notifyWith( contexts, values );
                    } else if ( !( --remaining ) ) {
                        deferred.resolveWith( contexts, values );
                    }
                };
            },

            progressValues, progressContexts, resolveContexts;

        // Add listeners to Deferred subordinates; treat others as resolved
        if ( length > 1 ) {
            progressValues = new Array( length );
            progressContexts = new Array( length );
            resolveContexts = new Array( length );
            for ( ; i < length; i++ ) {
                if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
                    resolveValues[ i ].promise()
                        .done( updateFunc( i, resolveContexts, resolveValues ) )
                        .fail( deferred.reject )
                        .progress( updateFunc( i, progressContexts, progressValues ) );
                } else {
                    --remaining;
                }
            }
        }

        // If we're not waiting on anything, resolve the master
        if ( !remaining ) {
            deferred.resolveWith( resolveContexts, resolveValues );
        }

        return deferred.promise();
    }
});


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {
    // Add the callback
    jQuery.ready.promise().done( fn );

    return this;
};

jQuery.extend({
    // Is the DOM ready to be used? Set to true once it occurs.
    isReady: false,

    // A counter to track how many items to wait for before
    // the ready event fires. See #6781
    readyWait: 1,

    // Hold (or release) the ready event
    holdReady: function( hold ) {
        if ( hold ) {
            jQuery.readyWait++;
        } else {
            jQuery.ready( true );
        }
    },

    // Handle when the DOM is ready
    ready: function( wait ) {

        // Abort if there are pending holds or we're already ready
        if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
            return;
        }

        // Remember that the DOM is ready
        jQuery.isReady = true;

        // If a normal DOM Ready event fired, decrement, and wait if need be
        if ( wait !== true && --jQuery.readyWait > 0 ) {
            return;
        }

        // If there are functions bound, to execute
        readyList.resolveWith( document, [ jQuery ] );

        // Trigger any bound ready events
        if ( jQuery.fn.triggerHandler ) {
            jQuery( document ).triggerHandler( "ready" );
            jQuery( document ).off( "ready" );
        }
    }
});

/**
 * The ready event handler and self cleanup method
 */
function completed() {
    document.removeEventListener( "DOMContentLoaded", completed, false );
    window.removeEventListener( "load", completed, false );
    jQuery.ready();
}

jQuery.ready.promise = function( obj ) {
    if ( !readyList ) {

        readyList = jQuery.Deferred();

        // Catch cases where $(document).ready() is called after the browser event has already occurred.
        // We once tried to use readyState "interactive" here, but it caused issues like the one
        // discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
        if ( document.readyState === "complete" ) {
            // Handle it asynchronously to allow scripts the opportunity to delay ready
            setTimeout( jQuery.ready );

        } else {

            // Use the handy event callback
            document.addEventListener( "DOMContentLoaded", completed, false );

            // A fallback to window.onload, that will always work
            window.addEventListener( "load", completed, false );
        }
    }
    return readyList.promise( obj );
};

// Kick off the DOM ready check even if the user does not
jQuery.ready.promise();




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
    var i = 0,
        len = elems.length,
        bulk = key == null;

    // Sets many values
    if ( jQuery.type( key ) === "object" ) {
        chainable = true;
        for ( i in key ) {
            jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
        }

    // Sets one value
    } else if ( value !== undefined ) {
        chainable = true;

        if ( !jQuery.isFunction( value ) ) {
            raw = true;
        }

        if ( bulk ) {
            // Bulk operations run against the entire set
            if ( raw ) {
                fn.call( elems, value );
                fn = null;

            // ...except when executing function values
            } else {
                bulk = fn;
                fn = function( elem, key, value ) {
                    return bulk.call( jQuery( elem ), value );
                };
            }
        }

        if ( fn ) {
            for ( ; i < len; i++ ) {
                fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
            }
        }
    }

    return chainable ?
        elems :

        // Gets
        bulk ?
            fn.call( elems ) :
            len ? fn( elems[0], key ) : emptyGet;
};


/**
 * Determines whether an object can have data
 */
jQuery.acceptData = function( owner ) {
    // Accepts only:
    //  - Node
    //    - Node.ELEMENT_NODE
    //    - Node.DOCUMENT_NODE
    //  - Object
    //    - Any
    /* jshint -W018 */
    return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};


function Data() {
    // Support: Android<4,
    // Old WebKit does not have Object.preventExtensions/freeze method,
    // return new empty object instead with no [[set]] accessor
    Object.defineProperty( this.cache = {}, 0, {
        get: function() {
            return {};
        }
    });

    this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;
Data.accepts = jQuery.acceptData;

Data.prototype = {
    key: function( owner ) {
        // We can accept data for non-element nodes in modern browsers,
        // but we should not, see #8335.
        // Always return the key for a frozen object.
        if ( !Data.accepts( owner ) ) {
            return 0;
        }

        var descriptor = {},
            // Check if the owner object already has a cache key
            unlock = owner[ this.expando ];

        // If not, create one
        if ( !unlock ) {
            unlock = Data.uid++;

            // Secure it in a non-enumerable, non-writable property
            try {
                descriptor[ this.expando ] = { value: unlock };
                Object.defineProperties( owner, descriptor );

            // Support: Android<4
            // Fallback to a less secure definition
            } catch ( e ) {
                descriptor[ this.expando ] = unlock;
                jQuery.extend( owner, descriptor );
            }
        }

        // Ensure the cache object
        if ( !this.cache[ unlock ] ) {
            this.cache[ unlock ] = {};
        }

        return unlock;
    },
    set: function( owner, data, value ) {
        var prop,
            // There may be an unlock assigned to this node,
            // if there is no entry for this "owner", create one inline
            // and set the unlock as though an owner entry had always existed
            unlock = this.key( owner ),
            cache = this.cache[ unlock ];

        // Handle: [ owner, key, value ] args
        if ( typeof data === "string" ) {
            cache[ data ] = value;

        // Handle: [ owner, { properties } ] args
        } else {
            // Fresh assignments by object are shallow copied
            if ( jQuery.isEmptyObject( cache ) ) {
                jQuery.extend( this.cache[ unlock ], data );
            // Otherwise, copy the properties one-by-one to the cache object
            } else {
                for ( prop in data ) {
                    cache[ prop ] = data[ prop ];
                }
            }
        }
        return cache;
    },
    get: function( owner, key ) {
        // Either a valid cache is found, or will be created.
        // New caches will be created and the unlock returned,
        // allowing direct access to the newly created
        // empty data object. A valid owner object must be provided.
        var cache = this.cache[ this.key( owner ) ];

        return key === undefined ?
            cache : cache[ key ];
    },
    access: function( owner, key, value ) {
        var stored;
        // In cases where either:
        //
        //   1. No key was specified
        //   2. A string key was specified, but no value provided
        //
        // Take the "read" path and allow the get method to determine
        // which value to return, respectively either:
        //
        //   1. The entire cache object
        //   2. The data stored at the key
        //
        if ( key === undefined ||
                ((key && typeof key === "string") && value === undefined) ) {

            stored = this.get( owner, key );

            return stored !== undefined ?
                stored : this.get( owner, jQuery.camelCase(key) );
        }

        // [*]When the key is not a string, or both a key and value
        // are specified, set or extend (existing objects) with either:
        //
        //   1. An object of properties
        //   2. A key and value
        //
        this.set( owner, key, value );

        // Since the "set" path can have two possible entry points
        // return the expected data based on which path was taken[*]
        return value !== undefined ? value : key;
    },
    remove: function( owner, key ) {
        var i, name, camel,
            unlock = this.key( owner ),
            cache = this.cache[ unlock ];

        if ( key === undefined ) {
            this.cache[ unlock ] = {};

        } else {
            // Support array or space separated string of keys
            if ( jQuery.isArray( key ) ) {
                // If "name" is an array of keys...
                // When data is initially created, via ("key", "val") signature,
                // keys will be converted to camelCase.
                // Since there is no way to tell _how_ a key was added, remove
                // both plain key and camelCase key. #12786
                // This will only penalize the array argument path.
                name = key.concat( key.map( jQuery.camelCase ) );
            } else {
                camel = jQuery.camelCase( key );
                // Try the string as a key before any manipulation
                if ( key in cache ) {
                    name = [ key, camel ];
                } else {
                    // If a key with the spaces exists, use it.
                    // Otherwise, create an array by matching non-whitespace
                    name = camel;
                    name = name in cache ?
                        [ name ] : ( name.match( rnotwhite ) || [] );
                }
            }

            i = name.length;
            while ( i-- ) {
                delete cache[ name[ i ] ];
            }
        }
    },
    hasData: function( owner ) {
        return !jQuery.isEmptyObject(
            this.cache[ owner[ this.expando ] ] || {}
        );
    },
    discard: function( owner ) {
        if ( owner[ this.expando ] ) {
            delete this.cache[ owner[ this.expando ] ];
        }
    }
};
var data_priv = new Data();

var data_user = new Data();



//  Implementation Summary
//
//  1. Enforce API surface and semantic compatibility with 1.9.x branch
//  2. Improve the module's maintainability by reducing the storage
//      paths to a single mechanism.
//  3. Use the same single mechanism to support "private" and "user" data.
//  4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//  5. Avoid exposing implementation details on user objects (eg. expando properties)
//  6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
    rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {
    var name;

    // If nothing was found internally, try to fetch any
    // data from the HTML5 data-* attribute
    if ( data === undefined && elem.nodeType === 1 ) {
        name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
        data = elem.getAttribute( name );

        if ( typeof data === "string" ) {
            try {
                data = data === "true" ? true :
                    data === "false" ? false :
                    data === "null" ? null :
                    // Only convert to a number if it doesn't change the string
                    +data + "" === data ? +data :
                    rbrace.test( data ) ? jQuery.parseJSON( data ) :
                    data;
            } catch( e ) {}

            // Make sure we set the data so it isn't changed later
            data_user.set( elem, key, data );
        } else {
            data = undefined;
        }
    }
    return data;
}

jQuery.extend({
    hasData: function( elem ) {
        return data_user.hasData( elem ) || data_priv.hasData( elem );
    },

    data: function( elem, name, data ) {
        return data_user.access( elem, name, data );
    },

    removeData: function( elem, name ) {
        data_user.remove( elem, name );
    },

    // TODO: Now that all calls to _data and _removeData have been replaced
    // with direct calls to data_priv methods, these can be deprecated.
    _data: function( elem, name, data ) {
        return data_priv.access( elem, name, data );
    },

    _removeData: function( elem, name ) {
        data_priv.remove( elem, name );
    }
});

jQuery.fn.extend({
    data: function( key, value ) {
        var i, name, data,
            elem = this[ 0 ],
            attrs = elem && elem.attributes;

        // Gets all values
        if ( key === undefined ) {
            if ( this.length ) {
                data = data_user.get( elem );

                if ( elem.nodeType === 1 && !data_priv.get( elem, "hasDataAttrs" ) ) {
                    i = attrs.length;
                    while ( i-- ) {

                        // Support: IE11+
                        // The attrs elements can be null (#14894)
                        if ( attrs[ i ] ) {
                            name = attrs[ i ].name;
                            if ( name.indexOf( "data-" ) === 0 ) {
                                name = jQuery.camelCase( name.slice(5) );
                                dataAttr( elem, name, data[ name ] );
                            }
                        }
                    }
                    data_priv.set( elem, "hasDataAttrs", true );
                }
            }

            return data;
        }

        // Sets multiple values
        if ( typeof key === "object" ) {
            return this.each(function() {
                data_user.set( this, key );
            });
        }

        return access( this, function( value ) {
            var data,
                camelKey = jQuery.camelCase( key );

            // The calling jQuery object (element matches) is not empty
            // (and therefore has an element appears at this[ 0 ]) and the
            // `value` parameter was not undefined. An empty jQuery object
            // will result in `undefined` for elem = this[ 0 ] which will
            // throw an exception if an attempt to read a data cache is made.
            if ( elem && value === undefined ) {
                // Attempt to get data from the cache
                // with the key as-is
                data = data_user.get( elem, key );
                if ( data !== undefined ) {
                    return data;
                }

                // Attempt to get data from the cache
                // with the key camelized
                data = data_user.get( elem, camelKey );
                if ( data !== undefined ) {
                    return data;
                }

                // Attempt to "discover" the data in
                // HTML5 custom data-* attrs
                data = dataAttr( elem, camelKey, undefined );
                if ( data !== undefined ) {
                    return data;
                }

                // We tried really hard, but the data doesn't exist.
                return;
            }

            // Set the data...
            this.each(function() {
                // First, attempt to store a copy or reference of any
                // data that might've been store with a camelCased key.
                var data = data_user.get( this, camelKey );

                // For HTML5 data-* attribute interop, we have to
                // store property names with dashes in a camelCase form.
                // This might not apply to all properties...*
                data_user.set( this, camelKey, value );

                // *... In the case of properties that might _actually_
                // have dashes, we need to also store a copy of that
                // unchanged property.
                if ( key.indexOf("-") !== -1 && data !== undefined ) {
                    data_user.set( this, key, value );
                }
            });
        }, null, value, arguments.length > 1, null, true );
    },

    removeData: function( key ) {
        return this.each(function() {
            data_user.remove( this, key );
        });
    }
});


jQuery.extend({
    queue: function( elem, type, data ) {
        var queue;

        if ( elem ) {
            type = ( type || "fx" ) + "queue";
            queue = data_priv.get( elem, type );

            // Speed up dequeue by getting out quickly if this is just a lookup
            if ( data ) {
                if ( !queue || jQuery.isArray( data ) ) {
                    queue = data_priv.access( elem, type, jQuery.makeArray(data) );
                } else {
                    queue.push( data );
                }
            }
            return queue || [];
        }
    },

    dequeue: function( elem, type ) {
        type = type || "fx";

        var queue = jQuery.queue( elem, type ),
            startLength = queue.length,
            fn = queue.shift(),
            hooks = jQuery._queueHooks( elem, type ),
            next = function() {
                jQuery.dequeue( elem, type );
            };

        // If the fx queue is dequeued, always remove the progress sentinel
        if ( fn === "inprogress" ) {
            fn = queue.shift();
            startLength--;
        }

        if ( fn ) {

            // Add a progress sentinel to prevent the fx queue from being
            // automatically dequeued
            if ( type === "fx" ) {
                queue.unshift( "inprogress" );
            }

            // Clear up the last queue stop function
            delete hooks.stop;
            fn.call( elem, next, hooks );
        }

        if ( !startLength && hooks ) {
            hooks.empty.fire();
        }
    },

    // Not public - generate a queueHooks object, or return the current one
    _queueHooks: function( elem, type ) {
        var key = type + "queueHooks";
        return data_priv.get( elem, key ) || data_priv.access( elem, key, {
            empty: jQuery.Callbacks("once memory").add(function() {
                data_priv.remove( elem, [ type + "queue", key ] );
            })
        });
    }
});

jQuery.fn.extend({
    queue: function( type, data ) {
        var setter = 2;

        if ( typeof type !== "string" ) {
            data = type;
            type = "fx";
            setter--;
        }

        if ( arguments.length < setter ) {
            return jQuery.queue( this[0], type );
        }

        return data === undefined ?
            this :
            this.each(function() {
                var queue = jQuery.queue( this, type, data );

                // Ensure a hooks for this queue
                jQuery._queueHooks( this, type );

                if ( type === "fx" && queue[0] !== "inprogress" ) {
                    jQuery.dequeue( this, type );
                }
            });
    },
    dequeue: function( type ) {
        return this.each(function() {
            jQuery.dequeue( this, type );
        });
    },
    clearQueue: function( type ) {
        return this.queue( type || "fx", [] );
    },
    // Get a promise resolved when queues of a certain type
    // are emptied (fx is the type by default)
    promise: function( type, obj ) {
        var tmp,
            count = 1,
            defer = jQuery.Deferred(),
            elements = this,
            i = this.length,
            resolve = function() {
                if ( !( --count ) ) {
                    defer.resolveWith( elements, [ elements ] );
                }
            };

        if ( typeof type !== "string" ) {
            obj = type;
            type = undefined;
        }
        type = type || "fx";

        while ( i-- ) {
            tmp = data_priv.get( elements[ i ], type + "queueHooks" );
            if ( tmp && tmp.empty ) {
                count++;
                tmp.empty.add( resolve );
            }
        }
        resolve();
        return defer.promise( obj );
    }
});
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {
        // isHidden might be called from jQuery#filter function;
        // in that case, element will be second argument
        elem = el || elem;
        return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
    };

var rcheckableType = (/^(?:checkbox|radio)$/i);



(function() {
    var fragment = document.createDocumentFragment(),
        div = fragment.appendChild( document.createElement( "div" ) ),
        input = document.createElement( "input" );

    // Support: Safari<=5.1
    // Check state lost if the name is set (#11217)
    // Support: Windows Web Apps (WWA)
    // `name` and `type` must use .setAttribute for WWA (#14901)
    input.setAttribute( "type", "radio" );
    input.setAttribute( "checked", "checked" );
    input.setAttribute( "name", "t" );

    div.appendChild( input );

    // Support: Safari<=5.1, Android<4.2
    // Older WebKit doesn't clone checked state correctly in fragments
    support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

    // Support: IE<=11+
    // Make sure textarea (and checkbox) defaultValue is properly cloned
    div.innerHTML = "<textarea>x</textarea>";
    support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
})();
var strundefined = typeof undefined;



support.focusinBubbles = "onfocusin" in window;


var
    rkeyEvent = /^key/,
    rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
    rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
    rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
    return true;
}

function returnFalse() {
    return false;
}

function safeActiveElement() {
    try {
        return document.activeElement;
    } catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

    global: {},

    add: function( elem, types, handler, data, selector ) {

        var handleObjIn, eventHandle, tmp,
            events, t, handleObj,
            special, handlers, type, namespaces, origType,
            elemData = data_priv.get( elem );

        // Don't attach events to noData or text/comment nodes (but allow plain objects)
        if ( !elemData ) {
            return;
        }

        // Caller can pass in an object of custom data in lieu of the handler
        if ( handler.handler ) {
            handleObjIn = handler;
            handler = handleObjIn.handler;
            selector = handleObjIn.selector;
        }

        // Make sure that the handler has a unique ID, used to find/remove it later
        if ( !handler.guid ) {
            handler.guid = jQuery.guid++;
        }

        // Init the element's event structure and main handler, if this is the first
        if ( !(events = elemData.events) ) {
            events = elemData.events = {};
        }
        if ( !(eventHandle = elemData.handle) ) {
            eventHandle = elemData.handle = function( e ) {
                // Discard the second event of a jQuery.event.trigger() and
                // when an event is called after a page has unloaded
                return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ?
                    jQuery.event.dispatch.apply( elem, arguments ) : undefined;
            };
        }

        // Handle multiple events separated by a space
        types = ( types || "" ).match( rnotwhite ) || [ "" ];
        t = types.length;
        while ( t-- ) {
            tmp = rtypenamespace.exec( types[t] ) || [];
            type = origType = tmp[1];
            namespaces = ( tmp[2] || "" ).split( "." ).sort();

            // There *must* be a type, no attaching namespace-only handlers
            if ( !type ) {
                continue;
            }

            // If event changes its type, use the special event handlers for the changed type
            special = jQuery.event.special[ type ] || {};

            // If selector defined, determine special event api type, otherwise given type
            type = ( selector ? special.delegateType : special.bindType ) || type;

            // Update special based on newly reset type
            special = jQuery.event.special[ type ] || {};

            // handleObj is passed to all event handlers
            handleObj = jQuery.extend({
                type: type,
                origType: origType,
                data: data,
                handler: handler,
                guid: handler.guid,
                selector: selector,
                needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
                namespace: namespaces.join(".")
            }, handleObjIn );

            // Init the event handler queue if we're the first
            if ( !(handlers = events[ type ]) ) {
                handlers = events[ type ] = [];
                handlers.delegateCount = 0;

                // Only use addEventListener if the special events handler returns false
                if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
                    if ( elem.addEventListener ) {
                        elem.addEventListener( type, eventHandle, false );
                    }
                }
            }

            if ( special.add ) {
                special.add.call( elem, handleObj );

                if ( !handleObj.handler.guid ) {
                    handleObj.handler.guid = handler.guid;
                }
            }

            // Add to the element's handler list, delegates in front
            if ( selector ) {
                handlers.splice( handlers.delegateCount++, 0, handleObj );
            } else {
                handlers.push( handleObj );
            }

            // Keep track of which events have ever been used, for event optimization
            jQuery.event.global[ type ] = true;
        }

    },

    // Detach an event or set of events from an element
    remove: function( elem, types, handler, selector, mappedTypes ) {

        var j, origCount, tmp,
            events, t, handleObj,
            special, handlers, type, namespaces, origType,
            elemData = data_priv.hasData( elem ) && data_priv.get( elem );

        if ( !elemData || !(events = elemData.events) ) {
            return;
        }

        // Once for each type.namespace in types; type may be omitted
        types = ( types || "" ).match( rnotwhite ) || [ "" ];
        t = types.length;
        while ( t-- ) {
            tmp = rtypenamespace.exec( types[t] ) || [];
            type = origType = tmp[1];
            namespaces = ( tmp[2] || "" ).split( "." ).sort();

            // Unbind all events (on this namespace, if provided) for the element
            if ( !type ) {
                for ( type in events ) {
                    jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
                }
                continue;
            }

            special = jQuery.event.special[ type ] || {};
            type = ( selector ? special.delegateType : special.bindType ) || type;
            handlers = events[ type ] || [];
            tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

            // Remove matching events
            origCount = j = handlers.length;
            while ( j-- ) {
                handleObj = handlers[ j ];

                if ( ( mappedTypes || origType === handleObj.origType ) &&
                    ( !handler || handler.guid === handleObj.guid ) &&
                    ( !tmp || tmp.test( handleObj.namespace ) ) &&
                    ( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
                    handlers.splice( j, 1 );

                    if ( handleObj.selector ) {
                        handlers.delegateCount--;
                    }
                    if ( special.remove ) {
                        special.remove.call( elem, handleObj );
                    }
                }
            }

            // Remove generic event handler if we removed something and no more handlers exist
            // (avoids potential for endless recursion during removal of special event handlers)
            if ( origCount && !handlers.length ) {
                if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
                    jQuery.removeEvent( elem, type, elemData.handle );
                }

                delete events[ type ];
            }
        }

        // Remove the expando if it's no longer used
        if ( jQuery.isEmptyObject( events ) ) {
            delete elemData.handle;
            data_priv.remove( elem, "events" );
        }
    },

    trigger: function( event, data, elem, onlyHandlers ) {

        var i, cur, tmp, bubbleType, ontype, handle, special,
            eventPath = [ elem || document ],
            type = hasOwn.call( event, "type" ) ? event.type : event,
            namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

        cur = tmp = elem = elem || document;

        // Don't do events on text and comment nodes
        if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
            return;
        }

        // focus/blur morphs to focusin/out; ensure we're not firing them right now
        if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
            return;
        }

        if ( type.indexOf(".") >= 0 ) {
            // Namespaced trigger; create a regexp to match event type in handle()
            namespaces = type.split(".");
            type = namespaces.shift();
            namespaces.sort();
        }
        ontype = type.indexOf(":") < 0 && "on" + type;

        // Caller can pass in a jQuery.Event object, Object, or just an event type string
        event = event[ jQuery.expando ] ?
            event :
            new jQuery.Event( type, typeof event === "object" && event );

        // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
        event.isTrigger = onlyHandlers ? 2 : 3;
        event.namespace = namespaces.join(".");
        event.namespace_re = event.namespace ?
            new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
            null;

        // Clean up the event in case it is being reused
        event.result = undefined;
        if ( !event.target ) {
            event.target = elem;
        }

        // Clone any incoming data and prepend the event, creating the handler arg list
        data = data == null ?
            [ event ] :
            jQuery.makeArray( data, [ event ] );

        // Allow special events to draw outside the lines
        special = jQuery.event.special[ type ] || {};
        if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
            return;
        }

        // Determine event propagation path in advance, per W3C events spec (#9951)
        // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
        if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

            bubbleType = special.delegateType || type;
            if ( !rfocusMorph.test( bubbleType + type ) ) {
                cur = cur.parentNode;
            }
            for ( ; cur; cur = cur.parentNode ) {
                eventPath.push( cur );
                tmp = cur;
            }

            // Only add window if we got to document (e.g., not plain obj or detached DOM)
            if ( tmp === (elem.ownerDocument || document) ) {
                eventPath.push( tmp.defaultView || tmp.parentWindow || window );
            }
        }

        // Fire handlers on the event path
        i = 0;
        while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

            event.type = i > 1 ?
                bubbleType :
                special.bindType || type;

            // jQuery handler
            handle = ( data_priv.get( cur, "events" ) || {} )[ event.type ] && data_priv.get( cur, "handle" );
            if ( handle ) {
                handle.apply( cur, data );
            }

            // Native handler
            handle = ontype && cur[ ontype ];
            if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
                event.result = handle.apply( cur, data );
                if ( event.result === false ) {
                    event.preventDefault();
                }
            }
        }
        event.type = type;

        // If nobody prevented the default action, do it now
        if ( !onlyHandlers && !event.isDefaultPrevented() ) {

            if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
                jQuery.acceptData( elem ) ) {

                // Call a native DOM method on the target with the same name name as the event.
                // Don't do default actions on window, that's where global variables be (#6170)
                if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

                    // Don't re-trigger an onFOO event when we call its FOO() method
                    tmp = elem[ ontype ];

                    if ( tmp ) {
                        elem[ ontype ] = null;
                    }

                    // Prevent re-triggering of the same event, since we already bubbled it above
                    jQuery.event.triggered = type;
                    elem[ type ]();
                    jQuery.event.triggered = undefined;

                    if ( tmp ) {
                        elem[ ontype ] = tmp;
                    }
                }
            }
        }

        return event.result;
    },

    dispatch: function( event ) {

        // Make a writable jQuery.Event from the native event object
        event = jQuery.event.fix( event );

        var i, j, ret, matched, handleObj,
            handlerQueue = [],
            args = slice.call( arguments ),
            handlers = ( data_priv.get( this, "events" ) || {} )[ event.type ] || [],
            special = jQuery.event.special[ event.type ] || {};

        // Use the fix-ed jQuery.Event rather than the (read-only) native event
        args[0] = event;
        event.delegateTarget = this;

        // Call the preDispatch hook for the mapped type, and let it bail if desired
        if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
            return;
        }

        // Determine handlers
        handlerQueue = jQuery.event.handlers.call( this, event, handlers );

        // Run delegates first; they may want to stop propagation beneath us
        i = 0;
        while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
            event.currentTarget = matched.elem;

            j = 0;
            while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

                // Triggered event must either 1) have no namespace, or 2) have namespace(s)
                // a subset or equal to those in the bound event (both can have no namespace).
                if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

                    event.handleObj = handleObj;
                    event.data = handleObj.data;

                    ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
                            .apply( matched.elem, args );

                    if ( ret !== undefined ) {
                        if ( (event.result = ret) === false ) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                    }
                }
            }
        }

        // Call the postDispatch hook for the mapped type
        if ( special.postDispatch ) {
            special.postDispatch.call( this, event );
        }

        return event.result;
    },

    handlers: function( event, handlers ) {
        var i, matches, sel, handleObj,
            handlerQueue = [],
            delegateCount = handlers.delegateCount,
            cur = event.target;

        // Find delegate handlers
        // Black-hole SVG <use> instance trees (#13180)
        // Avoid non-left-click bubbling in Firefox (#3861)
        if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

            for ( ; cur !== this; cur = cur.parentNode || this ) {

                // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
                if ( cur.disabled !== true || event.type !== "click" ) {
                    matches = [];
                    for ( i = 0; i < delegateCount; i++ ) {
                        handleObj = handlers[ i ];

                        // Don't conflict with Object.prototype properties (#13203)
                        sel = handleObj.selector + " ";

                        if ( matches[ sel ] === undefined ) {
                            matches[ sel ] = handleObj.needsContext ?
                                jQuery( sel, this ).index( cur ) >= 0 :
                                jQuery.find( sel, this, null, [ cur ] ).length;
                        }
                        if ( matches[ sel ] ) {
                            matches.push( handleObj );
                        }
                    }
                    if ( matches.length ) {
                        handlerQueue.push({ elem: cur, handlers: matches });
                    }
                }
            }
        }

        // Add the remaining (directly-bound) handlers
        if ( delegateCount < handlers.length ) {
            handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
        }

        return handlerQueue;
    },

    // Includes some event props shared by KeyEvent and MouseEvent
    props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

    fixHooks: {},

    keyHooks: {
        props: "char charCode key keyCode".split(" "),
        filter: function( event, original ) {

            // Add which for key events
            if ( event.which == null ) {
                event.which = original.charCode != null ? original.charCode : original.keyCode;
            }

            return event;
        }
    },

    mouseHooks: {
        props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
        filter: function( event, original ) {
            var eventDoc, doc, body,
                button = original.button;

            // Calculate pageX/Y if missing and clientX/Y available
            if ( event.pageX == null && original.clientX != null ) {
                eventDoc = event.target.ownerDocument || document;
                doc = eventDoc.documentElement;
                body = eventDoc.body;

                event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
                event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
            }

            // Add which for click: 1 === left; 2 === middle; 3 === right
            // Note: button is not normalized, so don't use it
            if ( !event.which && button !== undefined ) {
                event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
            }

            return event;
        }
    },

    fix: function( event ) {
        if ( event[ jQuery.expando ] ) {
            return event;
        }

        // Create a writable copy of the event object and normalize some properties
        var i, prop, copy,
            type = event.type,
            originalEvent = event,
            fixHook = this.fixHooks[ type ];

        if ( !fixHook ) {
            this.fixHooks[ type ] = fixHook =
                rmouseEvent.test( type ) ? this.mouseHooks :
                rkeyEvent.test( type ) ? this.keyHooks :
                {};
        }
        copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

        event = new jQuery.Event( originalEvent );

        i = copy.length;
        while ( i-- ) {
            prop = copy[ i ];
            event[ prop ] = originalEvent[ prop ];
        }

        // Support: Cordova 2.5 (WebKit) (#13255)
        // All events should have a target; Cordova deviceready doesn't
        if ( !event.target ) {
            event.target = document;
        }

        // Support: Safari 6.0+, Chrome<28
        // Target should not be a text node (#504, #13143)
        if ( event.target.nodeType === 3 ) {
            event.target = event.target.parentNode;
        }

        return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
    },

    special: {
        load: {
            // Prevent triggered image.load events from bubbling to window.load
            noBubble: true
        },
        focus: {
            // Fire native event if possible so blur/focus sequence is correct
            trigger: function() {
                if ( this !== safeActiveElement() && this.focus ) {
                    this.focus();
                    return false;
                }
            },
            delegateType: "focusin"
        },
        blur: {
            trigger: function() {
                if ( this === safeActiveElement() && this.blur ) {
                    this.blur();
                    return false;
                }
            },
            delegateType: "focusout"
        },
        click: {
            // For checkbox, fire native event so checked state will be right
            trigger: function() {
                if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
                    this.click();
                    return false;
                }
            },

            // For cross-browser consistency, don't fire native .click() on links
            _default: function( event ) {
                return jQuery.nodeName( event.target, "a" );
            }
        },

        beforeunload: {
            postDispatch: function( event ) {

                // Support: Firefox 20+
                // Firefox doesn't alert if the returnValue field is not set.
                if ( event.result !== undefined && event.originalEvent ) {
                    event.originalEvent.returnValue = event.result;
                }
            }
        }
    },

    simulate: function( type, elem, event, bubble ) {
        // Piggyback on a donor event to simulate a different one.
        // Fake originalEvent to avoid donor's stopPropagation, but if the
        // simulated event prevents default then we do the same on the donor.
        var e = jQuery.extend(
            new jQuery.Event(),
            event,
            {
                type: type,
                isSimulated: true,
                originalEvent: {}
            }
        );
        if ( bubble ) {
            jQuery.event.trigger( e, null, elem );
        } else {
            jQuery.event.dispatch.call( elem, e );
        }
        if ( e.isDefaultPrevented() ) {
            event.preventDefault();
        }
    }
};

jQuery.removeEvent = function( elem, type, handle ) {
    if ( elem.removeEventListener ) {
        elem.removeEventListener( type, handle, false );
    }
};

jQuery.Event = function( src, props ) {
    // Allow instantiation without the 'new' keyword
    if ( !(this instanceof jQuery.Event) ) {
        return new jQuery.Event( src, props );
    }

    // Event object
    if ( src && src.type ) {
        this.originalEvent = src;
        this.type = src.type;

        // Events bubbling up the document may have been marked as prevented
        // by a handler lower down the tree; reflect the correct value.
        this.isDefaultPrevented = src.defaultPrevented ||
                src.defaultPrevented === undefined &&
                // Support: Android<4.0
                src.returnValue === false ?
            returnTrue :
            returnFalse;

    // Event type
    } else {
        this.type = src;
    }

    // Put explicitly provided properties onto the event object
    if ( props ) {
        jQuery.extend( this, props );
    }

    // Create a timestamp if incoming event doesn't have one
    this.timeStamp = src && src.timeStamp || jQuery.now();

    // Mark it as fixed
    this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
    isDefaultPrevented: returnFalse,
    isPropagationStopped: returnFalse,
    isImmediatePropagationStopped: returnFalse,

    preventDefault: function() {
        var e = this.originalEvent;

        this.isDefaultPrevented = returnTrue;

        if ( e && e.preventDefault ) {
            e.preventDefault();
        }
    },
    stopPropagation: function() {
        var e = this.originalEvent;

        this.isPropagationStopped = returnTrue;

        if ( e && e.stopPropagation ) {
            e.stopPropagation();
        }
    },
    stopImmediatePropagation: function() {
        var e = this.originalEvent;

        this.isImmediatePropagationStopped = returnTrue;

        if ( e && e.stopImmediatePropagation ) {
            e.stopImmediatePropagation();
        }

        this.stopPropagation();
    }
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// Support: Chrome 15+
jQuery.each({
    mouseenter: "mouseover",
    mouseleave: "mouseout",
    pointerenter: "pointerover",
    pointerleave: "pointerout"
}, function( orig, fix ) {
    jQuery.event.special[ orig ] = {
        delegateType: fix,
        bindType: fix,

        handle: function( event ) {
            var ret,
                target = this,
                related = event.relatedTarget,
                handleObj = event.handleObj;

            // For mousenter/leave call the handler if related is outside the target.
            // NB: No relatedTarget if the mouse left/entered the browser window
            if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
                event.type = handleObj.origType;
                ret = handleObj.handler.apply( this, arguments );
                event.type = fix;
            }
            return ret;
        }
    };
});

// Support: Firefox, Chrome, Safari
// Create "bubbling" focus and blur events
if ( !support.focusinBubbles ) {
    jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

        // Attach a single capturing handler on the document while someone wants focusin/focusout
        var handler = function( event ) {
                jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
            };

        jQuery.event.special[ fix ] = {
            setup: function() {
                var doc = this.ownerDocument || this,
                    attaches = data_priv.access( doc, fix );

                if ( !attaches ) {
                    doc.addEventListener( orig, handler, true );
                }
                data_priv.access( doc, fix, ( attaches || 0 ) + 1 );
            },
            teardown: function() {
                var doc = this.ownerDocument || this,
                    attaches = data_priv.access( doc, fix ) - 1;

                if ( !attaches ) {
                    doc.removeEventListener( orig, handler, true );
                    data_priv.remove( doc, fix );

                } else {
                    data_priv.access( doc, fix, attaches );
                }
            }
        };
    });
}

jQuery.fn.extend({

    on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
        var origFn, type;

        // Types can be a map of types/handlers
        if ( typeof types === "object" ) {
            // ( types-Object, selector, data )
            if ( typeof selector !== "string" ) {
                // ( types-Object, data )
                data = data || selector;
                selector = undefined;
            }
            for ( type in types ) {
                this.on( type, selector, data, types[ type ], one );
            }
            return this;
        }

        if ( data == null && fn == null ) {
            // ( types, fn )
            fn = selector;
            data = selector = undefined;
        } else if ( fn == null ) {
            if ( typeof selector === "string" ) {
                // ( types, selector, fn )
                fn = data;
                data = undefined;
            } else {
                // ( types, data, fn )
                fn = data;
                data = selector;
                selector = undefined;
            }
        }
        if ( fn === false ) {
            fn = returnFalse;
        } else if ( !fn ) {
            return this;
        }

        if ( one === 1 ) {
            origFn = fn;
            fn = function( event ) {
                // Can use an empty set, since event contains the info
                jQuery().off( event );
                return origFn.apply( this, arguments );
            };
            // Use same guid so caller can remove using origFn
            fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
        }
        return this.each( function() {
            jQuery.event.add( this, types, fn, data, selector );
        });
    },
    one: function( types, selector, data, fn ) {
        return this.on( types, selector, data, fn, 1 );
    },
    off: function( types, selector, fn ) {
        var handleObj, type;
        if ( types && types.preventDefault && types.handleObj ) {
            // ( event )  dispatched jQuery.Event
            handleObj = types.handleObj;
            jQuery( types.delegateTarget ).off(
                handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
                handleObj.selector,
                handleObj.handler
            );
            return this;
        }
        if ( typeof types === "object" ) {
            // ( types-object [, selector] )
            for ( type in types ) {
                this.off( type, selector, types[ type ] );
            }
            return this;
        }
        if ( selector === false || typeof selector === "function" ) {
            // ( types [, fn] )
            fn = selector;
            selector = undefined;
        }
        if ( fn === false ) {
            fn = returnFalse;
        }
        return this.each(function() {
            jQuery.event.remove( this, types, fn, selector );
        });
    },

    trigger: function( type, data ) {
        return this.each(function() {
            jQuery.event.trigger( type, data, this );
        });
    },
    triggerHandler: function( type, data ) {
        var elem = this[0];
        if ( elem ) {
            return jQuery.event.trigger( type, data, elem, true );
        }
    }
});


var
    rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
    rtagName = /<([\w:]+)/,
    rhtml = /<|&#?\w+;/,
    rnoInnerhtml = /<(?:script|style|link)/i,
    // checked="checked" or checked
    rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
    rscriptType = /^$|\/(?:java|ecma)script/i,
    rscriptTypeMasked = /^true\/(.*)/,
    rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

    // We have to close these tags to support XHTML (#13200)
    wrapMap = {

        // Support: IE9
        option: [ 1, "<select multiple='multiple'>", "</select>" ],

        thead: [ 1, "<table>", "</table>" ],
        col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
        tr: [ 2, "<table><tbody>", "</tbody></table>" ],
        td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

        _default: [ 0, "", "" ]
    };

// Support: IE9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: 1.x compatibility
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
    return jQuery.nodeName( elem, "table" ) &&
        jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

        elem.getElementsByTagName("tbody")[0] ||
            elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
        elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
    elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
    return elem;
}
function restoreScript( elem ) {
    var match = rscriptTypeMasked.exec( elem.type );

    if ( match ) {
        elem.type = match[ 1 ];
    } else {
        elem.removeAttribute("type");
    }

    return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
    var i = 0,
        l = elems.length;

    for ( ; i < l; i++ ) {
        data_priv.set(
            elems[ i ], "globalEval", !refElements || data_priv.get( refElements[ i ], "globalEval" )
        );
    }
}

function cloneCopyEvent( src, dest ) {
    var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

    if ( dest.nodeType !== 1 ) {
        return;
    }

    // 1. Copy private data: events, handlers, etc.
    if ( data_priv.hasData( src ) ) {
        pdataOld = data_priv.access( src );
        pdataCur = data_priv.set( dest, pdataOld );
        events = pdataOld.events;

        if ( events ) {
            delete pdataCur.handle;
            pdataCur.events = {};

            for ( type in events ) {
                for ( i = 0, l = events[ type ].length; i < l; i++ ) {
                    jQuery.event.add( dest, type, events[ type ][ i ] );
                }
            }
        }
    }

    // 2. Copy user data
    if ( data_user.hasData( src ) ) {
        udataOld = data_user.access( src );
        udataCur = jQuery.extend( {}, udataOld );

        data_user.set( dest, udataCur );
    }
}

function getAll( context, tag ) {
    var ret = context.getElementsByTagName ? context.getElementsByTagName( tag || "*" ) :
            context.querySelectorAll ? context.querySelectorAll( tag || "*" ) :
            [];

    return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
        jQuery.merge( [ context ], ret ) :
        ret;
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
    var nodeName = dest.nodeName.toLowerCase();

    // Fails to persist the checked state of a cloned checkbox or radio button.
    if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
        dest.checked = src.checked;

    // Fails to return the selected option to the default selected state when cloning options
    } else if ( nodeName === "input" || nodeName === "textarea" ) {
        dest.defaultValue = src.defaultValue;
    }
}

jQuery.extend({
    clone: function( elem, dataAndEvents, deepDataAndEvents ) {
        var i, l, srcElements, destElements,
            clone = elem.cloneNode( true ),
            inPage = jQuery.contains( elem.ownerDocument, elem );

        // Fix IE cloning issues
        if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
                !jQuery.isXMLDoc( elem ) ) {

            // We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
            destElements = getAll( clone );
            srcElements = getAll( elem );

            for ( i = 0, l = srcElements.length; i < l; i++ ) {
                fixInput( srcElements[ i ], destElements[ i ] );
            }
        }

        // Copy the events from the original to the clone
        if ( dataAndEvents ) {
            if ( deepDataAndEvents ) {
                srcElements = srcElements || getAll( elem );
                destElements = destElements || getAll( clone );

                for ( i = 0, l = srcElements.length; i < l; i++ ) {
                    cloneCopyEvent( srcElements[ i ], destElements[ i ] );
                }
            } else {
                cloneCopyEvent( elem, clone );
            }
        }

        // Preserve script evaluation history
        destElements = getAll( clone, "script" );
        if ( destElements.length > 0 ) {
            setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
        }

        // Return the cloned set
        return clone;
    },

    buildFragment: function( elems, context, scripts, selection ) {
        var elem, tmp, tag, wrap, contains, j,
            fragment = context.createDocumentFragment(),
            nodes = [],
            i = 0,
            l = elems.length;

        for ( ; i < l; i++ ) {
            elem = elems[ i ];

            if ( elem || elem === 0 ) {

                // Add nodes directly
                if ( jQuery.type( elem ) === "object" ) {
                    // Support: QtWebKit, PhantomJS
                    // push.apply(_, arraylike) throws on ancient WebKit
                    jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

                // Convert non-html into a text node
                } else if ( !rhtml.test( elem ) ) {
                    nodes.push( context.createTextNode( elem ) );

                // Convert html into DOM nodes
                } else {
                    tmp = tmp || fragment.appendChild( context.createElement("div") );

                    // Deserialize a standard representation
                    tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
                    wrap = wrapMap[ tag ] || wrapMap._default;
                    tmp.innerHTML = wrap[ 1 ] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[ 2 ];

                    // Descend through wrappers to the right content
                    j = wrap[ 0 ];
                    while ( j-- ) {
                        tmp = tmp.lastChild;
                    }

                    // Support: QtWebKit, PhantomJS
                    // push.apply(_, arraylike) throws on ancient WebKit
                    jQuery.merge( nodes, tmp.childNodes );

                    // Remember the top-level container
                    tmp = fragment.firstChild;

                    // Ensure the created nodes are orphaned (#12392)
                    tmp.textContent = "";
                }
            }
        }

        // Remove wrapper from fragment
        fragment.textContent = "";

        i = 0;
        while ( (elem = nodes[ i++ ]) ) {

            // #4087 - If origin and destination elements are the same, and this is
            // that element, do not do anything
            if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
                continue;
            }

            contains = jQuery.contains( elem.ownerDocument, elem );

            // Append to fragment
            tmp = getAll( fragment.appendChild( elem ), "script" );

            // Preserve script evaluation history
            if ( contains ) {
                setGlobalEval( tmp );
            }

            // Capture executables
            if ( scripts ) {
                j = 0;
                while ( (elem = tmp[ j++ ]) ) {
                    if ( rscriptType.test( elem.type || "" ) ) {
                        scripts.push( elem );
                    }
                }
            }
        }

        return fragment;
    },

    cleanData: function( elems ) {
        var data, elem, type, key,
            special = jQuery.event.special,
            i = 0;

        for ( ; (elem = elems[ i ]) !== undefined; i++ ) {
            if ( jQuery.acceptData( elem ) ) {
                key = elem[ data_priv.expando ];

                if ( key && (data = data_priv.cache[ key ]) ) {
                    if ( data.events ) {
                        for ( type in data.events ) {
                            if ( special[ type ] ) {
                                jQuery.event.remove( elem, type );

                            // This is a shortcut to avoid jQuery.event.remove's overhead
                            } else {
                                jQuery.removeEvent( elem, type, data.handle );
                            }
                        }
                    }
                    if ( data_priv.cache[ key ] ) {
                        // Discard any remaining `private` data
                        delete data_priv.cache[ key ];
                    }
                }
            }
            // Discard any remaining `user` data
            delete data_user.cache[ elem[ data_user.expando ] ];
        }
    }
});

jQuery.fn.extend({
    text: function( value ) {
        return access( this, function( value ) {
            return value === undefined ?
                jQuery.text( this ) :
                this.empty().each(function() {
                    if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
                        this.textContent = value;
                    }
                });
        }, null, value, arguments.length );
    },

    append: function() {
        return this.domManip( arguments, function( elem ) {
            if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
                var target = manipulationTarget( this, elem );
                target.appendChild( elem );
            }
        });
    },

    prepend: function() {
        return this.domManip( arguments, function( elem ) {
            if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
                var target = manipulationTarget( this, elem );
                target.insertBefore( elem, target.firstChild );
            }
        });
    },

    before: function() {
        return this.domManip( arguments, function( elem ) {
            if ( this.parentNode ) {
                this.parentNode.insertBefore( elem, this );
            }
        });
    },

    after: function() {
        return this.domManip( arguments, function( elem ) {
            if ( this.parentNode ) {
                this.parentNode.insertBefore( elem, this.nextSibling );
            }
        });
    },

    remove: function( selector, keepData /* Internal Use Only */ ) {
        var elem,
            elems = selector ? jQuery.filter( selector, this ) : this,
            i = 0;

        for ( ; (elem = elems[i]) != null; i++ ) {
            if ( !keepData && elem.nodeType === 1 ) {
                jQuery.cleanData( getAll( elem ) );
            }

            if ( elem.parentNode ) {
                if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
                    setGlobalEval( getAll( elem, "script" ) );
                }
                elem.parentNode.removeChild( elem );
            }
        }

        return this;
    },

    empty: function() {
        var elem,
            i = 0;

        for ( ; (elem = this[i]) != null; i++ ) {
            if ( elem.nodeType === 1 ) {

                // Prevent memory leaks
                jQuery.cleanData( getAll( elem, false ) );

                // Remove any remaining nodes
                elem.textContent = "";
            }
        }

        return this;
    },

    clone: function( dataAndEvents, deepDataAndEvents ) {
        dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
        deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

        return this.map(function() {
            return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
        });
    },

    html: function( value ) {
        return access( this, function( value ) {
            var elem = this[ 0 ] || {},
                i = 0,
                l = this.length;

            if ( value === undefined && elem.nodeType === 1 ) {
                return elem.innerHTML;
            }

            // See if we can take a shortcut and just use innerHTML
            if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
                !wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

                value = value.replace( rxhtmlTag, "<$1></$2>" );

                try {
                    for ( ; i < l; i++ ) {
                        elem = this[ i ] || {};

                        // Remove element nodes and prevent memory leaks
                        if ( elem.nodeType === 1 ) {
                            jQuery.cleanData( getAll( elem, false ) );
                            elem.innerHTML = value;
                        }
                    }

                    elem = 0;

                // If using innerHTML throws an exception, use the fallback method
                } catch( e ) {}
            }

            if ( elem ) {
                this.empty().append( value );
            }
        }, null, value, arguments.length );
    },

    replaceWith: function() {
        var arg = arguments[ 0 ];

        // Make the changes, replacing each context element with the new content
        this.domManip( arguments, function( elem ) {
            arg = this.parentNode;

            jQuery.cleanData( getAll( this ) );

            if ( arg ) {
                arg.replaceChild( elem, this );
            }
        });

        // Force removal if there was no new content (e.g., from empty arguments)
        return arg && (arg.length || arg.nodeType) ? this : this.remove();
    },

    detach: function( selector ) {
        return this.remove( selector, true );
    },

    domManip: function( args, callback ) {

        // Flatten any nested arrays
        args = concat.apply( [], args );

        var fragment, first, scripts, hasScripts, node, doc,
            i = 0,
            l = this.length,
            set = this,
            iNoClone = l - 1,
            value = args[ 0 ],
            isFunction = jQuery.isFunction( value );

        // We can't cloneNode fragments that contain checked, in WebKit
        if ( isFunction ||
                ( l > 1 && typeof value === "string" &&
                    !support.checkClone && rchecked.test( value ) ) ) {
            return this.each(function( index ) {
                var self = set.eq( index );
                if ( isFunction ) {
                    args[ 0 ] = value.call( this, index, self.html() );
                }
                self.domManip( args, callback );
            });
        }

        if ( l ) {
            fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
            first = fragment.firstChild;

            if ( fragment.childNodes.length === 1 ) {
                fragment = first;
            }

            if ( first ) {
                scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
                hasScripts = scripts.length;

                // Use the original fragment for the last item instead of the first because it can end up
                // being emptied incorrectly in certain situations (#8070).
                for ( ; i < l; i++ ) {
                    node = fragment;

                    if ( i !== iNoClone ) {
                        node = jQuery.clone( node, true, true );

                        // Keep references to cloned scripts for later restoration
                        if ( hasScripts ) {
                            // Support: QtWebKit
                            // jQuery.merge because push.apply(_, arraylike) throws
                            jQuery.merge( scripts, getAll( node, "script" ) );
                        }
                    }

                    callback.call( this[ i ], node, i );
                }

                if ( hasScripts ) {
                    doc = scripts[ scripts.length - 1 ].ownerDocument;

                    // Reenable scripts
                    jQuery.map( scripts, restoreScript );

                    // Evaluate executable scripts on first document insertion
                    for ( i = 0; i < hasScripts; i++ ) {
                        node = scripts[ i ];
                        if ( rscriptType.test( node.type || "" ) &&
                            !data_priv.access( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

                            if ( node.src ) {
                                // Optional AJAX dependency, but won't run scripts if not present
                                if ( jQuery._evalUrl ) {
                                    jQuery._evalUrl( node.src );
                                }
                            } else {
                                jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
                            }
                        }
                    }
                }
            }
        }

        return this;
    }
});

jQuery.each({
    appendTo: "append",
    prependTo: "prepend",
    insertBefore: "before",
    insertAfter: "after",
    replaceAll: "replaceWith"
}, function( name, original ) {
    jQuery.fn[ name ] = function( selector ) {
        var elems,
            ret = [],
            insert = jQuery( selector ),
            last = insert.length - 1,
            i = 0;

        for ( ; i <= last; i++ ) {
            elems = i === last ? this : this.clone( true );
            jQuery( insert[ i ] )[ original ]( elems );

            // Support: QtWebKit
            // .get() because push.apply(_, arraylike) throws
            push.apply( ret, elems.get() );
        }

        return this.pushStack( ret );
    };
});


var iframe,
    elemdisplay = {};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
    var style,
        elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

        // getDefaultComputedStyle might be reliably used only on attached element
        display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

            // Use of this method is a temporary fix (more like optimization) until something better comes along,
            // since it was removed from specification and supported only in FF
            style.display : jQuery.css( elem[ 0 ], "display" );

    // We don't have any data stored on the element,
    // so use "detach" method as fast way to get rid of the element
    elem.detach();

    return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
    var doc = document,
        display = elemdisplay[ nodeName ];

    if ( !display ) {
        display = actualDisplay( nodeName, doc );

        // If the simple way fails, read from inside an iframe
        if ( display === "none" || !display ) {

            // Use the already-created iframe if possible
            iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

            // Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
            doc = iframe[ 0 ].contentDocument;

            // Support: IE
            doc.write();
            doc.close();

            display = actualDisplay( nodeName, doc );
            iframe.detach();
        }

        // Store the correct default display
        elemdisplay[ nodeName ] = display;
    }

    return display;
}
var rmargin = (/^margin/);

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {
        // Support: IE<=11+, Firefox<=30+ (#15098, #14150)
        // IE throws on elements created in popups
        // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
        if ( elem.ownerDocument.defaultView.opener ) {
            return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
        }

        return window.getComputedStyle( elem, null );
    };



function curCSS( elem, name, computed ) {
    var width, minWidth, maxWidth, ret,
        style = elem.style;

    computed = computed || getStyles( elem );

    // Support: IE9
    // getPropertyValue is only needed for .css('filter') (#12537)
    if ( computed ) {
        ret = computed.getPropertyValue( name ) || computed[ name ];
    }

    if ( computed ) {

        if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
            ret = jQuery.style( elem, name );
        }

        // Support: iOS < 6
        // A tribute to the "awesome hack by Dean Edwards"
        // iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
        // this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
        if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

            // Remember the original values
            width = style.width;
            minWidth = style.minWidth;
            maxWidth = style.maxWidth;

            // Put in the new values to get a computed value out
            style.minWidth = style.maxWidth = style.width = ret;
            ret = computed.width;

            // Revert the changed values
            style.width = width;
            style.minWidth = minWidth;
            style.maxWidth = maxWidth;
        }
    }

    return ret !== undefined ?
        // Support: IE
        // IE returns zIndex value as an integer.
        ret + "" :
        ret;
}


function addGetHookIf( conditionFn, hookFn ) {
    // Define the hook, we'll check on the first run if it's really needed.
    return {
        get: function() {
            if ( conditionFn() ) {
                // Hook not needed (or it's not possible to use it due
                // to missing dependency), remove it.
                delete this.get;
                return;
            }

            // Hook needed; redefine it so that the support test is not executed again.
            return (this.get = hookFn).apply( this, arguments );
        }
    };
}


(function() {
    var pixelPositionVal, boxSizingReliableVal,
        docElem = document.documentElement,
        container = document.createElement( "div" ),
        div = document.createElement( "div" );

    if ( !div.style ) {
        return;
    }

    // Support: IE9-11+
    // Style of cloned element affects source element cloned (#8908)
    div.style.backgroundClip = "content-box";
    div.cloneNode( true ).style.backgroundClip = "";
    support.clearCloneStyle = div.style.backgroundClip === "content-box";

    container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" +
        "position:absolute";
    container.appendChild( div );

    // Executing both pixelPosition & boxSizingReliable tests require only one layout
    // so they're executed at the same time to save the second computation.
    function computePixelPositionAndBoxSizingReliable() {
        div.style.cssText =
            // Support: Firefox<29, Android 2.3
            // Vendor-prefix box-sizing
            "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
            "box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
            "border:1px;padding:1px;width:4px;position:absolute";
        div.innerHTML = "";
        docElem.appendChild( container );

        var divStyle = window.getComputedStyle( div, null );
        pixelPositionVal = divStyle.top !== "1%";
        boxSizingReliableVal = divStyle.width === "4px";

        docElem.removeChild( container );
    }

    // Support: node.js jsdom
    // Don't assume that getComputedStyle is a property of the global object
    if ( window.getComputedStyle ) {
        jQuery.extend( support, {
            pixelPosition: function() {

                // This test is executed only once but we still do memoizing
                // since we can use the boxSizingReliable pre-computing.
                // No need to check if the test was already performed, though.
                computePixelPositionAndBoxSizingReliable();
                return pixelPositionVal;
            },
            boxSizingReliable: function() {
                if ( boxSizingReliableVal == null ) {
                    computePixelPositionAndBoxSizingReliable();
                }
                return boxSizingReliableVal;
            },
            reliableMarginRight: function() {

                // Support: Android 2.3
                // Check if div with explicit width and no margin-right incorrectly
                // gets computed margin-right based on width of container. (#3333)
                // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
                // This support function is only executed once so no memoizing is needed.
                var ret,
                    marginDiv = div.appendChild( document.createElement( "div" ) );

                // Reset CSS: box-sizing; display; margin; border; padding
                marginDiv.style.cssText = div.style.cssText =
                    // Support: Firefox<29, Android 2.3
                    // Vendor-prefix box-sizing
                    "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
                    "box-sizing:content-box;display:block;margin:0;border:0;padding:0";
                marginDiv.style.marginRight = marginDiv.style.width = "0";
                div.style.width = "1px";
                docElem.appendChild( container );

                ret = !parseFloat( window.getComputedStyle( marginDiv, null ).marginRight );

                docElem.removeChild( container );
                div.removeChild( marginDiv );

                return ret;
            }
        });
    }
})();


// A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery.swap = function( elem, options, callback, args ) {
    var ret, name,
        old = {};

    // Remember the old values, and insert the new ones
    for ( name in options ) {
        old[ name ] = elem.style[ name ];
        elem.style[ name ] = options[ name ];
    }

    ret = callback.apply( elem, args || [] );

    // Revert the old values
    for ( name in options ) {
        elem.style[ name ] = old[ name ];
    }

    return ret;
};


var
    // Swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
    // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
    rdisplayswap = /^(none|table(?!-c[ea]).+)/,
    rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
    rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

    cssShow = { position: "absolute", visibility: "hidden", display: "block" },
    cssNormalTransform = {
        letterSpacing: "0",
        fontWeight: "400"
    },

    cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

    // Shortcut for names that are not vendor prefixed
    if ( name in style ) {
        return name;
    }

    // Check for vendor prefixed names
    var capName = name[0].toUpperCase() + name.slice(1),
        origName = name,
        i = cssPrefixes.length;

    while ( i-- ) {
        name = cssPrefixes[ i ] + capName;
        if ( name in style ) {
            return name;
        }
    }

    return origName;
}

function setPositiveNumber( elem, value, subtract ) {
    var matches = rnumsplit.exec( value );
    return matches ?
        // Guard against undefined "subtract", e.g., when used as in cssHooks
        Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
        value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
    var i = extra === ( isBorderBox ? "border" : "content" ) ?
        // If we already have the right measurement, avoid augmentation
        4 :
        // Otherwise initialize for horizontal or vertical properties
        name === "width" ? 1 : 0,

        val = 0;

    for ( ; i < 4; i += 2 ) {
        // Both box models exclude margin, so add it if we want it
        if ( extra === "margin" ) {
            val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
        }

        if ( isBorderBox ) {
            // border-box includes padding, so remove it if we want content
            if ( extra === "content" ) {
                val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
            }

            // At this point, extra isn't border nor margin, so remove border
            if ( extra !== "margin" ) {
                val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
            }
        } else {
            // At this point, extra isn't content, so add padding
            val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

            // At this point, extra isn't content nor padding, so add border
            if ( extra !== "padding" ) {
                val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
            }
        }
    }

    return val;
}

function getWidthOrHeight( elem, name, extra ) {

    // Start with offset property, which is equivalent to the border-box value
    var valueIsBorderBox = true,
        val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
        styles = getStyles( elem ),
        isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

    // Some non-html elements return undefined for offsetWidth, so check for null/undefined
    // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
    // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
    if ( val <= 0 || val == null ) {
        // Fall back to computed then uncomputed css if necessary
        val = curCSS( elem, name, styles );
        if ( val < 0 || val == null ) {
            val = elem.style[ name ];
        }

        // Computed unit is not pixels. Stop here and return.
        if ( rnumnonpx.test(val) ) {
            return val;
        }

        // Check for style in case a browser which returns unreliable values
        // for getComputedStyle silently falls back to the reliable elem.style
        valueIsBorderBox = isBorderBox &&
            ( support.boxSizingReliable() || val === elem.style[ name ] );

        // Normalize "", auto, and prepare for extra
        val = parseFloat( val ) || 0;
    }

    // Use the active box-sizing model to add/subtract irrelevant styles
    return ( val +
        augmentWidthOrHeight(
            elem,
            name,
            extra || ( isBorderBox ? "border" : "content" ),
            valueIsBorderBox,
            styles
        )
    ) + "px";
}

function showHide( elements, show ) {
    var display, elem, hidden,
        values = [],
        index = 0,
        length = elements.length;

    for ( ; index < length; index++ ) {
        elem = elements[ index ];
        if ( !elem.style ) {
            continue;
        }

        values[ index ] = data_priv.get( elem, "olddisplay" );
        display = elem.style.display;
        if ( show ) {
            // Reset the inline display of this element to learn if it is
            // being hidden by cascaded rules or not
            if ( !values[ index ] && display === "none" ) {
                elem.style.display = "";
            }

            // Set elements which have been overridden with display: none
            // in a stylesheet to whatever the default browser style is
            // for such an element
            if ( elem.style.display === "" && isHidden( elem ) ) {
                values[ index ] = data_priv.access( elem, "olddisplay", defaultDisplay(elem.nodeName) );
            }
        } else {
            hidden = isHidden( elem );

            if ( display !== "none" || !hidden ) {
                data_priv.set( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
            }
        }
    }

    // Set the display of most of the elements in a second loop
    // to avoid the constant reflow
    for ( index = 0; index < length; index++ ) {
        elem = elements[ index ];
        if ( !elem.style ) {
            continue;
        }
        if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
            elem.style.display = show ? values[ index ] || "" : "none";
        }
    }

    return elements;
}

jQuery.extend({

    // Add in style property hooks for overriding the default
    // behavior of getting and setting a style property
    cssHooks: {
        opacity: {
            get: function( elem, computed ) {
                if ( computed ) {

                    // We should always get a number back from opacity
                    var ret = curCSS( elem, "opacity" );
                    return ret === "" ? "1" : ret;
                }
            }
        }
    },

    // Don't automatically add "px" to these possibly-unitless properties
    cssNumber: {
        "columnCount": true,
        "fillOpacity": true,
        "flexGrow": true,
        "flexShrink": true,
        "fontWeight": true,
        "lineHeight": true,
        "opacity": true,
        "order": true,
        "orphans": true,
        "widows": true,
        "zIndex": true,
        "zoom": true
    },

    // Add in properties whose names you wish to fix before
    // setting or getting the value
    cssProps: {
        "float": "cssFloat"
    },

    // Get and set the style property on a DOM Node
    style: function( elem, name, value, extra ) {

        // Don't set styles on text and comment nodes
        if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
            return;
        }

        // Make sure that we're working with the right name
        var ret, type, hooks,
            origName = jQuery.camelCase( name ),
            style = elem.style;

        name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

        // Gets hook for the prefixed version, then unprefixed version
        hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

        // Check if we're setting a value
        if ( value !== undefined ) {
            type = typeof value;

            // Convert "+=" or "-=" to relative numbers (#7345)
            if ( type === "string" && (ret = rrelNum.exec( value )) ) {
                value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
                // Fixes bug #9237
                type = "number";
            }

            // Make sure that null and NaN values aren't set (#7116)
            if ( value == null || value !== value ) {
                return;
            }

            // If a number, add 'px' to the (except for certain CSS properties)
            if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
                value += "px";
            }

            // Support: IE9-11+
            // background-* props affect original clone's values
            if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
                style[ name ] = "inherit";
            }

            // If a hook was provided, use that value, otherwise just set the specified value
            if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
                style[ name ] = value;
            }

        } else {
            // If a hook was provided get the non-computed value from there
            if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
                return ret;
            }

            // Otherwise just get the value from the style object
            return style[ name ];
        }
    },

    css: function( elem, name, extra, styles ) {
        var val, num, hooks,
            origName = jQuery.camelCase( name );

        // Make sure that we're working with the right name
        name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

        // Try prefixed name followed by the unprefixed name
        hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

        // If a hook was provided get the computed value from there
        if ( hooks && "get" in hooks ) {
            val = hooks.get( elem, true, extra );
        }

        // Otherwise, if a way to get the computed value exists, use that
        if ( val === undefined ) {
            val = curCSS( elem, name, styles );
        }

        // Convert "normal" to computed value
        if ( val === "normal" && name in cssNormalTransform ) {
            val = cssNormalTransform[ name ];
        }

        // Make numeric if forced or a qualifier was provided and val looks numeric
        if ( extra === "" || extra ) {
            num = parseFloat( val );
            return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
        }
        return val;
    }
});

jQuery.each([ "height", "width" ], function( i, name ) {
    jQuery.cssHooks[ name ] = {
        get: function( elem, computed, extra ) {
            if ( computed ) {

                // Certain elements can have dimension info if we invisibly show them
                // but it must have a current display style that would benefit
                return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
                    jQuery.swap( elem, cssShow, function() {
                        return getWidthOrHeight( elem, name, extra );
                    }) :
                    getWidthOrHeight( elem, name, extra );
            }
        },

        set: function( elem, value, extra ) {
            var styles = extra && getStyles( elem );
            return setPositiveNumber( elem, value, extra ?
                augmentWidthOrHeight(
                    elem,
                    name,
                    extra,
                    jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
                    styles
                ) : 0
            );
        }
    };
});

// Support: Android 2.3
jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
    function( elem, computed ) {
        if ( computed ) {
            return jQuery.swap( elem, { "display": "inline-block" },
                curCSS, [ elem, "marginRight" ] );
        }
    }
);

// These hooks are used by animate to expand properties
jQuery.each({
    margin: "",
    padding: "",
    border: "Width"
}, function( prefix, suffix ) {
    jQuery.cssHooks[ prefix + suffix ] = {
        expand: function( value ) {
            var i = 0,
                expanded = {},

                // Assumes a single number if not a string
                parts = typeof value === "string" ? value.split(" ") : [ value ];

            for ( ; i < 4; i++ ) {
                expanded[ prefix + cssExpand[ i ] + suffix ] =
                    parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
            }

            return expanded;
        }
    };

    if ( !rmargin.test( prefix ) ) {
        jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
    }
});

jQuery.fn.extend({
    css: function( name, value ) {
        return access( this, function( elem, name, value ) {
            var styles, len,
                map = {},
                i = 0;

            if ( jQuery.isArray( name ) ) {
                styles = getStyles( elem );
                len = name.length;

                for ( ; i < len; i++ ) {
                    map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
                }

                return map;
            }

            return value !== undefined ?
                jQuery.style( elem, name, value ) :
                jQuery.css( elem, name );
        }, name, value, arguments.length > 1 );
    },
    show: function() {
        return showHide( this, true );
    },
    hide: function() {
        return showHide( this );
    },
    toggle: function( state ) {
        if ( typeof state === "boolean" ) {
            return state ? this.show() : this.hide();
        }

        return this.each(function() {
            if ( isHidden( this ) ) {
                jQuery( this ).show();
            } else {
                jQuery( this ).hide();
            }
        });
    }
});


function Tween( elem, options, prop, end, easing ) {
    return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
    constructor: Tween,
    init: function( elem, options, prop, end, easing, unit ) {
        this.elem = elem;
        this.prop = prop;
        this.easing = easing || "swing";
        this.options = options;
        this.start = this.now = this.cur();
        this.end = end;
        this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
    },
    cur: function() {
        var hooks = Tween.propHooks[ this.prop ];

        return hooks && hooks.get ?
            hooks.get( this ) :
            Tween.propHooks._default.get( this );
    },
    run: function( percent ) {
        var eased,
            hooks = Tween.propHooks[ this.prop ];

        if ( this.options.duration ) {
            this.pos = eased = jQuery.easing[ this.easing ](
                percent, this.options.duration * percent, 0, 1, this.options.duration
            );
        } else {
            this.pos = eased = percent;
        }
        this.now = ( this.end - this.start ) * eased + this.start;

        if ( this.options.step ) {
            this.options.step.call( this.elem, this.now, this );
        }

        if ( hooks && hooks.set ) {
            hooks.set( this );
        } else {
            Tween.propHooks._default.set( this );
        }
        return this;
    }
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
    _default: {
        get: function( tween ) {
            var result;

            if ( tween.elem[ tween.prop ] != null &&
                (!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
                return tween.elem[ tween.prop ];
            }

            // Passing an empty string as a 3rd parameter to .css will automatically
            // attempt a parseFloat and fallback to a string if the parse fails.
            // Simple values such as "10px" are parsed to Float;
            // complex values such as "rotate(1rad)" are returned as-is.
            result = jQuery.css( tween.elem, tween.prop, "" );
            // Empty strings, null, undefined and "auto" are converted to 0.
            return !result || result === "auto" ? 0 : result;
        },
        set: function( tween ) {
            // Use step hook for back compat.
            // Use cssHook if its there.
            // Use .style if available and use plain properties where available.
            if ( jQuery.fx.step[ tween.prop ] ) {
                jQuery.fx.step[ tween.prop ]( tween );
            } else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
                jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
            } else {
                tween.elem[ tween.prop ] = tween.now;
            }
        }
    }
};

// Support: IE9
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
    set: function( tween ) {
        if ( tween.elem.nodeType && tween.elem.parentNode ) {
            tween.elem[ tween.prop ] = tween.now;
        }
    }
};

jQuery.easing = {
    linear: function( p ) {
        return p;
    },
    swing: function( p ) {
        return 0.5 - Math.cos( p * Math.PI ) / 2;
    }
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
    fxNow, timerId,
    rfxtypes = /^(?:toggle|show|hide)$/,
    rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
    rrun = /queueHooks$/,
    animationPrefilters = [ defaultPrefilter ],
    tweeners = {
        "*": [ function( prop, value ) {
            var tween = this.createTween( prop, value ),
                target = tween.cur(),
                parts = rfxnum.exec( value ),
                unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

                // Starting value computation is required for potential unit mismatches
                start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
                    rfxnum.exec( jQuery.css( tween.elem, prop ) ),
                scale = 1,
                maxIterations = 20;

            if ( start && start[ 3 ] !== unit ) {
                // Trust units reported by jQuery.css
                unit = unit || start[ 3 ];

                // Make sure we update the tween properties later on
                parts = parts || [];

                // Iteratively approximate from a nonzero starting point
                start = +target || 1;

                do {
                    // If previous iteration zeroed out, double until we get *something*.
                    // Use string for doubling so we don't accidentally see scale as unchanged below
                    scale = scale || ".5";

                    // Adjust and apply
                    start = start / scale;
                    jQuery.style( tween.elem, prop, start + unit );

                // Update scale, tolerating zero or NaN from tween.cur(),
                // break the loop if scale is unchanged or perfect, or if we've just had enough
                } while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
            }

            // Update tween properties
            if ( parts ) {
                start = tween.start = +start || +target || 0;
                tween.unit = unit;
                // If a +=/-= token was provided, we're doing a relative animation
                tween.end = parts[ 1 ] ?
                    start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
                    +parts[ 2 ];
            }

            return tween;
        } ]
    };

// Animations created synchronously will run synchronously
function createFxNow() {
    setTimeout(function() {
        fxNow = undefined;
    });
    return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
    var which,
        i = 0,
        attrs = { height: type };

    // If we include width, step value is 1 to do all cssExpand values,
    // otherwise step value is 2 to skip over Left and Right
    includeWidth = includeWidth ? 1 : 0;
    for ( ; i < 4 ; i += 2 - includeWidth ) {
        which = cssExpand[ i ];
        attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
    }

    if ( includeWidth ) {
        attrs.opacity = attrs.width = type;
    }

    return attrs;
}

function createTween( value, prop, animation ) {
    var tween,
        collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
        index = 0,
        length = collection.length;
    for ( ; index < length; index++ ) {
        if ( (tween = collection[ index ].call( animation, prop, value )) ) {

            // We're done with this property
            return tween;
        }
    }
}

function defaultPrefilter( elem, props, opts ) {
    /* jshint validthis: true */
    var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
        anim = this,
        orig = {},
        style = elem.style,
        hidden = elem.nodeType && isHidden( elem ),
        dataShow = data_priv.get( elem, "fxshow" );

    // Handle queue: false promises
    if ( !opts.queue ) {
        hooks = jQuery._queueHooks( elem, "fx" );
        if ( hooks.unqueued == null ) {
            hooks.unqueued = 0;
            oldfire = hooks.empty.fire;
            hooks.empty.fire = function() {
                if ( !hooks.unqueued ) {
                    oldfire();
                }
            };
        }
        hooks.unqueued++;

        anim.always(function() {
            // Ensure the complete handler is called before this completes
            anim.always(function() {
                hooks.unqueued--;
                if ( !jQuery.queue( elem, "fx" ).length ) {
                    hooks.empty.fire();
                }
            });
        });
    }

    // Height/width overflow pass
    if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
        // Make sure that nothing sneaks out
        // Record all 3 overflow attributes because IE9-10 do not
        // change the overflow attribute when overflowX and
        // overflowY are set to the same value
        opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

        // Set display property to inline-block for height/width
        // animations on inline elements that are having width/height animated
        display = jQuery.css( elem, "display" );

        // Test default display if display is currently "none"
        checkDisplay = display === "none" ?
            data_priv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

        if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
            style.display = "inline-block";
        }
    }

    if ( opts.overflow ) {
        style.overflow = "hidden";
        anim.always(function() {
            style.overflow = opts.overflow[ 0 ];
            style.overflowX = opts.overflow[ 1 ];
            style.overflowY = opts.overflow[ 2 ];
        });
    }

    // show/hide pass
    for ( prop in props ) {
        value = props[ prop ];
        if ( rfxtypes.exec( value ) ) {
            delete props[ prop ];
            toggle = toggle || value === "toggle";
            if ( value === ( hidden ? "hide" : "show" ) ) {

                // If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
                if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
                    hidden = true;
                } else {
                    continue;
                }
            }
            orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

        // Any non-fx value stops us from restoring the original display value
        } else {
            display = undefined;
        }
    }

    if ( !jQuery.isEmptyObject( orig ) ) {
        if ( dataShow ) {
            if ( "hidden" in dataShow ) {
                hidden = dataShow.hidden;
            }
        } else {
            dataShow = data_priv.access( elem, "fxshow", {} );
        }

        // Store state if its toggle - enables .stop().toggle() to "reverse"
        if ( toggle ) {
            dataShow.hidden = !hidden;
        }
        if ( hidden ) {
            jQuery( elem ).show();
        } else {
            anim.done(function() {
                jQuery( elem ).hide();
            });
        }
        anim.done(function() {
            var prop;

            data_priv.remove( elem, "fxshow" );
            for ( prop in orig ) {
                jQuery.style( elem, prop, orig[ prop ] );
            }
        });
        for ( prop in orig ) {
            tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

            if ( !( prop in dataShow ) ) {
                dataShow[ prop ] = tween.start;
                if ( hidden ) {
                    tween.end = tween.start;
                    tween.start = prop === "width" || prop === "height" ? 1 : 0;
                }
            }
        }

    // If this is a noop like .hide().hide(), restore an overwritten display value
    } else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
        style.display = display;
    }
}

function propFilter( props, specialEasing ) {
    var index, name, easing, value, hooks;

    // camelCase, specialEasing and expand cssHook pass
    for ( index in props ) {
        name = jQuery.camelCase( index );
        easing = specialEasing[ name ];
        value = props[ index ];
        if ( jQuery.isArray( value ) ) {
            easing = value[ 1 ];
            value = props[ index ] = value[ 0 ];
        }

        if ( index !== name ) {
            props[ name ] = value;
            delete props[ index ];
        }

        hooks = jQuery.cssHooks[ name ];
        if ( hooks && "expand" in hooks ) {
            value = hooks.expand( value );
            delete props[ name ];

            // Not quite $.extend, this won't overwrite existing keys.
            // Reusing 'index' because we have the correct "name"
            for ( index in value ) {
                if ( !( index in props ) ) {
                    props[ index ] = value[ index ];
                    specialEasing[ index ] = easing;
                }
            }
        } else {
            specialEasing[ name ] = easing;
        }
    }
}

function Animation( elem, properties, options ) {
    var result,
        stopped,
        index = 0,
        length = animationPrefilters.length,
        deferred = jQuery.Deferred().always( function() {
            // Don't match elem in the :animated selector
            delete tick.elem;
        }),
        tick = function() {
            if ( stopped ) {
                return false;
            }
            var currentTime = fxNow || createFxNow(),
                remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
                // Support: Android 2.3
                // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
                temp = remaining / animation.duration || 0,
                percent = 1 - temp,
                index = 0,
                length = animation.tweens.length;

            for ( ; index < length ; index++ ) {
                animation.tweens[ index ].run( percent );
            }

            deferred.notifyWith( elem, [ animation, percent, remaining ]);

            if ( percent < 1 && length ) {
                return remaining;
            } else {
                deferred.resolveWith( elem, [ animation ] );
                return false;
            }
        },
        animation = deferred.promise({
            elem: elem,
            props: jQuery.extend( {}, properties ),
            opts: jQuery.extend( true, { specialEasing: {} }, options ),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function( prop, end ) {
                var tween = jQuery.Tween( elem, animation.opts, prop, end,
                        animation.opts.specialEasing[ prop ] || animation.opts.easing );
                animation.tweens.push( tween );
                return tween;
            },
            stop: function( gotoEnd ) {
                var index = 0,
                    // If we are going to the end, we want to run all the tweens
                    // otherwise we skip this part
                    length = gotoEnd ? animation.tweens.length : 0;
                if ( stopped ) {
                    return this;
                }
                stopped = true;
                for ( ; index < length ; index++ ) {
                    animation.tweens[ index ].run( 1 );
                }

                // Resolve when we played the last frame; otherwise, reject
                if ( gotoEnd ) {
                    deferred.resolveWith( elem, [ animation, gotoEnd ] );
                } else {
                    deferred.rejectWith( elem, [ animation, gotoEnd ] );
                }
                return this;
            }
        }),
        props = animation.props;

    propFilter( props, animation.opts.specialEasing );

    for ( ; index < length ; index++ ) {
        result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
        if ( result ) {
            return result;
        }
    }

    jQuery.map( props, createTween, animation );

    if ( jQuery.isFunction( animation.opts.start ) ) {
        animation.opts.start.call( elem, animation );
    }

    jQuery.fx.timer(
        jQuery.extend( tick, {
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
        })
    );

    // attach callbacks from options
    return animation.progress( animation.opts.progress )
        .done( animation.opts.done, animation.opts.complete )
        .fail( animation.opts.fail )
        .always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

    tweener: function( props, callback ) {
        if ( jQuery.isFunction( props ) ) {
            callback = props;
            props = [ "*" ];
        } else {
            props = props.split(" ");
        }

        var prop,
            index = 0,
            length = props.length;

        for ( ; index < length ; index++ ) {
            prop = props[ index ];
            tweeners[ prop ] = tweeners[ prop ] || [];
            tweeners[ prop ].unshift( callback );
        }
    },

    prefilter: function( callback, prepend ) {
        if ( prepend ) {
            animationPrefilters.unshift( callback );
        } else {
            animationPrefilters.push( callback );
        }
    }
});

jQuery.speed = function( speed, easing, fn ) {
    var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
        complete: fn || !fn && easing ||
            jQuery.isFunction( speed ) && speed,
        duration: speed,
        easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
    };

    opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
        opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

    // Normalize opt.queue - true/undefined/null -> "fx"
    if ( opt.queue == null || opt.queue === true ) {
        opt.queue = "fx";
    }

    // Queueing
    opt.old = opt.complete;

    opt.complete = function() {
        if ( jQuery.isFunction( opt.old ) ) {
            opt.old.call( this );
        }

        if ( opt.queue ) {
            jQuery.dequeue( this, opt.queue );
        }
    };

    return opt;
};

jQuery.fn.extend({
    fadeTo: function( speed, to, easing, callback ) {

        // Show any hidden elements after setting opacity to 0
        return this.filter( isHidden ).css( "opacity", 0 ).show()

            // Animate to the value specified
            .end().animate({ opacity: to }, speed, easing, callback );
    },
    animate: function( prop, speed, easing, callback ) {
        var empty = jQuery.isEmptyObject( prop ),
            optall = jQuery.speed( speed, easing, callback ),
            doAnimation = function() {
                // Operate on a copy of prop so per-property easing won't be lost
                var anim = Animation( this, jQuery.extend( {}, prop ), optall );

                // Empty animations, or finishing resolves immediately
                if ( empty || data_priv.get( this, "finish" ) ) {
                    anim.stop( true );
                }
            };
            doAnimation.finish = doAnimation;

        return empty || optall.queue === false ?
            this.each( doAnimation ) :
            this.queue( optall.queue, doAnimation );
    },
    stop: function( type, clearQueue, gotoEnd ) {
        var stopQueue = function( hooks ) {
            var stop = hooks.stop;
            delete hooks.stop;
            stop( gotoEnd );
        };

        if ( typeof type !== "string" ) {
            gotoEnd = clearQueue;
            clearQueue = type;
            type = undefined;
        }
        if ( clearQueue && type !== false ) {
            this.queue( type || "fx", [] );
        }

        return this.each(function() {
            var dequeue = true,
                index = type != null && type + "queueHooks",
                timers = jQuery.timers,
                data = data_priv.get( this );

            if ( index ) {
                if ( data[ index ] && data[ index ].stop ) {
                    stopQueue( data[ index ] );
                }
            } else {
                for ( index in data ) {
                    if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
                        stopQueue( data[ index ] );
                    }
                }
            }

            for ( index = timers.length; index--; ) {
                if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
                    timers[ index ].anim.stop( gotoEnd );
                    dequeue = false;
                    timers.splice( index, 1 );
                }
            }

            // Start the next in the queue if the last step wasn't forced.
            // Timers currently will call their complete callbacks, which
            // will dequeue but only if they were gotoEnd.
            if ( dequeue || !gotoEnd ) {
                jQuery.dequeue( this, type );
            }
        });
    },
    finish: function( type ) {
        if ( type !== false ) {
            type = type || "fx";
        }
        return this.each(function() {
            var index,
                data = data_priv.get( this ),
                queue = data[ type + "queue" ],
                hooks = data[ type + "queueHooks" ],
                timers = jQuery.timers,
                length = queue ? queue.length : 0;

            // Enable finishing flag on private data
            data.finish = true;

            // Empty the queue first
            jQuery.queue( this, type, [] );

            if ( hooks && hooks.stop ) {
                hooks.stop.call( this, true );
            }

            // Look for any active animations, and finish them
            for ( index = timers.length; index--; ) {
                if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
                    timers[ index ].anim.stop( true );
                    timers.splice( index, 1 );
                }
            }

            // Look for any animations in the old queue and finish them
            for ( index = 0; index < length; index++ ) {
                if ( queue[ index ] && queue[ index ].finish ) {
                    queue[ index ].finish.call( this );
                }
            }

            // Turn off finishing flag
            delete data.finish;
        });
    }
});

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
    var cssFn = jQuery.fn[ name ];
    jQuery.fn[ name ] = function( speed, easing, callback ) {
        return speed == null || typeof speed === "boolean" ?
            cssFn.apply( this, arguments ) :
            this.animate( genFx( name, true ), speed, easing, callback );
    };
});

// Generate shortcuts for custom animations
jQuery.each({
    slideDown: genFx("show"),
    slideUp: genFx("hide"),
    slideToggle: genFx("toggle"),
    fadeIn: { opacity: "show" },
    fadeOut: { opacity: "hide" },
    fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
    jQuery.fn[ name ] = function( speed, easing, callback ) {
        return this.animate( props, speed, easing, callback );
    };
});

jQuery.timers = [];
jQuery.fx.tick = function() {
    var timer,
        i = 0,
        timers = jQuery.timers;

    fxNow = jQuery.now();

    for ( ; i < timers.length; i++ ) {
        timer = timers[ i ];
        // Checks the timer has not already been removed
        if ( !timer() && timers[ i ] === timer ) {
            timers.splice( i--, 1 );
        }
    }

    if ( !timers.length ) {
        jQuery.fx.stop();
    }
    fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
    jQuery.timers.push( timer );
    if ( timer() ) {
        jQuery.fx.start();
    } else {
        jQuery.timers.pop();
    }
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
    if ( !timerId ) {
        timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
    }
};

jQuery.fx.stop = function() {
    clearInterval( timerId );
    timerId = null;
};

jQuery.fx.speeds = {
    slow: 600,
    fast: 200,
    // Default speed
    _default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
    time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
    type = type || "fx";

    return this.queue( type, function( next, hooks ) {
        var timeout = setTimeout( next, time );
        hooks.stop = function() {
            clearTimeout( timeout );
        };
    });
};


(function() {
    var input = document.createElement( "input" ),
        select = document.createElement( "select" ),
        opt = select.appendChild( document.createElement( "option" ) );

    input.type = "checkbox";

    // Support: iOS<=5.1, Android<=4.2+
    // Default value for a checkbox should be "on"
    support.checkOn = input.value !== "";

    // Support: IE<=11+
    // Must access selectedIndex to make default options select
    support.optSelected = opt.selected;

    // Support: Android<=2.3
    // Options inside disabled selects are incorrectly marked as disabled
    select.disabled = true;
    support.optDisabled = !opt.disabled;

    // Support: IE<=11+
    // An input loses its value after becoming a radio
    input = document.createElement( "input" );
    input.value = "t";
    input.type = "radio";
    support.radioValue = input.value === "t";
})();


var nodeHook, boolHook,
    attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend({
    attr: function( name, value ) {
        return access( this, jQuery.attr, name, value, arguments.length > 1 );
    },

    removeAttr: function( name ) {
        return this.each(function() {
            jQuery.removeAttr( this, name );
        });
    }
});

jQuery.extend({
    attr: function( elem, name, value ) {
        var hooks, ret,
            nType = elem.nodeType;

        // don't get/set attributes on text, comment and attribute nodes
        if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
            return;
        }

        // Fallback to prop when attributes are not supported
        if ( typeof elem.getAttribute === strundefined ) {
            return jQuery.prop( elem, name, value );
        }

        // All attributes are lowercase
        // Grab necessary hook if one is defined
        if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
            name = name.toLowerCase();
            hooks = jQuery.attrHooks[ name ] ||
                ( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
        }

        if ( value !== undefined ) {

            if ( value === null ) {
                jQuery.removeAttr( elem, name );

            } else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
                return ret;

            } else {
                elem.setAttribute( name, value + "" );
                return value;
            }

        } else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
            return ret;

        } else {
            ret = jQuery.find.attr( elem, name );

            // Non-existent attributes return null, we normalize to undefined
            return ret == null ?
                undefined :
                ret;
        }
    },

    removeAttr: function( elem, value ) {
        var name, propName,
            i = 0,
            attrNames = value && value.match( rnotwhite );

        if ( attrNames && elem.nodeType === 1 ) {
            while ( (name = attrNames[i++]) ) {
                propName = jQuery.propFix[ name ] || name;

                // Boolean attributes get special treatment (#10870)
                if ( jQuery.expr.match.bool.test( name ) ) {
                    // Set corresponding property to false
                    elem[ propName ] = false;
                }

                elem.removeAttribute( name );
            }
        }
    },

    attrHooks: {
        type: {
            set: function( elem, value ) {
                if ( !support.radioValue && value === "radio" &&
                    jQuery.nodeName( elem, "input" ) ) {
                    var val = elem.value;
                    elem.setAttribute( "type", value );
                    if ( val ) {
                        elem.value = val;
                    }
                    return value;
                }
            }
        }
    }
});

// Hooks for boolean attributes
boolHook = {
    set: function( elem, value, name ) {
        if ( value === false ) {
            // Remove boolean attributes when set to false
            jQuery.removeAttr( elem, name );
        } else {
            elem.setAttribute( name, name );
        }
        return name;
    }
};
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
    var getter = attrHandle[ name ] || jQuery.find.attr;

    attrHandle[ name ] = function( elem, name, isXML ) {
        var ret, handle;
        if ( !isXML ) {
            // Avoid an infinite loop by temporarily removing this function from the getter
            handle = attrHandle[ name ];
            attrHandle[ name ] = ret;
            ret = getter( elem, name, isXML ) != null ?
                name.toLowerCase() :
                null;
            attrHandle[ name ] = handle;
        }
        return ret;
    };
});




var rfocusable = /^(?:input|select|textarea|button)$/i;

jQuery.fn.extend({
    prop: function( name, value ) {
        return access( this, jQuery.prop, name, value, arguments.length > 1 );
    },

    removeProp: function( name ) {
        return this.each(function() {
            delete this[ jQuery.propFix[ name ] || name ];
        });
    }
});

jQuery.extend({
    propFix: {
        "for": "htmlFor",
        "class": "className"
    },

    prop: function( elem, name, value ) {
        var ret, hooks, notxml,
            nType = elem.nodeType;

        // Don't get/set properties on text, comment and attribute nodes
        if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
            return;
        }

        notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

        if ( notxml ) {
            // Fix name and attach hooks
            name = jQuery.propFix[ name ] || name;
            hooks = jQuery.propHooks[ name ];
        }

        if ( value !== undefined ) {
            return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
                ret :
                ( elem[ name ] = value );

        } else {
            return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
                ret :
                elem[ name ];
        }
    },

    propHooks: {
        tabIndex: {
            get: function( elem ) {
                return elem.hasAttribute( "tabindex" ) || rfocusable.test( elem.nodeName ) || elem.href ?
                    elem.tabIndex :
                    -1;
            }
        }
    }
});

if ( !support.optSelected ) {
    jQuery.propHooks.selected = {
        get: function( elem ) {
            var parent = elem.parentNode;
            if ( parent && parent.parentNode ) {
                parent.parentNode.selectedIndex;
            }
            return null;
        }
    };
}

jQuery.each([
    "tabIndex",
    "readOnly",
    "maxLength",
    "cellSpacing",
    "cellPadding",
    "rowSpan",
    "colSpan",
    "useMap",
    "frameBorder",
    "contentEditable"
], function() {
    jQuery.propFix[ this.toLowerCase() ] = this;
});




var rclass = /[\t\r\n\f]/g;

jQuery.fn.extend({
    addClass: function( value ) {
        var classes, elem, cur, clazz, j, finalValue,
            proceed = typeof value === "string" && value,
            i = 0,
            len = this.length;

        if ( jQuery.isFunction( value ) ) {
            return this.each(function( j ) {
                jQuery( this ).addClass( value.call( this, j, this.className ) );
            });
        }

        if ( proceed ) {
            // The disjunction here is for better compressibility (see removeClass)
            classes = ( value || "" ).match( rnotwhite ) || [];

            for ( ; i < len; i++ ) {
                elem = this[ i ];
                cur = elem.nodeType === 1 && ( elem.className ?
                    ( " " + elem.className + " " ).replace( rclass, " " ) :
                    " "
                );

                if ( cur ) {
                    j = 0;
                    while ( (clazz = classes[j++]) ) {
                        if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
                            cur += clazz + " ";
                        }
                    }

                    // only assign if different to avoid unneeded rendering.
                    finalValue = jQuery.trim( cur );
                    if ( elem.className !== finalValue ) {
                        elem.className = finalValue;
                    }
                }
            }
        }

        return this;
    },

    removeClass: function( value ) {
        var classes, elem, cur, clazz, j, finalValue,
            proceed = arguments.length === 0 || typeof value === "string" && value,
            i = 0,
            len = this.length;

        if ( jQuery.isFunction( value ) ) {
            return this.each(function( j ) {
                jQuery( this ).removeClass( value.call( this, j, this.className ) );
            });
        }
        if ( proceed ) {
            classes = ( value || "" ).match( rnotwhite ) || [];

            for ( ; i < len; i++ ) {
                elem = this[ i ];
                // This expression is here for better compressibility (see addClass)
                cur = elem.nodeType === 1 && ( elem.className ?
                    ( " " + elem.className + " " ).replace( rclass, " " ) :
                    ""
                );

                if ( cur ) {
                    j = 0;
                    while ( (clazz = classes[j++]) ) {
                        // Remove *all* instances
                        while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
                            cur = cur.replace( " " + clazz + " ", " " );
                        }
                    }

                    // Only assign if different to avoid unneeded rendering.
                    finalValue = value ? jQuery.trim( cur ) : "";
                    if ( elem.className !== finalValue ) {
                        elem.className = finalValue;
                    }
                }
            }
        }

        return this;
    },

    toggleClass: function( value, stateVal ) {
        var type = typeof value;

        if ( typeof stateVal === "boolean" && type === "string" ) {
            return stateVal ? this.addClass( value ) : this.removeClass( value );
        }

        if ( jQuery.isFunction( value ) ) {
            return this.each(function( i ) {
                jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
            });
        }

        return this.each(function() {
            if ( type === "string" ) {
                // Toggle individual class names
                var className,
                    i = 0,
                    self = jQuery( this ),
                    classNames = value.match( rnotwhite ) || [];

                while ( (className = classNames[ i++ ]) ) {
                    // Check each className given, space separated list
                    if ( self.hasClass( className ) ) {
                        self.removeClass( className );
                    } else {
                        self.addClass( className );
                    }
                }

            // Toggle whole class name
            } else if ( type === strundefined || type === "boolean" ) {
                if ( this.className ) {
                    // store className if set
                    data_priv.set( this, "__className__", this.className );
                }

                // If the element has a class name or if we're passed `false`,
                // then remove the whole classname (if there was one, the above saved it).
                // Otherwise bring back whatever was previously saved (if anything),
                // falling back to the empty string if nothing was stored.
                this.className = this.className || value === false ? "" : data_priv.get( this, "__className__" ) || "";
            }
        });
    },

    hasClass: function( selector ) {
        var className = " " + selector + " ",
            i = 0,
            l = this.length;
        for ( ; i < l; i++ ) {
            if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
                return true;
            }
        }

        return false;
    }
});




var rreturn = /\r/g;

jQuery.fn.extend({
    val: function( value ) {
        var hooks, ret, isFunction,
            elem = this[0];

        if ( !arguments.length ) {
            if ( elem ) {
                hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

                if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
                    return ret;
                }

                ret = elem.value;

                return typeof ret === "string" ?
                    // Handle most common string cases
                    ret.replace(rreturn, "") :
                    // Handle cases where value is null/undef or number
                    ret == null ? "" : ret;
            }

            return;
        }

        isFunction = jQuery.isFunction( value );

        return this.each(function( i ) {
            var val;

            if ( this.nodeType !== 1 ) {
                return;
            }

            if ( isFunction ) {
                val = value.call( this, i, jQuery( this ).val() );
            } else {
                val = value;
            }

            // Treat null/undefined as ""; convert numbers to string
            if ( val == null ) {
                val = "";

            } else if ( typeof val === "number" ) {
                val += "";

            } else if ( jQuery.isArray( val ) ) {
                val = jQuery.map( val, function( value ) {
                    return value == null ? "" : value + "";
                });
            }

            hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

            // If set returns undefined, fall back to normal setting
            if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
                this.value = val;
            }
        });
    }
});

jQuery.extend({
    valHooks: {
        option: {
            get: function( elem ) {
                var val = jQuery.find.attr( elem, "value" );
                return val != null ?
                    val :
                    // Support: IE10-11+
                    // option.text throws exceptions (#14686, #14858)
                    jQuery.trim( jQuery.text( elem ) );
            }
        },
        select: {
            get: function( elem ) {
                var value, option,
                    options = elem.options,
                    index = elem.selectedIndex,
                    one = elem.type === "select-one" || index < 0,
                    values = one ? null : [],
                    max = one ? index + 1 : options.length,
                    i = index < 0 ?
                        max :
                        one ? index : 0;

                // Loop through all the selected options
                for ( ; i < max; i++ ) {
                    option = options[ i ];

                    // IE6-9 doesn't update selected after form reset (#2551)
                    if ( ( option.selected || i === index ) &&
                            // Don't return options that are disabled or in a disabled optgroup
                            ( support.optDisabled ? !option.disabled : option.getAttribute( "disabled" ) === null ) &&
                            ( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

                        // Get the specific value for the option
                        value = jQuery( option ).val();

                        // We don't need an array for one selects
                        if ( one ) {
                            return value;
                        }

                        // Multi-Selects return an array
                        values.push( value );
                    }
                }

                return values;
            },

            set: function( elem, value ) {
                var optionSet, option,
                    options = elem.options,
                    values = jQuery.makeArray( value ),
                    i = options.length;

                while ( i-- ) {
                    option = options[ i ];
                    if ( (option.selected = jQuery.inArray( option.value, values ) >= 0) ) {
                        optionSet = true;
                    }
                }

                // Force browsers to behave consistently when non-matching value is set
                if ( !optionSet ) {
                    elem.selectedIndex = -1;
                }
                return values;
            }
        }
    }
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
    jQuery.valHooks[ this ] = {
        set: function( elem, value ) {
            if ( jQuery.isArray( value ) ) {
                return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
            }
        }
    };
    if ( !support.checkOn ) {
        jQuery.valHooks[ this ].get = function( elem ) {
            return elem.getAttribute("value") === null ? "on" : elem.value;
        };
    }
});




// Return jQuery for attributes-only inclusion


jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
    "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
    "change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

    // Handle event binding
    jQuery.fn[ name ] = function( data, fn ) {
        return arguments.length > 0 ?
            this.on( name, null, data, fn ) :
            this.trigger( name );
    };
});

jQuery.fn.extend({
    hover: function( fnOver, fnOut ) {
        return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
    },

    bind: function( types, data, fn ) {
        return this.on( types, null, data, fn );
    },
    unbind: function( types, fn ) {
        return this.off( types, null, fn );
    },

    delegate: function( selector, types, data, fn ) {
        return this.on( types, selector, data, fn );
    },
    undelegate: function( selector, types, fn ) {
        // ( namespace ) or ( selector, types [, fn] )
        return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
    }
});


var nonce = jQuery.now();

var rquery = (/\?/);



// Support: Android 2.3
// Workaround failure to string-cast null input
jQuery.parseJSON = function( data ) {
    return JSON.parse( data + "" );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
    var xml, tmp;
    if ( !data || typeof data !== "string" ) {
        return null;
    }

    // Support: IE9
    try {
        tmp = new DOMParser();
        xml = tmp.parseFromString( data, "text/xml" );
    } catch ( e ) {
        xml = undefined;
    }

    if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
        jQuery.error( "Invalid XML: " + data );
    }
    return xml;
};


var
    rhash = /#.*$/,
    rts = /([?&])_=[^&]*/,
    rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
    // #7653, #8125, #8152: local protocol detection
    rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
    rnoContent = /^(?:GET|HEAD)$/,
    rprotocol = /^\/\//,
    rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

    /* Prefilters
     * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
     * 2) These are called:
     *    - BEFORE asking for a transport
     *    - AFTER param serialization (s.data is a string if s.processData is true)
     * 3) key is the dataType
     * 4) the catchall symbol "*" can be used
     * 5) execution will start with transport dataType and THEN continue down to "*" if needed
     */
    prefilters = {},

    /* Transports bindings
     * 1) key is the dataType
     * 2) the catchall symbol "*" can be used
     * 3) selection will start with transport dataType and THEN go to "*" if needed
     */
    transports = {},

    // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
    allTypes = "*/".concat( "*" ),

    // Document location
    ajaxLocation = window.location.href,

    // Segment location into parts
    ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

    // dataTypeExpression is optional and defaults to "*"
    return function( dataTypeExpression, func ) {

        if ( typeof dataTypeExpression !== "string" ) {
            func = dataTypeExpression;
            dataTypeExpression = "*";
        }

        var dataType,
            i = 0,
            dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

        if ( jQuery.isFunction( func ) ) {
            // For each dataType in the dataTypeExpression
            while ( (dataType = dataTypes[i++]) ) {
                // Prepend if requested
                if ( dataType[0] === "+" ) {
                    dataType = dataType.slice( 1 ) || "*";
                    (structure[ dataType ] = structure[ dataType ] || []).unshift( func );

                // Otherwise append
                } else {
                    (structure[ dataType ] = structure[ dataType ] || []).push( func );
                }
            }
        }
    };
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

    var inspected = {},
        seekingTransport = ( structure === transports );

    function inspect( dataType ) {
        var selected;
        inspected[ dataType ] = true;
        jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
            var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
            if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
                options.dataTypes.unshift( dataTypeOrTransport );
                inspect( dataTypeOrTransport );
                return false;
            } else if ( seekingTransport ) {
                return !( selected = dataTypeOrTransport );
            }
        });
        return selected;
    }

    return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
    var key, deep,
        flatOptions = jQuery.ajaxSettings.flatOptions || {};

    for ( key in src ) {
        if ( src[ key ] !== undefined ) {
            ( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
        }
    }
    if ( deep ) {
        jQuery.extend( true, target, deep );
    }

    return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

    var ct, type, finalDataType, firstDataType,
        contents = s.contents,
        dataTypes = s.dataTypes;

    // Remove auto dataType and get content-type in the process
    while ( dataTypes[ 0 ] === "*" ) {
        dataTypes.shift();
        if ( ct === undefined ) {
            ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
        }
    }

    // Check if we're dealing with a known content-type
    if ( ct ) {
        for ( type in contents ) {
            if ( contents[ type ] && contents[ type ].test( ct ) ) {
                dataTypes.unshift( type );
                break;
            }
        }
    }

    // Check to see if we have a response for the expected dataType
    if ( dataTypes[ 0 ] in responses ) {
        finalDataType = dataTypes[ 0 ];
    } else {
        // Try convertible dataTypes
        for ( type in responses ) {
            if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
                finalDataType = type;
                break;
            }
            if ( !firstDataType ) {
                firstDataType = type;
            }
        }
        // Or just use first one
        finalDataType = finalDataType || firstDataType;
    }

    // If we found a dataType
    // We add the dataType to the list if needed
    // and return the corresponding response
    if ( finalDataType ) {
        if ( finalDataType !== dataTypes[ 0 ] ) {
            dataTypes.unshift( finalDataType );
        }
        return responses[ finalDataType ];
    }
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
    var conv2, current, conv, tmp, prev,
        converters = {},
        // Work with a copy of dataTypes in case we need to modify it for conversion
        dataTypes = s.dataTypes.slice();

    // Create converters map with lowercased keys
    if ( dataTypes[ 1 ] ) {
        for ( conv in s.converters ) {
            converters[ conv.toLowerCase() ] = s.converters[ conv ];
        }
    }

    current = dataTypes.shift();

    // Convert to each sequential dataType
    while ( current ) {

        if ( s.responseFields[ current ] ) {
            jqXHR[ s.responseFields[ current ] ] = response;
        }

        // Apply the dataFilter if provided
        if ( !prev && isSuccess && s.dataFilter ) {
            response = s.dataFilter( response, s.dataType );
        }

        prev = current;
        current = dataTypes.shift();

        if ( current ) {

        // There's only work to do if current dataType is non-auto
            if ( current === "*" ) {

                current = prev;

            // Convert response if prev dataType is non-auto and differs from current
            } else if ( prev !== "*" && prev !== current ) {

                // Seek a direct converter
                conv = converters[ prev + " " + current ] || converters[ "* " + current ];

                // If none found, seek a pair
                if ( !conv ) {
                    for ( conv2 in converters ) {

                        // If conv2 outputs current
                        tmp = conv2.split( " " );
                        if ( tmp[ 1 ] === current ) {

                            // If prev can be converted to accepted input
                            conv = converters[ prev + " " + tmp[ 0 ] ] ||
                                converters[ "* " + tmp[ 0 ] ];
                            if ( conv ) {
                                // Condense equivalence converters
                                if ( conv === true ) {
                                    conv = converters[ conv2 ];

                                // Otherwise, insert the intermediate dataType
                                } else if ( converters[ conv2 ] !== true ) {
                                    current = tmp[ 0 ];
                                    dataTypes.unshift( tmp[ 1 ] );
                                }
                                break;
                            }
                        }
                    }
                }

                // Apply converter (if not an equivalence)
                if ( conv !== true ) {

                    // Unless errors are allowed to bubble, catch and return them
                    if ( conv && s[ "throws" ] ) {
                        response = conv( response );
                    } else {
                        try {
                            response = conv( response );
                        } catch ( e ) {
                            return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
                        }
                    }
                }
            }
        }
    }

    return { state: "success", data: response };
}

jQuery.extend({

    // Counter for holding the number of active queries
    active: 0,

    // Last-Modified header cache for next request
    lastModified: {},
    etag: {},

    ajaxSettings: {
        url: ajaxLocation,
        type: "GET",
        isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
        global: true,
        processData: true,
        async: true,
        contentType: "application/x-www-form-urlencoded; charset=UTF-8",
        /*
        timeout: 0,
        data: null,
        dataType: null,
        username: null,
        password: null,
        cache: null,
        throws: false,
        traditional: false,
        headers: {},
        */

        accepts: {
            "*": allTypes,
            text: "text/plain",
            html: "text/html",
            xml: "application/xml, text/xml",
            json: "application/json, text/javascript"
        },

        contents: {
            xml: /xml/,
            html: /html/,
            json: /json/
        },

        responseFields: {
            xml: "responseXML",
            text: "responseText",
            json: "responseJSON"
        },

        // Data converters
        // Keys separate source (or catchall "*") and destination types with a single space
        converters: {

            // Convert anything to text
            "* text": String,

            // Text to html (true = no transformation)
            "text html": true,

            // Evaluate text as a json expression
            "text json": jQuery.parseJSON,

            // Parse text as xml
            "text xml": jQuery.parseXML
        },

        // For options that shouldn't be deep extended:
        // you can add your own custom options here if
        // and when you create one that shouldn't be
        // deep extended (see ajaxExtend)
        flatOptions: {
            url: true,
            context: true
        }
    },

    // Creates a full fledged settings object into target
    // with both ajaxSettings and settings fields.
    // If target is omitted, writes into ajaxSettings.
    ajaxSetup: function( target, settings ) {
        return settings ?

            // Building a settings object
            ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

            // Extending ajaxSettings
            ajaxExtend( jQuery.ajaxSettings, target );
    },

    ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
    ajaxTransport: addToPrefiltersOrTransports( transports ),

    // Main method
    ajax: function( url, options ) {

        // If url is an object, simulate pre-1.5 signature
        if ( typeof url === "object" ) {
            options = url;
            url = undefined;
        }

        // Force options to be an object
        options = options || {};

        var transport,
            // URL without anti-cache param
            cacheURL,
            // Response headers
            responseHeadersString,
            responseHeaders,
            // timeout handle
            timeoutTimer,
            // Cross-domain detection vars
            parts,
            // To know if global events are to be dispatched
            fireGlobals,
            // Loop variable
            i,
            // Create the final options object
            s = jQuery.ajaxSetup( {}, options ),
            // Callbacks context
            callbackContext = s.context || s,
            // Context for global events is callbackContext if it is a DOM node or jQuery collection
            globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
                jQuery( callbackContext ) :
                jQuery.event,
            // Deferreds
            deferred = jQuery.Deferred(),
            completeDeferred = jQuery.Callbacks("once memory"),
            // Status-dependent callbacks
            statusCode = s.statusCode || {},
            // Headers (they are sent all at once)
            requestHeaders = {},
            requestHeadersNames = {},
            // The jqXHR state
            state = 0,
            // Default abort message
            strAbort = "canceled",
            // Fake xhr
            jqXHR = {
                readyState: 0,

                // Builds headers hashtable if needed
                getResponseHeader: function( key ) {
                    var match;
                    if ( state === 2 ) {
                        if ( !responseHeaders ) {
                            responseHeaders = {};
                            while ( (match = rheaders.exec( responseHeadersString )) ) {
                                responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
                            }
                        }
                        match = responseHeaders[ key.toLowerCase() ];
                    }
                    return match == null ? null : match;
                },

                // Raw string
                getAllResponseHeaders: function() {
                    return state === 2 ? responseHeadersString : null;
                },

                // Caches the header
                setRequestHeader: function( name, value ) {
                    var lname = name.toLowerCase();
                    if ( !state ) {
                        name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
                        requestHeaders[ name ] = value;
                    }
                    return this;
                },

                // Overrides response content-type header
                overrideMimeType: function( type ) {
                    if ( !state ) {
                        s.mimeType = type;
                    }
                    return this;
                },

                // Status-dependent callbacks
                statusCode: function( map ) {
                    var code;
                    if ( map ) {
                        if ( state < 2 ) {
                            for ( code in map ) {
                                // Lazy-add the new callback in a way that preserves old ones
                                statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
                            }
                        } else {
                            // Execute the appropriate callbacks
                            jqXHR.always( map[ jqXHR.status ] );
                        }
                    }
                    return this;
                },

                // Cancel the request
                abort: function( statusText ) {
                    var finalText = statusText || strAbort;
                    if ( transport ) {
                        transport.abort( finalText );
                    }
                    done( 0, finalText );
                    return this;
                }
            };

        // Attach deferreds
        deferred.promise( jqXHR ).complete = completeDeferred.add;
        jqXHR.success = jqXHR.done;
        jqXHR.error = jqXHR.fail;

        // Remove hash character (#7531: and string promotion)
        // Add protocol if not provided (prefilters might expect it)
        // Handle falsy url in the settings object (#10093: consistency with old signature)
        // We also use the url parameter if available
        s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" )
            .replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

        // Alias method option to type as per ticket #12004
        s.type = options.method || options.type || s.method || s.type;

        // Extract dataTypes list
        s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

        // A cross-domain request is in order when we have a protocol:host:port mismatch
        if ( s.crossDomain == null ) {
            parts = rurl.exec( s.url.toLowerCase() );
            s.crossDomain = !!( parts &&
                ( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
                    ( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
                        ( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
            );
        }

        // Convert data if not already a string
        if ( s.data && s.processData && typeof s.data !== "string" ) {
            s.data = jQuery.param( s.data, s.traditional );
        }

        // Apply prefilters
        inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

        // If request was aborted inside a prefilter, stop there
        if ( state === 2 ) {
            return jqXHR;
        }

        // We can fire global events as of now if asked to
        // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
        fireGlobals = jQuery.event && s.global;

        // Watch for a new set of requests
        if ( fireGlobals && jQuery.active++ === 0 ) {
            jQuery.event.trigger("ajaxStart");
        }

        // Uppercase the type
        s.type = s.type.toUpperCase();

        // Determine if request has content
        s.hasContent = !rnoContent.test( s.type );

        // Save the URL in case we're toying with the If-Modified-Since
        // and/or If-None-Match header later on
        cacheURL = s.url;

        // More options handling for requests with no content
        if ( !s.hasContent ) {

            // If data is available, append data to url
            if ( s.data ) {
                cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
                // #9682: remove data so that it's not used in an eventual retry
                delete s.data;
            }

            // Add anti-cache in url if needed
            if ( s.cache === false ) {
                s.url = rts.test( cacheURL ) ?

                    // If there is already a '_' parameter, set its value
                    cacheURL.replace( rts, "$1_=" + nonce++ ) :

                    // Otherwise add one to the end
                    cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
            }
        }

        // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
        if ( s.ifModified ) {
            if ( jQuery.lastModified[ cacheURL ] ) {
                jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
            }
            if ( jQuery.etag[ cacheURL ] ) {
                jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
            }
        }

        // Set the correct header, if data is being sent
        if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
            jqXHR.setRequestHeader( "Content-Type", s.contentType );
        }

        // Set the Accepts header for the server, depending on the dataType
        jqXHR.setRequestHeader(
            "Accept",
            s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
                s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
                s.accepts[ "*" ]
        );

        // Check for headers option
        for ( i in s.headers ) {
            jqXHR.setRequestHeader( i, s.headers[ i ] );
        }

        // Allow custom headers/mimetypes and early abort
        if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
            // Abort if not done already and return
            return jqXHR.abort();
        }

        // Aborting is no longer a cancellation
        strAbort = "abort";

        // Install callbacks on deferreds
        for ( i in { success: 1, error: 1, complete: 1 } ) {
            jqXHR[ i ]( s[ i ] );
        }

        // Get transport
        transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

        // If no transport, we auto-abort
        if ( !transport ) {
            done( -1, "No Transport" );
        } else {
            jqXHR.readyState = 1;

            // Send global event
            if ( fireGlobals ) {
                globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
            }
            // Timeout
            if ( s.async && s.timeout > 0 ) {
                timeoutTimer = setTimeout(function() {
                    jqXHR.abort("timeout");
                }, s.timeout );
            }

            try {
                state = 1;
                transport.send( requestHeaders, done );
            } catch ( e ) {
                // Propagate exception as error if not done
                if ( state < 2 ) {
                    done( -1, e );
                // Simply rethrow otherwise
                } else {
                    throw e;
                }
            }
        }

        // Callback for when everything is done
        function done( status, nativeStatusText, responses, headers ) {
            var isSuccess, success, error, response, modified,
                statusText = nativeStatusText;

            // Called once
            if ( state === 2 ) {
                return;
            }

            // State is "done" now
            state = 2;

            // Clear timeout if it exists
            if ( timeoutTimer ) {
                clearTimeout( timeoutTimer );
            }

            // Dereference transport for early garbage collection
            // (no matter how long the jqXHR object will be used)
            transport = undefined;

            // Cache response headers
            responseHeadersString = headers || "";

            // Set readyState
            jqXHR.readyState = status > 0 ? 4 : 0;

            // Determine if successful
            isSuccess = status >= 200 && status < 300 || status === 304;

            // Get response data
            if ( responses ) {
                response = ajaxHandleResponses( s, jqXHR, responses );
            }

            // Convert no matter what (that way responseXXX fields are always set)
            response = ajaxConvert( s, response, jqXHR, isSuccess );

            // If successful, handle type chaining
            if ( isSuccess ) {

                // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                if ( s.ifModified ) {
                    modified = jqXHR.getResponseHeader("Last-Modified");
                    if ( modified ) {
                        jQuery.lastModified[ cacheURL ] = modified;
                    }
                    modified = jqXHR.getResponseHeader("etag");
                    if ( modified ) {
                        jQuery.etag[ cacheURL ] = modified;
                    }
                }

                // if no content
                if ( status === 204 || s.type === "HEAD" ) {
                    statusText = "nocontent";

                // if not modified
                } else if ( status === 304 ) {
                    statusText = "notmodified";

                // If we have data, let's convert it
                } else {
                    statusText = response.state;
                    success = response.data;
                    error = response.error;
                    isSuccess = !error;
                }
            } else {
                // Extract error from statusText and normalize for non-aborts
                error = statusText;
                if ( status || !statusText ) {
                    statusText = "error";
                    if ( status < 0 ) {
                        status = 0;
                    }
                }
            }

            // Set data for the fake xhr object
            jqXHR.status = status;
            jqXHR.statusText = ( nativeStatusText || statusText ) + "";

            // Success/Error
            if ( isSuccess ) {
                deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
            } else {
                deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
            }

            // Status-dependent callbacks
            jqXHR.statusCode( statusCode );
            statusCode = undefined;

            if ( fireGlobals ) {
                globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
                    [ jqXHR, s, isSuccess ? success : error ] );
            }

            // Complete
            completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

            if ( fireGlobals ) {
                globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
                // Handle the global AJAX counter
                if ( !( --jQuery.active ) ) {
                    jQuery.event.trigger("ajaxStop");
                }
            }
        }

        return jqXHR;
    },

    getJSON: function( url, data, callback ) {
        return jQuery.get( url, data, callback, "json" );
    },

    getScript: function( url, callback ) {
        return jQuery.get( url, undefined, callback, "script" );
    }
});

jQuery.each( [ "get", "post" ], function( i, method ) {
    jQuery[ method ] = function( url, data, callback, type ) {
        // Shift arguments if data argument was omitted
        if ( jQuery.isFunction( data ) ) {
            type = type || callback;
            callback = data;
            data = undefined;
        }

        return jQuery.ajax({
            url: url,
            type: method,
            dataType: type,
            data: data,
            success: callback
        });
    };
});


jQuery._evalUrl = function( url ) {
    return jQuery.ajax({
        url: url,
        type: "GET",
        dataType: "script",
        async: false,
        global: false,
        "throws": true
    });
};


jQuery.fn.extend({
    wrapAll: function( html ) {
        var wrap;

        if ( jQuery.isFunction( html ) ) {
            return this.each(function( i ) {
                jQuery( this ).wrapAll( html.call(this, i) );
            });
        }

        if ( this[ 0 ] ) {

            // The elements to wrap the target around
            wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

            if ( this[ 0 ].parentNode ) {
                wrap.insertBefore( this[ 0 ] );
            }

            wrap.map(function() {
                var elem = this;

                while ( elem.firstElementChild ) {
                    elem = elem.firstElementChild;
                }

                return elem;
            }).append( this );
        }

        return this;
    },

    wrapInner: function( html ) {
        if ( jQuery.isFunction( html ) ) {
            return this.each(function( i ) {
                jQuery( this ).wrapInner( html.call(this, i) );
            });
        }

        return this.each(function() {
            var self = jQuery( this ),
                contents = self.contents();

            if ( contents.length ) {
                contents.wrapAll( html );

            } else {
                self.append( html );
            }
        });
    },

    wrap: function( html ) {
        var isFunction = jQuery.isFunction( html );

        return this.each(function( i ) {
            jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
        });
    },

    unwrap: function() {
        return this.parent().each(function() {
            if ( !jQuery.nodeName( this, "body" ) ) {
                jQuery( this ).replaceWith( this.childNodes );
            }
        }).end();
    }
});


jQuery.expr.filters.hidden = function( elem ) {
    // Support: Opera <= 12.12
    // Opera reports offsetWidths and offsetHeights less than zero on some elements
    return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
};
jQuery.expr.filters.visible = function( elem ) {
    return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
    rbracket = /\[\]$/,
    rCRLF = /\r?\n/g,
    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
    rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
    var name;

    if ( jQuery.isArray( obj ) ) {
        // Serialize array item.
        jQuery.each( obj, function( i, v ) {
            if ( traditional || rbracket.test( prefix ) ) {
                // Treat each array item as a scalar.
                add( prefix, v );

            } else {
                // Item is non-scalar (array or object), encode its numeric index.
                buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
            }
        });

    } else if ( !traditional && jQuery.type( obj ) === "object" ) {
        // Serialize object item.
        for ( name in obj ) {
            buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
        }

    } else {
        // Serialize scalar item.
        add( prefix, obj );
    }
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
    var prefix,
        s = [],
        add = function( key, value ) {
            // If value is a function, invoke it and return its value
            value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
            s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
        };

    // Set traditional to true for jQuery <= 1.3.2 behavior.
    if ( traditional === undefined ) {
        traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
    }

    // If an array was passed in, assume that it is an array of form elements.
    if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
        // Serialize the form elements
        jQuery.each( a, function() {
            add( this.name, this.value );
        });

    } else {
        // If traditional, encode the "old" way (the way 1.3.2 or older
        // did it), otherwise encode params recursively.
        for ( prefix in a ) {
            buildParams( prefix, a[ prefix ], traditional, add );
        }
    }

    // Return the resulting serialization
    return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend({
    serialize: function() {
        return jQuery.param( this.serializeArray() );
    },
    serializeArray: function() {
        return this.map(function() {
            // Can add propHook for "elements" to filter or add form elements
            var elements = jQuery.prop( this, "elements" );
            return elements ? jQuery.makeArray( elements ) : this;
        })
        .filter(function() {
            var type = this.type;

            // Use .is( ":disabled" ) so that fieldset[disabled] works
            return this.name && !jQuery( this ).is( ":disabled" ) &&
                rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
                ( this.checked || !rcheckableType.test( type ) );
        })
        .map(function( i, elem ) {
            var val = jQuery( this ).val();

            return val == null ?
                null :
                jQuery.isArray( val ) ?
                    jQuery.map( val, function( val ) {
                        return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
                    }) :
                    { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
        }).get();
    }
});


jQuery.ajaxSettings.xhr = function() {
    try {
        return new XMLHttpRequest();
    } catch( e ) {}
};

var xhrId = 0,
    xhrCallbacks = {},
    xhrSuccessStatus = {
        // file protocol always yields status code 0, assume 200
        0: 200,
        // Support: IE9
        // #1450: sometimes IE returns 1223 when it should be 204
        1223: 204
    },
    xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE9
// Open requests must be manually aborted on unload (#5280)
// See https://support.microsoft.com/kb/2856746 for more info
if ( window.attachEvent ) {
    window.attachEvent( "onunload", function() {
        for ( var key in xhrCallbacks ) {
            xhrCallbacks[ key ]();
        }
    });
}

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport(function( options ) {
    var callback;

    // Cross domain only allowed if supported through XMLHttpRequest
    if ( support.cors || xhrSupported && !options.crossDomain ) {
        return {
            send: function( headers, complete ) {
                var i,
                    xhr = options.xhr(),
                    id = ++xhrId;

                xhr.open( options.type, options.url, options.async, options.username, options.password );

                // Apply custom fields if provided
                if ( options.xhrFields ) {
                    for ( i in options.xhrFields ) {
                        xhr[ i ] = options.xhrFields[ i ];
                    }
                }

                // Override mime type if needed
                if ( options.mimeType && xhr.overrideMimeType ) {
                    xhr.overrideMimeType( options.mimeType );
                }

                // X-Requested-With header
                // For cross-domain requests, seeing as conditions for a preflight are
                // akin to a jigsaw puzzle, we simply never set it to be sure.
                // (it can always be set on a per-request basis or even using ajaxSetup)
                // For same-domain requests, won't change header if already provided.
                if ( !options.crossDomain && !headers["X-Requested-With"] ) {
                    headers["X-Requested-With"] = "XMLHttpRequest";
                }

                // Set headers
                for ( i in headers ) {
                    xhr.setRequestHeader( i, headers[ i ] );
                }

                // Callback
                callback = function( type ) {
                    return function() {
                        if ( callback ) {
                            delete xhrCallbacks[ id ];
                            callback = xhr.onload = xhr.onerror = null;

                            if ( type === "abort" ) {
                                xhr.abort();
                            } else if ( type === "error" ) {
                                complete(
                                    // file: protocol always yields status 0; see #8605, #14207
                                    xhr.status,
                                    xhr.statusText
                                );
                            } else {
                                complete(
                                    xhrSuccessStatus[ xhr.status ] || xhr.status,
                                    xhr.statusText,
                                    // Support: IE9
                                    // Accessing binary-data responseText throws an exception
                                    // (#11426)
                                    typeof xhr.responseText === "string" ? {
                                        text: xhr.responseText
                                    } : undefined,
                                    xhr.getAllResponseHeaders()
                                );
                            }
                        }
                    };
                };

                // Listen to events
                xhr.onload = callback();
                xhr.onerror = callback("error");

                // Create the abort callback
                callback = xhrCallbacks[ id ] = callback("abort");

                try {
                    // Do send the request (this may raise an exception)
                    xhr.send( options.hasContent && options.data || null );
                } catch ( e ) {
                    // #14683: Only rethrow if this hasn't been notified as an error yet
                    if ( callback ) {
                        throw e;
                    }
                }
            },

            abort: function() {
                if ( callback ) {
                    callback();
                }
            }
        };
    }
});




// Install script dataType
jQuery.ajaxSetup({
    accepts: {
        script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
    },
    contents: {
        script: /(?:java|ecma)script/
    },
    converters: {
        "text script": function( text ) {
            jQuery.globalEval( text );
            return text;
        }
    }
});

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
    if ( s.cache === undefined ) {
        s.cache = false;
    }
    if ( s.crossDomain ) {
        s.type = "GET";
    }
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {
    // This transport only deals with cross domain requests
    if ( s.crossDomain ) {
        var script, callback;
        return {
            send: function( _, complete ) {
                script = jQuery("<script>").prop({
                    async: true,
                    charset: s.scriptCharset,
                    src: s.url
                }).on(
                    "load error",
                    callback = function( evt ) {
                        script.remove();
                        callback = null;
                        if ( evt ) {
                            complete( evt.type === "error" ? 404 : 200, evt.type );
                        }
                    }
                );
                document.head.appendChild( script[ 0 ] );
            },
            abort: function() {
                if ( callback ) {
                    callback();
                }
            }
        };
    }
});




var oldCallbacks = [],
    rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
    jsonp: "callback",
    jsonpCallback: function() {
        var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
        this[ callback ] = true;
        return callback;
    }
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

    var callbackName, overwritten, responseContainer,
        jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
            "url" :
            typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
        );

    // Handle iff the expected data type is "jsonp" or we have a parameter to set
    if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

        // Get callback name, remembering preexisting value associated with it
        callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
            s.jsonpCallback() :
            s.jsonpCallback;

        // Insert callback into url or form data
        if ( jsonProp ) {
            s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
        } else if ( s.jsonp !== false ) {
            s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
        }

        // Use data converter to retrieve json after script execution
        s.converters["script json"] = function() {
            if ( !responseContainer ) {
                jQuery.error( callbackName + " was not called" );
            }
            return responseContainer[ 0 ];
        };

        // force json dataType
        s.dataTypes[ 0 ] = "json";

        // Install callback
        overwritten = window[ callbackName ];
        window[ callbackName ] = function() {
            responseContainer = arguments;
        };

        // Clean-up function (fires after converters)
        jqXHR.always(function() {
            // Restore preexisting value
            window[ callbackName ] = overwritten;

            // Save back as free
            if ( s[ callbackName ] ) {
                // make sure that re-using the options doesn't screw things around
                s.jsonpCallback = originalSettings.jsonpCallback;

                // save the callback name for future use
                oldCallbacks.push( callbackName );
            }

            // Call if it was a function and we have a response
            if ( responseContainer && jQuery.isFunction( overwritten ) ) {
                overwritten( responseContainer[ 0 ] );
            }

            responseContainer = overwritten = undefined;
        });

        // Delegate to script
        return "script";
    }
});




// data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
    if ( !data || typeof data !== "string" ) {
        return null;
    }
    if ( typeof context === "boolean" ) {
        keepScripts = context;
        context = false;
    }
    context = context || document;

    var parsed = rsingleTag.exec( data ),
        scripts = !keepScripts && [];

    // Single tag
    if ( parsed ) {
        return [ context.createElement( parsed[1] ) ];
    }

    parsed = jQuery.buildFragment( [ data ], context, scripts );

    if ( scripts && scripts.length ) {
        jQuery( scripts ).remove();
    }

    return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
    if ( typeof url !== "string" && _load ) {
        return _load.apply( this, arguments );
    }

    var selector, type, response,
        self = this,
        off = url.indexOf(" ");

    if ( off >= 0 ) {
        selector = jQuery.trim( url.slice( off ) );
        url = url.slice( 0, off );
    }

    // If it's a function
    if ( jQuery.isFunction( params ) ) {

        // We assume that it's the callback
        callback = params;
        params = undefined;

    // Otherwise, build a param string
    } else if ( params && typeof params === "object" ) {
        type = "POST";
    }

    // If we have elements to modify, make the request
    if ( self.length > 0 ) {
        jQuery.ajax({
            url: url,

            // if "type" variable is undefined, then "GET" method will be used
            type: type,
            dataType: "html",
            data: params
        }).done(function( responseText ) {

            // Save response for use in complete callback
            response = arguments;

            self.html( selector ?

                // If a selector was specified, locate the right elements in a dummy div
                // Exclude scripts to avoid IE 'Permission Denied' errors
                jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

                // Otherwise use the full result
                responseText );

        }).complete( callback && function( jqXHR, status ) {
            self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
        });
    }

    return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
    jQuery.fn[ type ] = function( fn ) {
        return this.on( type, fn );
    };
});




jQuery.expr.filters.animated = function( elem ) {
    return jQuery.grep(jQuery.timers, function( fn ) {
        return elem === fn.elem;
    }).length;
};




var docElem = window.document.documentElement;

/**
 * Gets a window from an element
 */
function getWindow( elem ) {
    return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
    setOffset: function( elem, options, i ) {
        var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
            position = jQuery.css( elem, "position" ),
            curElem = jQuery( elem ),
            props = {};

        // Set position first, in-case top/left are set even on static elem
        if ( position === "static" ) {
            elem.style.position = "relative";
        }

        curOffset = curElem.offset();
        curCSSTop = jQuery.css( elem, "top" );
        curCSSLeft = jQuery.css( elem, "left" );
        calculatePosition = ( position === "absolute" || position === "fixed" ) &&
            ( curCSSTop + curCSSLeft ).indexOf("auto") > -1;

        // Need to be able to calculate position if either
        // top or left is auto and position is either absolute or fixed
        if ( calculatePosition ) {
            curPosition = curElem.position();
            curTop = curPosition.top;
            curLeft = curPosition.left;

        } else {
            curTop = parseFloat( curCSSTop ) || 0;
            curLeft = parseFloat( curCSSLeft ) || 0;
        }

        if ( jQuery.isFunction( options ) ) {
            options = options.call( elem, i, curOffset );
        }

        if ( options.top != null ) {
            props.top = ( options.top - curOffset.top ) + curTop;
        }
        if ( options.left != null ) {
            props.left = ( options.left - curOffset.left ) + curLeft;
        }

        if ( "using" in options ) {
            options.using.call( elem, props );

        } else {
            curElem.css( props );
        }
    }
};

jQuery.fn.extend({
    offset: function( options ) {
        if ( arguments.length ) {
            return options === undefined ?
                this :
                this.each(function( i ) {
                    jQuery.offset.setOffset( this, options, i );
                });
        }

        var docElem, win,
            elem = this[ 0 ],
            box = { top: 0, left: 0 },
            doc = elem && elem.ownerDocument;

        if ( !doc ) {
            return;
        }

        docElem = doc.documentElement;

        // Make sure it's not a disconnected DOM node
        if ( !jQuery.contains( docElem, elem ) ) {
            return box;
        }

        // Support: BlackBerry 5, iOS 3 (original iPhone)
        // If we don't have gBCR, just use 0,0 rather than error
        if ( typeof elem.getBoundingClientRect !== strundefined ) {
            box = elem.getBoundingClientRect();
        }
        win = getWindow( doc );
        return {
            top: box.top + win.pageYOffset - docElem.clientTop,
            left: box.left + win.pageXOffset - docElem.clientLeft
        };
    },

    position: function() {
        if ( !this[ 0 ] ) {
            return;
        }

        var offsetParent, offset,
            elem = this[ 0 ],
            parentOffset = { top: 0, left: 0 };

        // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
        if ( jQuery.css( elem, "position" ) === "fixed" ) {
            // Assume getBoundingClientRect is there when computed position is fixed
            offset = elem.getBoundingClientRect();

        } else {
            // Get *real* offsetParent
            offsetParent = this.offsetParent();

            // Get correct offsets
            offset = this.offset();
            if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
                parentOffset = offsetParent.offset();
            }

            // Add offsetParent borders
            parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
            parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
        }

        // Subtract parent offsets and element margins
        return {
            top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
            left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
        };
    },

    offsetParent: function() {
        return this.map(function() {
            var offsetParent = this.offsetParent || docElem;

            while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
                offsetParent = offsetParent.offsetParent;
            }

            return offsetParent || docElem;
        });
    }
});

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
    var top = "pageYOffset" === prop;

    jQuery.fn[ method ] = function( val ) {
        return access( this, function( elem, method, val ) {
            var win = getWindow( elem );

            if ( val === undefined ) {
                return win ? win[ prop ] : elem[ method ];
            }

            if ( win ) {
                win.scrollTo(
                    !top ? val : window.pageXOffset,
                    top ? val : window.pageYOffset
                );

            } else {
                elem[ method ] = val;
            }
        }, method, val, arguments.length, null );
    };
});

// Support: Safari<7+, Chrome<37+
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
    jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
        function( elem, computed ) {
            if ( computed ) {
                computed = curCSS( elem, prop );
                // If curCSS returns percentage, fallback to offset
                return rnumnonpx.test( computed ) ?
                    jQuery( elem ).position()[ prop ] + "px" :
                    computed;
            }
        }
    );
});


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
    jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
        // Margin is only for outerHeight, outerWidth
        jQuery.fn[ funcName ] = function( margin, value ) {
            var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
                extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

            return access( this, function( elem, type, value ) {
                var doc;

                if ( jQuery.isWindow( elem ) ) {
                    // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
                    // isn't a whole lot we can do. See pull request at this URL for discussion:
                    // https://github.com/jquery/jquery/pull/764
                    return elem.document.documentElement[ "client" + name ];
                }

                // Get document width or height
                if ( elem.nodeType === 9 ) {
                    doc = elem.documentElement;

                    // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                    // whichever is greatest
                    return Math.max(
                        elem.body[ "scroll" + name ], doc[ "scroll" + name ],
                        elem.body[ "offset" + name ], doc[ "offset" + name ],
                        doc[ "client" + name ]
                    );
                }

                return value === undefined ?
                    // Get width or height on the element, requesting but not forcing parseFloat
                    jQuery.css( elem, type, extra ) :

                    // Set width or height on the element
                    jQuery.style( elem, type, value, extra );
            }, type, chainable ? margin : undefined, chainable, null );
        };
    });
});


// The number of elements contained in the matched element set
jQuery.fn.size = function() {
    return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
    define( "jquery", [], function() {
        return jQuery;
    });
}




var
    // Map over jQuery in case of overwrite
    _jQuery = window.jQuery,

    // Map over the $ in case of overwrite
    _$ = window.$;

jQuery.noConflict = function( deep ) {
    if ( window.$ === jQuery ) {
        window.$ = _$;
    }

    if ( deep && window.jQuery === jQuery ) {
        window.jQuery = _jQuery;
    }

    return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
    window.jQuery = window.$ = jQuery;
}




return jQuery;

}));
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/*jshint evil:true*/

/**
 * The Thrift namespace houses the Apache Thrift JavaScript library 
 * elements providing JavaScript bindings for the Apache Thrift RPC 
 * system. End users will typically only directly make use of the 
 * Transport (TXHRTransport/TWebSocketTransport) and Protocol 
 * (TJSONPRotocol/TBinaryProtocol) constructors.
 * 
 * Object methods beginning with a __ (e.g. __onOpen()) are internal 
 * and should not be called outside of the object's own methods.
 * 
 * This library creates one global object: Thrift
 * Code in this library must never create additional global identifiers,
 * all features must be scoped within the Thrift namespace.
 * @namespace
 * @example
 *     var transport = new Thrift.Transport("http://localhost:8585");
 *     var protocol  = new Thrift.Protocol(transport);
 *     var client = new MyThriftSvcClient(protocol);
 *     var result = client.MyMethod();
 */
var Thrift = {
    /**
     * Thrift JavaScript library version.
     * @readonly
     * @const {string} Version
     * @memberof Thrift
     */
    Version: '0.9.2',

    /**
     * Thrift IDL type string to Id mapping.
     * @readonly
     * @property {number}  STOP   - End of a set of fields.
     * @property {number}  VOID   - No value (only legal for return types).
     * @property {number}  BOOL   - True/False integer.
     * @property {number}  BYTE   - Signed 8 bit integer.
     * @property {number}  I08    - Signed 8 bit integer.     
     * @property {number}  DOUBLE - 64 bit IEEE 854 floating point.
     * @property {number}  I16    - Signed 16 bit integer.
     * @property {number}  I32    - Signed 32 bit integer.
     * @property {number}  I64    - Signed 64 bit integer.
     * @property {number}  STRING - Array of bytes representing a string of characters.
     * @property {number}  UTF7   - Array of bytes representing a string of UTF7 encoded characters.
     * @property {number}  STRUCT - A multifield type.
     * @property {number}  MAP    - A collection type (map/associative-array/dictionary).
     * @property {number}  SET    - A collection type (unordered and without repeated values).
     * @property {number}  LIST   - A collection type (unordered).
     * @property {number}  UTF8   - Array of bytes representing a string of UTF8 encoded characters.
     * @property {number}  UTF16  - Array of bytes representing a string of UTF16 encoded characters.
     */
    Type: {
        'STOP' : 0,
        'VOID' : 1,
        'BOOL' : 2,
        'BYTE' : 3,
        'I08' : 3,
        'DOUBLE' : 4,
        'I16' : 6,
        'I32' : 8,
        'I64' : 10,
        'STRING' : 11,
        'UTF7' : 11,
        'STRUCT' : 12,
        'MAP' : 13,
        'SET' : 14,
        'LIST' : 15,
        'UTF8' : 16,
        'UTF16' : 17
    },

    /**
     * Thrift RPC message type string to Id mapping.
     * @readonly
     * @property {number}  CALL      - RPC call sent from client to server.
     * @property {number}  REPLY     - RPC call normal response from server to client.
     * @property {number}  EXCEPTION - RPC call exception response from server to client.
     * @property {number}  ONEWAY    - Oneway RPC call from client to server with no response.
     */
    MessageType: {
        'CALL' : 1,
        'REPLY' : 2,
        'EXCEPTION' : 3,
        'ONEWAY' : 4
    },

    /**
     * Utility function returning the count of an object's own properties.
     * @param {object} obj - Object to test.
     * @returns {number} number of object's own properties
     */
    objectLength: function(obj) {
        var length = 0;
        for (var k in obj) {
            if (obj.hasOwnProperty(k)) {
                length++;
            }
        }
        return length;
    },

    /**
     * Utility function to establish prototype inheritance.
     * @see {@link http://javascript.crockford.com/prototypal.html|Prototypal Inheritance}
     * @param {function} constructor - Contstructor function to set as derived.
     * @param {function} superConstructor - Contstructor function to set as base.
     * @param {string} [name] - Type name to set as name property in derived prototype.
     */
    inherits: function(constructor, superConstructor, name) {
      function F() {}
      F.prototype = superConstructor.prototype;
      constructor.prototype = new F();
      constructor.prototype.name = name || "";
    }
};

/**
 * Initializes a Thrift TException instance.
 * @constructor
 * @augments Error
 * @param {string} message - The TException message (distinct from the Error message).
 * @classdesc TException is the base class for all Thrift exceptions types.
 */
Thrift.TException = function(message) {
    this.message = message;
};
Thrift.inherits(Thrift.TException, Error, 'TException');

/**
 * Returns the message set on the exception.
 * @readonly
 * @returns {string} exception message
 */
Thrift.TException.prototype.getMessage = function() {
    return this.message;
};

/**
 * Thrift Application Exception type string to Id mapping.
 * @readonly
 * @property {number}  UNKNOWN                 - Unknown/undefined.
 * @property {number}  UNKNOWN_METHOD          - Client attempted to call a method unknown to the server.
 * @property {number}  INVALID_MESSAGE_TYPE    - Client passed an unknown/unsupported MessageType.
 * @property {number}  WRONG_METHOD_NAME       - Unused.
 * @property {number}  BAD_SEQUENCE_ID         - Unused in Thrift RPC, used to flag proprietary sequence number errors.
 * @property {number}  MISSING_RESULT          - Raised by a server processor if a handler fails to supply the required return result.
 * @property {number}  INTERNAL_ERROR          - Something bad happened.
 * @property {number}  PROTOCOL_ERROR          - The protocol layer failed to serialize or deserialize data.
 * @property {number}  INVALID_TRANSFORM       - Unused.
 * @property {number}  INVALID_PROTOCOL        - The protocol (or version) is not supported.
 * @property {number}  UNSUPPORTED_CLIENT_TYPE - Unused.
 */
Thrift.TApplicationExceptionType = {
    'UNKNOWN' : 0,
    'UNKNOWN_METHOD' : 1,
    'INVALID_MESSAGE_TYPE' : 2,
    'WRONG_METHOD_NAME' : 3,
    'BAD_SEQUENCE_ID' : 4,
    'MISSING_RESULT' : 5,
    'INTERNAL_ERROR' : 6,
    'PROTOCOL_ERROR' : 7,
    'INVALID_TRANSFORM' : 8,
    'INVALID_PROTOCOL' : 9,
    'UNSUPPORTED_CLIENT_TYPE' : 10
};

/**
 * Initializes a Thrift TApplicationException instance.
 * @constructor
 * @augments Thrift.TException
 * @param {string} message - The TApplicationException message (distinct from the Error message).
 * @param {Thrift.TApplicationExceptionType} [code] - The TApplicationExceptionType code.
 * @classdesc TApplicationException is the exception class used to propagate exceptions from an RPC server back to a calling client.
*/
Thrift.TApplicationException = function(message, code) {
    this.message = message;
    this.code = typeof code === "number" ? code : 0;
};
Thrift.inherits(Thrift.TApplicationException, Thrift.TException, 'TApplicationException');

/**
 * Read a TApplicationException from the supplied protocol.
 * @param {object} input - The input protocol to read from.
 */
Thrift.TApplicationException.prototype.read = function(input) {
    while (1) {
        var ret = input.readFieldBegin();

        if (ret.ftype == Thrift.Type.STOP) {
            break;
        }

        var fid = ret.fid;

        switch (fid) {
            case 1:
                if (ret.ftype == Thrift.Type.STRING) {
                    ret = input.readString();
                    this.message = ret.value;
                } else {
                    ret = input.skip(ret.ftype);
                }
                break;
            case 2:
                if (ret.ftype == Thrift.Type.I32) {
                    ret = input.readI32();
                    this.code = ret.value;
                } else {
                    ret = input.skip(ret.ftype);
                }
                break;
           default:
                ret = input.skip(ret.ftype);
                break;
        }

        input.readFieldEnd();
    }

    input.readStructEnd();
};

/**
 * Wite a TApplicationException to the supplied protocol.
 * @param {object} output - The output protocol to write to.
 */
Thrift.TApplicationException.prototype.write = function(output) {
    output.writeStructBegin('TApplicationException');

    if (this.message) {
        output.writeFieldBegin('message', Thrift.Type.STRING, 1);
        output.writeString(this.getMessage());
        output.writeFieldEnd();
    }

    if (this.code) {
        output.writeFieldBegin('type', Thrift.Type.I32, 2);
        output.writeI32(this.code);
        output.writeFieldEnd();
    }

    output.writeFieldStop();
    output.writeStructEnd();
};

/**
 * Returns the application exception code set on the exception.
 * @readonly
 * @returns {Thrift.TApplicationExceptionType} exception code
 */
Thrift.TApplicationException.prototype.getCode = function() {
    return this.code;
};

/**
 * Constructor Function for the XHR transport.
 * If you do not specify a url then you must handle XHR operations on
 * your own. This type can also be constructed using the Transport alias
 * for backward compatibility.
 * @constructor
 * @param {string} [url] - The URL to connect to.
 * @classdesc The Apache Thrift Transport layer performs byte level I/O 
 * between RPC clients and servers. The JavaScript TXHRTransport object 
 * uses Http[s]/XHR. Target servers must implement the http[s] transport
 * (see: node.js example server_http.js).
 * @example
 *     var transport = new Thrift.TXHRTransport("http://localhost:8585");
 */
Thrift.Transport = Thrift.TXHRTransport = function(url, options) {
    this.url = url;
    this.wpos = 0;
    this.rpos = 0;
    this.useCORS = (options && options.useCORS);
    this.send_buf = '';
    this.recv_buf = '';
};

Thrift.TXHRTransport.prototype = {
    /**
     * Gets the browser specific XmlHttpRequest Object.
     * @returns {object} the browser XHR interface object
     */
    getXmlHttpRequestObject: function() {
        try { return new XMLHttpRequest(); } catch (e1) { }
        try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch (e2) { }
        try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch (e3) { }

        throw "Your browser doesn't support XHR.";
    },

    /**
     * Sends the current XRH request if the transport was created with a URL 
     * and the async parameter is false. If the transport was not created with
     * a URL, or the async parameter is True and no callback is provided, or 
     * the URL is an empty string, the current send buffer is returned.
     * @param {object} async - If true the current send buffer is returned.
     * @param {object} callback - Optional async completion callback 
     * @returns {undefined|string} Nothing or the current send buffer.
     * @throws {string} If XHR fails.
     */
    flush: function(async, callback) {
        var self = this;
        if ((async && !callback) || this.url === undefined || this.url === '') {
            return this.send_buf;
        }

        var xreq = this.getXmlHttpRequestObject();

        if (xreq.overrideMimeType) {
            xreq.overrideMimeType('application/json');
        }

        if (callback) {
            //Ignore XHR callbacks until the data arrives, then call the
            //  client's callback
            xreq.onreadystatechange = 
              (function() {
                var clientCallback = callback;    
                return function() {
                  if (this.readyState == 4 && this.status == 200) {
                    self.setRecvBuffer(this.responseText);
                    clientCallback();
                  }
                };
              }());
        }

        xreq.open('POST', this.url, !!async);
        xreq.send(this.send_buf);
        if (async && callback) {
            return;
        }

        if (xreq.readyState != 4) {
            throw 'encountered an unknown ajax ready state: ' + xreq.readyState;
        }

        if (xreq.status != 200) {
            throw 'encountered a unknown request status: ' + xreq.status;
        }

        this.recv_buf = xreq.responseText;
        this.recv_buf_sz = this.recv_buf.length;
        this.wpos = this.recv_buf.length;
        this.rpos = 0;
    },

    /**
     * Creates a jQuery XHR object to be used for a Thrift server call.
     * @param {object} client - The Thrift Service client object generated by the IDL compiler.
     * @param {object} postData - The message to send to the server.
     * @param {function} args - The original call arguments with the success call back at the end.
     * @param {function} recv_method - The Thrift Service Client receive method for the call.
     * @returns {object} A new jQuery XHR object.
     * @throws {string} If the jQuery version is prior to 1.5 or if jQuery is not found.
     */
    jqRequest: function(client, postData, args, recv_method) {
        if (typeof jQuery === 'undefined' ||
            typeof jQuery.Deferred === 'undefined') {
            throw 'Thrift.js requires jQuery 1.5+ to use asynchronous requests';
        }

        var thriftTransport = this;

        var jqXHR = jQuery.ajax({
            url: this.url,
            data: postData,
            type: 'POST',
            cache: false,
            contentType: 'application/json',
            dataType: 'text thrift',
            converters: {
                'text thrift' : function(responseData) {
                    thriftTransport.setRecvBuffer(responseData);
                    var value = recv_method.call(client);
                    return value;
                }
            },
            context: client,
            success: jQuery.makeArray(args).pop()
        });

        return jqXHR;
    },

    /**
     * Sets the buffer to provide the protocol when deserializing.
     * @param {string} buf - The buffer to supply the protocol.
     */
    setRecvBuffer: function(buf) {
        this.recv_buf = buf;
        this.recv_buf_sz = this.recv_buf.length;
        this.wpos = this.recv_buf.length;
        this.rpos = 0;
    },

    /**
     * Returns true if the transport is open, XHR always returns true.
     * @readonly
     * @returns {boolean} Always True.
     */    
    isOpen: function() {
        return true;
    },

    /**
     * Opens the transport connection, with XHR this is a nop.
     */    
    open: function() {},

    /**
     * Closes the transport connection, with XHR this is a nop.
     */    
    close: function() {},

    /**
     * Returns the specified number of characters from the response
     * buffer.
     * @param {number} len - The number of characters to return.
     * @returns {string} Characters sent by the server.
     */
    read: function(len) {
        var avail = this.wpos - this.rpos;

        if (avail === 0) {
            return '';
        }

        var give = len;

        if (avail < len) {
            give = avail;
        }

        var ret = this.read_buf.substr(this.rpos, give);
        this.rpos += give;

        //clear buf when complete?
        return ret;
    },

    /**
     * Returns the entire response buffer.
     * @returns {string} Characters sent by the server.
     */
    readAll: function() {
        return this.recv_buf;
    },

    /**
     * Sets the send buffer to buf.
     * @param {string} buf - The buffer to send.
     */    
    write: function(buf) {
        this.send_buf = buf;
    },

    /**
     * Returns the send buffer.
     * @readonly
     * @returns {string} The send buffer.
     */ 
    getSendBuffer: function() {
        return this.send_buf;
    }

};


/**
 * Constructor Function for the WebSocket transport.
 * @constructor
 * @param {string} [url] - The URL to connect to.
 * @classdesc The Apache Thrift Transport layer performs byte level I/O 
 * between RPC clients and servers. The JavaScript TWebSocketTransport object 
 * uses the WebSocket protocol. Target servers must implement WebSocket.
 * (see: node.js example server_http.js).
 * @example
 *   var transport = new Thrift.TWebSocketTransport("http://localhost:8585");
 */
Thrift.TWebSocketTransport = function(url) {
    this.__reset(url);
};

Thrift.TWebSocketTransport.prototype = {
    __reset: function(url) {
      this.url = url;             //Where to connect
      this.socket = null;         //The web socket
      this.callbacks = [];        //Pending callbacks
      this.send_pending = [];     //Buffers/Callback pairs waiting to be sent
      this.send_buf = '';         //Outbound data, immutable until sent
      this.recv_buf = '';         //Inbound data
      this.rb_wpos = 0;           //Network write position in receive buffer
      this.rb_rpos = 0;           //Client read position in receive buffer
    },

    /**
     * Sends the current WS request and registers callback. The async 
     * parameter is ignored (WS flush is always async) and the callback 
     * function parameter is required.
     * @param {object} async - Ignored.
     * @param {object} callback - The client completion callback.
     * @returns {undefined|string} Nothing (undefined) 
     */
    flush: function(async, callback) {
      var self = this;
      if (this.isOpen()) {
        //Send data and register a callback to invoke the client callback
        this.socket.send(this.send_buf); 
        this.callbacks.push((function() {
          var clientCallback = callback;    
          return function(msg) {
            self.setRecvBuffer(msg);
            clientCallback();
          };
        }()));
      } else {
        //Queue the send to go out __onOpen
        this.send_pending.push({
          buf: this.send_buf,
          cb:  callback
        });
      }
    },

    __onOpen: function() { 
       var self = this;
       if (this.send_pending.length > 0) {
          //If the user made calls before the connection was fully 
          //open, send them now
          this.send_pending.forEach(function(elem) {
             this.socket.send(elem.buf);
             this.callbacks.push((function() {
               var clientCallback = elem.cb;    
               return function(msg) {
                  self.setRecvBuffer(msg);
                  clientCallback();
               };
             }()));
          });
          this.send_pending = [];
       }
    },
    
    __onClose: function(evt) { 
      this.__reset(this.url);
    },
     
    __onMessage: function(evt) {
      if (this.callbacks.length) {
        this.callbacks.shift()(evt.data);
      }
    },
     
    __onError: function(evt) { 
      console.log("Thrift WebSocket Error: " + evt.toString());
      this.socket.close();
    },

    /**
     * Sets the buffer to use when receiving server responses.
     * @param {string} buf - The buffer to receive server responses.
     */
    setRecvBuffer: function(buf) {
        this.recv_buf = buf;
        this.recv_buf_sz = this.recv_buf.length;
        this.wpos = this.recv_buf.length;
        this.rpos = 0;
    },

    /**
     * Returns true if the transport is open
     * @readonly
     * @returns {boolean} 
     */    
    isOpen: function() {
        return this.socket && this.socket.readyState == this.socket.OPEN;
    },

    /**
     * Opens the transport connection
     */    
    open: function() {
      //If OPEN/CONNECTING/CLOSING ignore additional opens
      if (this.socket && this.socket.readyState != this.socket.CLOSED) {
        return;
      }
      //If there is no socket or the socket is closed:
      this.socket = new WebSocket(this.url);
      this.socket.onopen = this.__onOpen.bind(this); 
      this.socket.onmessage = this.__onMessage.bind(this); 
      this.socket.onerror = this.__onError.bind(this); 
      this.socket.onclose = this.__onClose.bind(this); 
    },

    /**
     * Closes the transport connection
     */    
    close: function() {
      this.socket.close();
    },

    /**
     * Returns the specified number of characters from the response
     * buffer.
     * @param {number} len - The number of characters to return.
     * @returns {string} Characters sent by the server.
     */
    read: function(len) {
        var avail = this.wpos - this.rpos;

        if (avail === 0) {
            return '';
        }

        var give = len;

        if (avail < len) {
            give = avail;
        }

        var ret = this.read_buf.substr(this.rpos, give);
        this.rpos += give;

        //clear buf when complete?
        return ret;
    },

    /**
     * Returns the entire response buffer.
     * @returns {string} Characters sent by the server.
     */
    readAll: function() {
        return this.recv_buf;
    },

    /**
     * Sets the send buffer to buf.
     * @param {string} buf - The buffer to send.
     */    
    write: function(buf) {
        this.send_buf = buf;
    },

    /**
     * Returns the send buffer.
     * @readonly
     * @returns {string} The send buffer.
     */ 
    getSendBuffer: function() {
        return this.send_buf;
    }

};

/**
 * Initializes a Thrift JSON protocol instance.
 * @constructor
 * @param {Thrift.Transport} transport - The transport to serialize to/from.
 * @classdesc Apache Thrift Protocols perform serialization which enables cross 
 * language RPC. The Protocol type is the JavaScript browser implementation 
 * of the Apache Thrift TJSONProtocol.
 * @example
 *     var protocol  = new Thrift.Protocol(transport);
 */
Thrift.TJSONProtocol = Thrift.Protocol = function(transport) {
    this.transport = transport;
};

/**
 * Thrift IDL type Id to string mapping.
 * @readonly
 * @see {@link Thrift.Type}
 */
Thrift.Protocol.Type = {};
Thrift.Protocol.Type[Thrift.Type.BOOL] = '"tf"';
Thrift.Protocol.Type[Thrift.Type.BYTE] = '"i8"';
Thrift.Protocol.Type[Thrift.Type.I16] = '"i16"';
Thrift.Protocol.Type[Thrift.Type.I32] = '"i32"';
Thrift.Protocol.Type[Thrift.Type.I64] = '"i64"';
Thrift.Protocol.Type[Thrift.Type.DOUBLE] = '"dbl"';
Thrift.Protocol.Type[Thrift.Type.STRUCT] = '"rec"';
Thrift.Protocol.Type[Thrift.Type.STRING] = '"str"';
Thrift.Protocol.Type[Thrift.Type.MAP] = '"map"';
Thrift.Protocol.Type[Thrift.Type.LIST] = '"lst"';
Thrift.Protocol.Type[Thrift.Type.SET] = '"set"';

/**
 * Thrift IDL type string to Id mapping.
 * @readonly
 * @see {@link Thrift.Type}
 */
Thrift.Protocol.RType = {};
Thrift.Protocol.RType.tf = Thrift.Type.BOOL;
Thrift.Protocol.RType.i8 = Thrift.Type.BYTE;
Thrift.Protocol.RType.i16 = Thrift.Type.I16;
Thrift.Protocol.RType.i32 = Thrift.Type.I32;
Thrift.Protocol.RType.i64 = Thrift.Type.I64;
Thrift.Protocol.RType.dbl = Thrift.Type.DOUBLE;
Thrift.Protocol.RType.rec = Thrift.Type.STRUCT;
Thrift.Protocol.RType.str = Thrift.Type.STRING;
Thrift.Protocol.RType.map = Thrift.Type.MAP;
Thrift.Protocol.RType.lst = Thrift.Type.LIST;
Thrift.Protocol.RType.set = Thrift.Type.SET;

/**
 * The TJSONProtocol version number.
 * @readonly
 * @const {number} Version
 * @memberof Thrift.Protocol
 */
 Thrift.Protocol.Version = 1;

Thrift.Protocol.prototype = {
    /**
     * Returns the underlying transport.
     * @readonly
     * @returns {Thrift.Transport} The underlying transport.
     */ 
    getTransport: function() {
        return this.transport;
    },

    /**
     * Serializes the beginning of a Thrift RPC message.
     * @param {string} name - The service method to call.
     * @param {Thrift.MessageType} messageType - The type of method call.
     * @param {number} seqid - The sequence number of this call (always 0 in Apache Thrift).
     */
    writeMessageBegin: function(name, messageType, seqid) {
        this.tstack = [];
        this.tpos = [];

        this.tstack.push([Thrift.Protocol.Version, '"' +
            name + '"', messageType, seqid]);
    },

    /**
     * Serializes the end of a Thrift RPC message.
     */
    writeMessageEnd: function() {
        var obj = this.tstack.pop();

        this.wobj = this.tstack.pop();
        this.wobj.push(obj);

        this.wbuf = '[' + this.wobj.join(',') + ']';

        this.transport.write(this.wbuf);
     },


    /**
     * Serializes the beginning of a struct.
     * @param {string} name - The name of the struct.
     */
    writeStructBegin: function(name) {
        this.tpos.push(this.tstack.length);
        this.tstack.push({});
    },

    /**
     * Serializes the end of a struct.
     */
    writeStructEnd: function() {

        var p = this.tpos.pop();
        var struct = this.tstack[p];
        var str = '{';
        var first = true;
        for (var key in struct) {
            if (first) {
                first = false;
            } else {
                str += ',';
            }

            str += key + ':' + struct[key];
        }

        str += '}';
        this.tstack[p] = str;
    },

    /**
     * Serializes the beginning of a struct field.
     * @param {string} name - The name of the field.
     * @param {Thrift.Protocol.Type} fieldType - The data type of the field.
     * @param {number} fieldId - The field's unique identifier.
     */
    writeFieldBegin: function(name, fieldType, fieldId) {
        this.tpos.push(this.tstack.length);
        this.tstack.push({ 'fieldId': '"' +
            fieldId + '"', 'fieldType': Thrift.Protocol.Type[fieldType]
        });

    },

    /**
     * Serializes the end of a field.
     */
    writeFieldEnd: function() {
        var value = this.tstack.pop();
        var fieldInfo = this.tstack.pop();

        this.tstack[this.tstack.length - 1][fieldInfo.fieldId] = '{' +
            fieldInfo.fieldType + ':' + value + '}';
        this.tpos.pop();
    },

    /**
     * Serializes the end of the set of fields for a struct.
     */
    writeFieldStop: function() {
        //na
    },

    /**
     * Serializes the beginning of a map collection.
     * @param {Thrift.Type} keyType - The data type of the key.
     * @param {Thrift.Type} valType - The data type of the value.
     * @param {number} [size] - The number of elements in the map (ignored).
     */
    writeMapBegin: function(keyType, valType, size) {
        this.tpos.push(this.tstack.length);
        this.tstack.push([Thrift.Protocol.Type[keyType],
            Thrift.Protocol.Type[valType], 0]);
    },

    /**
     * Serializes the end of a map.
     */
    writeMapEnd: function() {
        var p = this.tpos.pop();

        if (p == this.tstack.length) {
            return;
        }

        if ((this.tstack.length - p - 1) % 2 !== 0) {
            this.tstack.push('');
        }

        var size = (this.tstack.length - p - 1) / 2;

        this.tstack[p][this.tstack[p].length - 1] = size;

        var map = '}';
        var first = true;
        while (this.tstack.length > p + 1) {
            var v = this.tstack.pop();
            var k = this.tstack.pop();
            if (first) {
                first = false;
            } else {
                map = ',' + map;
            }

            if (! isNaN(k)) { k = '"' + k + '"'; } //json "keys" need to be strings
            map = k + ':' + v + map;
        }
        map = '{' + map;

        this.tstack[p].push(map);
        this.tstack[p] = '[' + this.tstack[p].join(',') + ']';
    },

    /**
     * Serializes the beginning of a list collection.
     * @param {Thrift.Type} elemType - The data type of the elements.
     * @param {number} size - The number of elements in the list.
     */
    writeListBegin: function(elemType, size) {
        this.tpos.push(this.tstack.length);
        this.tstack.push([Thrift.Protocol.Type[elemType], size]);
    },

    /**
     * Serializes the end of a list.
     */
    writeListEnd: function() {
        var p = this.tpos.pop();

        while (this.tstack.length > p + 1) {
            var tmpVal = this.tstack[p + 1];
            this.tstack.splice(p + 1, 1);
            this.tstack[p].push(tmpVal);
        }

        this.tstack[p] = '[' + this.tstack[p].join(',') + ']';
    },

    /**
     * Serializes the beginning of a set collection.
     * @param {Thrift.Type} elemType - The data type of the elements.
     * @param {number} size - The number of elements in the list.
     */
    writeSetBegin: function(elemType, size) {
        this.tpos.push(this.tstack.length);
        this.tstack.push([Thrift.Protocol.Type[elemType], size]);
    },

    /**
     * Serializes the end of a set.
     */
    writeSetEnd: function() {
        var p = this.tpos.pop();

        while (this.tstack.length > p + 1) {
            var tmpVal = this.tstack[p + 1];
            this.tstack.splice(p + 1, 1);
            this.tstack[p].push(tmpVal);
        }

        this.tstack[p] = '[' + this.tstack[p].join(',') + ']';
    },

    /** Serializes a boolean */
    writeBool: function(value) {
        this.tstack.push(value ? 1 : 0);
    },

    /** Serializes a number */
    writeByte: function(i8) {
        this.tstack.push(i8);
    },

    /** Serializes a number */
    writeI16: function(i16) {
        this.tstack.push(i16);
    },

    /** Serializes a number */
    writeI32: function(i32) {
        this.tstack.push(i32);
    },

    /** Serializes a number */
    writeI64: function(i64) {
        this.tstack.push(i64);
    },

    /** Serializes a number */
    writeDouble: function(dbl) {
        this.tstack.push(dbl);
    },

    /** Serializes a string */
    writeString: function(str) {
        // We do not encode uri components for wire transfer:
        if (str === null) {
            this.tstack.push(null);
        } else {
            // concat may be slower than building a byte buffer
            var escapedString = '';
            for (var i = 0; i < str.length; i++) {
                var ch = str.charAt(i);      // a single double quote: "
                if (ch === '\"') {
                    escapedString += '\\\"'; // write out as: \"
                } else if (ch === '\\') {    // a single backslash
                    escapedString += '\\\\'; // write out as double backslash 
                } else if (ch === '\b') {    // a single backspace: invisible
                    escapedString += '\\b';  // write out as: \b"
                } else if (ch === '\f') {    // a single formfeed: invisible
                    escapedString += '\\f';  // write out as: \f"
                } else if (ch === '\n') {    // a single newline: invisible
                    escapedString += '\\n';  // write out as: \n"
                } else if (ch === '\r') {    // a single return: invisible
                    escapedString += '\\r';  // write out as: \r"
                } else if (ch === '\t') {    // a single tab: invisible
                    escapedString += '\\t';  // write out as: \t"
                } else {
                    escapedString += ch;     // Else it need not be escaped
                }
            }
            this.tstack.push('"' + escapedString + '"');
        }
    },

    /** Serializes a string */
    writeBinary: function(str) {
        this.writeString(str);
    },

    /**
       @class
       @name AnonReadMessageBeginReturn
       @property {string} fname - The name of the service method.
       @property {Thrift.MessageType} mtype - The type of message call.
       @property {number} rseqid - The sequence number of the message (0 in Thrift RPC).
     */
    /** 
     * Deserializes the beginning of a message. 
     * @returns {AnonReadMessageBeginReturn}
     */
    readMessageBegin: function() {
        this.rstack = [];
        this.rpos = [];

        if (typeof JSON !== 'undefined' && typeof JSON.parse === 'function') {
            this.robj = JSON.parse(this.transport.readAll());
        } else if (typeof jQuery !== 'undefined') {
            this.robj = jQuery.parseJSON(this.transport.readAll());
        } else {
            this.robj = eval(this.transport.readAll());
        }

        var r = {};
        var version = this.robj.shift();

        if (version != Thrift.Protocol.Version) {
            throw 'Wrong thrift protocol version: ' + version;
        }

        r.fname = this.robj.shift();
        r.mtype = this.robj.shift();
        r.rseqid = this.robj.shift();


        //get to the main obj
        this.rstack.push(this.robj.shift());

        return r;
    },

    /** Deserializes the end of a message. */
    readMessageEnd: function() {
    },

    /** 
     * Deserializes the beginning of a struct. 
     * @param {string} [name] - The name of the struct (ignored)
     * @returns {object} - An object with an empty string fname property
     */    
    readStructBegin: function(name) {
        var r = {};
        r.fname = '';

        //incase this is an array of structs
        if (this.rstack[this.rstack.length - 1] instanceof Array) {
            this.rstack.push(this.rstack[this.rstack.length - 1].shift());
        }

        return r;
    },

    /** Deserializes the end of a struct. */
    readStructEnd: function() {
        if (this.rstack[this.rstack.length - 2] instanceof Array) {
            this.rstack.pop();
        }
    },

    /**
       @class
       @name AnonReadFieldBeginReturn
       @property {string} fname - The name of the field (always '').
       @property {Thrift.Type} ftype - The data type of the field.
       @property {number} fid - The unique identifier of the field.
     */
    /** 
     * Deserializes the beginning of a field. 
     * @returns {AnonReadFieldBeginReturn}
     */
    readFieldBegin: function() {
        var r = {};

        var fid = -1;
        var ftype = Thrift.Type.STOP;

        //get a fieldId
        for (var f in (this.rstack[this.rstack.length - 1])) {
            if (f === null) {
              continue;
            }

            fid = parseInt(f, 10);
            this.rpos.push(this.rstack.length);

            var field = this.rstack[this.rstack.length - 1][fid];

            //remove so we don't see it again
            delete this.rstack[this.rstack.length - 1][fid];

            this.rstack.push(field);

            break;
        }

        if (fid != -1) {

            //should only be 1 of these but this is the only
            //way to match a key
            for (var i in (this.rstack[this.rstack.length - 1])) {
                if (Thrift.Protocol.RType[i] === null) {
                    continue;
                }

                ftype = Thrift.Protocol.RType[i];
                this.rstack[this.rstack.length - 1] =
                    this.rstack[this.rstack.length - 1][i];
            }
        }

        r.fname = '';
        r.ftype = ftype;
        r.fid = fid;

        return r;
    },

    /** Deserializes the end of a field. */
    readFieldEnd: function() {
        var pos = this.rpos.pop();

        //get back to the right place in the stack
        while (this.rstack.length > pos) {
            this.rstack.pop();
        }

    },

    /**
       @class
       @name AnonReadMapBeginReturn
       @property {Thrift.Type} ktype - The data type of the key.
       @property {Thrift.Type} vtype - The data type of the value.
       @property {number} size - The number of elements in the map.
     */
    /** 
     * Deserializes the beginning of a map. 
     * @returns {AnonReadMapBeginReturn}
     */
    readMapBegin: function() {
        var map = this.rstack.pop();
        var first = map.shift();
        if (first instanceof Array) {
          this.rstack.push(map);
          map = first;
          first = map.shift();
        }

        var r = {};
        r.ktype = Thrift.Protocol.RType[first];
        r.vtype = Thrift.Protocol.RType[map.shift()];
        r.size = map.shift();


        this.rpos.push(this.rstack.length);
        this.rstack.push(map.shift());

        return r;
    },

    /** Deserializes the end of a map. */
    readMapEnd: function() {
        this.readFieldEnd();
    },

    /**
       @class
       @name AnonReadColBeginReturn
       @property {Thrift.Type} etype - The data type of the element.
       @property {number} size - The number of elements in the collection.
     */
    /** 
     * Deserializes the beginning of a list. 
     * @returns {AnonReadColBeginReturn}
     */
    readListBegin: function() {
        var list = this.rstack[this.rstack.length - 1];

        var r = {};
        r.etype = Thrift.Protocol.RType[list.shift()];
        r.size = list.shift();

        this.rpos.push(this.rstack.length);
        this.rstack.push(list);

        return r;
    },

    /** Deserializes the end of a list. */
    readListEnd: function() {
        this.readFieldEnd();
    },

    /** 
     * Deserializes the beginning of a set. 
     * @returns {AnonReadColBeginReturn}
     */
    readSetBegin: function(elemType, size) {
        return this.readListBegin(elemType, size);
    },

    /** Deserializes the end of a set. */
    readSetEnd: function() {
        return this.readListEnd();
    },

    /** Returns an object with a value property set to 
     *  False unless the next number in the protocol buffer 
     *  is 1, in which case teh value property is True */
    readBool: function() {
        var r = this.readI32();

        if (r !== null && r.value == '1') {
            r.value = true;
        } else {
            r.value = false;
        }

        return r;
    },

    /** Returns the an object with a value property set to the 
        next value found in the protocol buffer */
    readByte: function() {
        return this.readI32();
    },

    /** Returns the an object with a value property set to the 
        next value found in the protocol buffer */
    readI16: function() {
        return this.readI32();
    },

    /** Returns the an object with a value property set to the 
        next value found in the protocol buffer */
    readI32: function(f) {
        if (f === undefined) {
            f = this.rstack[this.rstack.length - 1];
        }

        var r = {};

        if (f instanceof Array) {
            if (f.length === 0) {
                r.value = undefined;
            } else {
                r.value = f.shift();
            }
        } else if (f instanceof Object) {
           for (var i in f) {
                if (i === null) {
                  continue;
                }
                this.rstack.push(f[i]);
                delete f[i];

                r.value = i;
                break;
           }
        } else {
            r.value = f;
            this.rstack.pop();
        }

        return r;
    },

    /** Returns the an object with a value property set to the 
        next value found in the protocol buffer */
    readI64: function() {
        return this.readI32();
    },

    /** Returns the an object with a value property set to the 
        next value found in the protocol buffer */
    readDouble: function() {
        return this.readI32();
    },

    /** Returns the an object with a value property set to the 
        next value found in the protocol buffer */
    readString: function() {
        var r = this.readI32();
        return r;
    },

    /** Returns the an object with a value property set to the 
        next value found in the protocol buffer */
    readBinary: function() {
        return this.readString();
    },

    /** 
     * Method to arbitrarily skip over data */
    skip: function(type) {
        var ret, i;
        switch (type) {
            case Thrift.Type.STOP:
                return null;

            case Thrift.Type.BOOL:
                return this.readBool();

            case Thrift.Type.BYTE:
                return this.readByte();

            case Thrift.Type.I16:
                return this.readI16();

            case Thrift.Type.I32:
                return this.readI32();

            case Thrift.Type.I64:
                return this.readI64();

            case Thrift.Type.DOUBLE:
                return this.readDouble();

            case Thrift.Type.STRING:
                return this.readString();

            case Thrift.Type.STRUCT:
                this.readStructBegin();
                while (true) {
                    ret = this.readFieldBegin();
                    if (ret.ftype == Thrift.Type.STOP) {
                        break;
                    }
                    this.skip(ret.ftype);
                    this.readFieldEnd();
                }
                this.readStructEnd();
                return null;

            case Thrift.Type.MAP:
                ret = this.readMapBegin();
                for (i = 0; i < ret.size; i++) {
                    if (i > 0) {
                        if (this.rstack.length > this.rpos[this.rpos.length - 1] + 1) {
                            this.rstack.pop();
                        }
                    }
                    this.skip(ret.ktype);
                    this.skip(ret.vtype);
                }
                this.readMapEnd();
                return null;

            case Thrift.Type.SET:
                ret = this.readSetBegin();
                for (i = 0; i < ret.size; i++) {
                    this.skip(ret.etype);
                }
                this.readSetEnd();
                return null;

            case Thrift.Type.LIST:
                ret = this.readListBegin();
                for (i = 0; i < ret.size; i++) {
                    this.skip(ret.etype);
                }
                this.readListEnd();
                return null;
        }
    }
};


/**
 * Initializes a MutilplexProtocol Implementation as a Wrapper for Thrift.Protocol
 * @constructor
 */
Thrift.MultiplexProtocol = function (srvName, trans, strictRead, strictWrite) {
    Thrift.Protocol.call(this, trans, strictRead, strictWrite);
    this.serviceName = srvName;
};
Thrift.inherits(Thrift.MultiplexProtocol, Thrift.Protocol, 'multiplexProtocol');

/** Override writeMessageBegin method of prototype*/
Thrift.MultiplexProtocol.prototype.writeMessageBegin = function (name, type, seqid) {

    if (type === Thrift.MessageType.CALL || type === Thrift.MessageType.ONEWAY) {
        Thrift.Protocol.prototype.writeMessageBegin.call(this, this.serviceName + ":" + name, type, seqid);
    } else {
        Thrift.Protocol.prototype.writeMessageBegin.call(this, name, type, seqid);
    }
};

Thrift.Multiplexer = function () {
    this.seqid = 0;
};

/** Instantiates a multiplexed client for a specific service
 * @constructor
 * @param {String} serviceName - The transport to serialize to/from.
 * @param {Thrift.ServiceClient} SCl - The Service Client Class
 * @param {Thrift.Transport} transport - Thrift.Transport instance which provides remote host:port
 * @example
 *    var mp = new Thrift.Multiplexer();
 *    var transport = new Thrift.Transport("http://localhost:9090/foo.thrift");
 *    var protocol = new Thrift.Protocol(transport);
 *    var client = mp.createClient('AuthService', AuthServiceClient, transport);
*/
Thrift.Multiplexer.prototype.createClient = function (serviceName, SCl, transport) {
    if (SCl.Client) {
        SCl = SCl.Client;
    }
    var self = this;
    SCl.prototype.new_seqid = function () {
        self.seqid += 1;
        return self.seqid;
    };
    var client = new SCl(new Thrift.MultiplexProtocol(serviceName, transport));

    return client;
};



//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


DgDagStateT = {
  'DgDagStateUnknown' : 0,
  'DgDagStateCreated' : 1,
  'DgDagStateQueued' : 2,
  'DgDagStateProcessing' : 3,
  'DgDagStateCleaned' : 4,
  'DgDagStateReady' : 5,
  'DgDagStateDropped' : 6,
  'DgDagStateError' : 7
};
DgDagStateTStr = {0 : 'Unknown state',
1 : 'Created',
2 : 'Queued',
3 : 'Processing',
4 : 'Cleaned',
5 : 'Ready',
6 : 'Dropped',
7 : 'Error'
};
//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


XcalarApiNamedInputT = function(args) {
  this.isTable = null;
  this.name = null;
  this.xid = null;
  if (args) {
    if (args.isTable !== undefined) {
      this.isTable = args.isTable;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.xid !== undefined) {
      this.xid = args.xid;
    }
  }
};
XcalarApiNamedInputT.prototype = {};
XcalarApiNamedInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.isTable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.xid = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiNamedInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiNamedInputT');
  if (this.isTable !== null && this.isTable !== undefined) {
    output.writeFieldBegin('isTable', Thrift.Type.BOOL, 1);
    output.writeBool(this.isTable);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.xid !== null && this.xid !== undefined) {
    output.writeFieldBegin('xid', Thrift.Type.I64, 3);
    output.writeI64(this.xid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiXidInvalidT = 0;
//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


DfFieldTypeT = {
  'DfUnknown' : 0,
  'DfString' : 1,
  'DfInt32' : 2,
  'DfUInt32' : 3,
  'DfInt64' : 4,
  'DfUInt64' : 5,
  'DfFloat32' : 6,
  'DfFloat64' : 7,
  'DfBoolean' : 8,
  'DfTimespec' : 9,
  'DfBlob' : 10,
  'DfNull' : 11,
  'DfMixed' : 12,
  'DfFatptr' : 13,
  'DfScalarPtr' : 14,
  'DfScalarObj' : 15,
  'DfOpRowMetaPtr' : 16
};
DfFormatTypeT = {
  'DfFormatUnknown' : 0,
  'DfFormatJson' : 1,
  'DfFormatRandom' : 2,
  'DfFormatCsv' : 3,
  'DfFormatSql' : 4,
  'DfFormatMysql' : 5,
  'DfFormatInternal' : 6
};
DfFieldTypeTStr = {0 : 'DfUnknown',
1 : 'DfString',
2 : 'DfInt32',
3 : 'DfUInt32',
4 : 'DfInt64',
5 : 'DfUInt64',
6 : 'DfFloat32',
7 : 'DfFloat64',
8 : 'DfBoolean',
9 : 'DfTimespec',
10 : 'DfBlob',
11 : 'DfNull',
12 : 'DfMixed',
13 : 'DfFatptr',
14 : 'DfScalarPtr',
15 : 'DfScalarObj',
16 : 'DfOpRowMetaPtr'
};
DfFormatTypeTStr = {0 : 'unknown',
1 : 'json',
2 : 'random',
3 : 'csv',
4 : 'sql',
5 : 'mysql',
6 : 'internal'
};
//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


ExTargetTypeT = {
  'ExTargetUnknownType' : 0,
  'ExTargetODBCType' : 1,
  'ExTargetSFType' : 2,
  'ExTargetUDFType' : 3
};
ExExportCreateRuleT = {
  'ExExportUnknownRule' : 0,
  'ExExportCreateOnly' : 1,
  'ExExportCreateOrAppend' : 2,
  'ExExportAppendOnly' : 3,
  'ExExportDeleteAndReplace' : 4
};
ExSFFileSplitTypeT = {
  'ExSFFileSplitUnknownType' : 0,
  'ExSFFileSplitNone' : 1,
  'ExSFFileSplitForceSingle' : 2,
  'ExSFFileSplitSize' : 3
};
ExSFHeaderTypeT = {
  'ExSFHeaderUnknownType' : 0,
  'ExSFHeaderEveryFile' : 1,
  'ExSFHeaderSeparateFile' : 2,
  'ExSFHeaderNone' : 3
};
ExTargetTypeTStr = {0 : 'unknown',
1 : 'odbc',
2 : 'file',
3 : 'udf'
};
ExExportCreateRuleTStr = {0 : 'unknown',
1 : 'createOnly',
2 : 'createOrAppend',
3 : 'appendOnly',
4 : 'deleteAndReplace'
};
ExSFFileSplitTypeTStr = {0 : 'unknown',
1 : 'none',
2 : 'single',
3 : 'size'
};
ExSFHeaderTypeTStr = {0 : 'unknown',
1 : 'every',
2 : 'separate',
3 : 'none'
};
//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


ExAddTargetODBCInputT = function(args) {
  this.connectionString = null;
  if (args) {
    if (args.connectionString !== undefined) {
      this.connectionString = args.connectionString;
    }
  }
};
ExAddTargetODBCInputT.prototype = {};
ExAddTargetODBCInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.connectionString = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExAddTargetODBCInputT.prototype.write = function(output) {
  output.writeStructBegin('ExAddTargetODBCInputT');
  if (this.connectionString !== null && this.connectionString !== undefined) {
    output.writeFieldBegin('connectionString', Thrift.Type.STRING, 1);
    output.writeString(this.connectionString);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExAddTargetSFInputT = function(args) {
  this.url = null;
  if (args) {
    if (args.url !== undefined) {
      this.url = args.url;
    }
  }
};
ExAddTargetSFInputT.prototype = {};
ExAddTargetSFInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExAddTargetSFInputT.prototype.write = function(output) {
  output.writeStructBegin('ExAddTargetSFInputT');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExAddTargetUDFInputT = function(args) {
  this.url = null;
  if (args) {
    if (args.url !== undefined) {
      this.url = args.url;
    }
  }
};
ExAddTargetUDFInputT.prototype = {};
ExAddTargetUDFInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExAddTargetUDFInputT.prototype.write = function(output) {
  output.writeStructBegin('ExAddTargetUDFInputT');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExAddTargetSpecificInputT = function(args) {
  this.odbcInput = null;
  this.sfInput = null;
  this.udfInput = null;
  if (args) {
    if (args.odbcInput !== undefined) {
      this.odbcInput = args.odbcInput;
    }
    if (args.sfInput !== undefined) {
      this.sfInput = args.sfInput;
    }
    if (args.udfInput !== undefined) {
      this.udfInput = args.udfInput;
    }
  }
};
ExAddTargetSpecificInputT.prototype = {};
ExAddTargetSpecificInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.odbcInput = new ExAddTargetODBCInputT();
        this.odbcInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sfInput = new ExAddTargetSFInputT();
        this.sfInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.udfInput = new ExAddTargetUDFInputT();
        this.udfInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExAddTargetSpecificInputT.prototype.write = function(output) {
  output.writeStructBegin('ExAddTargetSpecificInputT');
  if (this.odbcInput !== null && this.odbcInput !== undefined) {
    output.writeFieldBegin('odbcInput', Thrift.Type.STRUCT, 1);
    this.odbcInput.write(output);
    output.writeFieldEnd();
  }
  if (this.sfInput !== null && this.sfInput !== undefined) {
    output.writeFieldBegin('sfInput', Thrift.Type.STRUCT, 2);
    this.sfInput.write(output);
    output.writeFieldEnd();
  }
  if (this.udfInput !== null && this.udfInput !== undefined) {
    output.writeFieldBegin('udfInput', Thrift.Type.STRUCT, 3);
    this.udfInput.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExExportTargetHdrT = function(args) {
  this.type = null;
  this.name = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
ExExportTargetHdrT.prototype = {};
ExExportTargetHdrT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExExportTargetHdrT.prototype.write = function(output) {
  output.writeStructBegin('ExExportTargetHdrT');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExExportTargetT = function(args) {
  this.hdr = null;
  this.specificInput = null;
  if (args) {
    if (args.hdr !== undefined) {
      this.hdr = args.hdr;
    }
    if (args.specificInput !== undefined) {
      this.specificInput = args.specificInput;
    }
  }
};
ExExportTargetT.prototype = {};
ExExportTargetT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.hdr = new ExExportTargetHdrT();
        this.hdr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.specificInput = new ExAddTargetSpecificInputT();
        this.specificInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExExportTargetT.prototype.write = function(output) {
  output.writeStructBegin('ExExportTargetT');
  if (this.hdr !== null && this.hdr !== undefined) {
    output.writeFieldBegin('hdr', Thrift.Type.STRUCT, 1);
    this.hdr.write(output);
    output.writeFieldEnd();
  }
  if (this.specificInput !== null && this.specificInput !== undefined) {
    output.writeFieldBegin('specificInput', Thrift.Type.STRUCT, 2);
    this.specificInput.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExInitExportODBCInputT = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
ExInitExportODBCInputT.prototype = {};
ExInitExportODBCInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExInitExportODBCInputT.prototype.write = function(output) {
  output.writeStructBegin('ExInitExportODBCInputT');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExInitExportCSVArgsT = function(args) {
  this.fieldDelim = null;
  this.recordDelim = null;
  this.quoteDelim = null;
  if (args) {
    if (args.fieldDelim !== undefined) {
      this.fieldDelim = args.fieldDelim;
    }
    if (args.recordDelim !== undefined) {
      this.recordDelim = args.recordDelim;
    }
    if (args.quoteDelim !== undefined) {
      this.quoteDelim = args.quoteDelim;
    }
  }
};
ExInitExportCSVArgsT.prototype = {};
ExInitExportCSVArgsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fieldDelim = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.recordDelim = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.quoteDelim = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExInitExportCSVArgsT.prototype.write = function(output) {
  output.writeStructBegin('ExInitExportCSVArgsT');
  if (this.fieldDelim !== null && this.fieldDelim !== undefined) {
    output.writeFieldBegin('fieldDelim', Thrift.Type.STRING, 1);
    output.writeString(this.fieldDelim);
    output.writeFieldEnd();
  }
  if (this.recordDelim !== null && this.recordDelim !== undefined) {
    output.writeFieldBegin('recordDelim', Thrift.Type.STRING, 2);
    output.writeString(this.recordDelim);
    output.writeFieldEnd();
  }
  if (this.quoteDelim !== null && this.quoteDelim !== undefined) {
    output.writeFieldBegin('quoteDelim', Thrift.Type.STRING, 3);
    output.writeString(this.quoteDelim);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExInitExportJSONArgsT = function(args) {
  this.array = null;
  if (args) {
    if (args.array !== undefined) {
      this.array = args.array;
    }
  }
};
ExInitExportJSONArgsT.prototype = {};
ExInitExportJSONArgsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.array = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExInitExportJSONArgsT.prototype.write = function(output) {
  output.writeStructBegin('ExInitExportJSONArgsT');
  if (this.array !== null && this.array !== undefined) {
    output.writeFieldBegin('array', Thrift.Type.BOOL, 1);
    output.writeBool(this.array);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExInitExportSQLArgsT = function(args) {
  this.tableName = null;
  this.dropTable = null;
  this.createTable = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.dropTable !== undefined) {
      this.dropTable = args.dropTable;
    }
    if (args.createTable !== undefined) {
      this.createTable = args.createTable;
    }
  }
};
ExInitExportSQLArgsT.prototype = {};
ExInitExportSQLArgsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.dropTable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.createTable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExInitExportSQLArgsT.prototype.write = function(output) {
  output.writeStructBegin('ExInitExportSQLArgsT');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.dropTable !== null && this.dropTable !== undefined) {
    output.writeFieldBegin('dropTable', Thrift.Type.BOOL, 2);
    output.writeBool(this.dropTable);
    output.writeFieldEnd();
  }
  if (this.createTable !== null && this.createTable !== undefined) {
    output.writeFieldBegin('createTable', Thrift.Type.BOOL, 3);
    output.writeBool(this.createTable);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExInitExportFormatSpecificArgsT = function(args) {
  this.csv = null;
  this.json = null;
  this.sql = null;
  if (args) {
    if (args.csv !== undefined) {
      this.csv = args.csv;
    }
    if (args.json !== undefined) {
      this.json = args.json;
    }
    if (args.sql !== undefined) {
      this.sql = args.sql;
    }
  }
};
ExInitExportFormatSpecificArgsT.prototype = {};
ExInitExportFormatSpecificArgsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.csv = new ExInitExportCSVArgsT();
        this.csv.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.json = new ExInitExportJSONArgsT();
        this.json.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.sql = new ExInitExportSQLArgsT();
        this.sql.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExInitExportFormatSpecificArgsT.prototype.write = function(output) {
  output.writeStructBegin('ExInitExportFormatSpecificArgsT');
  if (this.csv !== null && this.csv !== undefined) {
    output.writeFieldBegin('csv', Thrift.Type.STRUCT, 1);
    this.csv.write(output);
    output.writeFieldEnd();
  }
  if (this.json !== null && this.json !== undefined) {
    output.writeFieldBegin('json', Thrift.Type.STRUCT, 2);
    this.json.write(output);
    output.writeFieldEnd();
  }
  if (this.sql !== null && this.sql !== undefined) {
    output.writeFieldBegin('sql', Thrift.Type.STRUCT, 3);
    this.sql.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExSFFileSplitSpecificT = function(args) {
  this.numFiles = null;
  this.maxSize = null;
  if (args) {
    if (args.numFiles !== undefined) {
      this.numFiles = args.numFiles;
    }
    if (args.maxSize !== undefined) {
      this.maxSize = args.maxSize;
    }
  }
};
ExSFFileSplitSpecificT.prototype = {};
ExSFFileSplitSpecificT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numFiles = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.maxSize = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExSFFileSplitSpecificT.prototype.write = function(output) {
  output.writeStructBegin('ExSFFileSplitSpecificT');
  if (this.numFiles !== null && this.numFiles !== undefined) {
    output.writeFieldBegin('numFiles', Thrift.Type.I64, 1);
    output.writeI64(this.numFiles);
    output.writeFieldEnd();
  }
  if (this.maxSize !== null && this.maxSize !== undefined) {
    output.writeFieldBegin('maxSize', Thrift.Type.I64, 2);
    output.writeI64(this.maxSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExSFFileSplitRuleT = function(args) {
  this.type = null;
  this.spec = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.spec !== undefined) {
      this.spec = args.spec;
    }
  }
};
ExSFFileSplitRuleT.prototype = {};
ExSFFileSplitRuleT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.spec = new ExSFFileSplitSpecificT();
        this.spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExSFFileSplitRuleT.prototype.write = function(output) {
  output.writeStructBegin('ExSFFileSplitRuleT');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.spec !== null && this.spec !== undefined) {
    output.writeFieldBegin('spec', Thrift.Type.STRUCT, 2);
    this.spec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExInitExportSFInputT = function(args) {
  this.fileName = null;
  this.format = null;
  this.splitRule = null;
  this.headerType = null;
  this.formatArgs = null;
  if (args) {
    if (args.fileName !== undefined) {
      this.fileName = args.fileName;
    }
    if (args.format !== undefined) {
      this.format = args.format;
    }
    if (args.splitRule !== undefined) {
      this.splitRule = args.splitRule;
    }
    if (args.headerType !== undefined) {
      this.headerType = args.headerType;
    }
    if (args.formatArgs !== undefined) {
      this.formatArgs = args.formatArgs;
    }
  }
};
ExInitExportSFInputT.prototype = {};
ExInitExportSFInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fileName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.format = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.splitRule = new ExSFFileSplitRuleT();
        this.splitRule.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.headerType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.formatArgs = new ExInitExportFormatSpecificArgsT();
        this.formatArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExInitExportSFInputT.prototype.write = function(output) {
  output.writeStructBegin('ExInitExportSFInputT');
  if (this.fileName !== null && this.fileName !== undefined) {
    output.writeFieldBegin('fileName', Thrift.Type.STRING, 1);
    output.writeString(this.fileName);
    output.writeFieldEnd();
  }
  if (this.format !== null && this.format !== undefined) {
    output.writeFieldBegin('format', Thrift.Type.I32, 2);
    output.writeI32(this.format);
    output.writeFieldEnd();
  }
  if (this.splitRule !== null && this.splitRule !== undefined) {
    output.writeFieldBegin('splitRule', Thrift.Type.STRUCT, 3);
    this.splitRule.write(output);
    output.writeFieldEnd();
  }
  if (this.headerType !== null && this.headerType !== undefined) {
    output.writeFieldBegin('headerType', Thrift.Type.I32, 4);
    output.writeI32(this.headerType);
    output.writeFieldEnd();
  }
  if (this.formatArgs !== null && this.formatArgs !== undefined) {
    output.writeFieldBegin('formatArgs', Thrift.Type.STRUCT, 5);
    this.formatArgs.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExInitExportUDFInputT = function(args) {
  this.fileName = null;
  this.udfName = null;
  this.format = null;
  this.headerType = null;
  this.formatArgs = null;
  if (args) {
    if (args.fileName !== undefined) {
      this.fileName = args.fileName;
    }
    if (args.udfName !== undefined) {
      this.udfName = args.udfName;
    }
    if (args.format !== undefined) {
      this.format = args.format;
    }
    if (args.headerType !== undefined) {
      this.headerType = args.headerType;
    }
    if (args.formatArgs !== undefined) {
      this.formatArgs = args.formatArgs;
    }
  }
};
ExInitExportUDFInputT.prototype = {};
ExInitExportUDFInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fileName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.udfName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.format = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.headerType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.formatArgs = new ExInitExportFormatSpecificArgsT();
        this.formatArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExInitExportUDFInputT.prototype.write = function(output) {
  output.writeStructBegin('ExInitExportUDFInputT');
  if (this.fileName !== null && this.fileName !== undefined) {
    output.writeFieldBegin('fileName', Thrift.Type.STRING, 1);
    output.writeString(this.fileName);
    output.writeFieldEnd();
  }
  if (this.udfName !== null && this.udfName !== undefined) {
    output.writeFieldBegin('udfName', Thrift.Type.STRING, 2);
    output.writeString(this.udfName);
    output.writeFieldEnd();
  }
  if (this.format !== null && this.format !== undefined) {
    output.writeFieldBegin('format', Thrift.Type.I32, 3);
    output.writeI32(this.format);
    output.writeFieldEnd();
  }
  if (this.headerType !== null && this.headerType !== undefined) {
    output.writeFieldBegin('headerType', Thrift.Type.I32, 4);
    output.writeI32(this.headerType);
    output.writeFieldEnd();
  }
  if (this.formatArgs !== null && this.formatArgs !== undefined) {
    output.writeFieldBegin('formatArgs', Thrift.Type.STRUCT, 5);
    this.formatArgs.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExInitExportSpecificInputT = function(args) {
  this.odbcInput = null;
  this.sfInput = null;
  this.udfInput = null;
  if (args) {
    if (args.odbcInput !== undefined) {
      this.odbcInput = args.odbcInput;
    }
    if (args.sfInput !== undefined) {
      this.sfInput = args.sfInput;
    }
    if (args.udfInput !== undefined) {
      this.udfInput = args.udfInput;
    }
  }
};
ExInitExportSpecificInputT.prototype = {};
ExInitExportSpecificInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.odbcInput = new ExInitExportODBCInputT();
        this.odbcInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sfInput = new ExInitExportSFInputT();
        this.sfInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.udfInput = new ExInitExportUDFInputT();
        this.udfInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExInitExportSpecificInputT.prototype.write = function(output) {
  output.writeStructBegin('ExInitExportSpecificInputT');
  if (this.odbcInput !== null && this.odbcInput !== undefined) {
    output.writeFieldBegin('odbcInput', Thrift.Type.STRUCT, 1);
    this.odbcInput.write(output);
    output.writeFieldEnd();
  }
  if (this.sfInput !== null && this.sfInput !== undefined) {
    output.writeFieldBegin('sfInput', Thrift.Type.STRUCT, 2);
    this.sfInput.write(output);
    output.writeFieldEnd();
  }
  if (this.udfInput !== null && this.udfInput !== undefined) {
    output.writeFieldBegin('udfInput', Thrift.Type.STRUCT, 3);
    this.udfInput.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExColumnNameT = function(args) {
  this.name = null;
  this.headerAlias = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.headerAlias !== undefined) {
      this.headerAlias = args.headerAlias;
    }
  }
};
ExColumnNameT.prototype = {};
ExColumnNameT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.headerAlias = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExColumnNameT.prototype.write = function(output) {
  output.writeStructBegin('ExColumnNameT');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.headerAlias !== null && this.headerAlias !== undefined) {
    output.writeFieldBegin('headerAlias', Thrift.Type.STRING, 2);
    output.writeString(this.headerAlias);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExExportMetaT = function(args) {
  this.target = null;
  this.specificInput = null;
  this.createRule = null;
  this.sorted = null;
  this.numColumns = null;
  this.columns = null;
  if (args) {
    if (args.target !== undefined) {
      this.target = args.target;
    }
    if (args.specificInput !== undefined) {
      this.specificInput = args.specificInput;
    }
    if (args.createRule !== undefined) {
      this.createRule = args.createRule;
    }
    if (args.sorted !== undefined) {
      this.sorted = args.sorted;
    }
    if (args.numColumns !== undefined) {
      this.numColumns = args.numColumns;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
  }
};
ExExportMetaT.prototype = {};
ExExportMetaT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.target = new ExExportTargetHdrT();
        this.target.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.specificInput = new ExInitExportSpecificInputT();
        this.specificInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.createRule = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.sorted = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.numColumns = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.columns = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ExColumnNameT();
          elem6.read(input);
          this.columns.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExExportMetaT.prototype.write = function(output) {
  output.writeStructBegin('ExExportMetaT');
  if (this.target !== null && this.target !== undefined) {
    output.writeFieldBegin('target', Thrift.Type.STRUCT, 1);
    this.target.write(output);
    output.writeFieldEnd();
  }
  if (this.specificInput !== null && this.specificInput !== undefined) {
    output.writeFieldBegin('specificInput', Thrift.Type.STRUCT, 2);
    this.specificInput.write(output);
    output.writeFieldEnd();
  }
  if (this.createRule !== null && this.createRule !== undefined) {
    output.writeFieldBegin('createRule', Thrift.Type.I32, 3);
    output.writeI32(this.createRule);
    output.writeFieldEnd();
  }
  if (this.sorted !== null && this.sorted !== undefined) {
    output.writeFieldBegin('sorted', Thrift.Type.BOOL, 4);
    output.writeBool(this.sorted);
    output.writeFieldEnd();
  }
  if (this.numColumns !== null && this.numColumns !== undefined) {
    output.writeFieldBegin('numColumns', Thrift.Type.I32, 5);
    output.writeI32(this.numColumns);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter7 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter7))
      {
        iter7 = this.columns[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


FunctionCategoryT = {
  'FunctionCategoryArithmetic' : 0,
  'FunctionCategoryBitwise' : 1,
  'FunctionCategoryTrigonometry' : 2,
  'FunctionCategoryConversion' : 3,
  'FunctionCategoryString' : 4,
  'FunctionCategoryMisc' : 5,
  'FunctionCategoryCondition' : 6,
  'FunctionCategoryAggregate' : 7,
  'FunctionCategoryCast' : 8,
  'FunctionCategoryUdf' : 9
};
FunctionCategoryTStr = {0 : 'Arithmetic functions',
1 : 'Bitwise functions',
2 : 'Trigonometric functions',
3 : 'Conversion functions',
4 : 'String functions',
5 : 'Miscellaneous functions',
6 : 'Conditional functions',
7 : 'Aggregate functions',
8 : 'Type-casting functions',
9 : 'User-defined functions'
};
//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


JoinOperatorT = {
  'InnerJoin' : 0,
  'LeftOuterJoin' : 1,
  'RightOuterJoin' : 2,
  'FullOuterJoin' : 3
};
JoinOperatorTStr = {0 : 'innerJoin',
1 : 'leftJoin',
2 : 'rightJoin',
3 : 'fullOuterJoin'
};
//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


XcalarApiKeyScopeT = {
  'XcalarApiKeyScopeGlobal' : 1,
  'XcalarApiKeyScopeUser' : 2,
  'XcalarApiKeyScopeSession' : 3
};
XcalarApiException = function(args) {
  this.status = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
  }
};
Thrift.inherits(XcalarApiException, Thrift.TException);
XcalarApiException.prototype.name = 'XcalarApiException';
XcalarApiException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiException.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiException');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarEvalArgDescT = function(args) {
  this.argDesc = null;
  this.typesAccepted = null;
  this.isSingletonValue = null;
  if (args) {
    if (args.argDesc !== undefined) {
      this.argDesc = args.argDesc;
    }
    if (args.typesAccepted !== undefined) {
      this.typesAccepted = args.typesAccepted;
    }
    if (args.isSingletonValue !== undefined) {
      this.isSingletonValue = args.isSingletonValue;
    }
  }
};
XcalarEvalArgDescT.prototype = {};
XcalarEvalArgDescT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.argDesc = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.typesAccepted = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isSingletonValue = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarEvalArgDescT.prototype.write = function(output) {
  output.writeStructBegin('XcalarEvalArgDescT');
  if (this.argDesc !== null && this.argDesc !== undefined) {
    output.writeFieldBegin('argDesc', Thrift.Type.STRING, 1);
    output.writeString(this.argDesc);
    output.writeFieldEnd();
  }
  if (this.typesAccepted !== null && this.typesAccepted !== undefined) {
    output.writeFieldBegin('typesAccepted', Thrift.Type.I64, 2);
    output.writeI64(this.typesAccepted);
    output.writeFieldEnd();
  }
  if (this.isSingletonValue !== null && this.isSingletonValue !== undefined) {
    output.writeFieldBegin('isSingletonValue', Thrift.Type.BOOL, 3);
    output.writeBool(this.isSingletonValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarEvalFnDescT = function(args) {
  this.fnName = null;
  this.fnDesc = null;
  this.category = null;
  this.numArgs = null;
  this.argDescs = null;
  this.outputType = null;
  if (args) {
    if (args.fnName !== undefined) {
      this.fnName = args.fnName;
    }
    if (args.fnDesc !== undefined) {
      this.fnDesc = args.fnDesc;
    }
    if (args.category !== undefined) {
      this.category = args.category;
    }
    if (args.numArgs !== undefined) {
      this.numArgs = args.numArgs;
    }
    if (args.argDescs !== undefined) {
      this.argDescs = args.argDescs;
    }
    if (args.outputType !== undefined) {
      this.outputType = args.outputType;
    }
  }
};
XcalarEvalFnDescT.prototype = {};
XcalarEvalFnDescT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fnName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fnDesc = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.category = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.numArgs = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.argDescs = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new XcalarEvalArgDescT();
          elem6.read(input);
          this.argDescs.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.outputType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarEvalFnDescT.prototype.write = function(output) {
  output.writeStructBegin('XcalarEvalFnDescT');
  if (this.fnName !== null && this.fnName !== undefined) {
    output.writeFieldBegin('fnName', Thrift.Type.STRING, 1);
    output.writeString(this.fnName);
    output.writeFieldEnd();
  }
  if (this.fnDesc !== null && this.fnDesc !== undefined) {
    output.writeFieldBegin('fnDesc', Thrift.Type.STRING, 2);
    output.writeString(this.fnDesc);
    output.writeFieldEnd();
  }
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.I32, 3);
    output.writeI32(this.category);
    output.writeFieldEnd();
  }
  if (this.numArgs !== null && this.numArgs !== undefined) {
    output.writeFieldBegin('numArgs', Thrift.Type.I32, 4);
    output.writeI32(this.numArgs);
    output.writeFieldEnd();
  }
  if (this.argDescs !== null && this.argDescs !== undefined) {
    output.writeFieldBegin('argDescs', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.argDescs.length);
    for (var iter7 in this.argDescs)
    {
      if (this.argDescs.hasOwnProperty(iter7))
      {
        iter7 = this.argDescs[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.outputType !== null && this.outputType !== undefined) {
    output.writeFieldBegin('outputType', Thrift.Type.I32, 6);
    output.writeI32(this.outputType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DfFieldAttrHeaderT = function(args) {
  this.name = null;
  this.type = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
DfFieldAttrHeaderT.prototype = {};
DfFieldAttrHeaderT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DfFieldAttrHeaderT.prototype.write = function(output) {
  output.writeStructBegin('DfFieldAttrHeaderT');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiFileAttrT = function(args) {
  this.isDirectory = null;
  this.size = null;
  this.mtime = null;
  if (args) {
    if (args.isDirectory !== undefined) {
      this.isDirectory = args.isDirectory;
    }
    if (args.size !== undefined) {
      this.size = args.size;
    }
    if (args.mtime !== undefined) {
      this.mtime = args.mtime;
    }
  }
};
XcalarApiFileAttrT.prototype = {};
XcalarApiFileAttrT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.isDirectory = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.size = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.mtime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiFileAttrT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiFileAttrT');
  if (this.isDirectory !== null && this.isDirectory !== undefined) {
    output.writeFieldBegin('isDirectory', Thrift.Type.BOOL, 1);
    output.writeBool(this.isDirectory);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I64, 2);
    output.writeI64(this.size);
    output.writeFieldEnd();
  }
  if (this.mtime !== null && this.mtime !== undefined) {
    output.writeFieldBegin('mtime', Thrift.Type.I64, 3);
    output.writeI64(this.mtime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiFileT = function(args) {
  this.attr = null;
  this.name = null;
  if (args) {
    if (args.attr !== undefined) {
      this.attr = args.attr;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
XcalarApiFileT.prototype = {};
XcalarApiFileT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.attr = new XcalarApiFileAttrT();
        this.attr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiFileT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiFileT');
  if (this.attr !== null && this.attr !== undefined) {
    output.writeFieldBegin('attr', Thrift.Type.STRUCT, 1);
    this.attr.write(output);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListFilesInputT = function(args) {
  this.url = null;
  this.recursive = null;
  this.fileNamePattern = null;
  if (args) {
    if (args.url !== undefined) {
      this.url = args.url;
    }
    if (args.recursive !== undefined) {
      this.recursive = args.recursive;
    }
    if (args.fileNamePattern !== undefined) {
      this.fileNamePattern = args.fileNamePattern;
    }
  }
};
XcalarApiListFilesInputT.prototype = {};
XcalarApiListFilesInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.recursive = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.fileNamePattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListFilesInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListFilesInputT');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.recursive !== null && this.recursive !== undefined) {
    output.writeFieldBegin('recursive', Thrift.Type.BOOL, 2);
    output.writeBool(this.recursive);
    output.writeFieldEnd();
  }
  if (this.fileNamePattern !== null && this.fileNamePattern !== undefined) {
    output.writeFieldBegin('fileNamePattern', Thrift.Type.STRING, 3);
    output.writeString(this.fileNamePattern);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListFilesOutputT = function(args) {
  this.numFiles = null;
  this.files = null;
  if (args) {
    if (args.numFiles !== undefined) {
      this.numFiles = args.numFiles;
    }
    if (args.files !== undefined) {
      this.files = args.files;
    }
  }
};
XcalarApiListFilesOutputT.prototype = {};
XcalarApiListFilesOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numFiles = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.files = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new XcalarApiFileT();
          elem14.read(input);
          this.files.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListFilesOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListFilesOutputT');
  if (this.numFiles !== null && this.numFiles !== undefined) {
    output.writeFieldBegin('numFiles', Thrift.Type.I64, 1);
    output.writeI64(this.numFiles);
    output.writeFieldEnd();
  }
  if (this.files !== null && this.files !== undefined) {
    output.writeFieldBegin('files', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.files.length);
    for (var iter15 in this.files)
    {
      if (this.files.hasOwnProperty(iter15))
      {
        iter15 = this.files[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListXdfsInputT = function(args) {
  this.fnNamePattern = null;
  this.categoryPattern = null;
  if (args) {
    if (args.fnNamePattern !== undefined) {
      this.fnNamePattern = args.fnNamePattern;
    }
    if (args.categoryPattern !== undefined) {
      this.categoryPattern = args.categoryPattern;
    }
  }
};
XcalarApiListXdfsInputT.prototype = {};
XcalarApiListXdfsInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fnNamePattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.categoryPattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListXdfsInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListXdfsInputT');
  if (this.fnNamePattern !== null && this.fnNamePattern !== undefined) {
    output.writeFieldBegin('fnNamePattern', Thrift.Type.STRING, 1);
    output.writeString(this.fnNamePattern);
    output.writeFieldEnd();
  }
  if (this.categoryPattern !== null && this.categoryPattern !== undefined) {
    output.writeFieldBegin('categoryPattern', Thrift.Type.STRING, 2);
    output.writeString(this.categoryPattern);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUdfErrorT = function(args) {
  this.message = null;
  this.traceback = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
    if (args.traceback !== undefined) {
      this.traceback = args.traceback;
    }
  }
};
XcalarApiUdfErrorT.prototype = {};
XcalarApiUdfErrorT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.traceback = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUdfErrorT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUdfErrorT');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.traceback !== null && this.traceback !== undefined) {
    output.writeFieldBegin('traceback', Thrift.Type.STRING, 2);
    output.writeString(this.traceback);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUdfAddUpdateOutputT = function(args) {
  this.status = null;
  this.moduleName = null;
  this.error = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.moduleName !== undefined) {
      this.moduleName = args.moduleName;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
XcalarApiUdfAddUpdateOutputT.prototype = {};
XcalarApiUdfAddUpdateOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.moduleName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new XcalarApiUdfErrorT();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUdfAddUpdateOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUdfAddUpdateOutputT');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.moduleName !== null && this.moduleName !== undefined) {
    output.writeFieldBegin('moduleName', Thrift.Type.STRING, 2);
    output.writeString(this.moduleName);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 3);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUdfGetInputT = function(args) {
  this.moduleName = null;
  if (args) {
    if (args.moduleName !== undefined) {
      this.moduleName = args.moduleName;
    }
  }
};
XcalarApiUdfGetInputT.prototype = {};
XcalarApiUdfGetInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.moduleName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUdfGetInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUdfGetInputT');
  if (this.moduleName !== null && this.moduleName !== undefined) {
    output.writeFieldBegin('moduleName', Thrift.Type.STRING, 1);
    output.writeString(this.moduleName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUdfDeleteInputT = function(args) {
  this.moduleName = null;
  if (args) {
    if (args.moduleName !== undefined) {
      this.moduleName = args.moduleName;
    }
  }
};
XcalarApiUdfDeleteInputT.prototype = {};
XcalarApiUdfDeleteInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.moduleName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUdfDeleteInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUdfDeleteInputT');
  if (this.moduleName !== null && this.moduleName !== undefined) {
    output.writeFieldBegin('moduleName', Thrift.Type.STRING, 1);
    output.writeString(this.moduleName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListXdfsOutputT = function(args) {
  this.numXdfs = null;
  this.fnDescs = null;
  if (args) {
    if (args.numXdfs !== undefined) {
      this.numXdfs = args.numXdfs;
    }
    if (args.fnDescs !== undefined) {
      this.fnDescs = args.fnDescs;
    }
  }
};
XcalarApiListXdfsOutputT.prototype = {};
XcalarApiListXdfsOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numXdfs = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.fnDescs = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new XcalarEvalFnDescT();
          elem22.read(input);
          this.fnDescs.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListXdfsOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListXdfsOutputT');
  if (this.numXdfs !== null && this.numXdfs !== undefined) {
    output.writeFieldBegin('numXdfs', Thrift.Type.I32, 1);
    output.writeI32(this.numXdfs);
    output.writeFieldEnd();
  }
  if (this.fnDescs !== null && this.fnDescs !== undefined) {
    output.writeFieldBegin('fnDescs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.fnDescs.length);
    for (var iter23 in this.fnDescs)
    {
      if (this.fnDescs.hasOwnProperty(iter23))
      {
        iter23 = this.fnDescs[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiKeyValuePairT = function(args) {
  this.key = null;
  this.value = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
XcalarApiKeyValuePairT.prototype = {};
XcalarApiKeyValuePairT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiKeyValuePairT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiKeyValuePairT');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiKeyAddOrReplaceInputT = function(args) {
  this.scope = null;
  this.persist = null;
  this.kvPair = null;
  if (args) {
    if (args.scope !== undefined) {
      this.scope = args.scope;
    }
    if (args.persist !== undefined) {
      this.persist = args.persist;
    }
    if (args.kvPair !== undefined) {
      this.kvPair = args.kvPair;
    }
  }
};
XcalarApiKeyAddOrReplaceInputT.prototype = {};
XcalarApiKeyAddOrReplaceInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.scope = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.persist = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.kvPair = new XcalarApiKeyValuePairT();
        this.kvPair.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiKeyAddOrReplaceInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiKeyAddOrReplaceInputT');
  if (this.scope !== null && this.scope !== undefined) {
    output.writeFieldBegin('scope', Thrift.Type.I32, 1);
    output.writeI32(this.scope);
    output.writeFieldEnd();
  }
  if (this.persist !== null && this.persist !== undefined) {
    output.writeFieldBegin('persist', Thrift.Type.BOOL, 2);
    output.writeBool(this.persist);
    output.writeFieldEnd();
  }
  if (this.kvPair !== null && this.kvPair !== undefined) {
    output.writeFieldBegin('kvPair', Thrift.Type.STRUCT, 3);
    this.kvPair.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiKeyAppendInputT = function(args) {
  this.scope = null;
  this.key = null;
  this.suffix = null;
  if (args) {
    if (args.scope !== undefined) {
      this.scope = args.scope;
    }
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.suffix !== undefined) {
      this.suffix = args.suffix;
    }
  }
};
XcalarApiKeyAppendInputT.prototype = {};
XcalarApiKeyAppendInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.scope = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.suffix = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiKeyAppendInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiKeyAppendInputT');
  if (this.scope !== null && this.scope !== undefined) {
    output.writeFieldBegin('scope', Thrift.Type.I32, 1);
    output.writeI32(this.scope);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.suffix !== null && this.suffix !== undefined) {
    output.writeFieldBegin('suffix', Thrift.Type.STRING, 3);
    output.writeString(this.suffix);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiKeySetIfEqualInputT = function(args) {
  this.scope = null;
  this.persist = null;
  this.countSecondaryPairs = null;
  this.keyCompare = null;
  this.valueCompare = null;
  this.valueReplace = null;
  this.keySecondary = null;
  this.valueSecondary = null;
  if (args) {
    if (args.scope !== undefined) {
      this.scope = args.scope;
    }
    if (args.persist !== undefined) {
      this.persist = args.persist;
    }
    if (args.countSecondaryPairs !== undefined) {
      this.countSecondaryPairs = args.countSecondaryPairs;
    }
    if (args.keyCompare !== undefined) {
      this.keyCompare = args.keyCompare;
    }
    if (args.valueCompare !== undefined) {
      this.valueCompare = args.valueCompare;
    }
    if (args.valueReplace !== undefined) {
      this.valueReplace = args.valueReplace;
    }
    if (args.keySecondary !== undefined) {
      this.keySecondary = args.keySecondary;
    }
    if (args.valueSecondary !== undefined) {
      this.valueSecondary = args.valueSecondary;
    }
  }
};
XcalarApiKeySetIfEqualInputT.prototype = {};
XcalarApiKeySetIfEqualInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.scope = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.persist = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.countSecondaryPairs = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.keyCompare = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.valueCompare = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.valueReplace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.keySecondary = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.valueSecondary = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiKeySetIfEqualInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiKeySetIfEqualInputT');
  if (this.scope !== null && this.scope !== undefined) {
    output.writeFieldBegin('scope', Thrift.Type.I32, 1);
    output.writeI32(this.scope);
    output.writeFieldEnd();
  }
  if (this.persist !== null && this.persist !== undefined) {
    output.writeFieldBegin('persist', Thrift.Type.BOOL, 2);
    output.writeBool(this.persist);
    output.writeFieldEnd();
  }
  if (this.countSecondaryPairs !== null && this.countSecondaryPairs !== undefined) {
    output.writeFieldBegin('countSecondaryPairs', Thrift.Type.I32, 3);
    output.writeI32(this.countSecondaryPairs);
    output.writeFieldEnd();
  }
  if (this.keyCompare !== null && this.keyCompare !== undefined) {
    output.writeFieldBegin('keyCompare', Thrift.Type.STRING, 4);
    output.writeString(this.keyCompare);
    output.writeFieldEnd();
  }
  if (this.valueCompare !== null && this.valueCompare !== undefined) {
    output.writeFieldBegin('valueCompare', Thrift.Type.STRING, 5);
    output.writeString(this.valueCompare);
    output.writeFieldEnd();
  }
  if (this.valueReplace !== null && this.valueReplace !== undefined) {
    output.writeFieldBegin('valueReplace', Thrift.Type.STRING, 6);
    output.writeString(this.valueReplace);
    output.writeFieldEnd();
  }
  if (this.keySecondary !== null && this.keySecondary !== undefined) {
    output.writeFieldBegin('keySecondary', Thrift.Type.STRING, 7);
    output.writeString(this.keySecondary);
    output.writeFieldEnd();
  }
  if (this.valueSecondary !== null && this.valueSecondary !== undefined) {
    output.writeFieldBegin('valueSecondary', Thrift.Type.STRING, 8);
    output.writeString(this.valueSecondary);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiKeyLookupInputT = function(args) {
  this.scope = null;
  this.key = null;
  if (args) {
    if (args.scope !== undefined) {
      this.scope = args.scope;
    }
    if (args.key !== undefined) {
      this.key = args.key;
    }
  }
};
XcalarApiKeyLookupInputT.prototype = {};
XcalarApiKeyLookupInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.scope = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiKeyLookupInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiKeyLookupInputT');
  if (this.scope !== null && this.scope !== undefined) {
    output.writeFieldBegin('scope', Thrift.Type.I32, 1);
    output.writeI32(this.scope);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiKeyLookupOutputT = function(args) {
  this.value = null;
  if (args) {
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
XcalarApiKeyLookupOutputT.prototype = {};
XcalarApiKeyLookupOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiKeyLookupOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiKeyLookupOutputT');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 1);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiKeyDeleteInputT = function(args) {
  this.scope = null;
  this.key = null;
  if (args) {
    if (args.scope !== undefined) {
      this.scope = args.scope;
    }
    if (args.key !== undefined) {
      this.key = args.key;
    }
  }
};
XcalarApiKeyDeleteInputT.prototype = {};
XcalarApiKeyDeleteInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.scope = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiKeyDeleteInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiKeyDeleteInputT');
  if (this.scope !== null && this.scope !== undefined) {
    output.writeFieldBegin('scope', Thrift.Type.I32, 1);
    output.writeI32(this.scope);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiTableT = function(args) {
  this.tableName = null;
  this.tableId = null;
  this.state = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.tableId !== undefined) {
      this.tableId = args.tableId;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
  }
};
XcalarApiTableT.prototype = {};
XcalarApiTableT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.tableId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiTableT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiTableT');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.tableId !== null && this.tableId !== undefined) {
    output.writeFieldBegin('tableId', Thrift.Type.I64, 2);
    output.writeI64(this.tableId);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 3);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDatasetT = function(args) {
  this.url = null;
  this.datasetId = null;
  this.formatType = null;
  this.name = null;
  this.loadIsComplete = null;
  this.refCount = null;
  if (args) {
    if (args.url !== undefined) {
      this.url = args.url;
    }
    if (args.datasetId !== undefined) {
      this.datasetId = args.datasetId;
    }
    if (args.formatType !== undefined) {
      this.formatType = args.formatType;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.loadIsComplete !== undefined) {
      this.loadIsComplete = args.loadIsComplete;
    }
    if (args.refCount !== undefined) {
      this.refCount = args.refCount;
    }
  }
};
XcalarApiDatasetT.prototype = {};
XcalarApiDatasetT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.datasetId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.formatType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.loadIsComplete = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.refCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDatasetT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDatasetT');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.datasetId !== null && this.datasetId !== undefined) {
    output.writeFieldBegin('datasetId', Thrift.Type.I64, 2);
    output.writeI64(this.datasetId);
    output.writeFieldEnd();
  }
  if (this.formatType !== null && this.formatType !== undefined) {
    output.writeFieldBegin('formatType', Thrift.Type.I32, 3);
    output.writeI32(this.formatType);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 4);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.loadIsComplete !== null && this.loadIsComplete !== undefined) {
    output.writeFieldBegin('loadIsComplete', Thrift.Type.BOOL, 5);
    output.writeBool(this.loadIsComplete);
    output.writeFieldEnd();
  }
  if (this.refCount !== null && this.refCount !== undefined) {
    output.writeFieldBegin('refCount', Thrift.Type.I32, 6);
    output.writeI32(this.refCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDfCsvLoadArgsT = function(args) {
  this.recordDelim = null;
  this.quoteDelim = null;
  this.linesToSkip = null;
  this.fieldDelim = null;
  this.isCRLF = null;
  this.hasHeader = null;
  if (args) {
    if (args.recordDelim !== undefined) {
      this.recordDelim = args.recordDelim;
    }
    if (args.quoteDelim !== undefined) {
      this.quoteDelim = args.quoteDelim;
    }
    if (args.linesToSkip !== undefined) {
      this.linesToSkip = args.linesToSkip;
    }
    if (args.fieldDelim !== undefined) {
      this.fieldDelim = args.fieldDelim;
    }
    if (args.isCRLF !== undefined) {
      this.isCRLF = args.isCRLF;
    }
    if (args.hasHeader !== undefined) {
      this.hasHeader = args.hasHeader;
    }
  }
};
XcalarApiDfCsvLoadArgsT.prototype = {};
XcalarApiDfCsvLoadArgsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.recordDelim = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.quoteDelim = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.linesToSkip = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.fieldDelim = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.isCRLF = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.hasHeader = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDfCsvLoadArgsT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDfCsvLoadArgsT');
  if (this.recordDelim !== null && this.recordDelim !== undefined) {
    output.writeFieldBegin('recordDelim', Thrift.Type.STRING, 1);
    output.writeString(this.recordDelim);
    output.writeFieldEnd();
  }
  if (this.quoteDelim !== null && this.quoteDelim !== undefined) {
    output.writeFieldBegin('quoteDelim', Thrift.Type.STRING, 2);
    output.writeString(this.quoteDelim);
    output.writeFieldEnd();
  }
  if (this.linesToSkip !== null && this.linesToSkip !== undefined) {
    output.writeFieldBegin('linesToSkip', Thrift.Type.I32, 3);
    output.writeI32(this.linesToSkip);
    output.writeFieldEnd();
  }
  if (this.fieldDelim !== null && this.fieldDelim !== undefined) {
    output.writeFieldBegin('fieldDelim', Thrift.Type.STRING, 4);
    output.writeString(this.fieldDelim);
    output.writeFieldEnd();
  }
  if (this.isCRLF !== null && this.isCRLF !== undefined) {
    output.writeFieldBegin('isCRLF', Thrift.Type.BOOL, 5);
    output.writeBool(this.isCRLF);
    output.writeFieldEnd();
  }
  if (this.hasHeader !== null && this.hasHeader !== undefined) {
    output.writeFieldBegin('hasHeader', Thrift.Type.BOOL, 6);
    output.writeBool(this.hasHeader);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUdfLoadArgsT = function(args) {
  this.fullyQualifiedFnName = null;
  if (args) {
    if (args.fullyQualifiedFnName !== undefined) {
      this.fullyQualifiedFnName = args.fullyQualifiedFnName;
    }
  }
};
XcalarApiUdfLoadArgsT.prototype = {};
XcalarApiUdfLoadArgsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fullyQualifiedFnName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUdfLoadArgsT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUdfLoadArgsT');
  if (this.fullyQualifiedFnName !== null && this.fullyQualifiedFnName !== undefined) {
    output.writeFieldBegin('fullyQualifiedFnName', Thrift.Type.STRING, 1);
    output.writeString(this.fullyQualifiedFnName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDfLoadArgsT = function(args) {
  this.csv = null;
  this.udfLoadArgs = null;
  this.recursive = null;
  this.fileNamePattern = null;
  this.fileListUdfName = null;
  this.udfRead = null;
  this.udfListGlobal = null;
  this.maxSize = null;
  if (args) {
    if (args.csv !== undefined) {
      this.csv = args.csv;
    }
    if (args.udfLoadArgs !== undefined) {
      this.udfLoadArgs = args.udfLoadArgs;
    }
    if (args.recursive !== undefined) {
      this.recursive = args.recursive;
    }
    if (args.fileNamePattern !== undefined) {
      this.fileNamePattern = args.fileNamePattern;
    }
    if (args.fileListUdfName !== undefined) {
      this.fileListUdfName = args.fileListUdfName;
    }
    if (args.udfRead !== undefined) {
      this.udfRead = args.udfRead;
    }
    if (args.udfListGlobal !== undefined) {
      this.udfListGlobal = args.udfListGlobal;
    }
    if (args.maxSize !== undefined) {
      this.maxSize = args.maxSize;
    }
  }
};
XcalarApiDfLoadArgsT.prototype = {};
XcalarApiDfLoadArgsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.csv = new XcalarApiDfCsvLoadArgsT();
        this.csv.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.udfLoadArgs = new XcalarApiUdfLoadArgsT();
        this.udfLoadArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.recursive = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.fileNamePattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.fileListUdfName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.udfRead = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.udfListGlobal = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.maxSize = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDfLoadArgsT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDfLoadArgsT');
  if (this.csv !== null && this.csv !== undefined) {
    output.writeFieldBegin('csv', Thrift.Type.STRUCT, 1);
    this.csv.write(output);
    output.writeFieldEnd();
  }
  if (this.udfLoadArgs !== null && this.udfLoadArgs !== undefined) {
    output.writeFieldBegin('udfLoadArgs', Thrift.Type.STRUCT, 2);
    this.udfLoadArgs.write(output);
    output.writeFieldEnd();
  }
  if (this.recursive !== null && this.recursive !== undefined) {
    output.writeFieldBegin('recursive', Thrift.Type.BOOL, 3);
    output.writeBool(this.recursive);
    output.writeFieldEnd();
  }
  if (this.fileNamePattern !== null && this.fileNamePattern !== undefined) {
    output.writeFieldBegin('fileNamePattern', Thrift.Type.STRING, 4);
    output.writeString(this.fileNamePattern);
    output.writeFieldEnd();
  }
  if (this.fileListUdfName !== null && this.fileListUdfName !== undefined) {
    output.writeFieldBegin('fileListUdfName', Thrift.Type.STRING, 5);
    output.writeString(this.fileListUdfName);
    output.writeFieldEnd();
  }
  if (this.udfRead !== null && this.udfRead !== undefined) {
    output.writeFieldBegin('udfRead', Thrift.Type.BOOL, 6);
    output.writeBool(this.udfRead);
    output.writeFieldEnd();
  }
  if (this.udfListGlobal !== null && this.udfListGlobal !== undefined) {
    output.writeFieldBegin('udfListGlobal', Thrift.Type.BOOL, 7);
    output.writeBool(this.udfListGlobal);
    output.writeFieldEnd();
  }
  if (this.maxSize !== null && this.maxSize !== undefined) {
    output.writeFieldBegin('maxSize', Thrift.Type.I64, 8);
    output.writeI64(this.maxSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListExportTargetsInputT = function(args) {
  this.targetTypePattern = null;
  this.targetNamePattern = null;
  if (args) {
    if (args.targetTypePattern !== undefined) {
      this.targetTypePattern = args.targetTypePattern;
    }
    if (args.targetNamePattern !== undefined) {
      this.targetNamePattern = args.targetNamePattern;
    }
  }
};
XcalarApiListExportTargetsInputT.prototype = {};
XcalarApiListExportTargetsInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.targetTypePattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.targetNamePattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListExportTargetsInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListExportTargetsInputT');
  if (this.targetTypePattern !== null && this.targetTypePattern !== undefined) {
    output.writeFieldBegin('targetTypePattern', Thrift.Type.STRING, 1);
    output.writeString(this.targetTypePattern);
    output.writeFieldEnd();
  }
  if (this.targetNamePattern !== null && this.targetNamePattern !== undefined) {
    output.writeFieldBegin('targetNamePattern', Thrift.Type.STRING, 2);
    output.writeString(this.targetNamePattern);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListExportTargetsOutputT = function(args) {
  this.numTargets = null;
  this.targets = null;
  if (args) {
    if (args.numTargets !== undefined) {
      this.numTargets = args.numTargets;
    }
    if (args.targets !== undefined) {
      this.targets = args.targets;
    }
  }
};
XcalarApiListExportTargetsOutputT.prototype = {};
XcalarApiListExportTargetsOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numTargets = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.targets = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ExExportTargetT();
          elem30.read(input);
          this.targets.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListExportTargetsOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListExportTargetsOutputT');
  if (this.numTargets !== null && this.numTargets !== undefined) {
    output.writeFieldBegin('numTargets', Thrift.Type.I64, 1);
    output.writeI64(this.numTargets);
    output.writeFieldEnd();
  }
  if (this.targets !== null && this.targets !== undefined) {
    output.writeFieldBegin('targets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.targets.length);
    for (var iter31 in this.targets)
    {
      if (this.targets.hasOwnProperty(iter31))
      {
        iter31 = this.targets[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiExportInputT = function(args) {
  this.srcTable = null;
  this.exportName = null;
  this.meta = null;
  if (args) {
    if (args.srcTable !== undefined) {
      this.srcTable = args.srcTable;
    }
    if (args.exportName !== undefined) {
      this.exportName = args.exportName;
    }
    if (args.meta !== undefined) {
      this.meta = args.meta;
    }
  }
};
XcalarApiExportInputT.prototype = {};
XcalarApiExportInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.srcTable = new XcalarApiTableT();
        this.srcTable.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.exportName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.meta = new ExExportMetaT();
        this.meta.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiExportInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiExportInputT');
  if (this.srcTable !== null && this.srcTable !== undefined) {
    output.writeFieldBegin('srcTable', Thrift.Type.STRUCT, 1);
    this.srcTable.write(output);
    output.writeFieldEnd();
  }
  if (this.exportName !== null && this.exportName !== undefined) {
    output.writeFieldBegin('exportName', Thrift.Type.STRING, 2);
    output.writeString(this.exportName);
    output.writeFieldEnd();
  }
  if (this.meta !== null && this.meta !== undefined) {
    output.writeFieldBegin('meta', Thrift.Type.STRUCT, 3);
    this.meta.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiPreviewInputT = function(args) {
  this.url = null;
  this.fileNamePattern = null;
  this.recursive = null;
  this.numBytesRequested = null;
  if (args) {
    if (args.url !== undefined) {
      this.url = args.url;
    }
    if (args.fileNamePattern !== undefined) {
      this.fileNamePattern = args.fileNamePattern;
    }
    if (args.recursive !== undefined) {
      this.recursive = args.recursive;
    }
    if (args.numBytesRequested !== undefined) {
      this.numBytesRequested = args.numBytesRequested;
    }
  }
};
XcalarApiPreviewInputT.prototype = {};
XcalarApiPreviewInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fileNamePattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.recursive = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.numBytesRequested = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiPreviewInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiPreviewInputT');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.fileNamePattern !== null && this.fileNamePattern !== undefined) {
    output.writeFieldBegin('fileNamePattern', Thrift.Type.STRING, 2);
    output.writeString(this.fileNamePattern);
    output.writeFieldEnd();
  }
  if (this.recursive !== null && this.recursive !== undefined) {
    output.writeFieldBegin('recursive', Thrift.Type.BOOL, 3);
    output.writeBool(this.recursive);
    output.writeFieldEnd();
  }
  if (this.numBytesRequested !== null && this.numBytesRequested !== undefined) {
    output.writeFieldBegin('numBytesRequested', Thrift.Type.I64, 4);
    output.writeI64(this.numBytesRequested);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiPreviewOutputT = function(args) {
  this.fileName = null;
  this.bufferLen = null;
  this.buffer = null;
  if (args) {
    if (args.fileName !== undefined) {
      this.fileName = args.fileName;
    }
    if (args.bufferLen !== undefined) {
      this.bufferLen = args.bufferLen;
    }
    if (args.buffer !== undefined) {
      this.buffer = args.buffer;
    }
  }
};
XcalarApiPreviewOutputT.prototype = {};
XcalarApiPreviewOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fileName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.bufferLen = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.buffer = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiPreviewOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiPreviewOutputT');
  if (this.fileName !== null && this.fileName !== undefined) {
    output.writeFieldBegin('fileName', Thrift.Type.STRING, 1);
    output.writeString(this.fileName);
    output.writeFieldEnd();
  }
  if (this.bufferLen !== null && this.bufferLen !== undefined) {
    output.writeFieldBegin('bufferLen', Thrift.Type.I64, 2);
    output.writeI64(this.bufferLen);
    output.writeFieldEnd();
  }
  if (this.buffer !== null && this.buffer !== undefined) {
    output.writeFieldBegin('buffer', Thrift.Type.STRING, 3);
    output.writeString(this.buffer);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiBulkLoadInputT = function(args) {
  this.dataset = null;
  this.loadArgs = null;
  this.dagNodeId = null;
  if (args) {
    if (args.dataset !== undefined) {
      this.dataset = args.dataset;
    }
    if (args.loadArgs !== undefined) {
      this.loadArgs = args.loadArgs;
    }
    if (args.dagNodeId !== undefined) {
      this.dagNodeId = args.dagNodeId;
    }
  }
};
XcalarApiBulkLoadInputT.prototype = {};
XcalarApiBulkLoadInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.dataset = new XcalarApiDatasetT();
        this.dataset.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.loadArgs = new XcalarApiDfLoadArgsT();
        this.loadArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.dagNodeId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiBulkLoadInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiBulkLoadInputT');
  if (this.dataset !== null && this.dataset !== undefined) {
    output.writeFieldBegin('dataset', Thrift.Type.STRUCT, 1);
    this.dataset.write(output);
    output.writeFieldEnd();
  }
  if (this.loadArgs !== null && this.loadArgs !== undefined) {
    output.writeFieldBegin('loadArgs', Thrift.Type.STRUCT, 2);
    this.loadArgs.write(output);
    output.writeFieldEnd();
  }
  if (this.dagNodeId !== null && this.dagNodeId !== undefined) {
    output.writeFieldBegin('dagNodeId', Thrift.Type.I64, 3);
    output.writeI64(this.dagNodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiIndexInputT = function(args) {
  this.dhtName = null;
  this.source = null;
  this.keyName = null;
  this.dstTable = null;
  this.ordering = null;
  this.fatptrPrefixName = null;
  if (args) {
    if (args.dhtName !== undefined) {
      this.dhtName = args.dhtName;
    }
    if (args.source !== undefined) {
      this.source = args.source;
    }
    if (args.keyName !== undefined) {
      this.keyName = args.keyName;
    }
    if (args.dstTable !== undefined) {
      this.dstTable = args.dstTable;
    }
    if (args.ordering !== undefined) {
      this.ordering = args.ordering;
    }
    if (args.fatptrPrefixName !== undefined) {
      this.fatptrPrefixName = args.fatptrPrefixName;
    }
  }
};
XcalarApiIndexInputT.prototype = {};
XcalarApiIndexInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dhtName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.source = new XcalarApiNamedInputT();
        this.source.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.keyName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.dstTable = new XcalarApiTableT();
        this.dstTable.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.ordering = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.fatptrPrefixName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiIndexInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiIndexInputT');
  if (this.dhtName !== null && this.dhtName !== undefined) {
    output.writeFieldBegin('dhtName', Thrift.Type.STRING, 1);
    output.writeString(this.dhtName);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRUCT, 2);
    this.source.write(output);
    output.writeFieldEnd();
  }
  if (this.keyName !== null && this.keyName !== undefined) {
    output.writeFieldBegin('keyName', Thrift.Type.STRING, 3);
    output.writeString(this.keyName);
    output.writeFieldEnd();
  }
  if (this.dstTable !== null && this.dstTable !== undefined) {
    output.writeFieldBegin('dstTable', Thrift.Type.STRUCT, 4);
    this.dstTable.write(output);
    output.writeFieldEnd();
  }
  if (this.ordering !== null && this.ordering !== undefined) {
    output.writeFieldBegin('ordering', Thrift.Type.I32, 5);
    output.writeI32(this.ordering);
    output.writeFieldEnd();
  }
  if (this.fatptrPrefixName !== null && this.fatptrPrefixName !== undefined) {
    output.writeFieldBegin('fatptrPrefixName', Thrift.Type.STRING, 6);
    output.writeString(this.fatptrPrefixName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiStatInputT = function(args) {
  this.nodeId = null;
  if (args) {
    if (args.nodeId !== undefined) {
      this.nodeId = args.nodeId;
    }
  }
};
XcalarApiStatInputT.prototype = {};
XcalarApiStatInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.nodeId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiStatInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiStatInputT');
  if (this.nodeId !== null && this.nodeId !== undefined) {
    output.writeFieldBegin('nodeId', Thrift.Type.I64, 1);
    output.writeI64(this.nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDagNameT = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
XcalarApiDagNameT.prototype = {};
XcalarApiDagNameT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDagNameT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDagNameT');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiRetinaDstT = function(args) {
  this.numColumns = null;
  this.target = null;
  this.columns = null;
  if (args) {
    if (args.numColumns !== undefined) {
      this.numColumns = args.numColumns;
    }
    if (args.target !== undefined) {
      this.target = args.target;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
  }
};
XcalarApiRetinaDstT.prototype = {};
XcalarApiRetinaDstT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numColumns = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.target = new XcalarApiNamedInputT();
        this.target.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.columns = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ExColumnNameT();
          elem38.read(input);
          this.columns.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiRetinaDstT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiRetinaDstT');
  if (this.numColumns !== null && this.numColumns !== undefined) {
    output.writeFieldBegin('numColumns', Thrift.Type.I32, 1);
    output.writeI32(this.numColumns);
    output.writeFieldEnd();
  }
  if (this.target !== null && this.target !== undefined) {
    output.writeFieldBegin('target', Thrift.Type.STRUCT, 2);
    this.target.write(output);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter39 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter39))
      {
        iter39 = this.columns[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiMakeRetinaInputT = function(args) {
  this.retinaName = null;
  this.numTables = null;
  this.tableArray = null;
  if (args) {
    if (args.retinaName !== undefined) {
      this.retinaName = args.retinaName;
    }
    if (args.numTables !== undefined) {
      this.numTables = args.numTables;
    }
    if (args.tableArray !== undefined) {
      this.tableArray = args.tableArray;
    }
  }
};
XcalarApiMakeRetinaInputT.prototype = {};
XcalarApiMakeRetinaInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.retinaName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numTables = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.tableArray = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new XcalarApiRetinaDstT();
          elem46.read(input);
          this.tableArray.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiMakeRetinaInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiMakeRetinaInputT');
  if (this.retinaName !== null && this.retinaName !== undefined) {
    output.writeFieldBegin('retinaName', Thrift.Type.STRING, 1);
    output.writeString(this.retinaName);
    output.writeFieldEnd();
  }
  if (this.numTables !== null && this.numTables !== undefined) {
    output.writeFieldBegin('numTables', Thrift.Type.I64, 2);
    output.writeI64(this.numTables);
    output.writeFieldEnd();
  }
  if (this.tableArray !== null && this.tableArray !== undefined) {
    output.writeFieldBegin('tableArray', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.tableArray.length);
    for (var iter47 in this.tableArray)
    {
      if (this.tableArray.hasOwnProperty(iter47))
      {
        iter47 = this.tableArray[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiProjectInputT = function(args) {
  this.numColumns = null;
  this.columnNames = null;
  this.srcTable = null;
  this.dstTable = null;
  if (args) {
    if (args.numColumns !== undefined) {
      this.numColumns = args.numColumns;
    }
    if (args.columnNames !== undefined) {
      this.columnNames = args.columnNames;
    }
    if (args.srcTable !== undefined) {
      this.srcTable = args.srcTable;
    }
    if (args.dstTable !== undefined) {
      this.dstTable = args.dstTable;
    }
  }
};
XcalarApiProjectInputT.prototype = {};
XcalarApiProjectInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numColumns = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.columnNames = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = input.readString().value;
          this.columnNames.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.srcTable = new XcalarApiTableT();
        this.srcTable.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.dstTable = new XcalarApiTableT();
        this.dstTable.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiProjectInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiProjectInputT');
  if (this.numColumns !== null && this.numColumns !== undefined) {
    output.writeFieldBegin('numColumns', Thrift.Type.I32, 1);
    output.writeI32(this.numColumns);
    output.writeFieldEnd();
  }
  if (this.columnNames !== null && this.columnNames !== undefined) {
    output.writeFieldBegin('columnNames', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.columnNames.length);
    for (var iter55 in this.columnNames)
    {
      if (this.columnNames.hasOwnProperty(iter55))
      {
        iter55 = this.columnNames[iter55];
        output.writeString(iter55);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.srcTable !== null && this.srcTable !== undefined) {
    output.writeFieldBegin('srcTable', Thrift.Type.STRUCT, 3);
    this.srcTable.write(output);
    output.writeFieldEnd();
  }
  if (this.dstTable !== null && this.dstTable !== undefined) {
    output.writeFieldBegin('dstTable', Thrift.Type.STRUCT, 4);
    this.dstTable.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiFilterInputT = function(args) {
  this.filterStr = null;
  this.srcTable = null;
  this.dstTable = null;
  if (args) {
    if (args.filterStr !== undefined) {
      this.filterStr = args.filterStr;
    }
    if (args.srcTable !== undefined) {
      this.srcTable = args.srcTable;
    }
    if (args.dstTable !== undefined) {
      this.dstTable = args.dstTable;
    }
  }
};
XcalarApiFilterInputT.prototype = {};
XcalarApiFilterInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filterStr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.srcTable = new XcalarApiTableT();
        this.srcTable.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.dstTable = new XcalarApiTableT();
        this.dstTable.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiFilterInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiFilterInputT');
  if (this.filterStr !== null && this.filterStr !== undefined) {
    output.writeFieldBegin('filterStr', Thrift.Type.STRING, 1);
    output.writeString(this.filterStr);
    output.writeFieldEnd();
  }
  if (this.srcTable !== null && this.srcTable !== undefined) {
    output.writeFieldBegin('srcTable', Thrift.Type.STRUCT, 2);
    this.srcTable.write(output);
    output.writeFieldEnd();
  }
  if (this.dstTable !== null && this.dstTable !== undefined) {
    output.writeFieldBegin('dstTable', Thrift.Type.STRUCT, 3);
    this.dstTable.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGroupByInputT = function(args) {
  this.srcTable = null;
  this.dstTable = null;
  this.evalStr = null;
  this.newFieldName = null;
  this.includeSrcTableSample = null;
  this.icvMode = null;
  if (args) {
    if (args.srcTable !== undefined) {
      this.srcTable = args.srcTable;
    }
    if (args.dstTable !== undefined) {
      this.dstTable = args.dstTable;
    }
    if (args.evalStr !== undefined) {
      this.evalStr = args.evalStr;
    }
    if (args.newFieldName !== undefined) {
      this.newFieldName = args.newFieldName;
    }
    if (args.includeSrcTableSample !== undefined) {
      this.includeSrcTableSample = args.includeSrcTableSample;
    }
    if (args.icvMode !== undefined) {
      this.icvMode = args.icvMode;
    }
  }
};
XcalarApiGroupByInputT.prototype = {};
XcalarApiGroupByInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.srcTable = new XcalarApiTableT();
        this.srcTable.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.dstTable = new XcalarApiTableT();
        this.dstTable.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.evalStr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.newFieldName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.includeSrcTableSample = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.icvMode = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGroupByInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGroupByInputT');
  if (this.srcTable !== null && this.srcTable !== undefined) {
    output.writeFieldBegin('srcTable', Thrift.Type.STRUCT, 1);
    this.srcTable.write(output);
    output.writeFieldEnd();
  }
  if (this.dstTable !== null && this.dstTable !== undefined) {
    output.writeFieldBegin('dstTable', Thrift.Type.STRUCT, 2);
    this.dstTable.write(output);
    output.writeFieldEnd();
  }
  if (this.evalStr !== null && this.evalStr !== undefined) {
    output.writeFieldBegin('evalStr', Thrift.Type.STRING, 3);
    output.writeString(this.evalStr);
    output.writeFieldEnd();
  }
  if (this.newFieldName !== null && this.newFieldName !== undefined) {
    output.writeFieldBegin('newFieldName', Thrift.Type.STRING, 4);
    output.writeString(this.newFieldName);
    output.writeFieldEnd();
  }
  if (this.includeSrcTableSample !== null && this.includeSrcTableSample !== undefined) {
    output.writeFieldBegin('includeSrcTableSample', Thrift.Type.BOOL, 5);
    output.writeBool(this.includeSrcTableSample);
    output.writeFieldEnd();
  }
  if (this.icvMode !== null && this.icvMode !== undefined) {
    output.writeFieldBegin('icvMode', Thrift.Type.BOOL, 6);
    output.writeBool(this.icvMode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiAggregateInputT = function(args) {
  this.srcTable = null;
  this.dstTable = null;
  this.evalStr = null;
  if (args) {
    if (args.srcTable !== undefined) {
      this.srcTable = args.srcTable;
    }
    if (args.dstTable !== undefined) {
      this.dstTable = args.dstTable;
    }
    if (args.evalStr !== undefined) {
      this.evalStr = args.evalStr;
    }
  }
};
XcalarApiAggregateInputT.prototype = {};
XcalarApiAggregateInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.srcTable = new XcalarApiTableT();
        this.srcTable.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.dstTable = new XcalarApiTableT();
        this.dstTable.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.evalStr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiAggregateInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiAggregateInputT');
  if (this.srcTable !== null && this.srcTable !== undefined) {
    output.writeFieldBegin('srcTable', Thrift.Type.STRUCT, 1);
    this.srcTable.write(output);
    output.writeFieldEnd();
  }
  if (this.dstTable !== null && this.dstTable !== undefined) {
    output.writeFieldBegin('dstTable', Thrift.Type.STRUCT, 2);
    this.dstTable.write(output);
    output.writeFieldEnd();
  }
  if (this.evalStr !== null && this.evalStr !== undefined) {
    output.writeFieldBegin('evalStr', Thrift.Type.STRING, 3);
    output.writeString(this.evalStr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiRenameNodeInputT = function(args) {
  this.oldName = null;
  this.newName = null;
  if (args) {
    if (args.oldName !== undefined) {
      this.oldName = args.oldName;
    }
    if (args.newName !== undefined) {
      this.newName = args.newName;
    }
  }
};
XcalarApiRenameNodeInputT.prototype = {};
XcalarApiRenameNodeInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.oldName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.newName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiRenameNodeInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiRenameNodeInputT');
  if (this.oldName !== null && this.oldName !== undefined) {
    output.writeFieldBegin('oldName', Thrift.Type.STRING, 1);
    output.writeString(this.oldName);
    output.writeFieldEnd();
  }
  if (this.newName !== null && this.newName !== undefined) {
    output.writeFieldBegin('newName', Thrift.Type.STRING, 2);
    output.writeString(this.newName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiResultSetNextInputT = function(args) {
  this.resultSetId = null;
  this.numRecords = null;
  if (args) {
    if (args.resultSetId !== undefined) {
      this.resultSetId = args.resultSetId;
    }
    if (args.numRecords !== undefined) {
      this.numRecords = args.numRecords;
    }
  }
};
XcalarApiResultSetNextInputT.prototype = {};
XcalarApiResultSetNextInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.resultSetId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numRecords = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiResultSetNextInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiResultSetNextInputT');
  if (this.resultSetId !== null && this.resultSetId !== undefined) {
    output.writeFieldBegin('resultSetId', Thrift.Type.STRING, 1);
    output.writeString(this.resultSetId);
    output.writeFieldEnd();
  }
  if (this.numRecords !== null && this.numRecords !== undefined) {
    output.writeFieldBegin('numRecords', Thrift.Type.I64, 2);
    output.writeI64(this.numRecords);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiFreeResultSetInputT = function(args) {
  this.resultSetId = null;
  if (args) {
    if (args.resultSetId !== undefined) {
      this.resultSetId = args.resultSetId;
    }
  }
};
XcalarApiFreeResultSetInputT.prototype = {};
XcalarApiFreeResultSetInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.resultSetId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiFreeResultSetInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiFreeResultSetInputT');
  if (this.resultSetId !== null && this.resultSetId !== undefined) {
    output.writeFieldBegin('resultSetId', Thrift.Type.STRING, 1);
    output.writeString(this.resultSetId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiStatT = function(args) {
  this.statName = null;
  this.statValue = null;
  this.statType = null;
  this.statLife = null;
  this.groupId = null;
  if (args) {
    if (args.statName !== undefined) {
      this.statName = args.statName;
    }
    if (args.statValue !== undefined) {
      this.statValue = args.statValue;
    }
    if (args.statType !== undefined) {
      this.statType = args.statType;
    }
    if (args.statLife !== undefined) {
      this.statLife = args.statLife;
    }
    if (args.groupId !== undefined) {
      this.groupId = args.groupId;
    }
  }
};
XcalarApiStatT.prototype = {};
XcalarApiStatT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.statName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.statValue = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.statType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.statLife = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.groupId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiStatT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiStatT');
  if (this.statName !== null && this.statName !== undefined) {
    output.writeFieldBegin('statName', Thrift.Type.STRING, 1);
    output.writeString(this.statName);
    output.writeFieldEnd();
  }
  if (this.statValue !== null && this.statValue !== undefined) {
    output.writeFieldBegin('statValue', Thrift.Type.I64, 2);
    output.writeI64(this.statValue);
    output.writeFieldEnd();
  }
  if (this.statType !== null && this.statType !== undefined) {
    output.writeFieldBegin('statType', Thrift.Type.I32, 3);
    output.writeI32(this.statType);
    output.writeFieldEnd();
  }
  if (this.statLife !== null && this.statLife !== undefined) {
    output.writeFieldBegin('statLife', Thrift.Type.I32, 4);
    output.writeI32(this.statLife);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.I64, 5);
    output.writeI64(this.groupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiRenameMapT = function(args) {
  this.oldName = null;
  this.newName = null;
  this.type = null;
  if (args) {
    if (args.oldName !== undefined) {
      this.oldName = args.oldName;
    }
    if (args.newName !== undefined) {
      this.newName = args.newName;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
XcalarApiRenameMapT.prototype = {};
XcalarApiRenameMapT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.oldName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.newName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiRenameMapT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiRenameMapT');
  if (this.oldName !== null && this.oldName !== undefined) {
    output.writeFieldBegin('oldName', Thrift.Type.STRING, 1);
    output.writeString(this.oldName);
    output.writeFieldEnd();
  }
  if (this.newName !== null && this.newName !== undefined) {
    output.writeFieldBegin('newName', Thrift.Type.STRING, 2);
    output.writeString(this.newName);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiJoinInputT = function(args) {
  this.leftTable = null;
  this.rightTable = null;
  this.joinTable = null;
  this.joinType = null;
  this.collisionCheck = null;
  this.numLeftColumns = null;
  this.numRightColumns = null;
  this.renameMap = null;
  if (args) {
    if (args.leftTable !== undefined) {
      this.leftTable = args.leftTable;
    }
    if (args.rightTable !== undefined) {
      this.rightTable = args.rightTable;
    }
    if (args.joinTable !== undefined) {
      this.joinTable = args.joinTable;
    }
    if (args.joinType !== undefined) {
      this.joinType = args.joinType;
    }
    if (args.collisionCheck !== undefined) {
      this.collisionCheck = args.collisionCheck;
    }
    if (args.numLeftColumns !== undefined) {
      this.numLeftColumns = args.numLeftColumns;
    }
    if (args.numRightColumns !== undefined) {
      this.numRightColumns = args.numRightColumns;
    }
    if (args.renameMap !== undefined) {
      this.renameMap = args.renameMap;
    }
  }
};
XcalarApiJoinInputT.prototype = {};
XcalarApiJoinInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.leftTable = new XcalarApiTableT();
        this.leftTable.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.rightTable = new XcalarApiTableT();
        this.rightTable.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.joinTable = new XcalarApiTableT();
        this.joinTable.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.joinType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.collisionCheck = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.numLeftColumns = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.numRightColumns = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.renameMap = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new XcalarApiRenameMapT();
          elem62.read(input);
          this.renameMap.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiJoinInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiJoinInputT');
  if (this.leftTable !== null && this.leftTable !== undefined) {
    output.writeFieldBegin('leftTable', Thrift.Type.STRUCT, 1);
    this.leftTable.write(output);
    output.writeFieldEnd();
  }
  if (this.rightTable !== null && this.rightTable !== undefined) {
    output.writeFieldBegin('rightTable', Thrift.Type.STRUCT, 2);
    this.rightTable.write(output);
    output.writeFieldEnd();
  }
  if (this.joinTable !== null && this.joinTable !== undefined) {
    output.writeFieldBegin('joinTable', Thrift.Type.STRUCT, 3);
    this.joinTable.write(output);
    output.writeFieldEnd();
  }
  if (this.joinType !== null && this.joinType !== undefined) {
    output.writeFieldBegin('joinType', Thrift.Type.I32, 4);
    output.writeI32(this.joinType);
    output.writeFieldEnd();
  }
  if (this.collisionCheck !== null && this.collisionCheck !== undefined) {
    output.writeFieldBegin('collisionCheck', Thrift.Type.BOOL, 5);
    output.writeBool(this.collisionCheck);
    output.writeFieldEnd();
  }
  if (this.numLeftColumns !== null && this.numLeftColumns !== undefined) {
    output.writeFieldBegin('numLeftColumns', Thrift.Type.I32, 6);
    output.writeI32(this.numLeftColumns);
    output.writeFieldEnd();
  }
  if (this.numRightColumns !== null && this.numRightColumns !== undefined) {
    output.writeFieldBegin('numRightColumns', Thrift.Type.I32, 7);
    output.writeI32(this.numRightColumns);
    output.writeFieldEnd();
  }
  if (this.renameMap !== null && this.renameMap !== undefined) {
    output.writeFieldBegin('renameMap', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.renameMap.length);
    for (var iter63 in this.renameMap)
    {
      if (this.renameMap.hasOwnProperty(iter63))
      {
        iter63 = this.renameMap[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiResultSetAbsoluteInputT = function(args) {
  this.resultSetId = null;
  this.position = null;
  if (args) {
    if (args.resultSetId !== undefined) {
      this.resultSetId = args.resultSetId;
    }
    if (args.position !== undefined) {
      this.position = args.position;
    }
  }
};
XcalarApiResultSetAbsoluteInputT.prototype = {};
XcalarApiResultSetAbsoluteInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.resultSetId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.position = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiResultSetAbsoluteInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiResultSetAbsoluteInputT');
  if (this.resultSetId !== null && this.resultSetId !== undefined) {
    output.writeFieldBegin('resultSetId', Thrift.Type.STRING, 1);
    output.writeString(this.resultSetId);
    output.writeFieldEnd();
  }
  if (this.position !== null && this.position !== undefined) {
    output.writeFieldBegin('position', Thrift.Type.I64, 2);
    output.writeI64(this.position);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiParameterT = function(args) {
  this.parameterName = null;
  this.parameterValue = null;
  if (args) {
    if (args.parameterName !== undefined) {
      this.parameterName = args.parameterName;
    }
    if (args.parameterValue !== undefined) {
      this.parameterValue = args.parameterValue;
    }
  }
};
XcalarApiParameterT.prototype = {};
XcalarApiParameterT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.parameterName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.parameterValue = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiParameterT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiParameterT');
  if (this.parameterName !== null && this.parameterName !== undefined) {
    output.writeFieldBegin('parameterName', Thrift.Type.STRING, 1);
    output.writeString(this.parameterName);
    output.writeFieldEnd();
  }
  if (this.parameterValue !== null && this.parameterValue !== undefined) {
    output.writeFieldBegin('parameterValue', Thrift.Type.STRING, 2);
    output.writeString(this.parameterValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiParamLoadT = function(args) {
  this.datasetUrl = null;
  if (args) {
    if (args.datasetUrl !== undefined) {
      this.datasetUrl = args.datasetUrl;
    }
  }
};
XcalarApiParamLoadT.prototype = {};
XcalarApiParamLoadT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.datasetUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiParamLoadT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiParamLoadT');
  if (this.datasetUrl !== null && this.datasetUrl !== undefined) {
    output.writeFieldBegin('datasetUrl', Thrift.Type.STRING, 1);
    output.writeString(this.datasetUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiParamFilterT = function(args) {
  this.filterStr = null;
  if (args) {
    if (args.filterStr !== undefined) {
      this.filterStr = args.filterStr;
    }
  }
};
XcalarApiParamFilterT.prototype = {};
XcalarApiParamFilterT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filterStr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiParamFilterT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiParamFilterT');
  if (this.filterStr !== null && this.filterStr !== undefined) {
    output.writeFieldBegin('filterStr', Thrift.Type.STRING, 1);
    output.writeString(this.filterStr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiParamExportT = function(args) {
  this.fileName = null;
  if (args) {
    if (args.fileName !== undefined) {
      this.fileName = args.fileName;
    }
  }
};
XcalarApiParamExportT.prototype = {};
XcalarApiParamExportT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fileName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiParamExportT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiParamExportT');
  if (this.fileName !== null && this.fileName !== undefined) {
    output.writeFieldBegin('fileName', Thrift.Type.STRING, 1);
    output.writeString(this.fileName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiParamInputArgsT = function(args) {
  this.paramLoad = null;
  this.paramFilter = null;
  this.paramExport = null;
  if (args) {
    if (args.paramLoad !== undefined) {
      this.paramLoad = args.paramLoad;
    }
    if (args.paramFilter !== undefined) {
      this.paramFilter = args.paramFilter;
    }
    if (args.paramExport !== undefined) {
      this.paramExport = args.paramExport;
    }
  }
};
XcalarApiParamInputArgsT.prototype = {};
XcalarApiParamInputArgsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.paramLoad = new XcalarApiParamLoadT();
        this.paramLoad.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.paramFilter = new XcalarApiParamFilterT();
        this.paramFilter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.paramExport = new XcalarApiParamExportT();
        this.paramExport.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiParamInputArgsT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiParamInputArgsT');
  if (this.paramLoad !== null && this.paramLoad !== undefined) {
    output.writeFieldBegin('paramLoad', Thrift.Type.STRUCT, 1);
    this.paramLoad.write(output);
    output.writeFieldEnd();
  }
  if (this.paramFilter !== null && this.paramFilter !== undefined) {
    output.writeFieldBegin('paramFilter', Thrift.Type.STRUCT, 2);
    this.paramFilter.write(output);
    output.writeFieldEnd();
  }
  if (this.paramExport !== null && this.paramExport !== undefined) {
    output.writeFieldBegin('paramExport', Thrift.Type.STRUCT, 3);
    this.paramExport.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiParamInputT = function(args) {
  this.paramType = null;
  this.paramInputArgs = null;
  if (args) {
    if (args.paramType !== undefined) {
      this.paramType = args.paramType;
    }
    if (args.paramInputArgs !== undefined) {
      this.paramInputArgs = args.paramInputArgs;
    }
  }
};
XcalarApiParamInputT.prototype = {};
XcalarApiParamInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.paramType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.paramInputArgs = new XcalarApiParamInputArgsT();
        this.paramInputArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiParamInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiParamInputT');
  if (this.paramType !== null && this.paramType !== undefined) {
    output.writeFieldBegin('paramType', Thrift.Type.I32, 1);
    output.writeI32(this.paramType);
    output.writeFieldEnd();
  }
  if (this.paramInputArgs !== null && this.paramInputArgs !== undefined) {
    output.writeFieldBegin('paramInputArgs', Thrift.Type.STRUCT, 2);
    this.paramInputArgs.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUpdateRetinaInputT = function(args) {
  this.retinaName = null;
  this.dagNodeId = null;
  this.paramInput = null;
  if (args) {
    if (args.retinaName !== undefined) {
      this.retinaName = args.retinaName;
    }
    if (args.dagNodeId !== undefined) {
      this.dagNodeId = args.dagNodeId;
    }
    if (args.paramInput !== undefined) {
      this.paramInput = args.paramInput;
    }
  }
};
XcalarApiUpdateRetinaInputT.prototype = {};
XcalarApiUpdateRetinaInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.retinaName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.dagNodeId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.paramInput = new XcalarApiParamInputT();
        this.paramInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUpdateRetinaInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUpdateRetinaInputT');
  if (this.retinaName !== null && this.retinaName !== undefined) {
    output.writeFieldBegin('retinaName', Thrift.Type.STRING, 1);
    output.writeString(this.retinaName);
    output.writeFieldEnd();
  }
  if (this.dagNodeId !== null && this.dagNodeId !== undefined) {
    output.writeFieldBegin('dagNodeId', Thrift.Type.I64, 2);
    output.writeI64(this.dagNodeId);
    output.writeFieldEnd();
  }
  if (this.paramInput !== null && this.paramInput !== undefined) {
    output.writeFieldBegin('paramInput', Thrift.Type.STRUCT, 3);
    this.paramInput.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiAddParameterToRetinaInputT = function(args) {
  this.retinaName = null;
  this.parameter = null;
  if (args) {
    if (args.retinaName !== undefined) {
      this.retinaName = args.retinaName;
    }
    if (args.parameter !== undefined) {
      this.parameter = args.parameter;
    }
  }
};
XcalarApiAddParameterToRetinaInputT.prototype = {};
XcalarApiAddParameterToRetinaInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.retinaName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.parameter = new XcalarApiParameterT();
        this.parameter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiAddParameterToRetinaInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiAddParameterToRetinaInputT');
  if (this.retinaName !== null && this.retinaName !== undefined) {
    output.writeFieldBegin('retinaName', Thrift.Type.STRING, 1);
    output.writeString(this.retinaName);
    output.writeFieldEnd();
  }
  if (this.parameter !== null && this.parameter !== undefined) {
    output.writeFieldBegin('parameter', Thrift.Type.STRUCT, 2);
    this.parameter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListParametersInRetinaOutputT = function(args) {
  this.numParameters = null;
  this.parameters = null;
  if (args) {
    if (args.numParameters !== undefined) {
      this.numParameters = args.numParameters;
    }
    if (args.parameters !== undefined) {
      this.parameters = args.parameters;
    }
  }
};
XcalarApiListParametersInRetinaOutputT.prototype = {};
XcalarApiListParametersInRetinaOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numParameters = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.parameters = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new XcalarApiParameterT();
          elem70.read(input);
          this.parameters.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListParametersInRetinaOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListParametersInRetinaOutputT');
  if (this.numParameters !== null && this.numParameters !== undefined) {
    output.writeFieldBegin('numParameters', Thrift.Type.I64, 1);
    output.writeI64(this.numParameters);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.parameters.length);
    for (var iter71 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(iter71))
      {
        iter71 = this.parameters[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiExecuteRetinaInputT = function(args) {
  this.retinaName = null;
  this.numParameters = null;
  this.parameters = null;
  if (args) {
    if (args.retinaName !== undefined) {
      this.retinaName = args.retinaName;
    }
    if (args.numParameters !== undefined) {
      this.numParameters = args.numParameters;
    }
    if (args.parameters !== undefined) {
      this.parameters = args.parameters;
    }
  }
};
XcalarApiExecuteRetinaInputT.prototype = {};
XcalarApiExecuteRetinaInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.retinaName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numParameters = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.parameters = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new XcalarApiParameterT();
          elem78.read(input);
          this.parameters.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiExecuteRetinaInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiExecuteRetinaInputT');
  if (this.retinaName !== null && this.retinaName !== undefined) {
    output.writeFieldBegin('retinaName', Thrift.Type.STRING, 1);
    output.writeString(this.retinaName);
    output.writeFieldEnd();
  }
  if (this.numParameters !== null && this.numParameters !== undefined) {
    output.writeFieldBegin('numParameters', Thrift.Type.I64, 2);
    output.writeI64(this.numParameters);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.parameters.length);
    for (var iter79 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(iter79))
      {
        iter79 = this.parameters[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetStatOutputT = function(args) {
  this.numStats = null;
  this.truncated = null;
  this.stats = null;
  if (args) {
    if (args.numStats !== undefined) {
      this.numStats = args.numStats;
    }
    if (args.truncated !== undefined) {
      this.truncated = args.truncated;
    }
    if (args.stats !== undefined) {
      this.stats = args.stats;
    }
  }
};
XcalarApiGetStatOutputT.prototype = {};
XcalarApiGetStatOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numStats = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.truncated = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.stats = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = new XcalarApiStatT();
          elem86.read(input);
          this.stats.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetStatOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetStatOutputT');
  if (this.numStats !== null && this.numStats !== undefined) {
    output.writeFieldBegin('numStats', Thrift.Type.I64, 1);
    output.writeI64(this.numStats);
    output.writeFieldEnd();
  }
  if (this.truncated !== null && this.truncated !== undefined) {
    output.writeFieldBegin('truncated', Thrift.Type.BOOL, 2);
    output.writeBool(this.truncated);
    output.writeFieldEnd();
  }
  if (this.stats !== null && this.stats !== undefined) {
    output.writeFieldBegin('stats', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.stats.length);
    for (var iter87 in this.stats)
    {
      if (this.stats.hasOwnProperty(iter87))
      {
        iter87 = this.stats[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiStatByGroupIdInputT = function(args) {
  this.numNodeId = null;
  this.nodeId = null;
  this.numGroupId = null;
  this.groupId = null;
  if (args) {
    if (args.numNodeId !== undefined) {
      this.numNodeId = args.numNodeId;
    }
    if (args.nodeId !== undefined) {
      this.nodeId = args.nodeId;
    }
    if (args.numGroupId !== undefined) {
      this.numGroupId = args.numGroupId;
    }
    if (args.groupId !== undefined) {
      this.groupId = args.groupId;
    }
  }
};
XcalarApiStatByGroupIdInputT.prototype = {};
XcalarApiStatByGroupIdInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numNodeId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.nodeId = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = input.readI32().value;
          this.nodeId.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numGroupId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size95 = 0;
        var _rtmp399;
        this.groupId = [];
        var _etype98 = 0;
        _rtmp399 = input.readListBegin();
        _etype98 = _rtmp399.etype;
        _size95 = _rtmp399.size;
        for (var _i100 = 0; _i100 < _size95; ++_i100)
        {
          var elem101 = null;
          elem101 = input.readI64().value;
          this.groupId.push(elem101);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiStatByGroupIdInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiStatByGroupIdInputT');
  if (this.numNodeId !== null && this.numNodeId !== undefined) {
    output.writeFieldBegin('numNodeId', Thrift.Type.I64, 1);
    output.writeI64(this.numNodeId);
    output.writeFieldEnd();
  }
  if (this.nodeId !== null && this.nodeId !== undefined) {
    output.writeFieldBegin('nodeId', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.nodeId.length);
    for (var iter102 in this.nodeId)
    {
      if (this.nodeId.hasOwnProperty(iter102))
      {
        iter102 = this.nodeId[iter102];
        output.writeI32(iter102);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.numGroupId !== null && this.numGroupId !== undefined) {
    output.writeFieldBegin('numGroupId', Thrift.Type.I64, 3);
    output.writeI64(this.numGroupId);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.I64, this.groupId.length);
    for (var iter103 in this.groupId)
    {
      if (this.groupId.hasOwnProperty(iter103))
      {
        iter103 = this.groupId[iter103];
        output.writeI64(iter103);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiMapInputT = function(args) {
  this.evalStr = null;
  this.srcTable = null;
  this.dstTable = null;
  this.newFieldName = null;
  this.icvMode = null;
  if (args) {
    if (args.evalStr !== undefined) {
      this.evalStr = args.evalStr;
    }
    if (args.srcTable !== undefined) {
      this.srcTable = args.srcTable;
    }
    if (args.dstTable !== undefined) {
      this.dstTable = args.dstTable;
    }
    if (args.newFieldName !== undefined) {
      this.newFieldName = args.newFieldName;
    }
    if (args.icvMode !== undefined) {
      this.icvMode = args.icvMode;
    }
  }
};
XcalarApiMapInputT.prototype = {};
XcalarApiMapInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.evalStr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.srcTable = new XcalarApiTableT();
        this.srcTable.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.dstTable = new XcalarApiTableT();
        this.dstTable.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.newFieldName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.icvMode = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiMapInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiMapInputT');
  if (this.evalStr !== null && this.evalStr !== undefined) {
    output.writeFieldBegin('evalStr', Thrift.Type.STRING, 1);
    output.writeString(this.evalStr);
    output.writeFieldEnd();
  }
  if (this.srcTable !== null && this.srcTable !== undefined) {
    output.writeFieldBegin('srcTable', Thrift.Type.STRUCT, 2);
    this.srcTable.write(output);
    output.writeFieldEnd();
  }
  if (this.dstTable !== null && this.dstTable !== undefined) {
    output.writeFieldBegin('dstTable', Thrift.Type.STRUCT, 3);
    this.dstTable.write(output);
    output.writeFieldEnd();
  }
  if (this.newFieldName !== null && this.newFieldName !== undefined) {
    output.writeFieldBegin('newFieldName', Thrift.Type.STRING, 4);
    output.writeString(this.newFieldName);
    output.writeFieldEnd();
  }
  if (this.icvMode !== null && this.icvMode !== undefined) {
    output.writeFieldBegin('icvMode', Thrift.Type.BOOL, 5);
    output.writeBool(this.icvMode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetRowNumInputT = function(args) {
  this.srcTable = null;
  this.dstTable = null;
  this.newFieldName = null;
  if (args) {
    if (args.srcTable !== undefined) {
      this.srcTable = args.srcTable;
    }
    if (args.dstTable !== undefined) {
      this.dstTable = args.dstTable;
    }
    if (args.newFieldName !== undefined) {
      this.newFieldName = args.newFieldName;
    }
  }
};
XcalarApiGetRowNumInputT.prototype = {};
XcalarApiGetRowNumInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.srcTable = new XcalarApiTableT();
        this.srcTable.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.dstTable = new XcalarApiTableT();
        this.dstTable.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.newFieldName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetRowNumInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetRowNumInputT');
  if (this.srcTable !== null && this.srcTable !== undefined) {
    output.writeFieldBegin('srcTable', Thrift.Type.STRUCT, 1);
    this.srcTable.write(output);
    output.writeFieldEnd();
  }
  if (this.dstTable !== null && this.dstTable !== undefined) {
    output.writeFieldBegin('dstTable', Thrift.Type.STRUCT, 2);
    this.dstTable.write(output);
    output.writeFieldEnd();
  }
  if (this.newFieldName !== null && this.newFieldName !== undefined) {
    output.writeFieldBegin('newFieldName', Thrift.Type.STRING, 3);
    output.writeString(this.newFieldName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiQueryStateInputT = function(args) {
  this.queryName = null;
  if (args) {
    if (args.queryName !== undefined) {
      this.queryName = args.queryName;
    }
  }
};
XcalarApiQueryStateInputT.prototype = {};
XcalarApiQueryStateInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queryName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiQueryStateInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiQueryStateInputT');
  if (this.queryName !== null && this.queryName !== undefined) {
    output.writeFieldBegin('queryName', Thrift.Type.STRING, 1);
    output.writeString(this.queryName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiStartNodesInputT = function(args) {
  this.numNodes = null;
  if (args) {
    if (args.numNodes !== undefined) {
      this.numNodes = args.numNodes;
    }
  }
};
XcalarApiStartNodesInputT.prototype = {};
XcalarApiStartNodesInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numNodes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiStartNodesInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiStartNodesInputT');
  if (this.numNodes !== null && this.numNodes !== undefined) {
    output.writeFieldBegin('numNodes', Thrift.Type.I64, 1);
    output.writeI64(this.numNodes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListSchedTaskInputT = function(args) {
  this.namePattern = null;
  if (args) {
    if (args.namePattern !== undefined) {
      this.namePattern = args.namePattern;
    }
  }
};
XcalarApiListSchedTaskInputT.prototype = {};
XcalarApiListSchedTaskInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.namePattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListSchedTaskInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListSchedTaskInputT');
  if (this.namePattern !== null && this.namePattern !== undefined) {
    output.writeFieldBegin('namePattern', Thrift.Type.STRING, 1);
    output.writeString(this.namePattern);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSchedTaskTimeT = function(args) {
  this.schedTimeInSecond = null;
  this.recurSeconds = null;
  this.recurCount = null;
  if (args) {
    if (args.schedTimeInSecond !== undefined) {
      this.schedTimeInSecond = args.schedTimeInSecond;
    }
    if (args.recurSeconds !== undefined) {
      this.recurSeconds = args.recurSeconds;
    }
    if (args.recurCount !== undefined) {
      this.recurCount = args.recurCount;
    }
  }
};
XcalarApiSchedTaskTimeT.prototype = {};
XcalarApiSchedTaskTimeT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.schedTimeInSecond = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.recurSeconds = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.recurCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSchedTaskTimeT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSchedTaskTimeT');
  if (this.schedTimeInSecond !== null && this.schedTimeInSecond !== undefined) {
    output.writeFieldBegin('schedTimeInSecond', Thrift.Type.I64, 1);
    output.writeI64(this.schedTimeInSecond);
    output.writeFieldEnd();
  }
  if (this.recurSeconds !== null && this.recurSeconds !== undefined) {
    output.writeFieldBegin('recurSeconds', Thrift.Type.I64, 2);
    output.writeI64(this.recurSeconds);
    output.writeFieldEnd();
  }
  if (this.recurCount !== null && this.recurCount !== undefined) {
    output.writeFieldBegin('recurCount', Thrift.Type.I64, 3);
    output.writeI64(this.recurCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDeleteSchedTaskInputT = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
XcalarApiDeleteSchedTaskInputT.prototype = {};
XcalarApiDeleteSchedTaskInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDeleteSchedTaskInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDeleteSchedTaskInputT');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetStatGroupIdMapOutputT = function(args) {
  this.numGroupNames = null;
  this.truncated = null;
  this.groupName = null;
  if (args) {
    if (args.numGroupNames !== undefined) {
      this.numGroupNames = args.numGroupNames;
    }
    if (args.truncated !== undefined) {
      this.truncated = args.truncated;
    }
    if (args.groupName !== undefined) {
      this.groupName = args.groupName;
    }
  }
};
XcalarApiGetStatGroupIdMapOutputT.prototype = {};
XcalarApiGetStatGroupIdMapOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numGroupNames = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.truncated = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.groupName = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = input.readString().value;
          this.groupName.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetStatGroupIdMapOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetStatGroupIdMapOutputT');
  if (this.numGroupNames !== null && this.numGroupNames !== undefined) {
    output.writeFieldBegin('numGroupNames', Thrift.Type.I64, 1);
    output.writeI64(this.numGroupNames);
    output.writeFieldEnd();
  }
  if (this.truncated !== null && this.truncated !== undefined) {
    output.writeFieldBegin('truncated', Thrift.Type.BOOL, 2);
    output.writeBool(this.truncated);
    output.writeFieldEnd();
  }
  if (this.groupName !== null && this.groupName !== undefined) {
    output.writeFieldBegin('groupName', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.groupName.length);
    for (var iter111 in this.groupName)
    {
      if (this.groupName.hasOwnProperty(iter111))
      {
        iter111 = this.groupName[iter111];
        output.writeString(iter111);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiTableMetaT = function(args) {
  this.numRows = null;
  this.numPages = null;
  this.numSlots = null;
  this.size = null;
  this.numRowsPerSlot = null;
  this.numPagesPerSlot = null;
  this.xdbPageRequiredInBytes = null;
  this.xdbPageConsumedInBytes = null;
  this.numTransPageSent = null;
  this.numTransPageRecv = null;
  if (args) {
    if (args.numRows !== undefined) {
      this.numRows = args.numRows;
    }
    if (args.numPages !== undefined) {
      this.numPages = args.numPages;
    }
    if (args.numSlots !== undefined) {
      this.numSlots = args.numSlots;
    }
    if (args.size !== undefined) {
      this.size = args.size;
    }
    if (args.numRowsPerSlot !== undefined) {
      this.numRowsPerSlot = args.numRowsPerSlot;
    }
    if (args.numPagesPerSlot !== undefined) {
      this.numPagesPerSlot = args.numPagesPerSlot;
    }
    if (args.xdbPageRequiredInBytes !== undefined) {
      this.xdbPageRequiredInBytes = args.xdbPageRequiredInBytes;
    }
    if (args.xdbPageConsumedInBytes !== undefined) {
      this.xdbPageConsumedInBytes = args.xdbPageConsumedInBytes;
    }
    if (args.numTransPageSent !== undefined) {
      this.numTransPageSent = args.numTransPageSent;
    }
    if (args.numTransPageRecv !== undefined) {
      this.numTransPageRecv = args.numTransPageRecv;
    }
  }
};
XcalarApiTableMetaT.prototype = {};
XcalarApiTableMetaT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numRows = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numPages = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numSlots = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.size = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.numRowsPerSlot = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = input.readI64().value;
          this.numRowsPerSlot.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size119 = 0;
        var _rtmp3123;
        this.numPagesPerSlot = [];
        var _etype122 = 0;
        _rtmp3123 = input.readListBegin();
        _etype122 = _rtmp3123.etype;
        _size119 = _rtmp3123.size;
        for (var _i124 = 0; _i124 < _size119; ++_i124)
        {
          var elem125 = null;
          elem125 = input.readI64().value;
          this.numPagesPerSlot.push(elem125);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.xdbPageRequiredInBytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.xdbPageConsumedInBytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.numTransPageSent = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.numTransPageRecv = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiTableMetaT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiTableMetaT');
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I64, 1);
    output.writeI64(this.numRows);
    output.writeFieldEnd();
  }
  if (this.numPages !== null && this.numPages !== undefined) {
    output.writeFieldBegin('numPages', Thrift.Type.I64, 2);
    output.writeI64(this.numPages);
    output.writeFieldEnd();
  }
  if (this.numSlots !== null && this.numSlots !== undefined) {
    output.writeFieldBegin('numSlots', Thrift.Type.I64, 3);
    output.writeI64(this.numSlots);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I64, 4);
    output.writeI64(this.size);
    output.writeFieldEnd();
  }
  if (this.numRowsPerSlot !== null && this.numRowsPerSlot !== undefined) {
    output.writeFieldBegin('numRowsPerSlot', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I64, this.numRowsPerSlot.length);
    for (var iter126 in this.numRowsPerSlot)
    {
      if (this.numRowsPerSlot.hasOwnProperty(iter126))
      {
        iter126 = this.numRowsPerSlot[iter126];
        output.writeI64(iter126);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.numPagesPerSlot !== null && this.numPagesPerSlot !== undefined) {
    output.writeFieldBegin('numPagesPerSlot', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.I64, this.numPagesPerSlot.length);
    for (var iter127 in this.numPagesPerSlot)
    {
      if (this.numPagesPerSlot.hasOwnProperty(iter127))
      {
        iter127 = this.numPagesPerSlot[iter127];
        output.writeI64(iter127);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.xdbPageRequiredInBytes !== null && this.xdbPageRequiredInBytes !== undefined) {
    output.writeFieldBegin('xdbPageRequiredInBytes', Thrift.Type.I64, 7);
    output.writeI64(this.xdbPageRequiredInBytes);
    output.writeFieldEnd();
  }
  if (this.xdbPageConsumedInBytes !== null && this.xdbPageConsumedInBytes !== undefined) {
    output.writeFieldBegin('xdbPageConsumedInBytes', Thrift.Type.I64, 8);
    output.writeI64(this.xdbPageConsumedInBytes);
    output.writeFieldEnd();
  }
  if (this.numTransPageSent !== null && this.numTransPageSent !== undefined) {
    output.writeFieldBegin('numTransPageSent', Thrift.Type.I64, 9);
    output.writeI64(this.numTransPageSent);
    output.writeFieldEnd();
  }
  if (this.numTransPageRecv !== null && this.numTransPageRecv !== undefined) {
    output.writeFieldBegin('numTransPageRecv', Thrift.Type.I64, 10);
    output.writeI64(this.numTransPageRecv);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetTableMetaOutputT = function(args) {
  this.numDatasets = null;
  this.datasets = null;
  this.keyAttr = null;
  this.numValues = null;
  this.numImmediates = null;
  this.valueAttrs = null;
  this.ordering = null;
  this.numMetas = null;
  this.metas = null;
  if (args) {
    if (args.numDatasets !== undefined) {
      this.numDatasets = args.numDatasets;
    }
    if (args.datasets !== undefined) {
      this.datasets = args.datasets;
    }
    if (args.keyAttr !== undefined) {
      this.keyAttr = args.keyAttr;
    }
    if (args.numValues !== undefined) {
      this.numValues = args.numValues;
    }
    if (args.numImmediates !== undefined) {
      this.numImmediates = args.numImmediates;
    }
    if (args.valueAttrs !== undefined) {
      this.valueAttrs = args.valueAttrs;
    }
    if (args.ordering !== undefined) {
      this.ordering = args.ordering;
    }
    if (args.numMetas !== undefined) {
      this.numMetas = args.numMetas;
    }
    if (args.metas !== undefined) {
      this.metas = args.metas;
    }
  }
};
XcalarApiGetTableMetaOutputT.prototype = {};
XcalarApiGetTableMetaOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numDatasets = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size128 = 0;
        var _rtmp3132;
        this.datasets = [];
        var _etype131 = 0;
        _rtmp3132 = input.readListBegin();
        _etype131 = _rtmp3132.etype;
        _size128 = _rtmp3132.size;
        for (var _i133 = 0; _i133 < _size128; ++_i133)
        {
          var elem134 = null;
          elem134 = input.readString().value;
          this.datasets.push(elem134);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.keyAttr = new DfFieldAttrHeaderT();
        this.keyAttr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.numValues = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.numImmediates = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size135 = 0;
        var _rtmp3139;
        this.valueAttrs = [];
        var _etype138 = 0;
        _rtmp3139 = input.readListBegin();
        _etype138 = _rtmp3139.etype;
        _size135 = _rtmp3139.size;
        for (var _i140 = 0; _i140 < _size135; ++_i140)
        {
          var elem141 = null;
          elem141 = new DfFieldAttrHeaderT();
          elem141.read(input);
          this.valueAttrs.push(elem141);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.ordering = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.numMetas = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size142 = 0;
        var _rtmp3146;
        this.metas = [];
        var _etype145 = 0;
        _rtmp3146 = input.readListBegin();
        _etype145 = _rtmp3146.etype;
        _size142 = _rtmp3146.size;
        for (var _i147 = 0; _i147 < _size142; ++_i147)
        {
          var elem148 = null;
          elem148 = new XcalarApiTableMetaT();
          elem148.read(input);
          this.metas.push(elem148);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetTableMetaOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetTableMetaOutputT');
  if (this.numDatasets !== null && this.numDatasets !== undefined) {
    output.writeFieldBegin('numDatasets', Thrift.Type.I32, 1);
    output.writeI32(this.numDatasets);
    output.writeFieldEnd();
  }
  if (this.datasets !== null && this.datasets !== undefined) {
    output.writeFieldBegin('datasets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.datasets.length);
    for (var iter149 in this.datasets)
    {
      if (this.datasets.hasOwnProperty(iter149))
      {
        iter149 = this.datasets[iter149];
        output.writeString(iter149);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.keyAttr !== null && this.keyAttr !== undefined) {
    output.writeFieldBegin('keyAttr', Thrift.Type.STRUCT, 3);
    this.keyAttr.write(output);
    output.writeFieldEnd();
  }
  if (this.numValues !== null && this.numValues !== undefined) {
    output.writeFieldBegin('numValues', Thrift.Type.I32, 4);
    output.writeI32(this.numValues);
    output.writeFieldEnd();
  }
  if (this.numImmediates !== null && this.numImmediates !== undefined) {
    output.writeFieldBegin('numImmediates', Thrift.Type.I32, 5);
    output.writeI32(this.numImmediates);
    output.writeFieldEnd();
  }
  if (this.valueAttrs !== null && this.valueAttrs !== undefined) {
    output.writeFieldBegin('valueAttrs', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.valueAttrs.length);
    for (var iter150 in this.valueAttrs)
    {
      if (this.valueAttrs.hasOwnProperty(iter150))
      {
        iter150 = this.valueAttrs[iter150];
        iter150.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ordering !== null && this.ordering !== undefined) {
    output.writeFieldBegin('ordering', Thrift.Type.I32, 7);
    output.writeI32(this.ordering);
    output.writeFieldEnd();
  }
  if (this.numMetas !== null && this.numMetas !== undefined) {
    output.writeFieldBegin('numMetas', Thrift.Type.I64, 8);
    output.writeI64(this.numMetas);
    output.writeFieldEnd();
  }
  if (this.metas !== null && this.metas !== undefined) {
    output.writeFieldBegin('metas', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRUCT, this.metas.length);
    for (var iter151 in this.metas)
    {
      if (this.metas.hasOwnProperty(iter151))
      {
        iter151 = this.metas[iter151];
        iter151.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiMakeResultSetOutputT = function(args) {
  this.resultSetId = null;
  this.numEntries = null;
  this.keyAttrHeader = null;
  this.metaOutput = null;
  if (args) {
    if (args.resultSetId !== undefined) {
      this.resultSetId = args.resultSetId;
    }
    if (args.numEntries !== undefined) {
      this.numEntries = args.numEntries;
    }
    if (args.keyAttrHeader !== undefined) {
      this.keyAttrHeader = args.keyAttrHeader;
    }
    if (args.metaOutput !== undefined) {
      this.metaOutput = args.metaOutput;
    }
  }
};
XcalarApiMakeResultSetOutputT.prototype = {};
XcalarApiMakeResultSetOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.resultSetId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numEntries = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.keyAttrHeader = new DfFieldAttrHeaderT();
        this.keyAttrHeader.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.metaOutput = new XcalarApiGetTableMetaOutputT();
        this.metaOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiMakeResultSetOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiMakeResultSetOutputT');
  if (this.resultSetId !== null && this.resultSetId !== undefined) {
    output.writeFieldBegin('resultSetId', Thrift.Type.STRING, 1);
    output.writeString(this.resultSetId);
    output.writeFieldEnd();
  }
  if (this.numEntries !== null && this.numEntries !== undefined) {
    output.writeFieldBegin('numEntries', Thrift.Type.I64, 2);
    output.writeI64(this.numEntries);
    output.writeFieldEnd();
  }
  if (this.keyAttrHeader !== null && this.keyAttrHeader !== undefined) {
    output.writeFieldBegin('keyAttrHeader', Thrift.Type.STRUCT, 3);
    this.keyAttrHeader.write(output);
    output.writeFieldEnd();
  }
  if (this.metaOutput !== null && this.metaOutput !== undefined) {
    output.writeFieldBegin('metaOutput', Thrift.Type.STRUCT, 4);
    this.metaOutput.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiResultSetNextOutputT = function(args) {
  this.numKvPairs = null;
  this.kvPair = null;
  if (args) {
    if (args.numKvPairs !== undefined) {
      this.numKvPairs = args.numKvPairs;
    }
    if (args.kvPair !== undefined) {
      this.kvPair = args.kvPair;
    }
  }
};
XcalarApiResultSetNextOutputT.prototype = {};
XcalarApiResultSetNextOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numKvPairs = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size152 = 0;
        var _rtmp3156;
        this.kvPair = [];
        var _etype155 = 0;
        _rtmp3156 = input.readListBegin();
        _etype155 = _rtmp3156.etype;
        _size152 = _rtmp3156.size;
        for (var _i157 = 0; _i157 < _size152; ++_i157)
        {
          var elem158 = null;
          elem158 = new XcalarApiKeyValuePairT();
          elem158.read(input);
          this.kvPair.push(elem158);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiResultSetNextOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiResultSetNextOutputT');
  if (this.numKvPairs !== null && this.numKvPairs !== undefined) {
    output.writeFieldBegin('numKvPairs', Thrift.Type.I64, 1);
    output.writeI64(this.numKvPairs);
    output.writeFieldEnd();
  }
  if (this.kvPair !== null && this.kvPair !== undefined) {
    output.writeFieldBegin('kvPair', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.kvPair.length);
    for (var iter159 in this.kvPair)
    {
      if (this.kvPair.hasOwnProperty(iter159))
      {
        iter159 = this.kvPair[iter159];
        iter159.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDagNodeInfoT = function(args) {
  this.name = null;
  this.dagNodeId = null;
  this.state = null;
  this.size = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.dagNodeId !== undefined) {
      this.dagNodeId = args.dagNodeId;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.size !== undefined) {
      this.size = args.size;
    }
  }
};
XcalarApiDagNodeInfoT.prototype = {};
XcalarApiDagNodeInfoT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.dagNodeId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.size = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDagNodeInfoT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDagNodeInfoT');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.dagNodeId !== null && this.dagNodeId !== undefined) {
    output.writeFieldBegin('dagNodeId', Thrift.Type.I64, 2);
    output.writeI64(this.dagNodeId);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 3);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I64, 4);
    output.writeI64(this.size);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListDagNodesOutputT = function(args) {
  this.numNodes = null;
  this.nodeInfo = null;
  if (args) {
    if (args.numNodes !== undefined) {
      this.numNodes = args.numNodes;
    }
    if (args.nodeInfo !== undefined) {
      this.nodeInfo = args.nodeInfo;
    }
  }
};
XcalarApiListDagNodesOutputT.prototype = {};
XcalarApiListDagNodesOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numNodes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size160 = 0;
        var _rtmp3164;
        this.nodeInfo = [];
        var _etype163 = 0;
        _rtmp3164 = input.readListBegin();
        _etype163 = _rtmp3164.etype;
        _size160 = _rtmp3164.size;
        for (var _i165 = 0; _i165 < _size160; ++_i165)
        {
          var elem166 = null;
          elem166 = new XcalarApiDagNodeInfoT();
          elem166.read(input);
          this.nodeInfo.push(elem166);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListDagNodesOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListDagNodesOutputT');
  if (this.numNodes !== null && this.numNodes !== undefined) {
    output.writeFieldBegin('numNodes', Thrift.Type.I64, 1);
    output.writeI64(this.numNodes);
    output.writeFieldEnd();
  }
  if (this.nodeInfo !== null && this.nodeInfo !== undefined) {
    output.writeFieldBegin('nodeInfo', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.nodeInfo.length);
    for (var iter167 in this.nodeInfo)
    {
      if (this.nodeInfo.hasOwnProperty(iter167))
      {
        iter167 = this.nodeInfo[iter167];
        iter167.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListDatasetsOutputT = function(args) {
  this.numDatasets = null;
  this.datasets = null;
  if (args) {
    if (args.numDatasets !== undefined) {
      this.numDatasets = args.numDatasets;
    }
    if (args.datasets !== undefined) {
      this.datasets = args.datasets;
    }
  }
};
XcalarApiListDatasetsOutputT.prototype = {};
XcalarApiListDatasetsOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numDatasets = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size168 = 0;
        var _rtmp3172;
        this.datasets = [];
        var _etype171 = 0;
        _rtmp3172 = input.readListBegin();
        _etype171 = _rtmp3172.etype;
        _size168 = _rtmp3172.size;
        for (var _i173 = 0; _i173 < _size168; ++_i173)
        {
          var elem174 = null;
          elem174 = new XcalarApiDatasetT();
          elem174.read(input);
          this.datasets.push(elem174);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListDatasetsOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListDatasetsOutputT');
  if (this.numDatasets !== null && this.numDatasets !== undefined) {
    output.writeFieldBegin('numDatasets', Thrift.Type.I32, 1);
    output.writeI32(this.numDatasets);
    output.writeFieldEnd();
  }
  if (this.datasets !== null && this.datasets !== undefined) {
    output.writeFieldBegin('datasets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.datasets.length);
    for (var iter175 in this.datasets)
    {
      if (this.datasets.hasOwnProperty(iter175))
      {
        iter175 = this.datasets[iter175];
        iter175.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDeleteDagNodeStatusT = function(args) {
  this.nodeInfo = null;
  this.status = null;
  if (args) {
    if (args.nodeInfo !== undefined) {
      this.nodeInfo = args.nodeInfo;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
  }
};
XcalarApiDeleteDagNodeStatusT.prototype = {};
XcalarApiDeleteDagNodeStatusT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nodeInfo = new XcalarApiDagNodeInfoT();
        this.nodeInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDeleteDagNodeStatusT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDeleteDagNodeStatusT');
  if (this.nodeInfo !== null && this.nodeInfo !== undefined) {
    output.writeFieldBegin('nodeInfo', Thrift.Type.STRUCT, 1);
    this.nodeInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDeleteDagNodeOutputT = function(args) {
  this.numNodes = null;
  this.statuses = null;
  if (args) {
    if (args.numNodes !== undefined) {
      this.numNodes = args.numNodes;
    }
    if (args.statuses !== undefined) {
      this.statuses = args.statuses;
    }
  }
};
XcalarApiDeleteDagNodeOutputT.prototype = {};
XcalarApiDeleteDagNodeOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numNodes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size176 = 0;
        var _rtmp3180;
        this.statuses = [];
        var _etype179 = 0;
        _rtmp3180 = input.readListBegin();
        _etype179 = _rtmp3180.etype;
        _size176 = _rtmp3180.size;
        for (var _i181 = 0; _i181 < _size176; ++_i181)
        {
          var elem182 = null;
          elem182 = new XcalarApiDeleteDagNodeStatusT();
          elem182.read(input);
          this.statuses.push(elem182);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDeleteDagNodeOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDeleteDagNodeOutputT');
  if (this.numNodes !== null && this.numNodes !== undefined) {
    output.writeFieldBegin('numNodes', Thrift.Type.I64, 1);
    output.writeI64(this.numNodes);
    output.writeFieldEnd();
  }
  if (this.statuses !== null && this.statuses !== undefined) {
    output.writeFieldBegin('statuses', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.statuses.length);
    for (var iter183 in this.statuses)
    {
      if (this.statuses.hasOwnProperty(iter183))
      {
        iter183 = this.statuses[iter183];
        iter183.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDestroyDatasetStatusT = function(args) {
  this.datasetName = null;
  this.status = null;
  if (args) {
    if (args.datasetName !== undefined) {
      this.datasetName = args.datasetName;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
  }
};
XcalarApiDestroyDatasetStatusT.prototype = {};
XcalarApiDestroyDatasetStatusT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.datasetName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDestroyDatasetStatusT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDestroyDatasetStatusT');
  if (this.datasetName !== null && this.datasetName !== undefined) {
    output.writeFieldBegin('datasetName', Thrift.Type.STRING, 1);
    output.writeString(this.datasetName);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiNewTableOutputT = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
XcalarApiNewTableOutputT.prototype = {};
XcalarApiNewTableOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiNewTableOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiNewTableOutputT');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetTableRefCountOutputT = function(args) {
  this.refCount = null;
  if (args) {
    if (args.refCount !== undefined) {
      this.refCount = args.refCount;
    }
  }
};
XcalarApiGetTableRefCountOutputT.prototype = {};
XcalarApiGetTableRefCountOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.refCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetTableRefCountOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetTableRefCountOutputT');
  if (this.refCount !== null && this.refCount !== undefined) {
    output.writeFieldBegin('refCount', Thrift.Type.I64, 1);
    output.writeI64(this.refCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiQueryOutputT = function(args) {
  this.queryName = null;
  if (args) {
    if (args.queryName !== undefined) {
      this.queryName = args.queryName;
    }
  }
};
XcalarApiQueryOutputT.prototype = {};
XcalarApiQueryOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queryName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiQueryOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiQueryOutputT');
  if (this.queryName !== null && this.queryName !== undefined) {
    output.writeFieldBegin('queryName', Thrift.Type.STRING, 1);
    output.writeString(this.queryName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiBulkLoadOutputT = function(args) {
  this.dataset = null;
  this.errorString = null;
  this.errorFile = null;
  if (args) {
    if (args.dataset !== undefined) {
      this.dataset = args.dataset;
    }
    if (args.errorString !== undefined) {
      this.errorString = args.errorString;
    }
    if (args.errorFile !== undefined) {
      this.errorFile = args.errorFile;
    }
  }
};
XcalarApiBulkLoadOutputT.prototype = {};
XcalarApiBulkLoadOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.dataset = new XcalarApiDatasetT();
        this.dataset.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.errorString = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.errorFile = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiBulkLoadOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiBulkLoadOutputT');
  if (this.dataset !== null && this.dataset !== undefined) {
    output.writeFieldBegin('dataset', Thrift.Type.STRUCT, 1);
    this.dataset.write(output);
    output.writeFieldEnd();
  }
  if (this.errorString !== null && this.errorString !== undefined) {
    output.writeFieldBegin('errorString', Thrift.Type.STRING, 2);
    output.writeString(this.errorString);
    output.writeFieldEnd();
  }
  if (this.errorFile !== null && this.errorFile !== undefined) {
    output.writeFieldBegin('errorFile', Thrift.Type.STRING, 3);
    output.writeString(this.errorFile);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetVersionOutputT = function(args) {
  this.version = null;
  this.apiVersionSignatureFull = null;
  this.apiVersionSignatureShort = null;
  if (args) {
    if (args.version !== undefined) {
      this.version = args.version;
    }
    if (args.apiVersionSignatureFull !== undefined) {
      this.apiVersionSignatureFull = args.apiVersionSignatureFull;
    }
    if (args.apiVersionSignatureShort !== undefined) {
      this.apiVersionSignatureShort = args.apiVersionSignatureShort;
    }
  }
};
XcalarApiGetVersionOutputT.prototype = {};
XcalarApiGetVersionOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.apiVersionSignatureFull = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.apiVersionSignatureShort = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetVersionOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetVersionOutputT');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 1);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.apiVersionSignatureFull !== null && this.apiVersionSignatureFull !== undefined) {
    output.writeFieldBegin('apiVersionSignatureFull', Thrift.Type.STRING, 2);
    output.writeString(this.apiVersionSignatureFull);
    output.writeFieldEnd();
  }
  if (this.apiVersionSignatureShort !== null && this.apiVersionSignatureShort !== undefined) {
    output.writeFieldBegin('apiVersionSignatureShort', Thrift.Type.I32, 3);
    output.writeI32(this.apiVersionSignatureShort);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiAggregateOutputT = function(args) {
  this.tableName = null;
  this.jsonAnswer = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.jsonAnswer !== undefined) {
      this.jsonAnswer = args.jsonAnswer;
    }
  }
};
XcalarApiAggregateOutputT.prototype = {};
XcalarApiAggregateOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.jsonAnswer = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiAggregateOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiAggregateOutputT');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.jsonAnswer !== null && this.jsonAnswer !== undefined) {
    output.writeFieldBegin('jsonAnswer', Thrift.Type.STRING, 2);
    output.writeString(this.jsonAnswer);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSchedArgTypeT = function(args) {
  this.executeRetinaInput = null;
  if (args) {
    if (args.executeRetinaInput !== undefined) {
      this.executeRetinaInput = args.executeRetinaInput;
    }
  }
};
XcalarApiSchedArgTypeT.prototype = {};
XcalarApiSchedArgTypeT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.executeRetinaInput = new XcalarApiExecuteRetinaInputT();
        this.executeRetinaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSchedArgTypeT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSchedArgTypeT');
  if (this.executeRetinaInput !== null && this.executeRetinaInput !== undefined) {
    output.writeFieldBegin('executeRetinaInput', Thrift.Type.STRUCT, 1);
    this.executeRetinaInput.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListSchedTaskInfoT = function(args) {
  this.name = null;
  this.lastExecEndTime = null;
  this.lastExecStatus = null;
  this.lastExecElapsedTimeInSecs = null;
  this.numFailure = null;
  this.numRestarted = null;
  this.createdTime = null;
  this.numSuccess = null;
  this.numRunning = null;
  this.numLastInterrupted = null;
  this.userIdName = null;
  this.type = null;
  this.arg = null;
  this.scheduleInfo = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.lastExecEndTime !== undefined) {
      this.lastExecEndTime = args.lastExecEndTime;
    }
    if (args.lastExecStatus !== undefined) {
      this.lastExecStatus = args.lastExecStatus;
    }
    if (args.lastExecElapsedTimeInSecs !== undefined) {
      this.lastExecElapsedTimeInSecs = args.lastExecElapsedTimeInSecs;
    }
    if (args.numFailure !== undefined) {
      this.numFailure = args.numFailure;
    }
    if (args.numRestarted !== undefined) {
      this.numRestarted = args.numRestarted;
    }
    if (args.createdTime !== undefined) {
      this.createdTime = args.createdTime;
    }
    if (args.numSuccess !== undefined) {
      this.numSuccess = args.numSuccess;
    }
    if (args.numRunning !== undefined) {
      this.numRunning = args.numRunning;
    }
    if (args.numLastInterrupted !== undefined) {
      this.numLastInterrupted = args.numLastInterrupted;
    }
    if (args.userIdName !== undefined) {
      this.userIdName = args.userIdName;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.arg !== undefined) {
      this.arg = args.arg;
    }
    if (args.scheduleInfo !== undefined) {
      this.scheduleInfo = args.scheduleInfo;
    }
  }
};
XcalarApiListSchedTaskInfoT.prototype = {};
XcalarApiListSchedTaskInfoT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastExecEndTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.lastExecStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.lastExecElapsedTimeInSecs = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.numFailure = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.numRestarted = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.numSuccess = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.numRunning = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.numLastInterrupted = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.userIdName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.arg = new XcalarApiSchedArgTypeT();
        this.arg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.scheduleInfo = new XcalarApiSchedTaskTimeT();
        this.scheduleInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListSchedTaskInfoT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListSchedTaskInfoT');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.lastExecEndTime !== null && this.lastExecEndTime !== undefined) {
    output.writeFieldBegin('lastExecEndTime', Thrift.Type.I64, 2);
    output.writeI64(this.lastExecEndTime);
    output.writeFieldEnd();
  }
  if (this.lastExecStatus !== null && this.lastExecStatus !== undefined) {
    output.writeFieldBegin('lastExecStatus', Thrift.Type.I32, 3);
    output.writeI32(this.lastExecStatus);
    output.writeFieldEnd();
  }
  if (this.lastExecElapsedTimeInSecs !== null && this.lastExecElapsedTimeInSecs !== undefined) {
    output.writeFieldBegin('lastExecElapsedTimeInSecs', Thrift.Type.I64, 4);
    output.writeI64(this.lastExecElapsedTimeInSecs);
    output.writeFieldEnd();
  }
  if (this.numFailure !== null && this.numFailure !== undefined) {
    output.writeFieldBegin('numFailure', Thrift.Type.I64, 5);
    output.writeI64(this.numFailure);
    output.writeFieldEnd();
  }
  if (this.numRestarted !== null && this.numRestarted !== undefined) {
    output.writeFieldBegin('numRestarted', Thrift.Type.I64, 6);
    output.writeI64(this.numRestarted);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 7);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.numSuccess !== null && this.numSuccess !== undefined) {
    output.writeFieldBegin('numSuccess', Thrift.Type.I64, 8);
    output.writeI64(this.numSuccess);
    output.writeFieldEnd();
  }
  if (this.numRunning !== null && this.numRunning !== undefined) {
    output.writeFieldBegin('numRunning', Thrift.Type.I64, 9);
    output.writeI64(this.numRunning);
    output.writeFieldEnd();
  }
  if (this.numLastInterrupted !== null && this.numLastInterrupted !== undefined) {
    output.writeFieldBegin('numLastInterrupted', Thrift.Type.I64, 10);
    output.writeI64(this.numLastInterrupted);
    output.writeFieldEnd();
  }
  if (this.userIdName !== null && this.userIdName !== undefined) {
    output.writeFieldBegin('userIdName', Thrift.Type.STRING, 11);
    output.writeString(this.userIdName);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 12);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.arg !== null && this.arg !== undefined) {
    output.writeFieldBegin('arg', Thrift.Type.STRUCT, 13);
    this.arg.write(output);
    output.writeFieldEnd();
  }
  if (this.scheduleInfo !== null && this.scheduleInfo !== undefined) {
    output.writeFieldBegin('scheduleInfo', Thrift.Type.STRUCT, 14);
    this.scheduleInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListSchedTaskOutputT = function(args) {
  this.numSchedTask = null;
  this.schedTaskInfo = null;
  if (args) {
    if (args.numSchedTask !== undefined) {
      this.numSchedTask = args.numSchedTask;
    }
    if (args.schedTaskInfo !== undefined) {
      this.schedTaskInfo = args.schedTaskInfo;
    }
  }
};
XcalarApiListSchedTaskOutputT.prototype = {};
XcalarApiListSchedTaskOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numSchedTask = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size184 = 0;
        var _rtmp3188;
        this.schedTaskInfo = [];
        var _etype187 = 0;
        _rtmp3188 = input.readListBegin();
        _etype187 = _rtmp3188.etype;
        _size184 = _rtmp3188.size;
        for (var _i189 = 0; _i189 < _size184; ++_i189)
        {
          var elem190 = null;
          elem190 = new XcalarApiListSchedTaskInfoT();
          elem190.read(input);
          this.schedTaskInfo.push(elem190);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListSchedTaskOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListSchedTaskOutputT');
  if (this.numSchedTask !== null && this.numSchedTask !== undefined) {
    output.writeFieldBegin('numSchedTask', Thrift.Type.I64, 1);
    output.writeI64(this.numSchedTask);
    output.writeFieldEnd();
  }
  if (this.schedTaskInfo !== null && this.schedTaskInfo !== undefined) {
    output.writeFieldBegin('schedTaskInfo', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.schedTaskInfo.length);
    for (var iter191 in this.schedTaskInfo)
    {
      if (this.schedTaskInfo.hasOwnProperty(iter191))
      {
        iter191 = this.schedTaskInfo[iter191];
        iter191.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSingleQueryT = function(args) {
  this.singleQuery = null;
  this.status = null;
  if (args) {
    if (args.singleQuery !== undefined) {
      this.singleQuery = args.singleQuery;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
  }
};
XcalarApiSingleQueryT.prototype = {};
XcalarApiSingleQueryT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.singleQuery = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSingleQueryT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSingleQueryT');
  if (this.singleQuery !== null && this.singleQuery !== undefined) {
    output.writeFieldBegin('singleQuery', Thrift.Type.STRING, 1);
    output.writeString(this.singleQuery);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiQueryStateOutputT = function(args) {
  this.queryState = null;
  this.queryStatus = null;
  this.query = null;
  this.numQueuedWorkItem = null;
  this.numCompletedWorkItem = null;
  this.numFailedWorkItem = null;
  this.failedSingleQueryArray = null;
  if (args) {
    if (args.queryState !== undefined) {
      this.queryState = args.queryState;
    }
    if (args.queryStatus !== undefined) {
      this.queryStatus = args.queryStatus;
    }
    if (args.query !== undefined) {
      this.query = args.query;
    }
    if (args.numQueuedWorkItem !== undefined) {
      this.numQueuedWorkItem = args.numQueuedWorkItem;
    }
    if (args.numCompletedWorkItem !== undefined) {
      this.numCompletedWorkItem = args.numCompletedWorkItem;
    }
    if (args.numFailedWorkItem !== undefined) {
      this.numFailedWorkItem = args.numFailedWorkItem;
    }
    if (args.failedSingleQueryArray !== undefined) {
      this.failedSingleQueryArray = args.failedSingleQueryArray;
    }
  }
};
XcalarApiQueryStateOutputT.prototype = {};
XcalarApiQueryStateOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.queryState = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.queryStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.numQueuedWorkItem = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.numCompletedWorkItem = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.numFailedWorkItem = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size192 = 0;
        var _rtmp3196;
        this.failedSingleQueryArray = [];
        var _etype195 = 0;
        _rtmp3196 = input.readListBegin();
        _etype195 = _rtmp3196.etype;
        _size192 = _rtmp3196.size;
        for (var _i197 = 0; _i197 < _size192; ++_i197)
        {
          var elem198 = null;
          elem198 = new XcalarApiSingleQueryT();
          elem198.read(input);
          this.failedSingleQueryArray.push(elem198);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiQueryStateOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiQueryStateOutputT');
  if (this.queryState !== null && this.queryState !== undefined) {
    output.writeFieldBegin('queryState', Thrift.Type.I32, 1);
    output.writeI32(this.queryState);
    output.writeFieldEnd();
  }
  if (this.queryStatus !== null && this.queryStatus !== undefined) {
    output.writeFieldBegin('queryStatus', Thrift.Type.I32, 2);
    output.writeI32(this.queryStatus);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 3);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.numQueuedWorkItem !== null && this.numQueuedWorkItem !== undefined) {
    output.writeFieldBegin('numQueuedWorkItem', Thrift.Type.I64, 4);
    output.writeI64(this.numQueuedWorkItem);
    output.writeFieldEnd();
  }
  if (this.numCompletedWorkItem !== null && this.numCompletedWorkItem !== undefined) {
    output.writeFieldBegin('numCompletedWorkItem', Thrift.Type.I64, 5);
    output.writeI64(this.numCompletedWorkItem);
    output.writeFieldEnd();
  }
  if (this.numFailedWorkItem !== null && this.numFailedWorkItem !== undefined) {
    output.writeFieldBegin('numFailedWorkItem', Thrift.Type.I64, 6);
    output.writeI64(this.numFailedWorkItem);
    output.writeFieldEnd();
  }
  if (this.failedSingleQueryArray !== null && this.failedSingleQueryArray !== undefined) {
    output.writeFieldBegin('failedSingleQueryArray', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.failedSingleQueryArray.length);
    for (var iter199 in this.failedSingleQueryArray)
    {
      if (this.failedSingleQueryArray.hasOwnProperty(iter199))
      {
        iter199 = this.failedSingleQueryArray[iter199];
        iter199.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiTopInputT = function(args) {
  this.measureIntervalInMs = null;
  if (args) {
    if (args.measureIntervalInMs !== undefined) {
      this.measureIntervalInMs = args.measureIntervalInMs;
    }
  }
};
XcalarApiTopInputT.prototype = {};
XcalarApiTopInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.measureIntervalInMs = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiTopInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiTopInputT');
  if (this.measureIntervalInMs !== null && this.measureIntervalInMs !== undefined) {
    output.writeFieldBegin('measureIntervalInMs', Thrift.Type.I64, 1);
    output.writeI64(this.measureIntervalInMs);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiTopOutputPerNodeT = function(args) {
  this.nodeId = null;
  this.cpuUsageInPercent = null;
  this.memUsageInPercent = null;
  this.memUsedInBytes = null;
  this.totalAvailableMemInBytes = null;
  this.networkRecvInBytesPerSec = null;
  this.networkSendInBytesPerSec = null;
  if (args) {
    if (args.nodeId !== undefined) {
      this.nodeId = args.nodeId;
    }
    if (args.cpuUsageInPercent !== undefined) {
      this.cpuUsageInPercent = args.cpuUsageInPercent;
    }
    if (args.memUsageInPercent !== undefined) {
      this.memUsageInPercent = args.memUsageInPercent;
    }
    if (args.memUsedInBytes !== undefined) {
      this.memUsedInBytes = args.memUsedInBytes;
    }
    if (args.totalAvailableMemInBytes !== undefined) {
      this.totalAvailableMemInBytes = args.totalAvailableMemInBytes;
    }
    if (args.networkRecvInBytesPerSec !== undefined) {
      this.networkRecvInBytesPerSec = args.networkRecvInBytesPerSec;
    }
    if (args.networkSendInBytesPerSec !== undefined) {
      this.networkSendInBytesPerSec = args.networkSendInBytesPerSec;
    }
  }
};
XcalarApiTopOutputPerNodeT.prototype = {};
XcalarApiTopOutputPerNodeT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.nodeId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.cpuUsageInPercent = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.memUsageInPercent = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.memUsedInBytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.totalAvailableMemInBytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.networkRecvInBytesPerSec = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.networkSendInBytesPerSec = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiTopOutputPerNodeT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiTopOutputPerNodeT');
  if (this.nodeId !== null && this.nodeId !== undefined) {
    output.writeFieldBegin('nodeId', Thrift.Type.I64, 1);
    output.writeI64(this.nodeId);
    output.writeFieldEnd();
  }
  if (this.cpuUsageInPercent !== null && this.cpuUsageInPercent !== undefined) {
    output.writeFieldBegin('cpuUsageInPercent', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.cpuUsageInPercent);
    output.writeFieldEnd();
  }
  if (this.memUsageInPercent !== null && this.memUsageInPercent !== undefined) {
    output.writeFieldBegin('memUsageInPercent', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.memUsageInPercent);
    output.writeFieldEnd();
  }
  if (this.memUsedInBytes !== null && this.memUsedInBytes !== undefined) {
    output.writeFieldBegin('memUsedInBytes', Thrift.Type.I64, 4);
    output.writeI64(this.memUsedInBytes);
    output.writeFieldEnd();
  }
  if (this.totalAvailableMemInBytes !== null && this.totalAvailableMemInBytes !== undefined) {
    output.writeFieldBegin('totalAvailableMemInBytes', Thrift.Type.I64, 5);
    output.writeI64(this.totalAvailableMemInBytes);
    output.writeFieldEnd();
  }
  if (this.networkRecvInBytesPerSec !== null && this.networkRecvInBytesPerSec !== undefined) {
    output.writeFieldBegin('networkRecvInBytesPerSec', Thrift.Type.I64, 6);
    output.writeI64(this.networkRecvInBytesPerSec);
    output.writeFieldEnd();
  }
  if (this.networkSendInBytesPerSec !== null && this.networkSendInBytesPerSec !== undefined) {
    output.writeFieldBegin('networkSendInBytesPerSec', Thrift.Type.I64, 7);
    output.writeI64(this.networkSendInBytesPerSec);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiTopOutputT = function(args) {
  this.status = null;
  this.numNodes = null;
  this.topOutputPerNode = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.numNodes !== undefined) {
      this.numNodes = args.numNodes;
    }
    if (args.topOutputPerNode !== undefined) {
      this.topOutputPerNode = args.topOutputPerNode;
    }
  }
};
XcalarApiTopOutputT.prototype = {};
XcalarApiTopOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numNodes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size200 = 0;
        var _rtmp3204;
        this.topOutputPerNode = [];
        var _etype203 = 0;
        _rtmp3204 = input.readListBegin();
        _etype203 = _rtmp3204.etype;
        _size200 = _rtmp3204.size;
        for (var _i205 = 0; _i205 < _size200; ++_i205)
        {
          var elem206 = null;
          elem206 = new XcalarApiTopOutputPerNodeT();
          elem206.read(input);
          this.topOutputPerNode.push(elem206);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiTopOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiTopOutputT');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.numNodes !== null && this.numNodes !== undefined) {
    output.writeFieldBegin('numNodes', Thrift.Type.I64, 2);
    output.writeI64(this.numNodes);
    output.writeFieldEnd();
  }
  if (this.topOutputPerNode !== null && this.topOutputPerNode !== undefined) {
    output.writeFieldBegin('topOutputPerNode', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.topOutputPerNode.length);
    for (var iter207 in this.topOutputPerNode)
    {
      if (this.topOutputPerNode.hasOwnProperty(iter207))
      {
        iter207 = this.topOutputPerNode[iter207];
        iter207.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiMemoryInputT = function(args) {
  this.tagName = null;
  if (args) {
    if (args.tagName !== undefined) {
      this.tagName = args.tagName;
    }
  }
};
XcalarApiMemoryInputT.prototype = {};
XcalarApiMemoryInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tagName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiMemoryInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiMemoryInputT');
  if (this.tagName !== null && this.tagName !== undefined) {
    output.writeFieldBegin('tagName', Thrift.Type.STRING, 1);
    output.writeString(this.tagName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiMemoryUsagePerTagT = function(args) {
  this.memUsageInBytes = null;
  this.tagName = null;
  this.locName = null;
  if (args) {
    if (args.memUsageInBytes !== undefined) {
      this.memUsageInBytes = args.memUsageInBytes;
    }
    if (args.tagName !== undefined) {
      this.tagName = args.tagName;
    }
    if (args.locName !== undefined) {
      this.locName = args.locName;
    }
  }
};
XcalarApiMemoryUsagePerTagT.prototype = {};
XcalarApiMemoryUsagePerTagT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.memUsageInBytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tagName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.locName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiMemoryUsagePerTagT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiMemoryUsagePerTagT');
  if (this.memUsageInBytes !== null && this.memUsageInBytes !== undefined) {
    output.writeFieldBegin('memUsageInBytes', Thrift.Type.I64, 1);
    output.writeI64(this.memUsageInBytes);
    output.writeFieldEnd();
  }
  if (this.tagName !== null && this.tagName !== undefined) {
    output.writeFieldBegin('tagName', Thrift.Type.STRING, 2);
    output.writeString(this.tagName);
    output.writeFieldEnd();
  }
  if (this.locName !== null && this.locName !== undefined) {
    output.writeFieldBegin('locName', Thrift.Type.STRING, 3);
    output.writeString(this.locName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiMemoryUsagePerNodeT = function(args) {
  this.status = null;
  this.nodeId = null;
  this.numTags = null;
  this.memOutputPerTag = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.nodeId !== undefined) {
      this.nodeId = args.nodeId;
    }
    if (args.numTags !== undefined) {
      this.numTags = args.numTags;
    }
    if (args.memOutputPerTag !== undefined) {
      this.memOutputPerTag = args.memOutputPerTag;
    }
  }
};
XcalarApiMemoryUsagePerNodeT.prototype = {};
XcalarApiMemoryUsagePerNodeT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.nodeId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numTags = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size208 = 0;
        var _rtmp3212;
        this.memOutputPerTag = [];
        var _etype211 = 0;
        _rtmp3212 = input.readListBegin();
        _etype211 = _rtmp3212.etype;
        _size208 = _rtmp3212.size;
        for (var _i213 = 0; _i213 < _size208; ++_i213)
        {
          var elem214 = null;
          elem214 = new XcalarApiMemoryUsagePerTagT();
          elem214.read(input);
          this.memOutputPerTag.push(elem214);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiMemoryUsagePerNodeT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiMemoryUsagePerNodeT');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.nodeId !== null && this.nodeId !== undefined) {
    output.writeFieldBegin('nodeId', Thrift.Type.I64, 2);
    output.writeI64(this.nodeId);
    output.writeFieldEnd();
  }
  if (this.numTags !== null && this.numTags !== undefined) {
    output.writeFieldBegin('numTags', Thrift.Type.I64, 3);
    output.writeI64(this.numTags);
    output.writeFieldEnd();
  }
  if (this.memOutputPerTag !== null && this.memOutputPerTag !== undefined) {
    output.writeFieldBegin('memOutputPerTag', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.memOutputPerTag.length);
    for (var iter215 in this.memOutputPerTag)
    {
      if (this.memOutputPerTag.hasOwnProperty(iter215))
      {
        iter215 = this.memOutputPerTag[iter215];
        iter215.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiMemoryOutputT = function(args) {
  this.numNodes = null;
  this.memOutputPerNode = null;
  if (args) {
    if (args.numNodes !== undefined) {
      this.numNodes = args.numNodes;
    }
    if (args.memOutputPerNode !== undefined) {
      this.memOutputPerNode = args.memOutputPerNode;
    }
  }
};
XcalarApiMemoryOutputT.prototype = {};
XcalarApiMemoryOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numNodes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size216 = 0;
        var _rtmp3220;
        this.memOutputPerNode = [];
        var _etype219 = 0;
        _rtmp3220 = input.readListBegin();
        _etype219 = _rtmp3220.etype;
        _size216 = _rtmp3220.size;
        for (var _i221 = 0; _i221 < _size216; ++_i221)
        {
          var elem222 = null;
          elem222 = new XcalarApiMemoryUsagePerNodeT();
          elem222.read(input);
          this.memOutputPerNode.push(elem222);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiMemoryOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiMemoryOutputT');
  if (this.numNodes !== null && this.numNodes !== undefined) {
    output.writeFieldBegin('numNodes', Thrift.Type.I64, 1);
    output.writeI64(this.numNodes);
    output.writeFieldEnd();
  }
  if (this.memOutputPerNode !== null && this.memOutputPerNode !== undefined) {
    output.writeFieldBegin('memOutputPerNode', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.memOutputPerNode.length);
    for (var iter223 in this.memOutputPerNode)
    {
      if (this.memOutputPerNode.hasOwnProperty(iter223))
      {
        iter223 = this.memOutputPerNode[iter223];
        iter223.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiQueryInputT = function(args) {
  this.querySession = null;
  this.queryName = null;
  this.queryStr = null;
  this.sameSession = null;
  if (args) {
    if (args.querySession !== undefined) {
      this.querySession = args.querySession;
    }
    if (args.queryName !== undefined) {
      this.queryName = args.queryName;
    }
    if (args.queryStr !== undefined) {
      this.queryStr = args.queryStr;
    }
    if (args.sameSession !== undefined) {
      this.sameSession = args.sameSession;
    }
  }
};
XcalarApiQueryInputT.prototype = {};
XcalarApiQueryInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.querySession = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.queryName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.queryStr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.sameSession = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiQueryInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiQueryInputT');
  if (this.querySession !== null && this.querySession !== undefined) {
    output.writeFieldBegin('querySession', Thrift.Type.I64, 1);
    output.writeI64(this.querySession);
    output.writeFieldEnd();
  }
  if (this.queryName !== null && this.queryName !== undefined) {
    output.writeFieldBegin('queryName', Thrift.Type.STRING, 2);
    output.writeString(this.queryName);
    output.writeFieldEnd();
  }
  if (this.queryStr !== null && this.queryStr !== undefined) {
    output.writeFieldBegin('queryStr', Thrift.Type.STRING, 3);
    output.writeString(this.queryStr);
    output.writeFieldEnd();
  }
  if (this.sameSession !== null && this.sameSession !== undefined) {
    output.writeFieldBegin('sameSession', Thrift.Type.BOOL, 4);
    output.writeBool(this.sameSession);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUserIdT = function(args) {
  this.userIdName = null;
  if (args) {
    if (args.userIdName !== undefined) {
      this.userIdName = args.userIdName;
    }
  }
};
XcalarApiUserIdT.prototype = {};
XcalarApiUserIdT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userIdName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUserIdT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUserIdT');
  if (this.userIdName !== null && this.userIdName !== undefined) {
    output.writeFieldBegin('userIdName', Thrift.Type.STRING, 1);
    output.writeString(this.userIdName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionNewInputT = function(args) {
  this.sessionName = null;
  this.fork = null;
  this.forkedSessionName = null;
  if (args) {
    if (args.sessionName !== undefined) {
      this.sessionName = args.sessionName;
    }
    if (args.fork !== undefined) {
      this.fork = args.fork;
    }
    if (args.forkedSessionName !== undefined) {
      this.forkedSessionName = args.forkedSessionName;
    }
  }
};
XcalarApiSessionNewInputT.prototype = {};
XcalarApiSessionNewInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.fork = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.forkedSessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionNewInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionNewInputT');
  if (this.sessionName !== null && this.sessionName !== undefined) {
    output.writeFieldBegin('sessionName', Thrift.Type.STRING, 1);
    output.writeString(this.sessionName);
    output.writeFieldEnd();
  }
  if (this.fork !== null && this.fork !== undefined) {
    output.writeFieldBegin('fork', Thrift.Type.BOOL, 2);
    output.writeBool(this.fork);
    output.writeFieldEnd();
  }
  if (this.forkedSessionName !== null && this.forkedSessionName !== undefined) {
    output.writeFieldBegin('forkedSessionName', Thrift.Type.STRING, 3);
    output.writeString(this.forkedSessionName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionDeleteInputT = function(args) {
  this.sessionName = null;
  this.noCleanup = null;
  if (args) {
    if (args.sessionName !== undefined) {
      this.sessionName = args.sessionName;
    }
    if (args.noCleanup !== undefined) {
      this.noCleanup = args.noCleanup;
    }
  }
};
XcalarApiSessionDeleteInputT.prototype = {};
XcalarApiSessionDeleteInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.noCleanup = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionDeleteInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionDeleteInputT');
  if (this.sessionName !== null && this.sessionName !== undefined) {
    output.writeFieldBegin('sessionName', Thrift.Type.STRING, 1);
    output.writeString(this.sessionName);
    output.writeFieldEnd();
  }
  if (this.noCleanup !== null && this.noCleanup !== undefined) {
    output.writeFieldBegin('noCleanup', Thrift.Type.BOOL, 2);
    output.writeBool(this.noCleanup);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionInfoInputT = function(args) {
  this.sessionName = null;
  if (args) {
    if (args.sessionName !== undefined) {
      this.sessionName = args.sessionName;
    }
  }
};
XcalarApiSessionInfoInputT.prototype = {};
XcalarApiSessionInfoInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionInfoInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionInfoInputT');
  if (this.sessionName !== null && this.sessionName !== undefined) {
    output.writeFieldBegin('sessionName', Thrift.Type.STRING, 1);
    output.writeString(this.sessionName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionSwitchInputT = function(args) {
  this.sessionName = null;
  this.origSessionName = null;
  this.noCleanup = null;
  if (args) {
    if (args.sessionName !== undefined) {
      this.sessionName = args.sessionName;
    }
    if (args.origSessionName !== undefined) {
      this.origSessionName = args.origSessionName;
    }
    if (args.noCleanup !== undefined) {
      this.noCleanup = args.noCleanup;
    }
  }
};
XcalarApiSessionSwitchInputT.prototype = {};
XcalarApiSessionSwitchInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.origSessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.noCleanup = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionSwitchInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionSwitchInputT');
  if (this.sessionName !== null && this.sessionName !== undefined) {
    output.writeFieldBegin('sessionName', Thrift.Type.STRING, 1);
    output.writeString(this.sessionName);
    output.writeFieldEnd();
  }
  if (this.origSessionName !== null && this.origSessionName !== undefined) {
    output.writeFieldBegin('origSessionName', Thrift.Type.STRING, 2);
    output.writeString(this.origSessionName);
    output.writeFieldEnd();
  }
  if (this.noCleanup !== null && this.noCleanup !== undefined) {
    output.writeFieldBegin('noCleanup', Thrift.Type.BOOL, 3);
    output.writeBool(this.noCleanup);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionRenameInputT = function(args) {
  this.sessionName = null;
  this.origSessionName = null;
  if (args) {
    if (args.sessionName !== undefined) {
      this.sessionName = args.sessionName;
    }
    if (args.origSessionName !== undefined) {
      this.origSessionName = args.origSessionName;
    }
  }
};
XcalarApiSessionRenameInputT.prototype = {};
XcalarApiSessionRenameInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.origSessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionRenameInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionRenameInputT');
  if (this.sessionName !== null && this.sessionName !== undefined) {
    output.writeFieldBegin('sessionName', Thrift.Type.STRING, 1);
    output.writeString(this.sessionName);
    output.writeFieldEnd();
  }
  if (this.origSessionName !== null && this.origSessionName !== undefined) {
    output.writeFieldBegin('origSessionName', Thrift.Type.STRING, 2);
    output.writeString(this.origSessionName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetQueryOutputT = function(args) {
  this.query = null;
  if (args) {
    if (args.query !== undefined) {
      this.query = args.query;
    }
  }
};
XcalarApiGetQueryOutputT.prototype = {};
XcalarApiGetQueryOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetQueryOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetQueryOutputT');
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 1);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDagNodeNamePatternInputT = function(args) {
  this.srcType = null;
  this.namePattern = null;
  if (args) {
    if (args.srcType !== undefined) {
      this.srcType = args.srcType;
    }
    if (args.namePattern !== undefined) {
      this.namePattern = args.namePattern;
    }
  }
};
XcalarApiDagNodeNamePatternInputT.prototype = {};
XcalarApiDagNodeNamePatternInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.srcType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.namePattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDagNodeNamePatternInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDagNodeNamePatternInputT');
  if (this.srcType !== null && this.srcType !== undefined) {
    output.writeFieldBegin('srcType', Thrift.Type.I32, 1);
    output.writeI32(this.srcType);
    output.writeFieldEnd();
  }
  if (this.namePattern !== null && this.namePattern !== undefined) {
    output.writeFieldBegin('namePattern', Thrift.Type.STRING, 2);
    output.writeString(this.namePattern);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DhtArgsT = function(args) {
  this.upperBound = null;
  this.lowerBound = null;
  this.ordering = null;
  if (args) {
    if (args.upperBound !== undefined) {
      this.upperBound = args.upperBound;
    }
    if (args.lowerBound !== undefined) {
      this.lowerBound = args.lowerBound;
    }
    if (args.ordering !== undefined) {
      this.ordering = args.ordering;
    }
  }
};
DhtArgsT.prototype = {};
DhtArgsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.upperBound = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.lowerBound = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.ordering = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DhtArgsT.prototype.write = function(output) {
  output.writeStructBegin('DhtArgsT');
  if (this.upperBound !== null && this.upperBound !== undefined) {
    output.writeFieldBegin('upperBound', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.upperBound);
    output.writeFieldEnd();
  }
  if (this.lowerBound !== null && this.lowerBound !== undefined) {
    output.writeFieldBegin('lowerBound', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.lowerBound);
    output.writeFieldEnd();
  }
  if (this.ordering !== null && this.ordering !== undefined) {
    output.writeFieldBegin('ordering', Thrift.Type.I32, 3);
    output.writeI32(this.ordering);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiCreateDhtInputT = function(args) {
  this.dhtName = null;
  this.dhtArgs = null;
  if (args) {
    if (args.dhtName !== undefined) {
      this.dhtName = args.dhtName;
    }
    if (args.dhtArgs !== undefined) {
      this.dhtArgs = args.dhtArgs;
    }
  }
};
XcalarApiCreateDhtInputT.prototype = {};
XcalarApiCreateDhtInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dhtName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.dhtArgs = new DhtArgsT();
        this.dhtArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiCreateDhtInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiCreateDhtInputT');
  if (this.dhtName !== null && this.dhtName !== undefined) {
    output.writeFieldBegin('dhtName', Thrift.Type.STRING, 1);
    output.writeString(this.dhtName);
    output.writeFieldEnd();
  }
  if (this.dhtArgs !== null && this.dhtArgs !== undefined) {
    output.writeFieldBegin('dhtArgs', Thrift.Type.STRUCT, 2);
    this.dhtArgs.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDeleteDhtInputT = function(args) {
  this.dhtNameLen = null;
  this.dhtName = null;
  if (args) {
    if (args.dhtNameLen !== undefined) {
      this.dhtNameLen = args.dhtNameLen;
    }
    if (args.dhtName !== undefined) {
      this.dhtName = args.dhtName;
    }
  }
};
XcalarApiDeleteDhtInputT.prototype = {};
XcalarApiDeleteDhtInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.dhtNameLen = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dhtName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDeleteDhtInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDeleteDhtInputT');
  if (this.dhtNameLen !== null && this.dhtNameLen !== undefined) {
    output.writeFieldBegin('dhtNameLen', Thrift.Type.I64, 1);
    output.writeI64(this.dhtNameLen);
    output.writeFieldEnd();
  }
  if (this.dhtName !== null && this.dhtName !== undefined) {
    output.writeFieldBegin('dhtName', Thrift.Type.STRING, 2);
    output.writeString(this.dhtName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSchedTaskInputT = function(args) {
  this.name = null;
  this.time = null;
  this.type = null;
  this.arg = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.time !== undefined) {
      this.time = args.time;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.arg !== undefined) {
      this.arg = args.arg;
    }
  }
};
XcalarApiSchedTaskInputT.prototype = {};
XcalarApiSchedTaskInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.time = new XcalarApiSchedTaskTimeT();
        this.time.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.arg = new XcalarApiSchedArgTypeT();
        this.arg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSchedTaskInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSchedTaskInputT');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.STRUCT, 2);
    this.time.write(output);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.arg !== null && this.arg !== undefined) {
    output.writeFieldBegin('arg', Thrift.Type.STRUCT, 4);
    this.arg.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSupportGenerateOutputT = function(args) {
  this.supportId = null;
  this.bundlePath = null;
  if (args) {
    if (args.supportId !== undefined) {
      this.supportId = args.supportId;
    }
    if (args.bundlePath !== undefined) {
      this.bundlePath = args.bundlePath;
    }
  }
};
XcalarApiSupportGenerateOutputT.prototype = {};
XcalarApiSupportGenerateOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.supportId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.bundlePath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSupportGenerateOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSupportGenerateOutputT');
  if (this.supportId !== null && this.supportId !== undefined) {
    output.writeFieldBegin('supportId', Thrift.Type.STRING, 1);
    output.writeString(this.supportId);
    output.writeFieldEnd();
  }
  if (this.bundlePath !== null && this.bundlePath !== undefined) {
    output.writeFieldBegin('bundlePath', Thrift.Type.STRING, 2);
    output.writeString(this.bundlePath);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IndexErrorStatsT = function(args) {
  this.numParseError = null;
  this.numFieldNoExist = null;
  this.numTypeMismatch = null;
  this.numOtherError = null;
  if (args) {
    if (args.numParseError !== undefined) {
      this.numParseError = args.numParseError;
    }
    if (args.numFieldNoExist !== undefined) {
      this.numFieldNoExist = args.numFieldNoExist;
    }
    if (args.numTypeMismatch !== undefined) {
      this.numTypeMismatch = args.numTypeMismatch;
    }
    if (args.numOtherError !== undefined) {
      this.numOtherError = args.numOtherError;
    }
  }
};
IndexErrorStatsT.prototype = {};
IndexErrorStatsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numParseError = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numFieldNoExist = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numTypeMismatch = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.numOtherError = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IndexErrorStatsT.prototype.write = function(output) {
  output.writeStructBegin('IndexErrorStatsT');
  if (this.numParseError !== null && this.numParseError !== undefined) {
    output.writeFieldBegin('numParseError', Thrift.Type.I64, 1);
    output.writeI64(this.numParseError);
    output.writeFieldEnd();
  }
  if (this.numFieldNoExist !== null && this.numFieldNoExist !== undefined) {
    output.writeFieldBegin('numFieldNoExist', Thrift.Type.I64, 2);
    output.writeI64(this.numFieldNoExist);
    output.writeFieldEnd();
  }
  if (this.numTypeMismatch !== null && this.numTypeMismatch !== undefined) {
    output.writeFieldBegin('numTypeMismatch', Thrift.Type.I64, 3);
    output.writeI64(this.numTypeMismatch);
    output.writeFieldEnd();
  }
  if (this.numOtherError !== null && this.numOtherError !== undefined) {
    output.writeFieldBegin('numOtherError', Thrift.Type.I64, 4);
    output.writeI64(this.numOtherError);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LoadErrorStatsT = function(args) {
  this.numFileOpenFailure = null;
  this.numDirOpenFailure = null;
  if (args) {
    if (args.numFileOpenFailure !== undefined) {
      this.numFileOpenFailure = args.numFileOpenFailure;
    }
    if (args.numDirOpenFailure !== undefined) {
      this.numDirOpenFailure = args.numDirOpenFailure;
    }
  }
};
LoadErrorStatsT.prototype = {};
LoadErrorStatsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numFileOpenFailure = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numDirOpenFailure = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LoadErrorStatsT.prototype.write = function(output) {
  output.writeStructBegin('LoadErrorStatsT');
  if (this.numFileOpenFailure !== null && this.numFileOpenFailure !== undefined) {
    output.writeFieldBegin('numFileOpenFailure', Thrift.Type.I64, 1);
    output.writeI64(this.numFileOpenFailure);
    output.writeFieldEnd();
  }
  if (this.numDirOpenFailure !== null && this.numDirOpenFailure !== undefined) {
    output.writeFieldBegin('numDirOpenFailure', Thrift.Type.I64, 2);
    output.writeI64(this.numDirOpenFailure);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EvalErrorStatsT = function(args) {
  this.numUnsubstituted = null;
  this.numUnspportedTypes = null;
  this.numMixedTypeNotSupported = null;
  this.numEvalCastError = null;
  this.numDivByZero = null;
  this.numEvalFunctionError = null;
  if (args) {
    if (args.numUnsubstituted !== undefined) {
      this.numUnsubstituted = args.numUnsubstituted;
    }
    if (args.numUnspportedTypes !== undefined) {
      this.numUnspportedTypes = args.numUnspportedTypes;
    }
    if (args.numMixedTypeNotSupported !== undefined) {
      this.numMixedTypeNotSupported = args.numMixedTypeNotSupported;
    }
    if (args.numEvalCastError !== undefined) {
      this.numEvalCastError = args.numEvalCastError;
    }
    if (args.numDivByZero !== undefined) {
      this.numDivByZero = args.numDivByZero;
    }
    if (args.numEvalFunctionError !== undefined) {
      this.numEvalFunctionError = args.numEvalFunctionError;
    }
  }
};
EvalErrorStatsT.prototype = {};
EvalErrorStatsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numUnsubstituted = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numUnspportedTypes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numMixedTypeNotSupported = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.numEvalCastError = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.numDivByZero = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.numEvalFunctionError = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EvalErrorStatsT.prototype.write = function(output) {
  output.writeStructBegin('EvalErrorStatsT');
  if (this.numUnsubstituted !== null && this.numUnsubstituted !== undefined) {
    output.writeFieldBegin('numUnsubstituted', Thrift.Type.I64, 1);
    output.writeI64(this.numUnsubstituted);
    output.writeFieldEnd();
  }
  if (this.numUnspportedTypes !== null && this.numUnspportedTypes !== undefined) {
    output.writeFieldBegin('numUnspportedTypes', Thrift.Type.I64, 2);
    output.writeI64(this.numUnspportedTypes);
    output.writeFieldEnd();
  }
  if (this.numMixedTypeNotSupported !== null && this.numMixedTypeNotSupported !== undefined) {
    output.writeFieldBegin('numMixedTypeNotSupported', Thrift.Type.I64, 3);
    output.writeI64(this.numMixedTypeNotSupported);
    output.writeFieldEnd();
  }
  if (this.numEvalCastError !== null && this.numEvalCastError !== undefined) {
    output.writeFieldBegin('numEvalCastError', Thrift.Type.I64, 4);
    output.writeI64(this.numEvalCastError);
    output.writeFieldEnd();
  }
  if (this.numDivByZero !== null && this.numDivByZero !== undefined) {
    output.writeFieldBegin('numDivByZero', Thrift.Type.I64, 5);
    output.writeI64(this.numDivByZero);
    output.writeFieldEnd();
  }
  if (this.numEvalFunctionError !== null && this.numEvalFunctionError !== undefined) {
    output.writeFieldBegin('numEvalFunctionError', Thrift.Type.I64, 6);
    output.writeI64(this.numEvalFunctionError);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpErrorStatsT = function(args) {
  this.loadErrorStats = null;
  this.indexErrorStats = null;
  this.evalErrorStats = null;
  if (args) {
    if (args.loadErrorStats !== undefined) {
      this.loadErrorStats = args.loadErrorStats;
    }
    if (args.indexErrorStats !== undefined) {
      this.indexErrorStats = args.indexErrorStats;
    }
    if (args.evalErrorStats !== undefined) {
      this.evalErrorStats = args.evalErrorStats;
    }
  }
};
OpErrorStatsT.prototype = {};
OpErrorStatsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.loadErrorStats = new LoadErrorStatsT();
        this.loadErrorStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.indexErrorStats = new IndexErrorStatsT();
        this.indexErrorStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.evalErrorStats = new EvalErrorStatsT();
        this.evalErrorStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpErrorStatsT.prototype.write = function(output) {
  output.writeStructBegin('OpErrorStatsT');
  if (this.loadErrorStats !== null && this.loadErrorStats !== undefined) {
    output.writeFieldBegin('loadErrorStats', Thrift.Type.STRUCT, 1);
    this.loadErrorStats.write(output);
    output.writeFieldEnd();
  }
  if (this.indexErrorStats !== null && this.indexErrorStats !== undefined) {
    output.writeFieldBegin('indexErrorStats', Thrift.Type.STRUCT, 2);
    this.indexErrorStats.write(output);
    output.writeFieldEnd();
  }
  if (this.evalErrorStats !== null && this.evalErrorStats !== undefined) {
    output.writeFieldBegin('evalErrorStats', Thrift.Type.STRUCT, 3);
    this.evalErrorStats.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiOpDetailsT = function(args) {
  this.numWorkCompleted = null;
  this.numWorkTotal = null;
  this.cancelled = null;
  this.errorStats = null;
  if (args) {
    if (args.numWorkCompleted !== undefined) {
      this.numWorkCompleted = args.numWorkCompleted;
    }
    if (args.numWorkTotal !== undefined) {
      this.numWorkTotal = args.numWorkTotal;
    }
    if (args.cancelled !== undefined) {
      this.cancelled = args.cancelled;
    }
    if (args.errorStats !== undefined) {
      this.errorStats = args.errorStats;
    }
  }
};
XcalarApiOpDetailsT.prototype = {};
XcalarApiOpDetailsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numWorkCompleted = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numWorkTotal = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.cancelled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.errorStats = new OpErrorStatsT();
        this.errorStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiOpDetailsT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiOpDetailsT');
  if (this.numWorkCompleted !== null && this.numWorkCompleted !== undefined) {
    output.writeFieldBegin('numWorkCompleted', Thrift.Type.I64, 1);
    output.writeI64(this.numWorkCompleted);
    output.writeFieldEnd();
  }
  if (this.numWorkTotal !== null && this.numWorkTotal !== undefined) {
    output.writeFieldBegin('numWorkTotal', Thrift.Type.I64, 2);
    output.writeI64(this.numWorkTotal);
    output.writeFieldEnd();
  }
  if (this.cancelled !== null && this.cancelled !== undefined) {
    output.writeFieldBegin('cancelled', Thrift.Type.BOOL, 3);
    output.writeBool(this.cancelled);
    output.writeFieldEnd();
  }
  if (this.errorStats !== null && this.errorStats !== undefined) {
    output.writeFieldBegin('errorStats', Thrift.Type.STRUCT, 4);
    this.errorStats.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiNodeOpStatsT = function(args) {
  this.status = null;
  this.nodeId = null;
  this.opDetails = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.nodeId !== undefined) {
      this.nodeId = args.nodeId;
    }
    if (args.opDetails !== undefined) {
      this.opDetails = args.opDetails;
    }
  }
};
XcalarApiNodeOpStatsT.prototype = {};
XcalarApiNodeOpStatsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.nodeId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.opDetails = new XcalarApiOpDetailsT();
        this.opDetails.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiNodeOpStatsT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiNodeOpStatsT');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.nodeId !== null && this.nodeId !== undefined) {
    output.writeFieldBegin('nodeId', Thrift.Type.I64, 2);
    output.writeI64(this.nodeId);
    output.writeFieldEnd();
  }
  if (this.opDetails !== null && this.opDetails !== undefined) {
    output.writeFieldBegin('opDetails', Thrift.Type.STRUCT, 3);
    this.opDetails.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiPerNodeOpStatsT = function(args) {
  this.numNodes = null;
  this.api = null;
  this.nodeOpStats = null;
  if (args) {
    if (args.numNodes !== undefined) {
      this.numNodes = args.numNodes;
    }
    if (args.api !== undefined) {
      this.api = args.api;
    }
    if (args.nodeOpStats !== undefined) {
      this.nodeOpStats = args.nodeOpStats;
    }
  }
};
XcalarApiPerNodeOpStatsT.prototype = {};
XcalarApiPerNodeOpStatsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numNodes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.api = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size224 = 0;
        var _rtmp3228;
        this.nodeOpStats = [];
        var _etype227 = 0;
        _rtmp3228 = input.readListBegin();
        _etype227 = _rtmp3228.etype;
        _size224 = _rtmp3228.size;
        for (var _i229 = 0; _i229 < _size224; ++_i229)
        {
          var elem230 = null;
          elem230 = new XcalarApiNodeOpStatsT();
          elem230.read(input);
          this.nodeOpStats.push(elem230);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiPerNodeOpStatsT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiPerNodeOpStatsT');
  if (this.numNodes !== null && this.numNodes !== undefined) {
    output.writeFieldBegin('numNodes', Thrift.Type.I64, 1);
    output.writeI64(this.numNodes);
    output.writeFieldEnd();
  }
  if (this.api !== null && this.api !== undefined) {
    output.writeFieldBegin('api', Thrift.Type.I32, 2);
    output.writeI32(this.api);
    output.writeFieldEnd();
  }
  if (this.nodeOpStats !== null && this.nodeOpStats !== undefined) {
    output.writeFieldBegin('nodeOpStats', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.nodeOpStats.length);
    for (var iter231 in this.nodeOpStats)
    {
      if (this.nodeOpStats.hasOwnProperty(iter231))
      {
        iter231 = this.nodeOpStats[iter231];
        iter231.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiOpStatsOutT = function(args) {
  this.api = null;
  this.opDetails = null;
  if (args) {
    if (args.api !== undefined) {
      this.api = args.api;
    }
    if (args.opDetails !== undefined) {
      this.opDetails = args.opDetails;
    }
  }
};
XcalarApiOpStatsOutT.prototype = {};
XcalarApiOpStatsOutT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.api = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.opDetails = new XcalarApiOpDetailsT();
        this.opDetails.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiOpStatsOutT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiOpStatsOutT');
  if (this.api !== null && this.api !== undefined) {
    output.writeFieldBegin('api', Thrift.Type.I32, 1);
    output.writeI32(this.api);
    output.writeFieldEnd();
  }
  if (this.opDetails !== null && this.opDetails !== undefined) {
    output.writeFieldBegin('opDetails', Thrift.Type.STRUCT, 2);
    this.opDetails.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiImportRetinaInputT = function(args) {
  this.retinaName = null;
  this.overwriteExistingUdf = null;
  this.retinaSize = null;
  this.retina = null;
  if (args) {
    if (args.retinaName !== undefined) {
      this.retinaName = args.retinaName;
    }
    if (args.overwriteExistingUdf !== undefined) {
      this.overwriteExistingUdf = args.overwriteExistingUdf;
    }
    if (args.retinaSize !== undefined) {
      this.retinaSize = args.retinaSize;
    }
    if (args.retina !== undefined) {
      this.retina = args.retina;
    }
  }
};
XcalarApiImportRetinaInputT.prototype = {};
XcalarApiImportRetinaInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.retinaName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.overwriteExistingUdf = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.retinaSize = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.retina = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiImportRetinaInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiImportRetinaInputT');
  if (this.retinaName !== null && this.retinaName !== undefined) {
    output.writeFieldBegin('retinaName', Thrift.Type.STRING, 1);
    output.writeString(this.retinaName);
    output.writeFieldEnd();
  }
  if (this.overwriteExistingUdf !== null && this.overwriteExistingUdf !== undefined) {
    output.writeFieldBegin('overwriteExistingUdf', Thrift.Type.BOOL, 2);
    output.writeBool(this.overwriteExistingUdf);
    output.writeFieldEnd();
  }
  if (this.retinaSize !== null && this.retinaSize !== undefined) {
    output.writeFieldBegin('retinaSize', Thrift.Type.I64, 3);
    output.writeI64(this.retinaSize);
    output.writeFieldEnd();
  }
  if (this.retina !== null && this.retina !== undefined) {
    output.writeFieldBegin('retina', Thrift.Type.STRING, 4);
    output.writeString(this.retina);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiExportRetinaInputT = function(args) {
  this.retinaName = null;
  this.writeToFile = null;
  this.retinaFilePath = null;
  this.overwriteIfExists = null;
  if (args) {
    if (args.retinaName !== undefined) {
      this.retinaName = args.retinaName;
    }
    if (args.writeToFile !== undefined) {
      this.writeToFile = args.writeToFile;
    }
    if (args.retinaFilePath !== undefined) {
      this.retinaFilePath = args.retinaFilePath;
    }
    if (args.overwriteIfExists !== undefined) {
      this.overwriteIfExists = args.overwriteIfExists;
    }
  }
};
XcalarApiExportRetinaInputT.prototype = {};
XcalarApiExportRetinaInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.retinaName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.writeToFile = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.retinaFilePath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.overwriteIfExists = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiExportRetinaInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiExportRetinaInputT');
  if (this.retinaName !== null && this.retinaName !== undefined) {
    output.writeFieldBegin('retinaName', Thrift.Type.STRING, 1);
    output.writeString(this.retinaName);
    output.writeFieldEnd();
  }
  if (this.writeToFile !== null && this.writeToFile !== undefined) {
    output.writeFieldBegin('writeToFile', Thrift.Type.BOOL, 2);
    output.writeBool(this.writeToFile);
    output.writeFieldEnd();
  }
  if (this.retinaFilePath !== null && this.retinaFilePath !== undefined) {
    output.writeFieldBegin('retinaFilePath', Thrift.Type.STRING, 3);
    output.writeString(this.retinaFilePath);
    output.writeFieldEnd();
  }
  if (this.overwriteIfExists !== null && this.overwriteIfExists !== undefined) {
    output.writeFieldBegin('overwriteIfExists', Thrift.Type.BOOL, 4);
    output.writeBool(this.overwriteIfExists);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiStartFuncTestInputT = function(args) {
  this.parallel = null;
  this.runAllTests = null;
  this.numTestPatterns = null;
  this.testNamePatterns = null;
  if (args) {
    if (args.parallel !== undefined) {
      this.parallel = args.parallel;
    }
    if (args.runAllTests !== undefined) {
      this.runAllTests = args.runAllTests;
    }
    if (args.numTestPatterns !== undefined) {
      this.numTestPatterns = args.numTestPatterns;
    }
    if (args.testNamePatterns !== undefined) {
      this.testNamePatterns = args.testNamePatterns;
    }
  }
};
XcalarApiStartFuncTestInputT.prototype = {};
XcalarApiStartFuncTestInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.parallel = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.runAllTests = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numTestPatterns = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size232 = 0;
        var _rtmp3236;
        this.testNamePatterns = [];
        var _etype235 = 0;
        _rtmp3236 = input.readListBegin();
        _etype235 = _rtmp3236.etype;
        _size232 = _rtmp3236.size;
        for (var _i237 = 0; _i237 < _size232; ++_i237)
        {
          var elem238 = null;
          elem238 = input.readString().value;
          this.testNamePatterns.push(elem238);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiStartFuncTestInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiStartFuncTestInputT');
  if (this.parallel !== null && this.parallel !== undefined) {
    output.writeFieldBegin('parallel', Thrift.Type.BOOL, 1);
    output.writeBool(this.parallel);
    output.writeFieldEnd();
  }
  if (this.runAllTests !== null && this.runAllTests !== undefined) {
    output.writeFieldBegin('runAllTests', Thrift.Type.BOOL, 2);
    output.writeBool(this.runAllTests);
    output.writeFieldEnd();
  }
  if (this.numTestPatterns !== null && this.numTestPatterns !== undefined) {
    output.writeFieldBegin('numTestPatterns', Thrift.Type.I32, 3);
    output.writeI32(this.numTestPatterns);
    output.writeFieldEnd();
  }
  if (this.testNamePatterns !== null && this.testNamePatterns !== undefined) {
    output.writeFieldBegin('testNamePatterns', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.testNamePatterns.length);
    for (var iter239 in this.testNamePatterns)
    {
      if (this.testNamePatterns.hasOwnProperty(iter239))
      {
        iter239 = this.testNamePatterns[iter239];
        output.writeString(iter239);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListFuncTestInputT = function(args) {
  this.namePattern = null;
  if (args) {
    if (args.namePattern !== undefined) {
      this.namePattern = args.namePattern;
    }
  }
};
XcalarApiListFuncTestInputT.prototype = {};
XcalarApiListFuncTestInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.namePattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListFuncTestInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListFuncTestInputT');
  if (this.namePattern !== null && this.namePattern !== undefined) {
    output.writeFieldBegin('namePattern', Thrift.Type.STRING, 1);
    output.writeString(this.namePattern);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiInputT = function(args) {
  this.loadInput = null;
  this.indexInput = null;
  this.statInput = null;
  this.getTableMetaInput = null;
  this.resultSetNextInput = null;
  this.joinInput = null;
  this.filterInput = null;
  this.groupByInput = null;
  this.resultSetAbsoluteInput = null;
  this.freeResultSetInput = null;
  this.getTableRefCountInput = null;
  this.listDagNodesInput = null;
  this.deleteDagNodeInput = null;
  this.queryInput = null;
  this.destroyDsInput = null;
  this.statByGroupIdInput = null;
  this.makeResultSetInput = null;
  this.mapInput = null;
  this.aggregateInput = null;
  this.queryStateInput = null;
  this.addTargetInput = null;
  this.listTargetsInput = null;
  this.exportInput = null;
  this.dagTableNameInput = null;
  this.listFilesInput = null;
  this.startNodesInput = null;
  this.makeRetinaInput = null;
  this.getRetinaInput = null;
  this.executeRetinaInput = null;
  this.updateRetinaInput = null;
  this.addParameterToRetinaInput = null;
  this.listParametersInRetinaInput = null;
  this.keyLookupInput = null;
  this.keyAddOrReplaceInput = null;
  this.keyDeleteInput = null;
  this.topInput = null;
  this.shutdownInput = null;
  this.listXdfsInput = null;
  this.renameNodeInput = null;
  this.memoryInput = null;
  this.sessionNewInput = null;
  this.sessionDeleteInput = null;
  this.sessionSwitchInput = null;
  this.sessionListInput = null;
  this.sessionRenameInput = null;
  this.createDhtInput = null;
  this.keyAppendInput = null;
  this.keySetIfEqualInput = null;
  this.deleteDhtInput = null;
  this.deleteSchedTaskInput = null;
  this.schedTaskInput = null;
  this.listSchedTaskInput = null;
  this.deleteRetinaInput = null;
  this.projectInput = null;
  this.getRowNumInput = null;
  this.udfAddUpdateInput = null;
  this.udfGetInput = null;
  this.udfDeleteInput = null;
  this.previewInput = null;
  this.importRetinaInput = null;
  this.exportRetinaInput = null;
  this.startFuncTestInput = null;
  this.listFuncTestInput = null;
  this.sessionInfoInput = null;
  if (args) {
    if (args.loadInput !== undefined) {
      this.loadInput = args.loadInput;
    }
    if (args.indexInput !== undefined) {
      this.indexInput = args.indexInput;
    }
    if (args.statInput !== undefined) {
      this.statInput = args.statInput;
    }
    if (args.getTableMetaInput !== undefined) {
      this.getTableMetaInput = args.getTableMetaInput;
    }
    if (args.resultSetNextInput !== undefined) {
      this.resultSetNextInput = args.resultSetNextInput;
    }
    if (args.joinInput !== undefined) {
      this.joinInput = args.joinInput;
    }
    if (args.filterInput !== undefined) {
      this.filterInput = args.filterInput;
    }
    if (args.groupByInput !== undefined) {
      this.groupByInput = args.groupByInput;
    }
    if (args.resultSetAbsoluteInput !== undefined) {
      this.resultSetAbsoluteInput = args.resultSetAbsoluteInput;
    }
    if (args.freeResultSetInput !== undefined) {
      this.freeResultSetInput = args.freeResultSetInput;
    }
    if (args.getTableRefCountInput !== undefined) {
      this.getTableRefCountInput = args.getTableRefCountInput;
    }
    if (args.listDagNodesInput !== undefined) {
      this.listDagNodesInput = args.listDagNodesInput;
    }
    if (args.deleteDagNodeInput !== undefined) {
      this.deleteDagNodeInput = args.deleteDagNodeInput;
    }
    if (args.queryInput !== undefined) {
      this.queryInput = args.queryInput;
    }
    if (args.destroyDsInput !== undefined) {
      this.destroyDsInput = args.destroyDsInput;
    }
    if (args.statByGroupIdInput !== undefined) {
      this.statByGroupIdInput = args.statByGroupIdInput;
    }
    if (args.makeResultSetInput !== undefined) {
      this.makeResultSetInput = args.makeResultSetInput;
    }
    if (args.mapInput !== undefined) {
      this.mapInput = args.mapInput;
    }
    if (args.aggregateInput !== undefined) {
      this.aggregateInput = args.aggregateInput;
    }
    if (args.queryStateInput !== undefined) {
      this.queryStateInput = args.queryStateInput;
    }
    if (args.addTargetInput !== undefined) {
      this.addTargetInput = args.addTargetInput;
    }
    if (args.listTargetsInput !== undefined) {
      this.listTargetsInput = args.listTargetsInput;
    }
    if (args.exportInput !== undefined) {
      this.exportInput = args.exportInput;
    }
    if (args.dagTableNameInput !== undefined) {
      this.dagTableNameInput = args.dagTableNameInput;
    }
    if (args.listFilesInput !== undefined) {
      this.listFilesInput = args.listFilesInput;
    }
    if (args.startNodesInput !== undefined) {
      this.startNodesInput = args.startNodesInput;
    }
    if (args.makeRetinaInput !== undefined) {
      this.makeRetinaInput = args.makeRetinaInput;
    }
    if (args.getRetinaInput !== undefined) {
      this.getRetinaInput = args.getRetinaInput;
    }
    if (args.executeRetinaInput !== undefined) {
      this.executeRetinaInput = args.executeRetinaInput;
    }
    if (args.updateRetinaInput !== undefined) {
      this.updateRetinaInput = args.updateRetinaInput;
    }
    if (args.addParameterToRetinaInput !== undefined) {
      this.addParameterToRetinaInput = args.addParameterToRetinaInput;
    }
    if (args.listParametersInRetinaInput !== undefined) {
      this.listParametersInRetinaInput = args.listParametersInRetinaInput;
    }
    if (args.keyLookupInput !== undefined) {
      this.keyLookupInput = args.keyLookupInput;
    }
    if (args.keyAddOrReplaceInput !== undefined) {
      this.keyAddOrReplaceInput = args.keyAddOrReplaceInput;
    }
    if (args.keyDeleteInput !== undefined) {
      this.keyDeleteInput = args.keyDeleteInput;
    }
    if (args.topInput !== undefined) {
      this.topInput = args.topInput;
    }
    if (args.shutdownInput !== undefined) {
      this.shutdownInput = args.shutdownInput;
    }
    if (args.listXdfsInput !== undefined) {
      this.listXdfsInput = args.listXdfsInput;
    }
    if (args.renameNodeInput !== undefined) {
      this.renameNodeInput = args.renameNodeInput;
    }
    if (args.memoryInput !== undefined) {
      this.memoryInput = args.memoryInput;
    }
    if (args.sessionNewInput !== undefined) {
      this.sessionNewInput = args.sessionNewInput;
    }
    if (args.sessionDeleteInput !== undefined) {
      this.sessionDeleteInput = args.sessionDeleteInput;
    }
    if (args.sessionSwitchInput !== undefined) {
      this.sessionSwitchInput = args.sessionSwitchInput;
    }
    if (args.sessionListInput !== undefined) {
      this.sessionListInput = args.sessionListInput;
    }
    if (args.sessionRenameInput !== undefined) {
      this.sessionRenameInput = args.sessionRenameInput;
    }
    if (args.createDhtInput !== undefined) {
      this.createDhtInput = args.createDhtInput;
    }
    if (args.keyAppendInput !== undefined) {
      this.keyAppendInput = args.keyAppendInput;
    }
    if (args.keySetIfEqualInput !== undefined) {
      this.keySetIfEqualInput = args.keySetIfEqualInput;
    }
    if (args.deleteDhtInput !== undefined) {
      this.deleteDhtInput = args.deleteDhtInput;
    }
    if (args.deleteSchedTaskInput !== undefined) {
      this.deleteSchedTaskInput = args.deleteSchedTaskInput;
    }
    if (args.schedTaskInput !== undefined) {
      this.schedTaskInput = args.schedTaskInput;
    }
    if (args.listSchedTaskInput !== undefined) {
      this.listSchedTaskInput = args.listSchedTaskInput;
    }
    if (args.deleteRetinaInput !== undefined) {
      this.deleteRetinaInput = args.deleteRetinaInput;
    }
    if (args.projectInput !== undefined) {
      this.projectInput = args.projectInput;
    }
    if (args.getRowNumInput !== undefined) {
      this.getRowNumInput = args.getRowNumInput;
    }
    if (args.udfAddUpdateInput !== undefined) {
      this.udfAddUpdateInput = args.udfAddUpdateInput;
    }
    if (args.udfGetInput !== undefined) {
      this.udfGetInput = args.udfGetInput;
    }
    if (args.udfDeleteInput !== undefined) {
      this.udfDeleteInput = args.udfDeleteInput;
    }
    if (args.previewInput !== undefined) {
      this.previewInput = args.previewInput;
    }
    if (args.importRetinaInput !== undefined) {
      this.importRetinaInput = args.importRetinaInput;
    }
    if (args.exportRetinaInput !== undefined) {
      this.exportRetinaInput = args.exportRetinaInput;
    }
    if (args.startFuncTestInput !== undefined) {
      this.startFuncTestInput = args.startFuncTestInput;
    }
    if (args.listFuncTestInput !== undefined) {
      this.listFuncTestInput = args.listFuncTestInput;
    }
    if (args.sessionInfoInput !== undefined) {
      this.sessionInfoInput = args.sessionInfoInput;
    }
  }
};
XcalarApiInputT.prototype = {};
XcalarApiInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.loadInput = new XcalarApiBulkLoadInputT();
        this.loadInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.indexInput = new XcalarApiIndexInputT();
        this.indexInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.statInput = new XcalarApiStatInputT();
        this.statInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.getTableMetaInput = new XcalarApiNamedInputT();
        this.getTableMetaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.resultSetNextInput = new XcalarApiResultSetNextInputT();
        this.resultSetNextInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.joinInput = new XcalarApiJoinInputT();
        this.joinInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.filterInput = new XcalarApiFilterInputT();
        this.filterInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.groupByInput = new XcalarApiGroupByInputT();
        this.groupByInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.resultSetAbsoluteInput = new XcalarApiResultSetAbsoluteInputT();
        this.resultSetAbsoluteInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.freeResultSetInput = new XcalarApiFreeResultSetInputT();
        this.freeResultSetInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.getTableRefCountInput = new XcalarApiTableT();
        this.getTableRefCountInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.listDagNodesInput = new XcalarApiDagNodeNamePatternInputT();
        this.listDagNodesInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.deleteDagNodeInput = new XcalarApiDagNodeNamePatternInputT();
        this.deleteDagNodeInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.queryInput = new XcalarApiQueryInputT();
        this.queryInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.destroyDsInput = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRUCT) {
        this.statByGroupIdInput = new XcalarApiStatByGroupIdInputT();
        this.statByGroupIdInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRUCT) {
        this.makeResultSetInput = new XcalarApiNamedInputT();
        this.makeResultSetInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRUCT) {
        this.mapInput = new XcalarApiMapInputT();
        this.mapInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRUCT) {
        this.aggregateInput = new XcalarApiAggregateInputT();
        this.aggregateInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.queryStateInput = new XcalarApiQueryStateInputT();
        this.queryStateInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRUCT) {
        this.addTargetInput = new ExExportTargetT();
        this.addTargetInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRUCT) {
        this.listTargetsInput = new XcalarApiListExportTargetsInputT();
        this.listTargetsInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRUCT) {
        this.exportInput = new XcalarApiExportInputT();
        this.exportInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.dagTableNameInput = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRUCT) {
        this.listFilesInput = new XcalarApiListFilesInputT();
        this.listFilesInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRUCT) {
        this.startNodesInput = new XcalarApiStartNodesInputT();
        this.startNodesInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.STRUCT) {
        this.makeRetinaInput = new XcalarApiMakeRetinaInputT();
        this.makeRetinaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.STRING) {
        this.getRetinaInput = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.STRUCT) {
        this.executeRetinaInput = new XcalarApiExecuteRetinaInputT();
        this.executeRetinaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRUCT) {
        this.updateRetinaInput = new XcalarApiUpdateRetinaInputT();
        this.updateRetinaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.STRUCT) {
        this.addParameterToRetinaInput = new XcalarApiAddParameterToRetinaInputT();
        this.addParameterToRetinaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.STRING) {
        this.listParametersInRetinaInput = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.STRUCT) {
        this.keyLookupInput = new XcalarApiKeyLookupInputT();
        this.keyLookupInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.STRUCT) {
        this.keyAddOrReplaceInput = new XcalarApiKeyAddOrReplaceInputT();
        this.keyAddOrReplaceInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.STRUCT) {
        this.keyDeleteInput = new XcalarApiKeyDeleteInputT();
        this.keyDeleteInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 36:
      if (ftype == Thrift.Type.STRUCT) {
        this.topInput = new XcalarApiTopInputT();
        this.topInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 37:
      if (ftype == Thrift.Type.BOOL) {
        this.shutdownInput = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 38:
      if (ftype == Thrift.Type.STRUCT) {
        this.listXdfsInput = new XcalarApiListXdfsInputT();
        this.listXdfsInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 39:
      if (ftype == Thrift.Type.STRUCT) {
        this.renameNodeInput = new XcalarApiRenameNodeInputT();
        this.renameNodeInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.STRUCT) {
        this.memoryInput = new XcalarApiMemoryInputT();
        this.memoryInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionNewInput = new XcalarApiSessionNewInputT();
        this.sessionNewInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 42:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionDeleteInput = new XcalarApiSessionDeleteInputT();
        this.sessionDeleteInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 43:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionSwitchInput = new XcalarApiSessionSwitchInputT();
        this.sessionSwitchInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 44:
      if (ftype == Thrift.Type.STRING) {
        this.sessionListInput = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 45:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionRenameInput = new XcalarApiSessionRenameInputT();
        this.sessionRenameInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 46:
      if (ftype == Thrift.Type.STRUCT) {
        this.createDhtInput = new XcalarApiCreateDhtInputT();
        this.createDhtInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 47:
      if (ftype == Thrift.Type.STRUCT) {
        this.keyAppendInput = new XcalarApiKeyAppendInputT();
        this.keyAppendInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 48:
      if (ftype == Thrift.Type.STRUCT) {
        this.keySetIfEqualInput = new XcalarApiKeySetIfEqualInputT();
        this.keySetIfEqualInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 49:
      if (ftype == Thrift.Type.STRUCT) {
        this.deleteDhtInput = new XcalarApiDeleteDhtInputT();
        this.deleteDhtInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 50:
      if (ftype == Thrift.Type.STRUCT) {
        this.deleteSchedTaskInput = new XcalarApiDeleteSchedTaskInputT();
        this.deleteSchedTaskInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 51:
      if (ftype == Thrift.Type.STRUCT) {
        this.schedTaskInput = new XcalarApiSchedTaskInputT();
        this.schedTaskInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 52:
      if (ftype == Thrift.Type.STRUCT) {
        this.listSchedTaskInput = new XcalarApiListSchedTaskInputT();
        this.listSchedTaskInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 53:
      if (ftype == Thrift.Type.STRING) {
        this.deleteRetinaInput = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 54:
      if (ftype == Thrift.Type.STRUCT) {
        this.projectInput = new XcalarApiProjectInputT();
        this.projectInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 55:
      if (ftype == Thrift.Type.STRUCT) {
        this.getRowNumInput = new XcalarApiGetRowNumInputT();
        this.getRowNumInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 56:
      if (ftype == Thrift.Type.STRUCT) {
        this.udfAddUpdateInput = new UdfModuleSrcT();
        this.udfAddUpdateInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 57:
      if (ftype == Thrift.Type.STRUCT) {
        this.udfGetInput = new XcalarApiUdfGetInputT();
        this.udfGetInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 58:
      if (ftype == Thrift.Type.STRUCT) {
        this.udfDeleteInput = new XcalarApiUdfDeleteInputT();
        this.udfDeleteInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 59:
      if (ftype == Thrift.Type.STRUCT) {
        this.previewInput = new XcalarApiPreviewInputT();
        this.previewInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 60:
      if (ftype == Thrift.Type.STRUCT) {
        this.importRetinaInput = new XcalarApiImportRetinaInputT();
        this.importRetinaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 61:
      if (ftype == Thrift.Type.STRUCT) {
        this.exportRetinaInput = new XcalarApiExportRetinaInputT();
        this.exportRetinaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 62:
      if (ftype == Thrift.Type.STRUCT) {
        this.startFuncTestInput = new XcalarApiStartFuncTestInputT();
        this.startFuncTestInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 63:
      if (ftype == Thrift.Type.STRUCT) {
        this.listFuncTestInput = new XcalarApiListFuncTestInputT();
        this.listFuncTestInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 64:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionInfoInput = new XcalarApiSessionInfoInputT();
        this.sessionInfoInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiInputT');
  if (this.loadInput !== null && this.loadInput !== undefined) {
    output.writeFieldBegin('loadInput', Thrift.Type.STRUCT, 1);
    this.loadInput.write(output);
    output.writeFieldEnd();
  }
  if (this.indexInput !== null && this.indexInput !== undefined) {
    output.writeFieldBegin('indexInput', Thrift.Type.STRUCT, 2);
    this.indexInput.write(output);
    output.writeFieldEnd();
  }
  if (this.statInput !== null && this.statInput !== undefined) {
    output.writeFieldBegin('statInput', Thrift.Type.STRUCT, 3);
    this.statInput.write(output);
    output.writeFieldEnd();
  }
  if (this.getTableMetaInput !== null && this.getTableMetaInput !== undefined) {
    output.writeFieldBegin('getTableMetaInput', Thrift.Type.STRUCT, 4);
    this.getTableMetaInput.write(output);
    output.writeFieldEnd();
  }
  if (this.resultSetNextInput !== null && this.resultSetNextInput !== undefined) {
    output.writeFieldBegin('resultSetNextInput', Thrift.Type.STRUCT, 5);
    this.resultSetNextInput.write(output);
    output.writeFieldEnd();
  }
  if (this.joinInput !== null && this.joinInput !== undefined) {
    output.writeFieldBegin('joinInput', Thrift.Type.STRUCT, 6);
    this.joinInput.write(output);
    output.writeFieldEnd();
  }
  if (this.filterInput !== null && this.filterInput !== undefined) {
    output.writeFieldBegin('filterInput', Thrift.Type.STRUCT, 7);
    this.filterInput.write(output);
    output.writeFieldEnd();
  }
  if (this.groupByInput !== null && this.groupByInput !== undefined) {
    output.writeFieldBegin('groupByInput', Thrift.Type.STRUCT, 8);
    this.groupByInput.write(output);
    output.writeFieldEnd();
  }
  if (this.resultSetAbsoluteInput !== null && this.resultSetAbsoluteInput !== undefined) {
    output.writeFieldBegin('resultSetAbsoluteInput', Thrift.Type.STRUCT, 9);
    this.resultSetAbsoluteInput.write(output);
    output.writeFieldEnd();
  }
  if (this.freeResultSetInput !== null && this.freeResultSetInput !== undefined) {
    output.writeFieldBegin('freeResultSetInput', Thrift.Type.STRUCT, 10);
    this.freeResultSetInput.write(output);
    output.writeFieldEnd();
  }
  if (this.getTableRefCountInput !== null && this.getTableRefCountInput !== undefined) {
    output.writeFieldBegin('getTableRefCountInput', Thrift.Type.STRUCT, 11);
    this.getTableRefCountInput.write(output);
    output.writeFieldEnd();
  }
  if (this.listDagNodesInput !== null && this.listDagNodesInput !== undefined) {
    output.writeFieldBegin('listDagNodesInput', Thrift.Type.STRUCT, 12);
    this.listDagNodesInput.write(output);
    output.writeFieldEnd();
  }
  if (this.deleteDagNodeInput !== null && this.deleteDagNodeInput !== undefined) {
    output.writeFieldBegin('deleteDagNodeInput', Thrift.Type.STRUCT, 13);
    this.deleteDagNodeInput.write(output);
    output.writeFieldEnd();
  }
  if (this.queryInput !== null && this.queryInput !== undefined) {
    output.writeFieldBegin('queryInput', Thrift.Type.STRUCT, 14);
    this.queryInput.write(output);
    output.writeFieldEnd();
  }
  if (this.destroyDsInput !== null && this.destroyDsInput !== undefined) {
    output.writeFieldBegin('destroyDsInput', Thrift.Type.STRING, 15);
    output.writeString(this.destroyDsInput);
    output.writeFieldEnd();
  }
  if (this.statByGroupIdInput !== null && this.statByGroupIdInput !== undefined) {
    output.writeFieldBegin('statByGroupIdInput', Thrift.Type.STRUCT, 16);
    this.statByGroupIdInput.write(output);
    output.writeFieldEnd();
  }
  if (this.makeResultSetInput !== null && this.makeResultSetInput !== undefined) {
    output.writeFieldBegin('makeResultSetInput', Thrift.Type.STRUCT, 17);
    this.makeResultSetInput.write(output);
    output.writeFieldEnd();
  }
  if (this.mapInput !== null && this.mapInput !== undefined) {
    output.writeFieldBegin('mapInput', Thrift.Type.STRUCT, 18);
    this.mapInput.write(output);
    output.writeFieldEnd();
  }
  if (this.aggregateInput !== null && this.aggregateInput !== undefined) {
    output.writeFieldBegin('aggregateInput', Thrift.Type.STRUCT, 19);
    this.aggregateInput.write(output);
    output.writeFieldEnd();
  }
  if (this.queryStateInput !== null && this.queryStateInput !== undefined) {
    output.writeFieldBegin('queryStateInput', Thrift.Type.STRUCT, 20);
    this.queryStateInput.write(output);
    output.writeFieldEnd();
  }
  if (this.addTargetInput !== null && this.addTargetInput !== undefined) {
    output.writeFieldBegin('addTargetInput', Thrift.Type.STRUCT, 21);
    this.addTargetInput.write(output);
    output.writeFieldEnd();
  }
  if (this.listTargetsInput !== null && this.listTargetsInput !== undefined) {
    output.writeFieldBegin('listTargetsInput', Thrift.Type.STRUCT, 22);
    this.listTargetsInput.write(output);
    output.writeFieldEnd();
  }
  if (this.exportInput !== null && this.exportInput !== undefined) {
    output.writeFieldBegin('exportInput', Thrift.Type.STRUCT, 23);
    this.exportInput.write(output);
    output.writeFieldEnd();
  }
  if (this.dagTableNameInput !== null && this.dagTableNameInput !== undefined) {
    output.writeFieldBegin('dagTableNameInput', Thrift.Type.STRING, 24);
    output.writeString(this.dagTableNameInput);
    output.writeFieldEnd();
  }
  if (this.listFilesInput !== null && this.listFilesInput !== undefined) {
    output.writeFieldBegin('listFilesInput', Thrift.Type.STRUCT, 25);
    this.listFilesInput.write(output);
    output.writeFieldEnd();
  }
  if (this.startNodesInput !== null && this.startNodesInput !== undefined) {
    output.writeFieldBegin('startNodesInput', Thrift.Type.STRUCT, 26);
    this.startNodesInput.write(output);
    output.writeFieldEnd();
  }
  if (this.makeRetinaInput !== null && this.makeRetinaInput !== undefined) {
    output.writeFieldBegin('makeRetinaInput', Thrift.Type.STRUCT, 27);
    this.makeRetinaInput.write(output);
    output.writeFieldEnd();
  }
  if (this.getRetinaInput !== null && this.getRetinaInput !== undefined) {
    output.writeFieldBegin('getRetinaInput', Thrift.Type.STRING, 28);
    output.writeString(this.getRetinaInput);
    output.writeFieldEnd();
  }
  if (this.executeRetinaInput !== null && this.executeRetinaInput !== undefined) {
    output.writeFieldBegin('executeRetinaInput', Thrift.Type.STRUCT, 29);
    this.executeRetinaInput.write(output);
    output.writeFieldEnd();
  }
  if (this.updateRetinaInput !== null && this.updateRetinaInput !== undefined) {
    output.writeFieldBegin('updateRetinaInput', Thrift.Type.STRUCT, 30);
    this.updateRetinaInput.write(output);
    output.writeFieldEnd();
  }
  if (this.addParameterToRetinaInput !== null && this.addParameterToRetinaInput !== undefined) {
    output.writeFieldBegin('addParameterToRetinaInput', Thrift.Type.STRUCT, 31);
    this.addParameterToRetinaInput.write(output);
    output.writeFieldEnd();
  }
  if (this.listParametersInRetinaInput !== null && this.listParametersInRetinaInput !== undefined) {
    output.writeFieldBegin('listParametersInRetinaInput', Thrift.Type.STRING, 32);
    output.writeString(this.listParametersInRetinaInput);
    output.writeFieldEnd();
  }
  if (this.keyLookupInput !== null && this.keyLookupInput !== undefined) {
    output.writeFieldBegin('keyLookupInput', Thrift.Type.STRUCT, 33);
    this.keyLookupInput.write(output);
    output.writeFieldEnd();
  }
  if (this.keyAddOrReplaceInput !== null && this.keyAddOrReplaceInput !== undefined) {
    output.writeFieldBegin('keyAddOrReplaceInput', Thrift.Type.STRUCT, 34);
    this.keyAddOrReplaceInput.write(output);
    output.writeFieldEnd();
  }
  if (this.keyDeleteInput !== null && this.keyDeleteInput !== undefined) {
    output.writeFieldBegin('keyDeleteInput', Thrift.Type.STRUCT, 35);
    this.keyDeleteInput.write(output);
    output.writeFieldEnd();
  }
  if (this.topInput !== null && this.topInput !== undefined) {
    output.writeFieldBegin('topInput', Thrift.Type.STRUCT, 36);
    this.topInput.write(output);
    output.writeFieldEnd();
  }
  if (this.shutdownInput !== null && this.shutdownInput !== undefined) {
    output.writeFieldBegin('shutdownInput', Thrift.Type.BOOL, 37);
    output.writeBool(this.shutdownInput);
    output.writeFieldEnd();
  }
  if (this.listXdfsInput !== null && this.listXdfsInput !== undefined) {
    output.writeFieldBegin('listXdfsInput', Thrift.Type.STRUCT, 38);
    this.listXdfsInput.write(output);
    output.writeFieldEnd();
  }
  if (this.renameNodeInput !== null && this.renameNodeInput !== undefined) {
    output.writeFieldBegin('renameNodeInput', Thrift.Type.STRUCT, 39);
    this.renameNodeInput.write(output);
    output.writeFieldEnd();
  }
  if (this.memoryInput !== null && this.memoryInput !== undefined) {
    output.writeFieldBegin('memoryInput', Thrift.Type.STRUCT, 40);
    this.memoryInput.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionNewInput !== null && this.sessionNewInput !== undefined) {
    output.writeFieldBegin('sessionNewInput', Thrift.Type.STRUCT, 41);
    this.sessionNewInput.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionDeleteInput !== null && this.sessionDeleteInput !== undefined) {
    output.writeFieldBegin('sessionDeleteInput', Thrift.Type.STRUCT, 42);
    this.sessionDeleteInput.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionSwitchInput !== null && this.sessionSwitchInput !== undefined) {
    output.writeFieldBegin('sessionSwitchInput', Thrift.Type.STRUCT, 43);
    this.sessionSwitchInput.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionListInput !== null && this.sessionListInput !== undefined) {
    output.writeFieldBegin('sessionListInput', Thrift.Type.STRING, 44);
    output.writeString(this.sessionListInput);
    output.writeFieldEnd();
  }
  if (this.sessionRenameInput !== null && this.sessionRenameInput !== undefined) {
    output.writeFieldBegin('sessionRenameInput', Thrift.Type.STRUCT, 45);
    this.sessionRenameInput.write(output);
    output.writeFieldEnd();
  }
  if (this.createDhtInput !== null && this.createDhtInput !== undefined) {
    output.writeFieldBegin('createDhtInput', Thrift.Type.STRUCT, 46);
    this.createDhtInput.write(output);
    output.writeFieldEnd();
  }
  if (this.keyAppendInput !== null && this.keyAppendInput !== undefined) {
    output.writeFieldBegin('keyAppendInput', Thrift.Type.STRUCT, 47);
    this.keyAppendInput.write(output);
    output.writeFieldEnd();
  }
  if (this.keySetIfEqualInput !== null && this.keySetIfEqualInput !== undefined) {
    output.writeFieldBegin('keySetIfEqualInput', Thrift.Type.STRUCT, 48);
    this.keySetIfEqualInput.write(output);
    output.writeFieldEnd();
  }
  if (this.deleteDhtInput !== null && this.deleteDhtInput !== undefined) {
    output.writeFieldBegin('deleteDhtInput', Thrift.Type.STRUCT, 49);
    this.deleteDhtInput.write(output);
    output.writeFieldEnd();
  }
  if (this.deleteSchedTaskInput !== null && this.deleteSchedTaskInput !== undefined) {
    output.writeFieldBegin('deleteSchedTaskInput', Thrift.Type.STRUCT, 50);
    this.deleteSchedTaskInput.write(output);
    output.writeFieldEnd();
  }
  if (this.schedTaskInput !== null && this.schedTaskInput !== undefined) {
    output.writeFieldBegin('schedTaskInput', Thrift.Type.STRUCT, 51);
    this.schedTaskInput.write(output);
    output.writeFieldEnd();
  }
  if (this.listSchedTaskInput !== null && this.listSchedTaskInput !== undefined) {
    output.writeFieldBegin('listSchedTaskInput', Thrift.Type.STRUCT, 52);
    this.listSchedTaskInput.write(output);
    output.writeFieldEnd();
  }
  if (this.deleteRetinaInput !== null && this.deleteRetinaInput !== undefined) {
    output.writeFieldBegin('deleteRetinaInput', Thrift.Type.STRING, 53);
    output.writeString(this.deleteRetinaInput);
    output.writeFieldEnd();
  }
  if (this.projectInput !== null && this.projectInput !== undefined) {
    output.writeFieldBegin('projectInput', Thrift.Type.STRUCT, 54);
    this.projectInput.write(output);
    output.writeFieldEnd();
  }
  if (this.getRowNumInput !== null && this.getRowNumInput !== undefined) {
    output.writeFieldBegin('getRowNumInput', Thrift.Type.STRUCT, 55);
    this.getRowNumInput.write(output);
    output.writeFieldEnd();
  }
  if (this.udfAddUpdateInput !== null && this.udfAddUpdateInput !== undefined) {
    output.writeFieldBegin('udfAddUpdateInput', Thrift.Type.STRUCT, 56);
    this.udfAddUpdateInput.write(output);
    output.writeFieldEnd();
  }
  if (this.udfGetInput !== null && this.udfGetInput !== undefined) {
    output.writeFieldBegin('udfGetInput', Thrift.Type.STRUCT, 57);
    this.udfGetInput.write(output);
    output.writeFieldEnd();
  }
  if (this.udfDeleteInput !== null && this.udfDeleteInput !== undefined) {
    output.writeFieldBegin('udfDeleteInput', Thrift.Type.STRUCT, 58);
    this.udfDeleteInput.write(output);
    output.writeFieldEnd();
  }
  if (this.previewInput !== null && this.previewInput !== undefined) {
    output.writeFieldBegin('previewInput', Thrift.Type.STRUCT, 59);
    this.previewInput.write(output);
    output.writeFieldEnd();
  }
  if (this.importRetinaInput !== null && this.importRetinaInput !== undefined) {
    output.writeFieldBegin('importRetinaInput', Thrift.Type.STRUCT, 60);
    this.importRetinaInput.write(output);
    output.writeFieldEnd();
  }
  if (this.exportRetinaInput !== null && this.exportRetinaInput !== undefined) {
    output.writeFieldBegin('exportRetinaInput', Thrift.Type.STRUCT, 61);
    this.exportRetinaInput.write(output);
    output.writeFieldEnd();
  }
  if (this.startFuncTestInput !== null && this.startFuncTestInput !== undefined) {
    output.writeFieldBegin('startFuncTestInput', Thrift.Type.STRUCT, 62);
    this.startFuncTestInput.write(output);
    output.writeFieldEnd();
  }
  if (this.listFuncTestInput !== null && this.listFuncTestInput !== undefined) {
    output.writeFieldBegin('listFuncTestInput', Thrift.Type.STRUCT, 63);
    this.listFuncTestInput.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionInfoInput !== null && this.sessionInfoInput !== undefined) {
    output.writeFieldBegin('sessionInfoInput', Thrift.Type.STRUCT, 64);
    this.sessionInfoInput.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDagNodeT = function(args) {
  this.name = null;
  this.numParent = null;
  this.dagNodeId = null;
  this.api = null;
  this.state = null;
  this.inputSize = null;
  this.input = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.numParent !== undefined) {
      this.numParent = args.numParent;
    }
    if (args.dagNodeId !== undefined) {
      this.dagNodeId = args.dagNodeId;
    }
    if (args.api !== undefined) {
      this.api = args.api;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.inputSize !== undefined) {
      this.inputSize = args.inputSize;
    }
    if (args.input !== undefined) {
      this.input = args.input;
    }
  }
};
XcalarApiDagNodeT.prototype = {};
XcalarApiDagNodeT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.name = new XcalarApiDagNameT();
        this.name.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numParent = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.dagNodeId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.api = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.inputSize = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.input = new XcalarApiInputT();
        this.input.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDagNodeT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDagNodeT');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRUCT, 1);
    this.name.write(output);
    output.writeFieldEnd();
  }
  if (this.numParent !== null && this.numParent !== undefined) {
    output.writeFieldBegin('numParent', Thrift.Type.I64, 2);
    output.writeI64(this.numParent);
    output.writeFieldEnd();
  }
  if (this.dagNodeId !== null && this.dagNodeId !== undefined) {
    output.writeFieldBegin('dagNodeId', Thrift.Type.I64, 3);
    output.writeI64(this.dagNodeId);
    output.writeFieldEnd();
  }
  if (this.api !== null && this.api !== undefined) {
    output.writeFieldBegin('api', Thrift.Type.I32, 4);
    output.writeI32(this.api);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 5);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.inputSize !== null && this.inputSize !== undefined) {
    output.writeFieldBegin('inputSize', Thrift.Type.I64, 6);
    output.writeI64(this.inputSize);
    output.writeFieldEnd();
  }
  if (this.input !== null && this.input !== undefined) {
    output.writeFieldBegin('input', Thrift.Type.STRUCT, 7);
    this.input.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDagOutputT = function(args) {
  this.numNodes = null;
  this.node = null;
  if (args) {
    if (args.numNodes !== undefined) {
      this.numNodes = args.numNodes;
    }
    if (args.node !== undefined) {
      this.node = args.node;
    }
  }
};
XcalarApiDagOutputT.prototype = {};
XcalarApiDagOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numNodes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size240 = 0;
        var _rtmp3244;
        this.node = [];
        var _etype243 = 0;
        _rtmp3244 = input.readListBegin();
        _etype243 = _rtmp3244.etype;
        _size240 = _rtmp3244.size;
        for (var _i245 = 0; _i245 < _size240; ++_i245)
        {
          var elem246 = null;
          elem246 = new XcalarApiDagNodeT();
          elem246.read(input);
          this.node.push(elem246);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDagOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDagOutputT');
  if (this.numNodes !== null && this.numNodes !== undefined) {
    output.writeFieldBegin('numNodes', Thrift.Type.I64, 1);
    output.writeI64(this.numNodes);
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.node.length);
    for (var iter247 in this.node)
    {
      if (this.node.hasOwnProperty(iter247))
      {
        iter247 = this.node[iter247];
        iter247.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DagRetinaDescT = function(args) {
  this.retinaName = null;
  if (args) {
    if (args.retinaName !== undefined) {
      this.retinaName = args.retinaName;
    }
  }
};
DagRetinaDescT.prototype = {};
DagRetinaDescT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.retinaName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DagRetinaDescT.prototype.write = function(output) {
  output.writeStructBegin('DagRetinaDescT');
  if (this.retinaName !== null && this.retinaName !== undefined) {
    output.writeFieldBegin('retinaName', Thrift.Type.STRING, 1);
    output.writeString(this.retinaName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiRetinaT = function(args) {
  this.retinaDesc = null;
  this.retinaDag = null;
  if (args) {
    if (args.retinaDesc !== undefined) {
      this.retinaDesc = args.retinaDesc;
    }
    if (args.retinaDag !== undefined) {
      this.retinaDag = args.retinaDag;
    }
  }
};
XcalarApiRetinaT.prototype = {};
XcalarApiRetinaT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.retinaDesc = new DagRetinaDescT();
        this.retinaDesc.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.retinaDag = new XcalarApiDagOutputT();
        this.retinaDag.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiRetinaT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiRetinaT');
  if (this.retinaDesc !== null && this.retinaDesc !== undefined) {
    output.writeFieldBegin('retinaDesc', Thrift.Type.STRUCT, 1);
    this.retinaDesc.write(output);
    output.writeFieldEnd();
  }
  if (this.retinaDag !== null && this.retinaDag !== undefined) {
    output.writeFieldBegin('retinaDag', Thrift.Type.STRUCT, 2);
    this.retinaDag.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListRetinasOutputT = function(args) {
  this.numRetinas = null;
  this.retinaDescs = null;
  if (args) {
    if (args.numRetinas !== undefined) {
      this.numRetinas = args.numRetinas;
    }
    if (args.retinaDescs !== undefined) {
      this.retinaDescs = args.retinaDescs;
    }
  }
};
XcalarApiListRetinasOutputT.prototype = {};
XcalarApiListRetinasOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numRetinas = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size248 = 0;
        var _rtmp3252;
        this.retinaDescs = [];
        var _etype251 = 0;
        _rtmp3252 = input.readListBegin();
        _etype251 = _rtmp3252.etype;
        _size248 = _rtmp3252.size;
        for (var _i253 = 0; _i253 < _size248; ++_i253)
        {
          var elem254 = null;
          elem254 = new DagRetinaDescT();
          elem254.read(input);
          this.retinaDescs.push(elem254);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListRetinasOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListRetinasOutputT');
  if (this.numRetinas !== null && this.numRetinas !== undefined) {
    output.writeFieldBegin('numRetinas', Thrift.Type.I64, 1);
    output.writeI64(this.numRetinas);
    output.writeFieldEnd();
  }
  if (this.retinaDescs !== null && this.retinaDescs !== undefined) {
    output.writeFieldBegin('retinaDescs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.retinaDescs.length);
    for (var iter255 in this.retinaDescs)
    {
      if (this.retinaDescs.hasOwnProperty(iter255))
      {
        iter255 = this.retinaDescs[iter255];
        iter255.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetRetinaOutputT = function(args) {
  this.retina = null;
  if (args) {
    if (args.retina !== undefined) {
      this.retina = args.retina;
    }
  }
};
XcalarApiGetRetinaOutputT.prototype = {};
XcalarApiGetRetinaOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.retina = new XcalarApiRetinaT();
        this.retina.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetRetinaOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetRetinaOutputT');
  if (this.retina !== null && this.retina !== undefined) {
    output.writeFieldBegin('retina', Thrift.Type.STRUCT, 1);
    this.retina.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionT = function(args) {
  this.name = null;
  this.state = null;
  this.info = null;
  this.activeNode = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.info !== undefined) {
      this.info = args.info;
    }
    if (args.activeNode !== undefined) {
      this.activeNode = args.activeNode;
    }
  }
};
XcalarApiSessionT.prototype = {};
XcalarApiSessionT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.state = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.info = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.activeNode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionT');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.STRING, 2);
    output.writeString(this.state);
    output.writeFieldEnd();
  }
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.STRING, 3);
    output.writeString(this.info);
    output.writeFieldEnd();
  }
  if (this.activeNode !== null && this.activeNode !== undefined) {
    output.writeFieldBegin('activeNode', Thrift.Type.I32, 4);
    output.writeI32(this.activeNode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionListOutputT = function(args) {
  this.numSessions = null;
  this.sessions = null;
  if (args) {
    if (args.numSessions !== undefined) {
      this.numSessions = args.numSessions;
    }
    if (args.sessions !== undefined) {
      this.sessions = args.sessions;
    }
  }
};
XcalarApiSessionListOutputT.prototype = {};
XcalarApiSessionListOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numSessions = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size256 = 0;
        var _rtmp3260;
        this.sessions = [];
        var _etype259 = 0;
        _rtmp3260 = input.readListBegin();
        _etype259 = _rtmp3260.etype;
        _size256 = _rtmp3260.size;
        for (var _i261 = 0; _i261 < _size256; ++_i261)
        {
          var elem262 = null;
          elem262 = new XcalarApiSessionT();
          elem262.read(input);
          this.sessions.push(elem262);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionListOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionListOutputT');
  if (this.numSessions !== null && this.numSessions !== undefined) {
    output.writeFieldBegin('numSessions', Thrift.Type.I64, 1);
    output.writeI64(this.numSessions);
    output.writeFieldEnd();
  }
  if (this.sessions !== null && this.sessions !== undefined) {
    output.writeFieldBegin('sessions', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.sessions.length);
    for (var iter263 in this.sessions)
    {
      if (this.sessions.hasOwnProperty(iter263))
      {
        iter263 = this.sessions[iter263];
        iter263.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiImportRetinaOutputT = function(args) {
  this.numUdfModules = null;
  this.udfModuleStatuses = null;
  if (args) {
    if (args.numUdfModules !== undefined) {
      this.numUdfModules = args.numUdfModules;
    }
    if (args.udfModuleStatuses !== undefined) {
      this.udfModuleStatuses = args.udfModuleStatuses;
    }
  }
};
XcalarApiImportRetinaOutputT.prototype = {};
XcalarApiImportRetinaOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numUdfModules = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size264 = 0;
        var _rtmp3268;
        this.udfModuleStatuses = [];
        var _etype267 = 0;
        _rtmp3268 = input.readListBegin();
        _etype267 = _rtmp3268.etype;
        _size264 = _rtmp3268.size;
        for (var _i269 = 0; _i269 < _size264; ++_i269)
        {
          var elem270 = null;
          elem270 = new XcalarApiUdfAddUpdateOutputT();
          elem270.read(input);
          this.udfModuleStatuses.push(elem270);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiImportRetinaOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiImportRetinaOutputT');
  if (this.numUdfModules !== null && this.numUdfModules !== undefined) {
    output.writeFieldBegin('numUdfModules', Thrift.Type.I64, 1);
    output.writeI64(this.numUdfModules);
    output.writeFieldEnd();
  }
  if (this.udfModuleStatuses !== null && this.udfModuleStatuses !== undefined) {
    output.writeFieldBegin('udfModuleStatuses', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.udfModuleStatuses.length);
    for (var iter271 in this.udfModuleStatuses)
    {
      if (this.udfModuleStatuses.hasOwnProperty(iter271))
      {
        iter271 = this.udfModuleStatuses[iter271];
        iter271.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiExportRetinaOutputT = function(args) {
  this.writtenToFile = null;
  this.retinaFilePath = null;
  this.writeToFileStatus = null;
  this.retinaSize = null;
  this.retina = null;
  if (args) {
    if (args.writtenToFile !== undefined) {
      this.writtenToFile = args.writtenToFile;
    }
    if (args.retinaFilePath !== undefined) {
      this.retinaFilePath = args.retinaFilePath;
    }
    if (args.writeToFileStatus !== undefined) {
      this.writeToFileStatus = args.writeToFileStatus;
    }
    if (args.retinaSize !== undefined) {
      this.retinaSize = args.retinaSize;
    }
    if (args.retina !== undefined) {
      this.retina = args.retina;
    }
  }
};
XcalarApiExportRetinaOutputT.prototype = {};
XcalarApiExportRetinaOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.writtenToFile = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.retinaFilePath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.writeToFileStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.retinaSize = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.retina = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiExportRetinaOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiExportRetinaOutputT');
  if (this.writtenToFile !== null && this.writtenToFile !== undefined) {
    output.writeFieldBegin('writtenToFile', Thrift.Type.BOOL, 1);
    output.writeBool(this.writtenToFile);
    output.writeFieldEnd();
  }
  if (this.retinaFilePath !== null && this.retinaFilePath !== undefined) {
    output.writeFieldBegin('retinaFilePath', Thrift.Type.STRING, 2);
    output.writeString(this.retinaFilePath);
    output.writeFieldEnd();
  }
  if (this.writeToFileStatus !== null && this.writeToFileStatus !== undefined) {
    output.writeFieldBegin('writeToFileStatus', Thrift.Type.I32, 3);
    output.writeI32(this.writeToFileStatus);
    output.writeFieldEnd();
  }
  if (this.retinaSize !== null && this.retinaSize !== undefined) {
    output.writeFieldBegin('retinaSize', Thrift.Type.I64, 4);
    output.writeI64(this.retinaSize);
    output.writeFieldEnd();
  }
  if (this.retina !== null && this.retina !== undefined) {
    output.writeFieldBegin('retina', Thrift.Type.STRING, 5);
    output.writeString(this.retina);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiFuncTestOutputT = function(args) {
  this.testName = null;
  this.status = null;
  if (args) {
    if (args.testName !== undefined) {
      this.testName = args.testName;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
  }
};
XcalarApiFuncTestOutputT.prototype = {};
XcalarApiFuncTestOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.testName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiFuncTestOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiFuncTestOutputT');
  if (this.testName !== null && this.testName !== undefined) {
    output.writeFieldBegin('testName', Thrift.Type.STRING, 1);
    output.writeString(this.testName);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiStartFuncTestOutputT = function(args) {
  this.numTests = null;
  this.testOutputs = null;
  if (args) {
    if (args.numTests !== undefined) {
      this.numTests = args.numTests;
    }
    if (args.testOutputs !== undefined) {
      this.testOutputs = args.testOutputs;
    }
  }
};
XcalarApiStartFuncTestOutputT.prototype = {};
XcalarApiStartFuncTestOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numTests = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size272 = 0;
        var _rtmp3276;
        this.testOutputs = [];
        var _etype275 = 0;
        _rtmp3276 = input.readListBegin();
        _etype275 = _rtmp3276.etype;
        _size272 = _rtmp3276.size;
        for (var _i277 = 0; _i277 < _size272; ++_i277)
        {
          var elem278 = null;
          elem278 = new XcalarApiFuncTestOutputT();
          elem278.read(input);
          this.testOutputs.push(elem278);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiStartFuncTestOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiStartFuncTestOutputT');
  if (this.numTests !== null && this.numTests !== undefined) {
    output.writeFieldBegin('numTests', Thrift.Type.I32, 1);
    output.writeI32(this.numTests);
    output.writeFieldEnd();
  }
  if (this.testOutputs !== null && this.testOutputs !== undefined) {
    output.writeFieldBegin('testOutputs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.testOutputs.length);
    for (var iter279 in this.testOutputs)
    {
      if (this.testOutputs.hasOwnProperty(iter279))
      {
        iter279 = this.testOutputs[iter279];
        iter279.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListFuncTestOutputT = function(args) {
  this.numTests = null;
  this.testNames = null;
  if (args) {
    if (args.numTests !== undefined) {
      this.numTests = args.numTests;
    }
    if (args.testNames !== undefined) {
      this.testNames = args.testNames;
    }
  }
};
XcalarApiListFuncTestOutputT.prototype = {};
XcalarApiListFuncTestOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numTests = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size280 = 0;
        var _rtmp3284;
        this.testNames = [];
        var _etype283 = 0;
        _rtmp3284 = input.readListBegin();
        _etype283 = _rtmp3284.etype;
        _size280 = _rtmp3284.size;
        for (var _i285 = 0; _i285 < _size280; ++_i285)
        {
          var elem286 = null;
          elem286 = input.readString().value;
          this.testNames.push(elem286);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListFuncTestOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListFuncTestOutputT');
  if (this.numTests !== null && this.numTests !== undefined) {
    output.writeFieldBegin('numTests', Thrift.Type.I32, 1);
    output.writeI32(this.numTests);
    output.writeFieldEnd();
  }
  if (this.testNames !== null && this.testNames !== undefined) {
    output.writeFieldBegin('testNames', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.testNames.length);
    for (var iter287 in this.testNames)
    {
      if (this.testNames.hasOwnProperty(iter287))
      {
        iter287 = this.testNames[iter287];
        output.writeString(iter287);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiOutputResultT = function(args) {
  this.getVersionOutput = null;
  this.statusOutput = null;
  this.statOutput = null;
  this.listNodesOutput = null;
  this.makeResultSetOutput = null;
  this.resultSetNextOutput = null;
  this.getTableMetaOutput = null;
  this.indexOutput = null;
  this.loadOutput = null;
  this.getTableRefCountOutput = null;
  this.deleteDagNodesOutput = null;
  this.joinOutput = null;
  this.statGroupIdMapOutput = null;
  this.listDatasetsOutput = null;
  this.mapOutput = null;
  this.aggregateOutput = null;
  this.filterOutput = null;
  this.queryOutput = null;
  this.queryStateOutput = null;
  this.listTargetsOutput = null;
  this.dagOutput = null;
  this.listFilesOutput = null;
  this.groupByOutput = null;
  this.listRetinasOutput = null;
  this.getRetinaOutput = null;
  this.listParametersInRetinaOutput = null;
  this.keyLookupOutput = null;
  this.topOutput = null;
  this.listXdfsOutput = null;
  this.memoryOutput = null;
  this.sessionListOutput = null;
  this.getQueryOutput = null;
  this.listSchedTaskOutput = null;
  this.supportGenerateOutput = null;
  this.projectOutput = null;
  this.getRowNumOutput = null;
  this.udfAddUpdateOutput = null;
  this.udfGetOutput = null;
  this.perNodeOpStatsOutput = null;
  this.opStatsOutput = null;
  this.importRetinaOutput = null;
  this.previewOutput = null;
  this.exportRetinaOutput = null;
  this.startFuncTestOutput = null;
  this.listFuncTestOutput = null;
  this.sessionInfoOutput = null;
  if (args) {
    if (args.getVersionOutput !== undefined) {
      this.getVersionOutput = args.getVersionOutput;
    }
    if (args.statusOutput !== undefined) {
      this.statusOutput = args.statusOutput;
    }
    if (args.statOutput !== undefined) {
      this.statOutput = args.statOutput;
    }
    if (args.listNodesOutput !== undefined) {
      this.listNodesOutput = args.listNodesOutput;
    }
    if (args.makeResultSetOutput !== undefined) {
      this.makeResultSetOutput = args.makeResultSetOutput;
    }
    if (args.resultSetNextOutput !== undefined) {
      this.resultSetNextOutput = args.resultSetNextOutput;
    }
    if (args.getTableMetaOutput !== undefined) {
      this.getTableMetaOutput = args.getTableMetaOutput;
    }
    if (args.indexOutput !== undefined) {
      this.indexOutput = args.indexOutput;
    }
    if (args.loadOutput !== undefined) {
      this.loadOutput = args.loadOutput;
    }
    if (args.getTableRefCountOutput !== undefined) {
      this.getTableRefCountOutput = args.getTableRefCountOutput;
    }
    if (args.deleteDagNodesOutput !== undefined) {
      this.deleteDagNodesOutput = args.deleteDagNodesOutput;
    }
    if (args.joinOutput !== undefined) {
      this.joinOutput = args.joinOutput;
    }
    if (args.statGroupIdMapOutput !== undefined) {
      this.statGroupIdMapOutput = args.statGroupIdMapOutput;
    }
    if (args.listDatasetsOutput !== undefined) {
      this.listDatasetsOutput = args.listDatasetsOutput;
    }
    if (args.mapOutput !== undefined) {
      this.mapOutput = args.mapOutput;
    }
    if (args.aggregateOutput !== undefined) {
      this.aggregateOutput = args.aggregateOutput;
    }
    if (args.filterOutput !== undefined) {
      this.filterOutput = args.filterOutput;
    }
    if (args.queryOutput !== undefined) {
      this.queryOutput = args.queryOutput;
    }
    if (args.queryStateOutput !== undefined) {
      this.queryStateOutput = args.queryStateOutput;
    }
    if (args.listTargetsOutput !== undefined) {
      this.listTargetsOutput = args.listTargetsOutput;
    }
    if (args.dagOutput !== undefined) {
      this.dagOutput = args.dagOutput;
    }
    if (args.listFilesOutput !== undefined) {
      this.listFilesOutput = args.listFilesOutput;
    }
    if (args.groupByOutput !== undefined) {
      this.groupByOutput = args.groupByOutput;
    }
    if (args.listRetinasOutput !== undefined) {
      this.listRetinasOutput = args.listRetinasOutput;
    }
    if (args.getRetinaOutput !== undefined) {
      this.getRetinaOutput = args.getRetinaOutput;
    }
    if (args.listParametersInRetinaOutput !== undefined) {
      this.listParametersInRetinaOutput = args.listParametersInRetinaOutput;
    }
    if (args.keyLookupOutput !== undefined) {
      this.keyLookupOutput = args.keyLookupOutput;
    }
    if (args.topOutput !== undefined) {
      this.topOutput = args.topOutput;
    }
    if (args.listXdfsOutput !== undefined) {
      this.listXdfsOutput = args.listXdfsOutput;
    }
    if (args.memoryOutput !== undefined) {
      this.memoryOutput = args.memoryOutput;
    }
    if (args.sessionListOutput !== undefined) {
      this.sessionListOutput = args.sessionListOutput;
    }
    if (args.getQueryOutput !== undefined) {
      this.getQueryOutput = args.getQueryOutput;
    }
    if (args.listSchedTaskOutput !== undefined) {
      this.listSchedTaskOutput = args.listSchedTaskOutput;
    }
    if (args.supportGenerateOutput !== undefined) {
      this.supportGenerateOutput = args.supportGenerateOutput;
    }
    if (args.projectOutput !== undefined) {
      this.projectOutput = args.projectOutput;
    }
    if (args.getRowNumOutput !== undefined) {
      this.getRowNumOutput = args.getRowNumOutput;
    }
    if (args.udfAddUpdateOutput !== undefined) {
      this.udfAddUpdateOutput = args.udfAddUpdateOutput;
    }
    if (args.udfGetOutput !== undefined) {
      this.udfGetOutput = args.udfGetOutput;
    }
    if (args.perNodeOpStatsOutput !== undefined) {
      this.perNodeOpStatsOutput = args.perNodeOpStatsOutput;
    }
    if (args.opStatsOutput !== undefined) {
      this.opStatsOutput = args.opStatsOutput;
    }
    if (args.importRetinaOutput !== undefined) {
      this.importRetinaOutput = args.importRetinaOutput;
    }
    if (args.previewOutput !== undefined) {
      this.previewOutput = args.previewOutput;
    }
    if (args.exportRetinaOutput !== undefined) {
      this.exportRetinaOutput = args.exportRetinaOutput;
    }
    if (args.startFuncTestOutput !== undefined) {
      this.startFuncTestOutput = args.startFuncTestOutput;
    }
    if (args.listFuncTestOutput !== undefined) {
      this.listFuncTestOutput = args.listFuncTestOutput;
    }
    if (args.sessionInfoOutput !== undefined) {
      this.sessionInfoOutput = args.sessionInfoOutput;
    }
  }
};
XcalarApiOutputResultT.prototype = {};
XcalarApiOutputResultT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.getVersionOutput = new XcalarApiGetVersionOutputT();
        this.getVersionOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.statusOutput = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.statOutput = new XcalarApiGetStatOutputT();
        this.statOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.listNodesOutput = new XcalarApiListDagNodesOutputT();
        this.listNodesOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.makeResultSetOutput = new XcalarApiMakeResultSetOutputT();
        this.makeResultSetOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.resultSetNextOutput = new XcalarApiResultSetNextOutputT();
        this.resultSetNextOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.getTableMetaOutput = new XcalarApiGetTableMetaOutputT();
        this.getTableMetaOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.indexOutput = new XcalarApiNewTableOutputT();
        this.indexOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.loadOutput = new XcalarApiBulkLoadOutputT();
        this.loadOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.getTableRefCountOutput = new XcalarApiGetTableRefCountOutputT();
        this.getTableRefCountOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.deleteDagNodesOutput = new XcalarApiDeleteDagNodeOutputT();
        this.deleteDagNodesOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.joinOutput = new XcalarApiNewTableOutputT();
        this.joinOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.statGroupIdMapOutput = new XcalarApiGetStatGroupIdMapOutputT();
        this.statGroupIdMapOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.listDatasetsOutput = new XcalarApiListDatasetsOutputT();
        this.listDatasetsOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.mapOutput = new XcalarApiNewTableOutputT();
        this.mapOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRUCT) {
        this.aggregateOutput = new XcalarApiAggregateOutputT();
        this.aggregateOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRUCT) {
        this.filterOutput = new XcalarApiNewTableOutputT();
        this.filterOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRUCT) {
        this.queryOutput = new XcalarApiQueryOutputT();
        this.queryOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRUCT) {
        this.queryStateOutput = new XcalarApiQueryStateOutputT();
        this.queryStateOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.listTargetsOutput = new XcalarApiListExportTargetsOutputT();
        this.listTargetsOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRUCT) {
        this.dagOutput = new XcalarApiDagOutputT();
        this.dagOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRUCT) {
        this.listFilesOutput = new XcalarApiListFilesOutputT();
        this.listFilesOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRUCT) {
        this.groupByOutput = new XcalarApiNewTableOutputT();
        this.groupByOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRUCT) {
        this.listRetinasOutput = new XcalarApiListRetinasOutputT();
        this.listRetinasOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRUCT) {
        this.getRetinaOutput = new XcalarApiGetRetinaOutputT();
        this.getRetinaOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRUCT) {
        this.listParametersInRetinaOutput = new XcalarApiListParametersInRetinaOutputT();
        this.listParametersInRetinaOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.STRUCT) {
        this.keyLookupOutput = new XcalarApiKeyLookupOutputT();
        this.keyLookupOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.STRUCT) {
        this.topOutput = new XcalarApiTopOutputT();
        this.topOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.STRUCT) {
        this.listXdfsOutput = new XcalarApiListXdfsOutputT();
        this.listXdfsOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRUCT) {
        this.memoryOutput = new XcalarApiMemoryOutputT();
        this.memoryOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionListOutput = new XcalarApiSessionListOutputT();
        this.sessionListOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.STRUCT) {
        this.getQueryOutput = new XcalarApiGetQueryOutputT();
        this.getQueryOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.STRUCT) {
        this.listSchedTaskOutput = new XcalarApiListSchedTaskOutputT();
        this.listSchedTaskOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.STRUCT) {
        this.supportGenerateOutput = new XcalarApiSupportGenerateOutputT();
        this.supportGenerateOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.STRUCT) {
        this.projectOutput = new XcalarApiNewTableOutputT();
        this.projectOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 36:
      if (ftype == Thrift.Type.STRUCT) {
        this.getRowNumOutput = new XcalarApiNewTableOutputT();
        this.getRowNumOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 37:
      if (ftype == Thrift.Type.STRUCT) {
        this.udfAddUpdateOutput = new XcalarApiUdfAddUpdateOutputT();
        this.udfAddUpdateOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 38:
      if (ftype == Thrift.Type.STRUCT) {
        this.udfGetOutput = new UdfModuleSrcT();
        this.udfGetOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 39:
      if (ftype == Thrift.Type.STRUCT) {
        this.perNodeOpStatsOutput = new XcalarApiPerNodeOpStatsT();
        this.perNodeOpStatsOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.STRUCT) {
        this.opStatsOutput = new XcalarApiOpStatsOutT();
        this.opStatsOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.STRUCT) {
        this.importRetinaOutput = new XcalarApiImportRetinaOutputT();
        this.importRetinaOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 42:
      if (ftype == Thrift.Type.STRUCT) {
        this.previewOutput = new XcalarApiPreviewOutputT();
        this.previewOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 43:
      if (ftype == Thrift.Type.STRUCT) {
        this.exportRetinaOutput = new XcalarApiExportRetinaOutputT();
        this.exportRetinaOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 44:
      if (ftype == Thrift.Type.STRUCT) {
        this.startFuncTestOutput = new XcalarApiStartFuncTestOutputT();
        this.startFuncTestOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 45:
      if (ftype == Thrift.Type.STRUCT) {
        this.listFuncTestOutput = new XcalarApiListFuncTestOutputT();
        this.listFuncTestOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 46:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionInfoOutput = new XcalarApiListDagNodesOutputT();
        this.sessionInfoOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiOutputResultT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiOutputResultT');
  if (this.getVersionOutput !== null && this.getVersionOutput !== undefined) {
    output.writeFieldBegin('getVersionOutput', Thrift.Type.STRUCT, 1);
    this.getVersionOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.statusOutput !== null && this.statusOutput !== undefined) {
    output.writeFieldBegin('statusOutput', Thrift.Type.I32, 2);
    output.writeI32(this.statusOutput);
    output.writeFieldEnd();
  }
  if (this.statOutput !== null && this.statOutput !== undefined) {
    output.writeFieldBegin('statOutput', Thrift.Type.STRUCT, 3);
    this.statOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listNodesOutput !== null && this.listNodesOutput !== undefined) {
    output.writeFieldBegin('listNodesOutput', Thrift.Type.STRUCT, 4);
    this.listNodesOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.makeResultSetOutput !== null && this.makeResultSetOutput !== undefined) {
    output.writeFieldBegin('makeResultSetOutput', Thrift.Type.STRUCT, 5);
    this.makeResultSetOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.resultSetNextOutput !== null && this.resultSetNextOutput !== undefined) {
    output.writeFieldBegin('resultSetNextOutput', Thrift.Type.STRUCT, 6);
    this.resultSetNextOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.getTableMetaOutput !== null && this.getTableMetaOutput !== undefined) {
    output.writeFieldBegin('getTableMetaOutput', Thrift.Type.STRUCT, 7);
    this.getTableMetaOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.indexOutput !== null && this.indexOutput !== undefined) {
    output.writeFieldBegin('indexOutput', Thrift.Type.STRUCT, 8);
    this.indexOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.loadOutput !== null && this.loadOutput !== undefined) {
    output.writeFieldBegin('loadOutput', Thrift.Type.STRUCT, 9);
    this.loadOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.getTableRefCountOutput !== null && this.getTableRefCountOutput !== undefined) {
    output.writeFieldBegin('getTableRefCountOutput', Thrift.Type.STRUCT, 10);
    this.getTableRefCountOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.deleteDagNodesOutput !== null && this.deleteDagNodesOutput !== undefined) {
    output.writeFieldBegin('deleteDagNodesOutput', Thrift.Type.STRUCT, 11);
    this.deleteDagNodesOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.joinOutput !== null && this.joinOutput !== undefined) {
    output.writeFieldBegin('joinOutput', Thrift.Type.STRUCT, 12);
    this.joinOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.statGroupIdMapOutput !== null && this.statGroupIdMapOutput !== undefined) {
    output.writeFieldBegin('statGroupIdMapOutput', Thrift.Type.STRUCT, 13);
    this.statGroupIdMapOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listDatasetsOutput !== null && this.listDatasetsOutput !== undefined) {
    output.writeFieldBegin('listDatasetsOutput', Thrift.Type.STRUCT, 14);
    this.listDatasetsOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.mapOutput !== null && this.mapOutput !== undefined) {
    output.writeFieldBegin('mapOutput', Thrift.Type.STRUCT, 15);
    this.mapOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.aggregateOutput !== null && this.aggregateOutput !== undefined) {
    output.writeFieldBegin('aggregateOutput', Thrift.Type.STRUCT, 16);
    this.aggregateOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.filterOutput !== null && this.filterOutput !== undefined) {
    output.writeFieldBegin('filterOutput', Thrift.Type.STRUCT, 17);
    this.filterOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.queryOutput !== null && this.queryOutput !== undefined) {
    output.writeFieldBegin('queryOutput', Thrift.Type.STRUCT, 18);
    this.queryOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.queryStateOutput !== null && this.queryStateOutput !== undefined) {
    output.writeFieldBegin('queryStateOutput', Thrift.Type.STRUCT, 19);
    this.queryStateOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listTargetsOutput !== null && this.listTargetsOutput !== undefined) {
    output.writeFieldBegin('listTargetsOutput', Thrift.Type.STRUCT, 20);
    this.listTargetsOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.dagOutput !== null && this.dagOutput !== undefined) {
    output.writeFieldBegin('dagOutput', Thrift.Type.STRUCT, 21);
    this.dagOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listFilesOutput !== null && this.listFilesOutput !== undefined) {
    output.writeFieldBegin('listFilesOutput', Thrift.Type.STRUCT, 22);
    this.listFilesOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.groupByOutput !== null && this.groupByOutput !== undefined) {
    output.writeFieldBegin('groupByOutput', Thrift.Type.STRUCT, 23);
    this.groupByOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listRetinasOutput !== null && this.listRetinasOutput !== undefined) {
    output.writeFieldBegin('listRetinasOutput', Thrift.Type.STRUCT, 24);
    this.listRetinasOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.getRetinaOutput !== null && this.getRetinaOutput !== undefined) {
    output.writeFieldBegin('getRetinaOutput', Thrift.Type.STRUCT, 25);
    this.getRetinaOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listParametersInRetinaOutput !== null && this.listParametersInRetinaOutput !== undefined) {
    output.writeFieldBegin('listParametersInRetinaOutput', Thrift.Type.STRUCT, 26);
    this.listParametersInRetinaOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.keyLookupOutput !== null && this.keyLookupOutput !== undefined) {
    output.writeFieldBegin('keyLookupOutput', Thrift.Type.STRUCT, 27);
    this.keyLookupOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.topOutput !== null && this.topOutput !== undefined) {
    output.writeFieldBegin('topOutput', Thrift.Type.STRUCT, 28);
    this.topOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listXdfsOutput !== null && this.listXdfsOutput !== undefined) {
    output.writeFieldBegin('listXdfsOutput', Thrift.Type.STRUCT, 29);
    this.listXdfsOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.memoryOutput !== null && this.memoryOutput !== undefined) {
    output.writeFieldBegin('memoryOutput', Thrift.Type.STRUCT, 30);
    this.memoryOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionListOutput !== null && this.sessionListOutput !== undefined) {
    output.writeFieldBegin('sessionListOutput', Thrift.Type.STRUCT, 31);
    this.sessionListOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.getQueryOutput !== null && this.getQueryOutput !== undefined) {
    output.writeFieldBegin('getQueryOutput', Thrift.Type.STRUCT, 32);
    this.getQueryOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listSchedTaskOutput !== null && this.listSchedTaskOutput !== undefined) {
    output.writeFieldBegin('listSchedTaskOutput', Thrift.Type.STRUCT, 33);
    this.listSchedTaskOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.supportGenerateOutput !== null && this.supportGenerateOutput !== undefined) {
    output.writeFieldBegin('supportGenerateOutput', Thrift.Type.STRUCT, 34);
    this.supportGenerateOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.projectOutput !== null && this.projectOutput !== undefined) {
    output.writeFieldBegin('projectOutput', Thrift.Type.STRUCT, 35);
    this.projectOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.getRowNumOutput !== null && this.getRowNumOutput !== undefined) {
    output.writeFieldBegin('getRowNumOutput', Thrift.Type.STRUCT, 36);
    this.getRowNumOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.udfAddUpdateOutput !== null && this.udfAddUpdateOutput !== undefined) {
    output.writeFieldBegin('udfAddUpdateOutput', Thrift.Type.STRUCT, 37);
    this.udfAddUpdateOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.udfGetOutput !== null && this.udfGetOutput !== undefined) {
    output.writeFieldBegin('udfGetOutput', Thrift.Type.STRUCT, 38);
    this.udfGetOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.perNodeOpStatsOutput !== null && this.perNodeOpStatsOutput !== undefined) {
    output.writeFieldBegin('perNodeOpStatsOutput', Thrift.Type.STRUCT, 39);
    this.perNodeOpStatsOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.opStatsOutput !== null && this.opStatsOutput !== undefined) {
    output.writeFieldBegin('opStatsOutput', Thrift.Type.STRUCT, 40);
    this.opStatsOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.importRetinaOutput !== null && this.importRetinaOutput !== undefined) {
    output.writeFieldBegin('importRetinaOutput', Thrift.Type.STRUCT, 41);
    this.importRetinaOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.previewOutput !== null && this.previewOutput !== undefined) {
    output.writeFieldBegin('previewOutput', Thrift.Type.STRUCT, 42);
    this.previewOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.exportRetinaOutput !== null && this.exportRetinaOutput !== undefined) {
    output.writeFieldBegin('exportRetinaOutput', Thrift.Type.STRUCT, 43);
    this.exportRetinaOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.startFuncTestOutput !== null && this.startFuncTestOutput !== undefined) {
    output.writeFieldBegin('startFuncTestOutput', Thrift.Type.STRUCT, 44);
    this.startFuncTestOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listFuncTestOutput !== null && this.listFuncTestOutput !== undefined) {
    output.writeFieldBegin('listFuncTestOutput', Thrift.Type.STRUCT, 45);
    this.listFuncTestOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionInfoOutput !== null && this.sessionInfoOutput !== undefined) {
    output.writeFieldBegin('sessionInfoOutput', Thrift.Type.STRUCT, 46);
    this.sessionInfoOutput.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiOutputHeaderT = function(args) {
  this.status = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
  }
};
XcalarApiOutputHeaderT.prototype = {};
XcalarApiOutputHeaderT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiOutputHeaderT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiOutputHeaderT');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiOutputT = function(args) {
  this.hdr = null;
  this.outputResult = null;
  if (args) {
    if (args.hdr !== undefined) {
      this.hdr = args.hdr;
    }
    if (args.outputResult !== undefined) {
      this.outputResult = args.outputResult;
    }
  }
};
XcalarApiOutputT.prototype = {};
XcalarApiOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.hdr = new XcalarApiOutputHeaderT();
        this.hdr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.outputResult = new XcalarApiOutputResultT();
        this.outputResult.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiOutputT');
  if (this.hdr !== null && this.hdr !== undefined) {
    output.writeFieldBegin('hdr', Thrift.Type.STRUCT, 1);
    this.hdr.write(output);
    output.writeFieldEnd();
  }
  if (this.outputResult !== null && this.outputResult !== undefined) {
    output.writeFieldBegin('outputResult', Thrift.Type.STRUCT, 2);
    this.outputResult.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiWorkItemT = function(args) {
  this.apiVersionSignature = null;
  this.api = null;
  this.input = null;
  this.userId = null;
  this.userIdUnique = null;
  this.origApi = null;
  if (args) {
    if (args.apiVersionSignature !== undefined) {
      this.apiVersionSignature = args.apiVersionSignature;
    }
    if (args.api !== undefined) {
      this.api = args.api;
    }
    if (args.input !== undefined) {
      this.input = args.input;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.userIdUnique !== undefined) {
      this.userIdUnique = args.userIdUnique;
    }
    if (args.origApi !== undefined) {
      this.origApi = args.origApi;
    }
  }
};
XcalarApiWorkItemT.prototype = {};
XcalarApiWorkItemT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.apiVersionSignature = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.api = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.input = new XcalarApiInputT();
        this.input.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.userIdUnique = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.origApi = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiWorkItemT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiWorkItemT');
  if (this.apiVersionSignature !== null && this.apiVersionSignature !== undefined) {
    output.writeFieldBegin('apiVersionSignature', Thrift.Type.I32, 1);
    output.writeI32(this.apiVersionSignature);
    output.writeFieldEnd();
  }
  if (this.api !== null && this.api !== undefined) {
    output.writeFieldBegin('api', Thrift.Type.I32, 2);
    output.writeI32(this.api);
    output.writeFieldEnd();
  }
  if (this.input !== null && this.input !== undefined) {
    output.writeFieldBegin('input', Thrift.Type.STRUCT, 3);
    this.input.write(output);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 4);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.userIdUnique !== null && this.userIdUnique !== undefined) {
    output.writeFieldBegin('userIdUnique', Thrift.Type.I64, 5);
    output.writeI64(this.userIdUnique);
    output.writeFieldEnd();
  }
  if (this.origApi !== null && this.origApi !== undefined) {
    output.writeFieldBegin('origApi', Thrift.Type.I32, 6);
    output.writeI32(this.origApi);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiWorkItemResult = function(args) {
  this.jobStatus = null;
  this.output = null;
  if (args) {
    if (args.jobStatus !== undefined) {
      this.jobStatus = args.jobStatus;
    }
    if (args.output !== undefined) {
      this.output = args.output;
    }
  }
};
XcalarApiWorkItemResult.prototype = {};
XcalarApiWorkItemResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.jobStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.output = new XcalarApiOutputT();
        this.output.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiWorkItemResult.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiWorkItemResult');
  if (this.jobStatus !== null && this.jobStatus !== undefined) {
    output.writeFieldBegin('jobStatus', Thrift.Type.I32, 1);
    output.writeI32(this.jobStatus);
    output.writeFieldEnd();
  }
  if (this.output !== null && this.output !== undefined) {
    output.writeFieldBegin('output', Thrift.Type.STRUCT, 2);
    this.output.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDatasetIdInvalidT = 0;
XcalarApiTableIdInvalidT = 0;
XcalarApiDagNodeIdInvalidT = 0;
XcalarApiMaxKeyLenT = 255;
XcalarApiDefaultRecordDelimT = '\n';
XcalarApiDefaultFieldDelimT = '\t';
XcalarApiDefaultQuoteDelimT = '\"';
//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


XcalarApisConstantsT = {
  'XcalarApiMaxEvalStringLen' : 1024,
  'XcalarApiMaxNumParameters' : 20,
  'XcalarApiDefaultTopIntervalInMs' : 100,
  'XcalarApiMaxUdfModuleNameLen' : 255,
  'XcalarApiMaxUdfFuncNameLen' : 255,
  'XcalarApiMaxUdfSourceLen' : 10485760,
  'XcalarApiMaxTableNameLen' : 255,
  'XcalarApiMagic' : 37359285,
  'XcalarApiRetinaMaxNumTables' : 128,
  'XcalarApiUuidStrLen' : 36,
  'XcalarApiMaxQuerySize' : 98304,
  'XcalarApiMaxSingleQuerySize' : 1024,
  'XcalarApiMaxFileNameLen' : 255,
  'XcalarApiMaxNumFuncTests' : 255,
  'XcalarApiMaxFieldNameLen' : 255
};
XcalarApisConstantsTStr = {1024 : 'XcalarApiMaxEvalStringLen',
20 : 'XcalarApiMaxNumParameters',
100 : 'XcalarApiDefaultTopIntervalInMs',
255 : 'XcalarApiMaxUdfModuleNameLen',
255 : 'XcalarApiMaxUdfFuncNameLen',
10485760 : 'XcalarApiMaxUdfSourceLen',
255 : 'XcalarApiMaxTableNameLen',
37359285 : 'XcalarApiMagic',
128 : 'XcalarApiRetinaMaxNumTables',
36 : 'XcalarApiUuidStrLen',
98304 : 'XcalarApiMaxQuerySize',
1024 : 'XcalarApiMaxSingleQuerySize',
255 : 'XcalarApiMaxFileNameLen',
255 : 'XcalarApiMaxNumFuncTests',
255 : 'XcalarApiMaxFieldNameLen'
};
//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


XcalarApisT = {
  'XcalarApiUnknown' : 0,
  'XcalarApiGetVersion' : 1,
  'XcalarApiBulkLoad' : 2,
  'XcalarApiIndex' : 3,
  'XcalarApiGetTableMeta' : 4,
  'XcalarApiShutdown' : 5,
  'XcalarApiGetStat' : 6,
  'XcalarApiGetStatByGroupId' : 7,
  'XcalarApiResetStat' : 8,
  'XcalarApiGetStatGroupIdMap' : 9,
  'XcalarApiListDagNodeInfo' : 10,
  'XcalarApiListDatasets' : 11,
  'XcalarApiShutdownLocal' : 12,
  'XcalarApiMakeResultSet' : 13,
  'XcalarApiResultSetNext' : 14,
  'XcalarApiJoin' : 15,
  'XcalarApiProject' : 16,
  'XcalarApiGetRowNum' : 17,
  'XcalarApiFilter' : 18,
  'XcalarApiGroupBy' : 19,
  'XcalarApiResultSetAbsolute' : 20,
  'XcalarApiFreeResultSet' : 21,
  'XcalarApiDeleteObjects' : 22,
  'XcalarApiGetTableRefCount' : 23,
  'XcalarApiMap' : 24,
  'XcalarApiAggregate' : 25,
  'XcalarApiQuery' : 26,
  'XcalarApiQueryState' : 27,
  'XcalarApiQueryCancel' : 28,
  'XcalarApiAddExportTarget' : 29,
  'XcalarApiListExportTargets' : 30,
  'XcalarApiExport' : 31,
  'XcalarApiGetDag' : 32,
  'XcalarApiListFiles' : 33,
  'XcalarApiStartNodes' : 34,
  'XcalarApiMakeRetina' : 35,
  'XcalarApiListRetinas' : 36,
  'XcalarApiGetRetina' : 37,
  'XcalarApiDeleteRetina' : 38,
  'XcalarApiUpdateRetina' : 39,
  'XcalarApiListParametersInRetina' : 40,
  'XcalarApiExecuteRetina' : 41,
  'XcalarApiImportRetina' : 42,
  'XcalarApiKeyLookup' : 43,
  'XcalarApiKeyAddOrReplace' : 44,
  'XcalarApiKeyDelete' : 45,
  'XcalarApiGetNumNodes' : 46,
  'XcalarApiTop' : 47,
  'XcalarApiMemory' : 48,
  'XcalarApiListXdfs' : 49,
  'XcalarApiRenameNode' : 50,
  'XcalarApiSessionNew' : 51,
  'XcalarApiSessionList' : 52,
  'XcalarApiSessionRename' : 53,
  'XcalarApiSessionSwitch' : 54,
  'XcalarApiSessionDelete' : 55,
  'XcalarApiSessionInfo' : 56,
  'XcalarApiSessionInact' : 57,
  'XcalarApiSessionPersist' : 58,
  'XcalarApiGetQuery' : 59,
  'XcalarApiCreateDht' : 60,
  'XcalarApiKeyAppend' : 61,
  'XcalarApiKeySetIfEqual' : 62,
  'XcalarApiDeleteDht' : 63,
  'XcalarApiSupportGenerate' : 64,
  'XcalarApiSchedTaskCreate' : 65,
  'XcalarApiSchedTaskList' : 66,
  'XcalarApiDeleteSchedTask' : 67,
  'XcalarApiUdfAdd' : 68,
  'XcalarApiUdfUpdate' : 69,
  'XcalarApiUdfGet' : 70,
  'XcalarApiUdfDelete' : 71,
  'XcalarApiCancelOp' : 72,
  'XcalarApiGetPerNodeOpStats' : 73,
  'XcalarApiGetOpStats' : 74,
  'XcalarApiErrorpointSet' : 75,
  'XcalarApiErrorpointList' : 76,
  'XcalarApiPreview' : 77,
  'XcalarApiExportRetina' : 78,
  'XcalarApiStartFuncTests' : 79,
  'XcalarApiListFuncTests' : 80,
  'XcalarApiFunctionInvalid' : 81
};
XcalarApisTStr = {0 : 'XcalarApiUnknown',
1 : 'XcalarApiGetVersion',
2 : 'XcalarApiBulkLoad',
3 : 'XcalarApiIndex',
4 : 'XcalarApiGetTableMeta',
5 : 'XcalarApiShutdown',
6 : 'XcalarApiGetStat',
7 : 'XcalarApiGetStatByGroupId',
8 : 'XcalarApiResetStat',
9 : 'XcalarApiGetStatGroupIdMap',
10 : 'XcalarApiListDagNodeInfo',
11 : 'XcalarApiListDatasets',
12 : 'XcalarApiShutdownLocal',
13 : 'XcalarApiMakeResultSet',
14 : 'XcalarApiResultSetNext',
15 : 'XcalarApiJoin',
16 : 'XcalarApiProject',
17 : 'XcalarApiGetRowNum',
18 : 'XcalarApiFilter',
19 : 'XcalarApiGroupBy',
20 : 'XcalarApiResultSetAbsolute',
21 : 'XcalarApiFreeResultSet',
22 : 'XcalarApiDeleteObjects',
23 : 'XcalarApiGetTableRefCount',
24 : 'XcalarApiMap',
25 : 'XcalarApiAggregate',
26 : 'XcalarApiQuery',
27 : 'XcalarApiQueryState',
28 : 'XcalarApiQueryCancel',
29 : 'XcalarApiAddExportTarget',
30 : 'XcalarApiListExportTargets',
31 : 'XcalarApiExport',
32 : 'XcalarApiGetDag',
33 : 'XcalarApiListFiles',
34 : 'XcalarApiStartNodes',
35 : 'XcalarApiMakeRetina',
36 : 'XcalarApiListRetinas',
37 : 'XcalarApiGetRetina',
38 : 'XcalarApiDeleteRetina',
39 : 'XcalarApiUpdateRetina',
40 : 'XcalarApiListParametersInRetina',
41 : 'XcalarApiExecuteRetina',
42 : 'XcalarApiImportRetina',
43 : 'XcalarApiKeyLookup',
44 : 'XcalarApiKeyAddOrReplace',
45 : 'XcalarApiKeyDelete',
46 : 'XcalarApiGetNumNodes',
47 : 'XcalarApiTop',
48 : 'XcalarApiMemory',
49 : 'XcalarApiListXdfs',
50 : 'XcalarApiRenameNode',
51 : 'XcalarApiSessionNew',
52 : 'XcalarApiSessionList',
53 : 'XcalarApiSessionRename',
54 : 'XcalarApiSessionSwitch',
55 : 'XcalarApiSessionDelete',
56 : 'XcalarApiSessionInfo',
57 : 'XcalarApiSessionInact',
58 : 'XcalarApiSessionPersist',
59 : 'XcalarApiGetQuery',
60 : 'XcalarApiCreateDht',
61 : 'XcalarApiKeyAppend',
62 : 'XcalarApiKeySetIfEqual',
63 : 'XcalarApiDeleteDht',
64 : 'XcalarApiSupportGenerate',
65 : 'XcalarApiSchedTaskCreate',
66 : 'XcalarApiSchedTaskList',
67 : 'XcalarApiDeleteSchedTask',
68 : 'XcalarApiUdfAdd',
69 : 'XcalarApiUdfUpdate',
70 : 'XcalarApiUdfGet',
71 : 'XcalarApiUdfDelete',
72 : 'XcalarApiCancelOp',
73 : 'XcalarApiGetPerNodeOpStats',
74 : 'XcalarApiGetOpStats',
75 : 'XcalarApiErrorpointSet',
76 : 'XcalarApiErrorpointList',
77 : 'XcalarApiPreview',
78 : 'XcalarApiExportRetina',
79 : 'XcalarApiStartFuncTests',
80 : 'XcalarApiListFuncTests',
81 : 'XcalarApiFunctionInvalid'
};
//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


XcalarOrderingT = {
  'XcalarOrderingUnordered' : 0,
  'XcalarOrderingAscending' : 3,
  'XcalarOrderingDescending' : 5,
  'XcalarOrderingInvalid' : 195936478
};
XcalarOrderingTStr = {0 : 'Unordered',
3 : 'Ascending',
5 : 'Descending',
195936478 : 'Invalid'
};
//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


QueryStateT = {
  'qrNotStarted' : 0,
  'qrProcessing' : 1,
  'qrFinished' : 2,
  'qrError' : 3,
  'qrCancelled' : 4
};
QueryStateTStr = {0 : 'qrNotStarted',
1 : 'qrProcessing',
2 : 'qrFinished',
3 : 'qrError',
4 : 'qrCancelled'
};
//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


SchedTaskTypeT = {
  'StUnknown' : 0,
  'StQuery' : 1,
  'StTest' : 2
};
SchedTaskTypeTStr = {0 : 'Unknown task type',
1 : 'query task',
2 : 'unit test task'
};
//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


SourceTypeT = {
  'SrcUnknown' : 0,
  'SrcDataset' : 1,
  'SrcTable' : 2,
  'SrcConstant' : 3,
  'SrcExport' : 4
};
SourceTypeTStr = {0 : 'Unknown',
1 : 'Dataset',
2 : 'Table',
3 : 'Constant',
4 : 'Export'
};
//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


StatusT = {
  'StatusOk' : 0,
  'StatusPerm' : 1,
  'StatusNoEnt' : 2,
  'StatusSrch' : 3,
  'StatusIntr' : 4,
  'StatusIO' : 5,
  'StatusNxIO' : 6,
  'Status2Big' : 7,
  'StatusNoExec' : 8,
  'StatusBadF' : 9,
  'StatusChild' : 10,
  'StatusAgain' : 11,
  'StatusNoMem' : 12,
  'StatusAccess' : 13,
  'StatusFault' : 14,
  'StatusNotBlk' : 15,
  'StatusBusy' : 16,
  'StatusExist' : 17,
  'StatusEof' : 18,
  'StatusXDev' : 19,
  'StatusNoDev' : 20,
  'StatusNotDir' : 21,
  'StatusIsDir' : 22,
  'StatusInval' : 23,
  'StatusNFile' : 24,
  'StatusMFile' : 25,
  'StatusNoTTY' : 26,
  'StatusTxtBsy' : 27,
  'StatusFBig' : 28,
  'StatusNoSpc' : 29,
  'StatusSPipe' : 30,
  'StatusROFS' : 31,
  'StatusMLink' : 32,
  'StatusPipe' : 33,
  'StatusDom' : 34,
  'StatusRange' : 35,
  'StatusDeadLk' : 36,
  'StatusNameTooLong' : 37,
  'StatusNoLck' : 38,
  'StatusNoSys' : 39,
  'StatusNotEmpty' : 40,
  'StatusLoop' : 41,
  'StatusNoMsg' : 42,
  'StatusIdRm' : 43,
  'StatusChRng' : 44,
  'StatusL2NSync' : 45,
  'StatusL3Hlt' : 46,
  'StatusL3Rst' : 47,
  'StatusLNRng' : 48,
  'StatusUnatch' : 49,
  'StatusNoCSI' : 50,
  'StatusL2Hlt' : 51,
  'StatusBadE' : 52,
  'StatusBadR' : 53,
  'StatusXFull' : 54,
  'StatusNoAno' : 55,
  'StatusBadRqC' : 56,
  'StatusBadSlt' : 57,
  'StatusBFont' : 58,
  'StatusNoStr' : 59,
  'StatusNoData' : 60,
  'StatusTime' : 61,
  'StatusNoSR' : 62,
  'StatusNoNet' : 63,
  'StatusNoPkg' : 64,
  'StatusRemote' : 65,
  'StatusNoLink' : 66,
  'StatusAdv' : 67,
  'StatusSRMnt' : 68,
  'StatusComm' : 69,
  'StatusProto' : 70,
  'StatusMultihop' : 71,
  'StatusDotDot' : 72,
  'StatusBadMsg' : 73,
  'StatusOverflow' : 74,
  'StatusNotUniq' : 75,
  'StatusBadFD' : 76,
  'StatusRemChg' : 77,
  'StatusLibAcc' : 78,
  'StatusLibBad' : 79,
  'StatusLibScn' : 80,
  'StatusLibMax' : 81,
  'StatusLibExec' : 82,
  'StatusIlSeq' : 83,
  'StatusRestart' : 84,
  'StatusStrPipe' : 85,
  'StatusUsers' : 86,
  'StatusNotSock' : 87,
  'StatusDestAddrReq' : 88,
  'StatusMsgSize' : 89,
  'StatusPrototype' : 90,
  'StatusNoProtoOpt' : 91,
  'StatusProtoNoSupport' : 92,
  'StatusSockTNoSupport' : 93,
  'StatusOpNotSupp' : 94,
  'StatusPFNoSupport' : 95,
  'StatusAFNoSupport' : 96,
  'StatusAddrInUse' : 97,
  'StatusAddrNotAvail' : 98,
  'StatusNetDown' : 99,
  'StatusNetUnreach' : 100,
  'StatusNetReset' : 101,
  'StatusConnAborted' : 102,
  'StatusConnReset' : 103,
  'StatusNoBufs' : 104,
  'StatusIsConn' : 105,
  'StatusNotConn' : 106,
  'StatusShutdown' : 107,
  'StatusTooManyRefs' : 108,
  'StatusTimedOut' : 109,
  'StatusConnRefused' : 110,
  'StatusHostDown' : 111,
  'StatusHostUnreach' : 112,
  'StatusAlready' : 113,
  'StatusInProgress' : 114,
  'StatusStale' : 115,
  'StatusUClean' : 116,
  'StatusNotNam' : 117,
  'StatusNAvail' : 118,
  'StatusIsNam' : 119,
  'StatusRemoteIo' : 120,
  'StatusDQuot' : 121,
  'StatusNoMedium' : 122,
  'StatusMediumType' : 123,
  'StatusCanceled' : 124,
  'StatusNoKey' : 125,
  'StatusKeyExpired' : 126,
  'StatusKeyRevoked' : 127,
  'StatusKeyRejected' : 128,
  'StatusOwnerDead' : 129,
  'StatusNotRecoverable' : 130,
  'StatusRFKill' : 131,
  'StatusHwPoison' : 132,
  'StatusTrunc' : 133,
  'StatusUnimpl' : 134,
  'StatusUnknown' : 135,
  'StatusMsgLibDeleteFailed' : 136,
  'StatusThrCreateFailed' : 137,
  'StatusThrAborted' : 138,
  'StatusConfigLibDevOpenFailed' : 139,
  'StatusConfigLibDevLSeekFailed' : 140,
  'StatusConfigLibFlashDevOpenFailed' : 141,
  'StatusConfigLibFlashDevLSeekFailed' : 142,
  'StatusConfigLibDeleteFailed' : 143,
  'StatusUsrNodeIncorrectParams' : 144,
  'StatusUnicodeUnsupported' : 145,
  'StatusEAIBadFlags' : 146,
  'StatusEAINoName' : 147,
  'StatusEAIFail' : 148,
  'StatusEAIService' : 149,
  'StatusEAINoData' : 150,
  'StatusEAIAddrFamily' : 151,
  'StatusEAINotCancel' : 152,
  'StatusEAIAllDone' : 153,
  'StatusEAIIDNEncode' : 154,
  'StatusLast' : 155,
  'StatusMore' : 156,
  'StatusCliUnknownCmd' : 157,
  'StatusCliParseError' : 158,
  'StatusSchedQueueLenExceeded' : 159,
  'StatusMsgFail' : 160,
  'StatusMsgOutOfMessages' : 161,
  'StatusMsgShutdown' : 162,
  'StatusNoSuchNode' : 163,
  'StatusNewTableCreated' : 164,
  'StatusNoSuchResultSet' : 165,
  'StatusDfAppendUnsupported' : 166,
  'StatusDfRemoveUnsupported' : 167,
  'StatusDfParseError' : 168,
  'StatusDfRecordCorrupt' : 169,
  'StatusDfFieldNoExist' : 170,
  'StatusDfUnknownFieldType' : 171,
  'StatusDfRecordNotFound' : 172,
  'StatusDfValNotFound' : 173,
  'StatusDfInvalidFormat' : 174,
  'StatusDfLocalFatptrOnly' : 175,
  'StatusDfValuesBufTooSmall' : 176,
  'StatusDfMaxValuesPerFieldExceeded' : 177,
  'StatusDfFieldTypeUnsupported' : 178,
  'StatusDfMaxDictionarySegmentsExceeded' : 179,
  'StatusDfBadRecordId' : 180,
  'StatusDfMaxRecordsExceeded' : 181,
  'StatusDfTypeMismatch' : 182,
  'StatusDsTooManyKeyValues' : 183,
  'StatusDsNotFound' : 184,
  'StatusDsLoadAlreadyStarted' : 185,
  'StatusDsUrlTooLong' : 186,
  'StatusDsInvalidUrl' : 187,
  'StatusDsCreateNotSupported' : 188,
  'StatusDsUnlinkNotSupported' : 189,
  'StatusDsRenameNotSupported' : 190,
  'StatusDsWriteNotSupported' : 191,
  'StatusDsSeekNotSupported' : 192,
  'StatusDsSeekFailed' : 193,
  'StatusDsMkDirNotSupported' : 194,
  'StatusDsRmDirNotSupported' : 195,
  'StatusDsLoadFailed' : 196,
  'StatusDsDatasetInUse' : 197,
  'StatusDsFormatTypeUnsupported' : 198,
  'StatusDsMysqlInitFailed' : 199,
  'StatusDsMysqlConnectFailed' : 200,
  'StatusDsMysqlQueryFailed' : 201,
  'StatusExODBCConnectFailed' : 202,
  'StatusExODBCCleanupFailed' : 203,
  'StatusExODBCAddNotSupported' : 204,
  'StatusExODBCBindFailed' : 205,
  'StatusExODBCTableCreationFailed' : 206,
  'StatusExODBCExportFailed' : 207,
  'StatusExODBCTableExists' : 208,
  'StatusExODBCTableDoesntExist' : 209,
  'StatusExTargetListRace' : 210,
  'StatusExTargetAlreadyExists' : 211,
  'StatusDsGetFileAttrNotSupported' : 212,
  'StatusDsGetFileAttrCompressed' : 213,
  'StatusReallocShrinkFailed' : 214,
  'StatusNsObjAlreadyExists' : 215,
  'StatusTableAlreadyExists' : 216,
  'StatusCliUnclosedQuotes' : 217,
  'StatusRangePartError' : 218,
  'StatusNewFieldNameIsBlank' : 219,
  'StatusNoDataDictForFormatType' : 220,
  'StatusBTreeNotFound' : 221,
  'StatusBTreeKeyTypeMismatch' : 222,
  'StatusBTreeDatasetMismatch' : 223,
  'StatusCmdNotComplete' : 224,
  'StatusInvalidResultSetId' : 225,
  'StatusPositionExceedResultSetSize' : 226,
  'StatusHandleInUse' : 227,
  'StatusCliLineTooLong' : 228,
  'StatusCliErrorReadFromFile' : 229,
  'StatusInvalidTableName' : 230,
  'StatusNsObjNameTooLong' : 231,
  'StatusApiUnexpectedEOF' : 232,
  'StatusStatsInvalidGroupId' : 233,
  'StatusStatsInvalidGroupName' : 234,
  'StatusInvalidHandle' : 235,
  'StatusThriftProtocolError' : 236,
  'StatusBTreeHasNoRoot' : 237,
  'StatusBTreeKeyNotFound' : 238,
  'StatusQaKeyValuePairNotFound' : 239,
  'StatusAstMalformedEvalString' : 240,
  'StatusAstNoSuchFunction' : 241,
  'StatusAstWrongNumberOfArgs' : 242,
  'StatusFieldNameTooLong' : 243,
  'StatusFieldNameAlreadyExists' : 244,
  'StatusXdfWrongNumberOfArgs' : 245,
  'StatusXdfUnaryOperandExpected' : 246,
  'StatusXdfTypeUnsupported' : 247,
  'StatusXdfDivByZero' : 248,
  'StatusXdfMixedTypeNotSupported' : 249,
  'StatusXdfAggregateOverflow' : 250,
  'StatusKvNotFound' : 251,
  'StatusXdbSlotPrettyVacant' : 252,
  'StatusNoDataInXdb' : 253,
  'StatusXdbLoadInProgress' : 254,
  'StatusXdbNotFound' : 255,
  'StatusXdbUninitializedCursor' : 256,
  'StatusQrTaskFailed' : 257,
  'StatusQrIdNonExist' : 258,
  'StatusQrJobNonExist' : 259,
  'StatusApiTaskFailed' : 260,
  'StatusAlreadyIndexed' : 261,
  'StatusEvalUnsubstitutedVariables' : 262,
  'StatusKvDstFull' : 263,
  'StatusModuleNotInit' : 264,
  'StatusMaxJoinFieldsExceeded' : 265,
  'StatusXdbKeyTypeAlreadySet' : 266,
  'StatusJoinTypeMismatch' : 267,
  'StatusJoinDhtMismatch' : 268,
  'StatusFailed' : 269,
  'StatusIllegalFileName' : 270,
  'StatusEmptyFile' : 271,
  'StatusEvalStringTooLong' : 272,
  'StatusTableDeleted' : 273,
  'StatusFailOpenFile' : 274,
  'StatusQueryFailed' : 275,
  'StatusQueryNeedsNewSession' : 276,
  'StatusCreateDagNodeFailed' : 277,
  'StatusDeleteDagNodeFailed' : 278,
  'StatusRenameDagNodeFailed' : 279,
  'StatusChangeDagNodeStateFailed' : 280,
  'StatusAggregateNoSuchField' : 281,
  'StatusAggregateLocalFnNeedArgument' : 282,
  'StatusAggregateAccNotInited' : 283,
  'StatusAggregateReturnValueNotScalar' : 284,
  'StatusNsMaximumObjectsReached' : 285,
  'StatusNsObjInUse' : 286,
  'StatusNsInvalidObjName' : 287,
  'StatusNsNotFound' : 288,
  'StatusDagNodeNotFound' : 289,
  'StatusUpdateDagNodeOperationNotSupported' : 290,
  'StatusMsgMaxPayloadExceeded' : 291,
  'StatusKvEntryNotFound' : 292,
  'StatusKvEntryNotEqual' : 293,
  'StatusStatsCouldNotGetMemUsedInfo' : 294,
  'StatusStatusFieldNotInited' : 295,
  'StatusAggNoSuchFunction' : 296,
  'StatusWaitKeyTimeout' : 297,
  'StatusVariableNameTooLong' : 298,
  'StatusDgDagHandleNotFound' : 299,
  'StatusDgInvalidDagName' : 300,
  'StatusDgDagNameTooLong' : 301,
  'StatusDgDagAlreadyExists' : 302,
  'StatusDgDagEmpty' : 303,
  'StatusDgDagNotEmpty' : 304,
  'StatusDgDagNoMore' : 305,
  'StatusDgDagHandleReserved' : 306,
  'StatusDgNodeInUse' : 307,
  'StatusDgDagNodeError' : 308,
  'StatusDgOperationNotSupported' : 309,
  'StatusDgDagNodeNotReady' : 310,
  'StatusDgFailToDestroyHandle' : 311,
  'StatusDsDatasetLoaded' : 312,
  'StatusDsDatasetNotReady' : 313,
  'StatusSessionNotFound' : 314,
  'StatusSessionExists' : 315,
  'StatusSessionNotInact' : 316,
  'StatusSessionNameInvalid' : 317,
  'StatusSessionError' : 318,
  'StatusSessionActiveElsewhere' : 319,
  'StatusDgDeleteOperationNotPermitted' : 320,
  'StatusUdfModuleLoadFailed' : 321,
  'StatusUdfModuleAlreadyExists' : 322,
  'StatusUdfModuleNotFound' : 323,
  'StatusUdfModuleEmpty' : 324,
  'StatusUdfModuleInvalidName' : 325,
  'StatusUdfModuleInvalidType' : 326,
  'StatusUdfModuleInvalidSource' : 327,
  'StatusUdfModuleSourceTooLarge' : 328,
  'StatusUdfFunctionLoadFailed' : 329,
  'StatusUdfFunctionNotFound' : 330,
  'StatusUdfFunctionNameTooLong' : 331,
  'StatusUdfFunctionTooManyParams' : 332,
  'StatusUdfVarNameTooLong' : 333,
  'StatusUdfUnsupportedType' : 334,
  'StatusUdfPersistInvalid' : 335,
  'StatusUdfPyConvert' : 336,
  'StatusUdfExecuteFailed' : 337,
  'StatusUdfInval' : 338,
  'StatusUdfDeletePartial' : 339,
  'StatusXcalarEvalTokenNameTooLong' : 340,
  'StatusNoConfigFile' : 341,
  'StatusCouldNotResolveSchema' : 342,
  'StatusDhtEmptyDhtName' : 343,
  'StatusDhtUpperBoundLessThanLowerBound' : 344,
  'StatusLogChecksumFailed' : 345,
  'StatusDhtDoesNotPreserveOrder' : 346,
  'StatusLogMaximumEntrySizeExceeded' : 347,
  'StatusLogCorruptHeader' : 348,
  'StatusLogCorrupt' : 349,
  'StatusLogVersionMismatch' : 350,
  'StatusKvInvalidKeyChar' : 351,
  'StatusDhtProtected' : 352,
  'StatusKvStoreNotFound' : 353,
  'StatusSSE42Unsupported' : 354,
  'StatusPyBadUdfName' : 355,
  'StatusLicExpired' : 356,
  'StatusLogHandleClosed' : 357,
  'StatusLogHandleInvalid' : 358,
  'StatusShutdownInProgress' : 359,
  'StatusOrderingNotSupported' : 360,
  'StatusHdfsNoConnect' : 361,
  'StatusHdfsNoDirectoryListing' : 362,
  'StatusCliCanvasTooSmall' : 363,
  'StatusDagParamInputTypeMismatch' : 364,
  'StatusParameterTooLong' : 365,
  'StatusExceedMaxScheduleTime' : 366,
  'StatusExceedMaxSchedulePeriod' : 367,
  'StatusXcalarApiNotParameterizable' : 368,
  'StatusQrNotFound' : 369,
  'StatusJoinOrderingMismatch' : 370,
  'StatusInvalidUserCookie' : 371,
  'StatusStTooManySchedTask' : 372,
  'StatusRowUnfinished' : 373,
  'StatusInputTooLarge' : 374,
  'StatusConfigInvalid' : 375,
  'StatusInvalNodeId' : 376,
  'StatusNoLocalNodes' : 377,
  'StatusDsFallocateNotSupported' : 378,
  'StatusNoExtension' : 379,
  'StatusExportTargetNotSupported' : 380,
  'StatusExportInvalidCreateRule' : 381,
  'StatusExportNoColumns' : 382,
  'StatusExportTooManyColumns' : 383,
  'StatusExportColumnNameTooLong' : 384,
  'StatusExportEmptyResultSet' : 385,
  'StatusExportUnresolvedSchema' : 386,
  'StatusExportSFFileExists' : 387,
  'StatusExportSFFileDoesntExist' : 388,
  'StatusMonPortInvalid' : 389,
  'StatusExportSFFileDirDuplicate' : 390,
  'StatusExportSFFileCorrupted' : 391,
  'StatusExportSFFileRuleNeedsNewFile' : 392,
  'StatusExportSFFileRuleSizeTooSmall' : 393,
  'StatusExportSFSingleSplitConflict' : 394,
  'StatusExportSFAppendSepConflict' : 395,
  'StatusExportSFAppendSingleHeader' : 396,
  'StatusExportSFInvalidHeaderType' : 397,
  'StatusExportSFInvalidSplitType' : 398,
  'StatusExportSFMaxSizeZero' : 399,
  'StatusVersionMismatch' : 400,
  'StatusFileCorrupt' : 401,
  'StatusApiFunctionInvalid' : 402,
  'StatusLibArchiveError' : 403,
  'StatusSendSocketFail' : 404,
  'StatusNodeSkipped' : 405,
  'StatusDfCastTruncationOccurred' : 406,
  'StatusEvalCastError' : 407,
  'StatusLogUnaligned' : 408,
  'StatusStrEncodingNotSupported' : 409,
  'StatusShmsgInterfaceClosed' : 410,
  'StatusOperationHasFinished' : 411,
  'StatusOpstatisticsNotAvail' : 412,
  'StatusRetinaParseError' : 413,
  'StatusRetinaTooManyColumns' : 414,
  'StatusUdfModuleOverwrittenSuccessfully' : 415,
  'StatusSupportFail' : 416,
  'StatusShmsgPayloadTooLarge' : 417,
  'StatusNoChild' : 418,
  'StatusChildTerminated' : 419,
  'StatusXdbMaxSgElemsExceeded' : 420,
  'StatusAggregateResultNotFound' : 421,
  'StatusMaxRowSizeExceeded' : 422,
  'StatusMaxDirectoryDepthExceeded' : 423,
  'StatusDirectorySubdirOpenFailed' : 424,
  'StatusInvalidDatasetName' : 425,
  'StatusMaxStatsGroupExceeded' : 426,
  'StatusLrqDuplicateUserDefinedFields' : 427,
  'StatusTypeConversionError' : 428,
  'StatusNotSupportedInProdBuild' : 429,
  'StatusOutOfFaultInjModuleSlots' : 430,
  'StatusNoSuchErrorpointModule' : 431,
  'StatusNoSuchErrorpoint' : 432,
  'StatusAllFilesEmpty' : 433,
  'StatusStatsGroupNameTooLong' : 434,
  'StatusStatsNameTooLong' : 435,
  'StatusMaxStatsExceeded' : 436,
  'StatusStatsGroupIsFull' : 437,
  'StatusNoMatchingFiles' : 438,
  'StatusFieldNotFound' : 439,
  'StatusImmediateNameCollision' : 440,
  'StatusFatptrPrefixCollision' : 441,
  'StatusListFilesNotSupported' : 442,
  'StatusAlreadyLoadDone' : 443,
  'StatusSkipRecordNeedsDelim' : 444,
  'StatusNoParent' : 445,
  'StatusRebuildDagFailed' : 446,
  'StatusStackSizeTooSmall' : 447,
  'StatusTargetDoesntExist' : 448,
  'StatusExODBCRemoveNotSupported' : 449,
  'StatusFunctionalTestDisabled' : 450,
  'StatusFunctionalTestNumFuncTestExceeded' : 451,
  'StatusTargetCorrupted' : 452,
  'StatusUdfPyConvertFromFailed' : 453,
  'StatusHdfsWRNotSupported' : 454,
  'StatusFunctionalTestNoTablesLeft' : 455,
  'StatusFunctionalTestTableEmpty' : 456,
  'StatusRegexCompileFailed' : 457,
  'StatusUdfNotFound' : 458,
  'StatusApisWorkTooManyOutstanding' : 459,
  'StatusInvalidUserNameLen' : 460,
  'StatusUdfPyInjectFailed' : 461,
  'StatusUsrNodeInited' : 462,
  'StatusFileListParseError' : 463,
  'StatusLoadArgsInvalid' : 464,
  'StatusAllWorkDone' : 465,
  'StatusUdfAlreadyExists' : 466
};
StatusTStr = {0 : 'Success',
1 : 'Operation not permitted',
2 : 'No such file or directory',
3 : 'No such process',
4 : 'Interrupted system call',
5 : 'I/O error',
6 : 'No such device or address',
7 : 'Argument list too long',
8 : 'Exec format error',
9 : 'Bad file number',
10 : 'No child processes',
11 : 'Try again',
12 : 'Out of memory',
13 : 'Permission denied',
14 : 'Bad address',
15 : 'Block device required',
16 : 'Device or resource busy',
17 : 'File exists',
18 : 'End of file',
19 : 'Cross-device link',
20 : 'No such device',
21 : 'Not a directory',
22 : 'Is a directory',
23 : 'Invalid argument',
24 : 'File table overflow',
25 : 'Too many open files',
26 : 'Not a typewriter',
27 : 'Text file busy',
28 : 'File too large',
29 : 'No space left on device',
30 : 'Illegal seek',
31 : 'Read-only file system',
32 : 'Too many links',
33 : 'Broken pipe',
34 : 'Math argument out of domain of func',
35 : 'Math result not representable',
36 : 'Resource deadlock would occur',
37 : 'File name too long',
38 : 'No record locks available',
39 : 'Function not implemented',
40 : 'Directory not empty',
41 : 'Too many symbolic links encountered',
42 : 'No message of desired type',
43 : 'Identifier removed',
44 : 'Channel number out of range',
45 : 'Level 2 not synchronized',
46 : 'Level 3 halted',
47 : 'Level 3 reset',
48 : 'Link number out of range',
49 : 'Protocol driver not attached',
50 : 'No CSI structure available',
51 : 'Level 2 halted',
52 : 'Invalid exchange',
53 : 'Invalid request descriptor',
54 : 'Exchange full',
55 : 'No anode',
56 : 'Invalid request code',
57 : 'Invalid slot',
58 : 'Bad font file format',
59 : 'Device not a stream',
60 : 'No data available',
61 : 'Timer expired',
62 : 'Out of streams resources',
63 : 'Machine is not on the network',
64 : 'Package not installed',
65 : 'Object is remote',
66 : 'Link has been severed',
67 : 'Advertise error',
68 : 'Srmount error',
69 : 'Communication error on send',
70 : 'Protocol error',
71 : 'Multihop attempted',
72 : 'RFS specific error',
73 : 'Not a data message',
74 : 'Value too large for defined data type',
75 : 'Name not unique on network',
76 : 'File descriptor in bad state',
77 : 'Remote address changed',
78 : 'Can not access a needed shared library',
79 : 'Accessing a corrupted shared library',
80 : '.lib section in a.out corrupted',
81 : 'Attempting to link in too many shared libraries',
82 : 'Cannot exec a shared library directly',
83 : 'Illegal byte sequence',
84 : 'Interrupted system call should be restarted',
85 : 'Streams pipe error',
86 : 'Too many users',
87 : 'Socket operation on non-socket',
88 : 'Destination address required',
89 : 'Message too long',
90 : 'Protocol wrong type for socket',
91 : 'Protocol not available',
92 : 'Protocol not supported',
93 : 'Socket type not supported',
94 : 'Operation not supported on transport endpoint',
95 : 'Protocol family not supported',
96 : 'Address family not supported by protocol',
97 : 'Address already in use',
98 : 'Cannot assign requested address',
99 : 'Network is down',
100 : 'Network is unreachable',
101 : 'Network dropped connection because of reset',
102 : 'Software caused connection abort',
103 : 'Connection reset by peer',
104 : 'No buffer space available',
105 : 'Transport endpoint is already connected',
106 : 'Transport endpoint is not connected',
107 : 'Cannot send after transport endpoint shutdown',
108 : 'Too many references: cannot splice',
109 : 'Connection timed out',
110 : 'Connection refused',
111 : 'Host is down',
112 : 'No route to host',
113 : 'Operation already in progress',
114 : 'Operation now in progress',
115 : 'Stale NFS file handle',
116 : 'Structure needs cleaning',
117 : 'Not a XENIX named type file',
118 : 'No XENIX semaphores available',
119 : 'Is a named type file',
120 : 'Remote I/O error',
121 : 'Quota exceeded',
122 : 'No medium found',
123 : 'Wrong medium type',
124 : 'Operation Canceled',
125 : 'Required key not available',
126 : 'Key has expired',
127 : 'Key has been revoked',
128 : 'Key was rejected by service',
129 : 'Owner died',
130 : 'State not recoverable',
131 : 'Operation not possible due to RF-kill',
132 : 'Memory page has hardware error',
133 : 'Output truncated',
134 : 'Not implemented',
135 : 'Unknown error',
136 : 'msgLib delete() failed',
137 : 'thrCreate() failed',
138 : 'Thread was aborted',
139 : 'libConfig open() failed',
140 : 'libConfig seek failed',
141 : 'libConfig flash open() failed',
142 : 'libConfig flash lseek failed',
143 : 'libConfig configDelete() failed',
144 : 'Incorrect params to UsrNodeMain',
145 : 'Unicode strings are not supported by this function',
146 : 'Invalid value for ai_flags field',
147 : 'NAME or SERVICE is unknown',
148 : 'Non-recoverable failure in name resolution',
149 : 'SERVICE not supported for socket type',
150 : 'No address associated with NAME',
151 : 'Address family for NAME not supported',
152 : 'Request not canceled',
153 : 'All requests done',
154 : 'IDN encoding failed',
155 : 'Last page',
156 : 'More data to follow. Not end of stream',
157 : 'Command not found',
158 : 'Error parsing command',
159 : 'Sched queue length exceeded',
160 : 'Failure in the message layer',
161 : 'Out of messages',
162 : 'Shutdown message',
163 : 'No such node exists in cluster',
164 : 'New table created',
165 : 'No such result set',
166 : 'Data format does not support appending fields',
167 : 'Data format does not support removing fields',
168 : 'Failed to parse data format value',
169 : 'Record data format is corrupt',
170 : 'Field does not exist within record',
171 : 'Unknown field type',
172 : 'Failed to find a record corresponding to the given record number',
173 : 'Searched value was not found',
174 : 'Invalid data format',
175 : 'Context does not support dereferencing a remote Fatptr',
176 : 'Values buffer is too small to store even a single field value',
177 : 'Too many values discovered for a single field',
178 : 'Field type is not supported in this format',
179 : 'Maximum number of dictionary segments reached',
180 : 'Bad record identifier',
181 : 'System has exceeded the configured maximum number of records; try increasing Constants.DfMaxRecords',
182 : 'Type mismatch during index creation',
183 : 'Intended key has more than a single',
184 : 'Dataset not found',
185 : 'Loading of this dataset has already started',
186 : 'URL length is too large',
187 : 'URL is not valid',
188 : 'Data source type does not support file creation',
189 : 'Data source type does not support file deletion',
190 : 'Data source type does not support file rename',
191 : 'Data source type does not support writing',
192 : 'Data source type does not support seeking',
193 : 'Seek failed',
194 : 'Data source type does not support directory creation',
195 : 'Data source type does not support directory removal',
196 : 'Loading of this dataset failed',
197 : 'Dataset is in use',
198 : 'Data source does not support specified data format type',
199 : 'Failed to initialize the mysql client library',
200 : 'Failed to connect to mysql server & database',
201 : 'Failed to run query against mysql table',
202 : 'Failed to connect to the specified Data Source Name',
203 : 'Failed to cleanup an internal nested error',
204 : 'ODBC based database connections must be created outside of Xcalar',
205 : 'Failed to bind variable to ODBC parameter',
206 : 'Failed to create ODBC table',
207 : 'Failed to export record to ODBC table',
208 : 'Export table already exists',
209 : 'Export table does not exist',
210 : 'A target was added while targets were being listed',
211 : 'The requested target already exists',
212 : 'Data source type does not support file attributes',
213 : 'Could not determine uncompressed file size',
214 : 'Failed to shrink memory allocation',
215 : 'name already exists',
216 : 'Table already exists',
217 : 'Invalid command. Could not find matching quotes',
218 : 'Failed to compute the range partition hash function',
219 : 'Field name cannot be blank',
220 : 'No data dictionary defined for format type',
221 : 'Could not find BTree associated with table handle',
222 : 'BTree key type does not match insert message key type',
223 : 'BTree dataset identifier does not match insert message dataset identifier',
224 : 'Command is still running',
225 : 'Invalid result set ID',
226 : 'Cannot set position to beyond result set size',
227 : 'Table is in use right now and cannot be deleted',
228 : 'One of the lines in the CLI is too long',
229 : 'Encountered an error reading from file',
230 : 'Invalid table name',
231 : 'Table or dataset name is too long',
232 : 'Unexpected end-of-file attempting to read from socket',
233 : 'stats group ID is invalid',
234 : 'stats group name is invalid',
235 : 'Invalid handle',
236 : 'Error communicating across thrift connection',
237 : 'Malformed BTree. BTree has no root',
238 : 'Could not find key in BTree',
239 : 'Could not find key-value pair',
240 : 'Malformed eval string',
241 : 'Could not find function',
242 : 'Wrong number of arguments passed to function',
243 : 'The new field name is too long',
244 : 'The field name you entered already exists',
245 : 'Wrong number of operands provided to operator',
246 : 'Operation requires 1 operand',
247 : 'Operation is not supported on input type',
248 : 'Divide by zero error',
249 : 'Mixed type is not supported in this xdf',
250 : 'Aggregate output has insufficient size to store the result',
251 : 'KV not found in table',
252 : 'Listen to: Pretty Vacant by Sex Pistols',
253 : 'Xdb is vacant',
254 : 'Xdb is loading data',
255 : 'Stale XdbHandle, Xdb not found',
256 : 'Xdb cursor is uninitialized',
257 : 'Task(s) failed',
258 : 'The query ID does not exist',
259 : 'There is no query job associate with this ID',
260 : 'API Task Failed',
261 : 'The source table is already indexed by the specified key',
262 : 'Some variables are undefined during evaluation',
263 : 'The destination key/value buffer was full',
264 : 'The module is not initialized yet',
265 : 'Maximum number of joined values exceeded',
266 : 'Xdb key type is already set',
267 : 'Join keys must be of the same data type',
268 : 'Joins may only be performed on tables with the same DHT',
269 : 'Failed',
270 : 'FileName entered is illegal',
271 : 'File contents are empty',
272 : 'Eval string entered is too long',
273 : 'Table has been deleted',
274 : 'Cant open the file',
275 : 'Query failed',
276 : 'Batch Query needs to run in new session',
277 : 'Failed to create a DAG node',
278 : 'Failed to delete a DAG node',
279 : 'Failed to rename a DAG node',
280 : 'Failed to change the state of DAG node',
281 : 'No such field found while running aggregate',
282 : 'Local function requires argument',
283 : 'Accumulator is not inited',
284 : 'Return value of aggregate is not a scalar',
285 : 'Maximum number of tables and datasets reached',
286 : 'Table or dataset is in use',
287 : 'Bad table or dataset name',
288 : 'Table or dataset not found',
289 : 'Could not find dag node',
290 : 'Update operation not supported',
291 : 'Message response size would exceed maximum message payload size',
292 : 'The requested key was not found',
293 : 'The requested key\'s value doesn\'t equal the provided value',
294 : 'Could not get amount of memory consumed',
295 : 'No valid status received!',
296 : 'No such aggregate operator!',
297 : 'timed out waiting for table key type to resolve',
298 : 'Variable name in evalString too long',
299 : 'DAG handle not found',
300 : 'DAG name is invalid',
301 : 'DAG name is too long',
302 : 'DAG name already exists',
303 : 'DAG is empty',
304 : 'DAG is not empty',
305 : 'No more DAG nodes available',
306 : 'DAG handle is not available',
307 : 'DAG Node is currently in use',
308 : 'DAG Node is in error state',
309 : 'Operation not supported on the target',
310 : 'DAG node is not ready',
311 : 'Fail to destroy DAG handle',
312 : 'Dataset has been loaded',
313 : 'Dataset is not ready',
314 : 'Session does not exist',
315 : 'The session already exists',
316 : 'The target session was not inactive',
317 : 'The name or pattern supplied is not allowed',
318 : 'The session has an unrecoverable error',
319 : 'The session is active on another node',
320 : 'The delete operation is not permitted',
321 : 'Failed to load UDF module',
322 : 'A module with the given name already exists',
323 : 'The specified module was not found',
324 : 'The given module contains no functions',
325 : 'Module name is invalid',
326 : 'Module type is invalid',
327 : 'Module source is invalid',
328 : 'Module source is too large',
329 : 'Failed to load UDF function',
330 : 'The specified function was not found in the given module',
331 : 'UDF function name exceeds allowed length',
332 : 'UDF function has too many parameters',
333 : 'UDF variable or parameter name exceeds allowed length',
334 : 'Variable type not supported by UDF',
335 : 'Persisted UDF is invalid',
336 : 'Failed to convert value to python data type',
337 : 'Failed to execute UDF',
338 : 'Invalid argument passed to UDF',
339 : 'Failed to delete UDF on all nodes',
340 : 'Token name in evalString is too long',
341 : 'No configuration file specified',
342 : 'Could not resolve result set schema',
343 : 'DHT name is empty',
344 : 'Upper bound is less than lower bound',
345 : 'Checksum validation failed while reading log entry',
346 : 'DHT chosen doesn\'t preserve sorted order!',
347 : 'Maximum log entry size exceeded',
348 : 'Log entry header is corrupt',
349 : 'Log format not as expected',
350 : 'Unrecognized log version',
351 : 'Invalid KvStore key character',
352 : 'System DHTs may not be modified',
353 : 'The requested KvStore doesn\'t exist',
354 : 'The CPU does not support Intel SSE 4.2 instructions',
355 : 'Illegal character in UDF name',
356 : 'Xcalar license has expired',
357 : 'The log file was already closed',
358 : 'The log handle is not valid',
359 : 'The cluster is in the process of shutting down',
360 : 'Chosen ordering is not supported',
361 : 'Failed to connect to HDFS volume',
362 : 'Failed to get HDFS directory listing',
363 : 'Available area is too small to render graph',
364 : 'Mismatch between parameter type and node type',
365 : 'The Parameter is too long',
366 : 'Scheduled time may not exceed one year',
367 : 'Scheduled period may not exceed one year',
368 : 'The selected API is not parameterizable',
369 : 'Could not find query record associated with the query id',
370 : 'Joins may only be performed on tables with the same ordering',
371 : 'Invalid user cookie provided',
372 : 'Too many scheduled tasks',
373 : 'Row has not been completely demystified',
374 : 'Input is too large',
375 : 'Failed to parse Xcalar configuration file',
376 : 'The node ID is invalid',
377 : 'There are no local nodes in the confiruation file',
378 : 'Data source type does not support fallocate',
379 : 'No file extension',
380 : 'Export target is not supported',
381 : 'Invalid creation rule specified',
382 : 'No columns specified for export',
383 : 'Too many columns specified for export',
384 : 'Specified column name too long',
385 : 'Empty result set cannot be exported',
386 : 'Export requires a known schema',
387 : 'Export file already exists',
388 : 'Export file doesn\'t exist',
389 : 'Monitor port number is invalid',
390 : 'Export file and directory both exist with the same base name',
391 : 'Files were corrupted during export',
392 : 'Export file requires a new file be created',
393 : 'Specified max export file size too small',
394 : 'Cannot export to a single file while specifying header should be separate',
395 : 'Cannot export append with a separate header file',
396 : 'Cannot export append to a single file while adding a header',
397 : 'Invalid header type specified',
398 : 'Invalid split type specified',
399 : 'Specified max file size must be greater than 0',
400 : 'File version is unsupported',
401 : 'Detected a file corruption',
402 : 'An invalid request was sent to Xcalar',
403 : 'Error occurred when using libarchive',
404 : 'Failed to initialize send socket',
405 : 'Node was skipped due to a previous error',
406 : 'Field value truncated during cast',
407 : 'Cast operation failed',
408 : 'Log buffer is not aligned',
409 : 'String encoding not supported',
410 : 'Messaging interface with other process has been closed',
411 : 'Operation has finished',
412 : 'Operation statistics are not avaiable',
413 : 'Failed to parse retina file',
414 : 'Too many columns specified for Retina',
415 : 'Successfully overwrote UDF module',
416 : 'Support bundle generation failed',
417 : 'Message payload too large to fit within message',
418 : 'No childnode is available to process the operation',
419 : 'Child process terminated',
420 : 'Number of pages in an Xdb slot exceeds max extent sg elements',
421 : 'Could not find aggregate result',
422 : 'Maximum row size was exceeded',
423 : 'Maximum directory depth exceeded',
424 : 'Failed to open subdirectory',
425 : 'Invalid dataset name provided',
426 : 'Max statistics group size was exceeded',
427 : 'Duplicate user-defined field found',
428 : 'Type conversion error',
429 : 'Operation not supported in prod build',
430 : 'Out of available fault injection module slots',
431 : 'No such errorpoint module',
432 : 'No such errorpoint',
433 : 'All specified files empty',
434 : 'Stats group name too long',
435 : 'Stats name too long',
436 : 'Max statistics number was exceeded',
437 : 'Stats group is full',
438 : 'No files matching name pattern',
439 : 'Invalid fatptr prefix or field name',
440 : 'Duplicated immediate name',
441 : 'Duplicated fatptr prefix',
442 : 'List files is not supported for this source type',
443 : 'Load done already called on this xdb',
444 : 'Skip records must be specified with a record delimiter',
445 : 'Parent process has terminated',
446 : 'Replay session failed',
447 : 'stack size is less than 2MB',
448 : 'Target does not exist',
449 : 'ODBC based database connections must be removed outside Xcalar',
450 : 'Functional test disabled in this build',
451 : 'Too many functional tests requested',
452 : 'Target log corrupted',
453 : 'Failed to convert from Python object to Xcalar type',
454 : 'HDFS does not support read/write files',
455 : 'No tables left in sessionGraph',
456 : 'The table is empty',
457 : 'Input regular expression is invalid',
458 : 'User defined function not found',
459 : 'Too many outstanding APIs, try again later',
460 : 'The supplied user name is not within the allowed size range',
461 : 'Failed to inject Python UDF module',
462 : 'Invalid initialization',
463 : 'Failed to parse user defined file list',
464 : 'Invalid load arguments',
465 : 'All work has been done.',
466 : 'This UDF already exists. Delete before adding'
};
//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


UdfTypeT = {
  'UdfTypePython' : 1
};
UdfModuleSrcT = function(args) {
  this.type = null;
  this.moduleName = null;
  this.sourceSize = null;
  this.source = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.moduleName !== undefined) {
      this.moduleName = args.moduleName;
    }
    if (args.sourceSize !== undefined) {
      this.sourceSize = args.sourceSize;
    }
    if (args.source !== undefined) {
      this.source = args.source;
    }
  }
};
UdfModuleSrcT.prototype = {};
UdfModuleSrcT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.moduleName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.sourceSize = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UdfModuleSrcT.prototype.write = function(output) {
  output.writeStructBegin('UdfModuleSrcT');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.moduleName !== null && this.moduleName !== undefined) {
    output.writeFieldBegin('moduleName', Thrift.Type.STRING, 2);
    output.writeString(this.moduleName);
    output.writeFieldEnd();
  }
  if (this.sourceSize !== null && this.sourceSize !== undefined) {
    output.writeFieldBegin('sourceSize', Thrift.Type.I64, 3);
    output.writeI64(this.sourceSize);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 4);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

XcalarApiService_queueWork_args = function(args) {
  this.workItem = null;
  if (args) {
    if (args.workItem !== undefined) {
      this.workItem = args.workItem;
    }
  }
};
XcalarApiService_queueWork_args.prototype = {};
XcalarApiService_queueWork_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.workItem = new XcalarApiWorkItemT();
        this.workItem.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiService_queueWork_args.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiService_queueWork_args');
  if (this.workItem !== null && this.workItem !== undefined) {
    output.writeFieldBegin('workItem', Thrift.Type.STRUCT, 1);
    this.workItem.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiService_queueWork_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof XcalarApiException) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err !== undefined) {
      this.err = args.err;
    }
  }
};
XcalarApiService_queueWork_result.prototype = {};
XcalarApiService_queueWork_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new XcalarApiWorkItemResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new XcalarApiException();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiService_queueWork_result.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiService_queueWork_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
XcalarApiServiceClient.prototype = {};
XcalarApiServiceClient.prototype.queueWork = function(workItem, callback) {
  this.send_queueWork(workItem, callback); 
  if (!callback) {
    return this.recv_queueWork();
  }
};

XcalarApiServiceClient.prototype.send_queueWork = function(workItem, callback) {
  this.output.writeMessageBegin('queueWork', Thrift.MessageType.CALL, this.seqid);
  var args = new XcalarApiService_queueWork_args();
  args.workItem = workItem;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_queueWork();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

XcalarApiServiceClient.prototype.recv_queueWork = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new XcalarApiService_queueWork_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err) {
    throw result.err;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'queueWork failed: unknown result';
};
//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


XcalarApiVersionT = {
  'XcalarApiVersionSignature' : 21413021
};
XcalarApiVersionTStr = {21413021 : '146bc9d5ee3f618ef04b1658ff0386d8'
};
// Async extension for XcalarApiService.js
XcalarApiServiceClient.prototype.queueWorkAsync = function(workItem) {
  var self = this;
  return (this.send_queueWorkAsync(workItem)
  .then(function(result) {
    return self.recv_queueWorkAsync.call(self);
  }));
};

XcalarApiServiceClient.prototype.send_queueWorkAsync = function(workItem) {
  var onComplete = function() {
  };
  this.output.writeMessageBegin('queueWork', Thrift.MessageType.CALL, this.seqid);
  var args = new XcalarApiService_queueWork_args();
  args.workItem = workItem;
  args.write(this.output);
  this.output.writeMessageEnd();

  return (this.output.getTransport()
    .jqRequest(null, this.output.getTransport().flush(true), null, onComplete));
};

XcalarApiServiceClient.prototype.recv_queueWorkAsync = function() {
  var deferred = jQuery.Deferred();

  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    deferred.reject(x);
  } else {
    var result = new XcalarApiService_queueWork_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.err) {
      deferred.reject(result.err);
    } else if (null !== result.success) {
      deferred.resolve(result.success);
    } else {
      deferred.reject('queueWork failed: unknown result');
    }

  }
  return (deferred.promise());
};var userIdUnique = 1;
var userIdName = "test";

var verbose = true;
var superVerbose = true;

ThriftHandle = function(args) {
    this.transport = null;
    this.protocol = null;
    this.client = null;
};

WorkItem = function() {
    var workItem = new XcalarApiWorkItemT();
    workItem.userIdUnique = userIdUnique;
    workItem.userId = userIdName;
    workItem.apiVersionSignature = XcalarApiVersionT.XcalarApiVersionSignature;
    return (workItem);
}

function xcalarConnectThrift(hostname, port) {
    var thriftUrl = "http://" + hostname + ":" + port.toString() +
        "/thrift/service/XcalarApiService/";

    console.log("xcalarConnectThrift(thriftUrl = " + thriftUrl + ")")

    var transport = new Thrift.Transport(thriftUrl);
    var protocol  = new Thrift.Protocol(transport);
    var client    = new XcalarApiServiceClient(protocol);

    var thriftHandle = new ThriftHandle();
    thriftHandle.transport = transport;
    thriftHandle.protocol = protocol;
    thriftHandle.client = client;

    return (thriftHandle);
}

function xcalarGetNumNodesWorkItem() {
    var workItem = new WorkItem();
    workItem.api = XcalarApisT.XcalarApiGetNumNodes;
    return (workItem);
}

function xcalarGetNumNodes(thriftHandle) {
    var deferred = jQuery.Deferred();

    if (verbose) {
        console.log("xcalarGetNumNodes()");
    }
    var workItem = xcalarGetNumNodesWorkItem();

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var getNumNodesOutput = result.output.outputResult.getNumNodesOutput;
        // No status
        if (result.jobStatus != StatusT.StatusOk) {
            deferred.reject(result.jobStatus);
        }
        deferred.resolve(result);
    })
    .fail(function(error) {
        console.log("xcalarGetNumNodes() caught exception:", error);

        error = new XcalarApiGetNumNodesOutputT();
        error.version = "<unknown>";
        error.apiVersionSignatureFull = "<unknown>";
        error.apiVersionSignatureShort = 0;

        deferred.reject(error);
    });

    return (deferred.promise());
}


function xcalarGetVersionWorkItem() {
    var workItem = new WorkItem();
    workItem.api = XcalarApisT.XcalarApiGetVersion;
    return (workItem);
}

function xcalarGetVersion(thriftHandle) {
    var deferred = jQuery.Deferred();

    if (verbose) {
        console.log("xcalarGetVersion()");
    }
    var workItem = xcalarGetVersionWorkItem();

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var getVersionOutput = result.output.outputResult.getVersionOutput;
        // No status
        if (result.jobStatus != StatusT.StatusOk) {
            deferred.reject(result.jobStatus);
        }
        deferred.resolve(result);
    })
    .fail(function(error) {
        console.log("xcalarGetVersion() caught exception:", error);

        error = new XcalarApiGetVersionOutputT();
        error.version = "<unknown>";
        error.apiVersionSignatureFull = "<unknown>";
        error.apiVersionSignatureShort = 0;

        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarPreviewWorkItem(url, fileNamePattern, recursive, numBytesRequested) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();

    workItem.api = XcalarApisT.XcalarApiPreview
    workItem.input.previewInput = new XcalarApiPreviewInputT();
    workItem.input.previewInput.url = url;
    workItem.input.previewInput.fileNamePattern = fileNamePattern;
    workItem.input.previewInput.recursive = recursive;
    workItem.input.previewInput.numBytesRequested = numBytesRequested;
    return (workItem);
}

function xcalarPreview(thriftHandle, url, fileNamePattern, recursive, numBytesRequested) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarPreview(url = " + url +
                    ", fileNamePattern = " + fileNamePattern +
                    ", recursive = " + recursive +
                    ", numBytesRequested = " + numBytesRequested);
    }

    var workItem = xcalarPreviewWorkItem(url, fileNamePattern, recursive, numBytesRequested);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var previewOutput = result.output.outputResult.previewOutput;
        var status = result.output.hdr.status;
        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }

        previewOutput.buffer = atob(previewOutput.buffer);

        deferred.resolve(previewOutput);
    })
    .fail(function(error) {
        console.log("xcalarPreview() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarLoadWorkItem(url, name, format, maxSampleSize, loadArgs) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.loadInput = new XcalarApiBulkLoadInputT();
    workItem.input.loadInput.dataset = new XcalarApiDatasetT();

    workItem.api = XcalarApisT.XcalarApiBulkLoad;
    workItem.input.loadInput.dataset.url = url;
    workItem.input.loadInput.dataset.name = name;
    workItem.input.loadInput.dataset.formatType = format;
    workItem.input.loadInput.loadArgs = loadArgs;
    workItem.input.loadInput.loadArgs.maxSize = maxSampleSize;
    return (workItem);
}

function xcalarLoad(thriftHandle, url, name, format, maxSampleSize, loadArgs) {
    var deferred = jQuery.Deferred();

    if (verbose) {
        console.log("xcalarLoad(url = " + url + ", name = " + name +
                    ", format = " +
                    DfFormatTypeTStr[format] + ", maxSampleSize = " +
                    maxSampleSize.toString() + "recursive = " +
		    loadArgs.recursive + ", fileNamePattern = " +
		    loadArgs.fileNamePattern + ")");
        if (format === DfFormatTypeT.DfFormatCsv) {
            console.log("loadArgs.csv.recordDelim = " + loadArgs.csv.recordDelim + ", " +
                        "loadArgs.csv.fieldDelim = " + loadArgs.csv.fieldDelim + ", " +
                        "loadArgs.csv.quoteDelim = " + loadArgs.csv.quoteDelim + ", " +
                        "loadArgs.csv.linesToSkip = " + loadArgs.csv.linesToSkip + ", " +
                        "loadArgs.csv.isCRLF = " + loadArgs.csv.isCRLF + ", " +
                        "loadArgs.csv.hasHeader = " + loadArgs.csv.hasHeader)
        }
    }

    var workItem = xcalarLoadWorkItem(url, name, format, maxSampleSize,
                                      loadArgs);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var loadOutput = result.output.outputResult.loadOutput;
        var status = result.output.hdr.status;
        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(loadOutput);
    })
    .fail(function(error) {
        console.log("xcalarLoad() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());

}

function xcalarIndexDatasetWorkItem(datasetName, keyName, dstTableName,
                                    dhtName, fatptrPrefixName, ordering) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.indexInput = new XcalarApiIndexInputT();
    workItem.input.indexInput.source = new XcalarApiNamedInputT();
    workItem.input.indexInput.dstTable = new XcalarApiTableT();

    workItem.api = XcalarApisT.XcalarApiIndex;
    workItem.input.indexInput.source.isTable = false;
    workItem.input.indexInput.source.name = datasetName;
    workItem.input.indexInput.source.xid = XcalarApiXidInvalidT;
    workItem.input.indexInput.dstTable.tableName = dstTableName;
    workItem.input.indexInput.dstTable.tableId = XcalarApiTableIdInvalidT;
    workItem.input.indexInput.keyName = keyName;
    workItem.input.indexInput.dhtName = dhtName;
    workItem.input.indexInput.fatptrPrefixName = fatptrPrefixName;
    workItem.input.indexInput.ordering = ordering;
    return (workItem);
}

function xcalarIndexDataset(thriftHandle, datasetName, keyName, dstTableName,
                            dhtName, ordering, fatptrPrefixName) {
    var deferred = jQuery.Deferred();

    if (verbose) {
        console.log("xcalarIndexDataset(datasetName = " + datasetName +
                    ", keyName = " + keyName + ", dstTableName = " +
                    dstTableName + ", fatptrPrefixName = " +
                    fatptrPrefixName + ", ordering = " + ordering + ")");
    }

    var workItem = xcalarIndexDatasetWorkItem(datasetName, keyName,
                                              dstTableName, dhtName,
                                              fatptrPrefixName, ordering);
    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var indexOutput = result.output.outputResult.indexOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }

        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(indexOutput);
    })
    .fail(function(error) {
        console.log("xcalarIndexDataset() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());

}

function xcalarIndexTableWorkItem(srcTableName, dstTableName, keyName, dhtName,
                                  ordering) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.indexInput = new XcalarApiIndexInputT();
    workItem.input.indexInput.source = new XcalarApiNamedInputT();
    workItem.input.indexInput.dstTable = new XcalarApiTableT();

    workItem.api = XcalarApisT.XcalarApiIndex;
    workItem.input.indexInput.source.isTable = true;
    workItem.input.indexInput.source.name = srcTableName;
    workItem.input.indexInput.source.xid = XcalarApiXidInvalidT;
    workItem.input.indexInput.dstTable.tableName = dstTableName;
    workItem.input.indexInput.dstTable.tableId = XcalarApiTableIdInvalidT;
    workItem.input.indexInput.keyName = keyName;
    workItem.input.indexInput.dhtName = dhtName;
    workItem.input.indexInput.ordering = ordering;
    return (workItem);
}

function xcalarIndexTable(thriftHandle, srcTableName, keyName, dstTableName,
                          dhtName, ordering) {
    var deferred = jQuery.Deferred();

    if (verbose) {
        console.log("xcalarIndexTable(srcTableName = " + srcTableName +
                   ", keyName = " + keyName + ", dstTableName = " +
                    dstTableName + ", dhtName = " + dhtName +
                    ", ordering = " + ordering + ")");
    }

    var workItem = xcalarIndexTableWorkItem(srcTableName, dstTableName,
                                            keyName, dhtName, ordering);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var indexOutput = result.output.outputResult.indexOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(indexOutput);
    })
    .fail(function(error) {
        console.log("xcalarIndexTable() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarGetMetaWorkItem(datasetName, tableName) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.getTableMetaInput = new XcalarApiNamedInputT();

    workItem.api = XcalarApisT.XcalarApiGetTableMeta;
    if (tableName == "") {
        workItem.input.getTableMetaInput.isTable = false;
        workItem.input.getTableMetaInput.name = datasetName;
    } else {
        workItem.input.getTableMetaInput.isTable = true;
        workItem.input.getTableMetaInput.name = tableName;
    }
    workItem.input.getTableMetaInput.xid = XcalarApiXidInvalidT;

    return (workItem);
}

function xcalarGetMetaInt(thriftHandle, datasetName, tableName) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarGetMeta(tableName = " + tableName + ", " +
                    "datasetName =" + datasetName + ")");
    }

    var workItem = xcalarGetMetaWorkItem(datasetName, tableName);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var metaOutput = result.output.outputResult.getTableMetaOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(metaOutput);
    })
    .fail(function(error) {
        console.log("xcalarGetMeta() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarGetDatasetMeta(thriftHandle, datasetName) {
    return (xcalarGetMetaInt(thriftHandle, datasetName, ""));
}

function xcalarGetTableMeta(thriftHandle, tableName) {
    return (xcalarGetMetaInt(thriftHandle, "", tableName));
}

function xcalarShutdownWorkItem(force) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();

    workItem.api = XcalarApisT.XcalarApiShutdown;
    workItem.input.shutdownInput = force;
    return (workItem);
}

function xcalarShutdown(thriftHandle, force) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarShutdown()");
    }

    var workItem = xcalarShutdownWorkItem(force);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = StatusT.StatusOk;
        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
            deferred.reject(status);
        }
        deferred.resolve(status);
    })
    .fail(function(error) {
        console.log("xcalarShutdown() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarStartNodesWorkItem(numNodes) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.startNodesInput = new XcalarApiStartNodesInputT();

    workItem.api = XcalarApisT.XcalarApiStartNodes;
    workItem.input.startNodesInput.numNodes = numNodes;
    return (workItem);
}

function xcalarStartNodes(thriftHandle, numNodes) {
    var deferred = jQuery.Deferred();

    if (verbose) {
        console.log("xcalarStartNodes(numNodes = " + numNodes + ")");
    }

    var workItem = xcalarStartNodesWorkItem(numNodes);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = StatusT.StatusOk;
        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
            deferred.reject(status);
        }
        deferred.resolve(status);
    })
    .fail(function(error) {
        console.log(JSON.stringify(error))
        console.log("xcalarStartNodes() caught exception: "+error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarGetStatsWorkItem(nodeId) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.statInput = new XcalarApiStatInputT();

    workItem.api = XcalarApisT.XcalarApiGetStat;
    workItem.input.statInput.nodeId = nodeId;
    return (workItem);
}

function xcalarGetStats(thriftHandle, nodeId) {
    var deferred = jQuery.Deferred();

    if (verbose) {
        console.log("xcalarGetStats(nodeId = " + nodeId.toString() + ")");
    }

    var workItem = xcalarGetStatsWorkItem(nodeId);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var statOutput = result.output.outputResult.statOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(statOutput);
    })
    .fail(function(error) {
        console.log("xcalarGetStats() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarRenameNodeWorkItem(oldName, newName) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.renameNodeInput = new XcalarApiRenameNodeInputT();
    workItem.input.renameNodeInput.oldName = oldName;
    workItem.input.renameNodeInput.newName = newName;

    workItem.api = XcalarApisT.XcalarApiRenameNode;
    return (workItem);
}

function xcalarRenameNode(thriftHandle, oldName, newName) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarRenameNode(oldName = " + oldName +
                    ", newName = " + newName + ")");
    }

    var workItem = xcalarRenameNodeWorkItem(oldName, newName);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        // statusOutput is a status
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(status);
    })
    .fail(function(error) {
        console.log("xcalarRenameNode() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarGetStatsByGroupIdWorkItem(nodeIdList, groupIdList) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.statByGroupIdInput = new XcalarApiStatByGroupIdInputT();

    workItem.api = XcalarApisT.XcalarApiGetStatByGroupId;
    workItem.input.statByGroupIdInput.numNodeId = nodeIdList.length;
    workItem.input.statByGroupIdInput.nodeId = nodeIdList;
    workItem.input.statByGroupIdInput.numGroupId = groupIdList.length;
    workItem.input.statByGroupIdInput.groupId = groupIdList;
    return (workItem);
}

function xcalarGetStatsByGroupId(thriftHandle, nodeIdList, groupIdList) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarGetStatsByGroupId(nodeIds = " + nodeIdList.toString() +
                    ", numGroupIds = ", + groupIdList.length.toString() +
                    ", ...)");
    }

    var workItem = xcalarGetStatsByGroupIdWorkItem(nodeIdList, groupIdList);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var statOutput = result.output.outputResult.statOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(statOutput);
    })
    .fail(function(error) {
        console.log("xcalarGetStatsByGroupId() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarResetStatsWorkItem(nodeId) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.statInput = new XcalarApiStatInputT();

    workItem.api = XcalarApisT.XcalarApiResetStat;
    workItem.input.statInput.nodeId = nodeId;
    return (workItem);
}

function xcalarResetStats(thriftHandle, nodeId) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarResetStats(nodeId = " + nodeId.toString() + ")");
    }

    var workItem = xcalarResetStatsWorkItem(nodeId);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = result.output.hdr.status;
        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(status);
    })
    .fail(function(error) {
        console.log("xcalarResetStats() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarGetStatGroupIdMapWorkItem(nodeId) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.statInput = new XcalarApiStatInputT();

    workItem.api = XcalarApisT.XcalarApiGetStatGroupIdMap;
    workItem.input.statInput.nodeId = nodeId;
    return (workItem);
}

function xcalarGetStatGroupIdMap(thriftHandle, nodeId, numGroupId) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarGetStatGroupIdMap(nodeId = " + nodeId.toString() +
                    ", numGroupId = " + numGroupId.toString() + ")");
    }

    var workItem = xcalarGetStatGroupIdMapWorkItem(nodeId);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var statGroupIdMapOutput =
                                result.output.outputResult.statGroupIdMapOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(statGroupIdMapOutput);
    })
    .fail(function(error) {
        console.log("xcalarGetStatGroupIdMap() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarQueryWorkItem(queryName, queryStr, sameSession) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.queryInput = new XcalarApiQueryInputT();
    workItem.apiVersionSignature = XcalarApiVersionT.XcalarApiVersionSignature;
    workItem.api = XcalarApisT.XcalarApiQuery;
    workItem.input.queryInput.queryName = queryName;
    workItem.input.queryInput.queryStr = queryStr;
    workItem.input.queryInput.sameSession = sameSession;
    return (workItem);
}

function xcalarQuery(thriftHandle, queryName, queryStr, sameSession) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarQuery(query name= " + queryName +
                    " queryStr" + queryStr + ")");
    }
    var workItem = xcalarQueryWorkItem(queryName, queryStr, sameSession);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var queryOutput = result.output.outputResult.queryOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(queryOutput);
    })
    .fail(function(error) {
        console.log("xcalarQuery() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarQueryStateWorkItem(queryName) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.queryStateInput = new XcalarApiQueryStateInputT();

    workItem.api = XcalarApisT.XcalarApiQueryState;
    workItem.input.queryStateInput.queryName = queryName;
    return (workItem);
}

function xcalarQueryState(thriftHandle, queryName) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarQueryState(query name = " + queryName + ")");
    }

    var workItem = xcalarQueryStateWorkItem(queryName);

    thriftHandle.client.queueWorkAsync(workItem)
    .done(function(result) {
        var queryStateOutput = result.output.outputResult.queryStateOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }

        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }

        deferred.resolve(queryStateOutput);
    })
    .fail(function(error) {
        console.log("xcalarQueryState() caught exception:", error);

        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarQueryCancelWorkItem(queryName) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.queryStateInput = new XcalarApiQueryStateInputT();

    workItem.api = XcalarApisT.XcalarApiQueryCancel;
    workItem.input.queryStateInput.queryName = queryName;
    return (workItem);
}

function xcalarQueryCancel(thriftHandle, queryName) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarQueryCancel(query name = " + queryName + ")");
    }

    var workItem = xcalarQueryCancelWorkItem(queryName);

    thriftHandle.client.queueWorkAsync(workItem)
    .done(function(result) {
        var status = result.output.hdr.status;
        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }

        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }

        deferred.resolve(status);
    })
    .fail(function(error) {
        console.log("xcalarQueryCancel() caught exception:", error);

        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarGetOpStatsWorkItem(dstDagName) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();

    workItem.api = XcalarApisT.XcalarApiGetOpStats;
    workItem.input.dagTableNameInput = dstDagName;
    return (workItem);
}

function xcalarApiGetOpStats(thriftHandle, dstDagName) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarApiGetOpStats(dstDagName = " + dstDagName + ")");
    }
    var workItem = xcalarGetOpStatsWorkItem(dstDagName);
    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = result.output.hdr.status;
        var opStatsOutput = result.output.outputResult.opStatsOutput;
        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(opStatsOutput);
    })
    .fail(function(error) {
        console.log("xcalarApiGetOpStats() caught exception: ", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarCancellationWorkItem(dstDagName) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();

    workItem.api = XcalarApisT.XcalarApiCancelOp;
    workItem.input.dagTableNameInput = dstDagName;
    return (workItem);
}

function xcalarApiCancelOp(thriftHandle, dstDagName) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarApiCancelOp(dstDagName = " + dstDagName + ")");
    }
    var workItem = xcalarCancellationWorkItem(dstDagName);
    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = result.output.hdr.status;
        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(status);
    })
    .fail(function(error) {
        console.log("xcalarApiCancelOp() caught exception: ", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarDagWorkItem(tableName) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();

    workItem.api = XcalarApisT.XcalarApiGetDag;
    workItem.input.dagTableNameInput = tableName;
    return (workItem);
}

function xcalarDag(thriftHandle, tableName) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarDag(tableName = " + tableName + ")");
    }

    var workItem = xcalarDagWorkItem(tableName);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var dagOutput = result.output.outputResult.dagOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(dagOutput);
    })
    .fail(function(error) {
        console.log("xcalarDag() caught exception: " + error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarListDagNodesWorkItem(patternMatch, srcType) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.apiVersion = 0;
    workItem.api = XcalarApisT.XcalarApiListDagNodeInfo;
    workItem.input.listDagNodesInput = new XcalarApiDagNodeNamePatternInputT();
    workItem.input.listDagNodesInput.namePattern = patternMatch;
    workItem.input.listDagNodesInput.srcType = srcType;

    return (workItem);
}

function xcalarListTables(thriftHandle, patternMatch, srcType) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarListTables(patternMatch = " + patternMatch + ")" +
                    " srcType = " + srcType);
    }

    var workItem = xcalarListDagNodesWorkItem(patternMatch, srcType);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var listNodesOutput = result.output.outputResult.listNodesOutput;

        // No job specific status
        if (result.jobStatus != StatusT.StatusOk) {
            listNodesOutput.numTables = 0;
            deferred.reject(result.jobStatus);
        }
        deferred.resolve(listNodesOutput);
    })
    .fail(function(error) {
        console.log("xcalarListTables() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarListDatasetsWorkItem() {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.apiVersion = 0;
    workItem.api = XcalarApisT.XcalarApiListDatasets;
    return (workItem);
}

function xcalarListDatasets(thriftHandle) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarListDatasets()");
    }

    var workItem = xcalarListDatasetsWorkItem();

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var listDatasetsOutput = result.output.outputResult.listDatasetsOutput;
        // No job specific status
        if (result.jobStatus != StatusT.StatusOk) {
            deferred.reject(result.jobStatus);
        }
        deferred.resolve(listDatasetsOutput);
    })
    .fail(function(error) {
        console.log("xcalarListDatasets() caught exception:", error);

        var listDatasetsOutput = new XcalarApiListDatasetsOutputT();
        // XXX FIXME should add StatusT.StatusThriftProtocolError
        listDatasetsOutput.numDatasets = 0;

        deferred.reject(listDatasetsOutput);
    });

    return (deferred.promise());
}

function xcalarMakeResultSetFromTableWorkItem(tableName) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.makeResultSetInput = new XcalarApiNamedInputT();

    workItem.api = XcalarApisT.XcalarApiMakeResultSet;
    workItem.input.makeResultSetInput.isTable = true;
    workItem.input.makeResultSetInput.name = tableName;
    workItem.input.makeResultSetInput.xid = XcalarApiXidInvalidT;
    return (workItem);
}

function xcalarMakeResultSetFromTable(thriftHandle, tableName) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarMakeResultSetFromTable(tableName = " + tableName +
                    ")");
    }

    var workItem = xcalarMakeResultSetFromTableWorkItem(tableName);

    var makeResultSetOutput;
    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        makeResultSetOutput = result.output.outputResult.makeResultSetOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(makeResultSetOutput);
    })
    .fail(function(error) {
        console.log("xcalarMakeResultSetFromTable() caught exception:", error);

        makeResultSetOutput = new XcalarApiMakeResultSetOutputT();
        makeResultSetOutput.status = StatusT.StatusThriftProtocolError;

        deferred.reject(makeResultSetOutput);
    });

    return (deferred.promise());
}

function xcalarMakeResultSetFromDatasetWorkItem(datasetName) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.makeResultSetInput = new XcalarApiNamedInputT();

    workItem.api = XcalarApisT.XcalarApiMakeResultSet;
    workItem.input.makeResultSetInput.isTable = false;
    workItem.input.makeResultSetInput.name = datasetName;
    workItem.input.makeResultSetInput.xid = XcalarApiXidInvalidT;
    return (workItem);
}

function xcalarMakeResultSetFromDataset(thriftHandle, datasetName) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarMakeResultSetFromDataset(datasetName = " +
                    datasetName + ")");
    }

    var workItem = xcalarMakeResultSetFromDatasetWorkItem(datasetName);

    var makeResultSetOutput;
    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        makeResultSetOutput = result.output.outputResult.makeResultSetOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(makeResultSetOutput);
    })
    .fail(function(error) {
        console.log("xcalarMakeResultSetFromDataset() caught exception:",
                    error);

        makeResultSetOutput = new XcalarApiMakeResultSetOutputT();
        makeResultSetOutput.status = StatusT.StatusThriftProtocolError;

        deferred.reject(makeResultSetOutput);
    });

    return (deferred.promise());
}

function xcalarResultSetNextWorkItem(resultSetId, numRecords) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.resultSetNextInput = new XcalarApiResultSetNextInputT();

    workItem.api = XcalarApisT.XcalarApiResultSetNext;
    workItem.input.resultSetNextInput.resultSetId = resultSetId;
    workItem.input.resultSetNextInput.numRecords = numRecords;
    return (workItem);
}

function xcalarResultSetNext(thriftHandle, resultSetId, numRecords) {
    var deferred = jQuery.Deferred();

    if (verbose) {
        console.log("xcalarResultSetNext(resultSetId = " +
                    resultSetId +
                    ", numRecords = " + numRecords.toString() + ")");
    }

    var workItem = xcalarResultSetNextWorkItem(resultSetId, numRecords);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var resultSetNextOutput =
                                 result.output.outputResult.resultSetNextOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(resultSetNextOutput);
    })
    .fail(function(error) {
        console.log("xcalarResultSetNext() caught exception:", error);

        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarJoinWorkItem(leftTableName, rightTableName, joinTableName,
                            joinType, leftRenameMap, rightRenameMap,
                            collisionCheck) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.joinInput = new XcalarApiJoinInputT();
    workItem.input.joinInput.leftTable = new XcalarApiTableT();
    workItem.input.joinInput.rightTable = new XcalarApiTableT();
    workItem.input.joinInput.joinTable = new XcalarApiTableT();

    workItem.api = XcalarApisT.XcalarApiJoin;
    workItem.input.joinInput.leftTable.tableName = leftTableName;
    workItem.input.joinInput.leftTable.tableId = XcalarApiTableIdInvalidT;
    workItem.input.joinInput.rightTable.tableName = rightTableName;
    workItem.input.joinInput.rightTable.tableId = XcalarApiTableIdInvalidT;
    workItem.input.joinInput.joinTable.tableName = joinTableName;
    workItem.input.joinInput.joinTable.tableId = XcalarApiTableIdInvalidT;
    workItem.input.joinInput.joinType = joinType;
    workItem.input.joinInput.collisionCheck = collisionCheck;
    workItem.input.joinInput.renameMap = null;

    if (leftRenameMap == null) {
        workItem.input.joinInput.numLeftColumns = 0;
    } else {
        workItem.input.joinInput.numLeftColumns = leftRenameMap.length;
        workItem.input.joinInput.renameMap = leftRenameMap;
    }

    if (rightRenameMap == null) {
        workItem.input.joinInput.numRightColumns = 0;
    } else {
        workItem.input.joinInput.numRightColumns = rightRenameMap.length;
        if (workItem.input.joinInput.renameMap == null) {
            workItem.input.joinInput.renameMap = rightRenameMap
        } else {
            workItem.input.joinInput.renameMap =
                workItem.input.joinInput.renameMap.concat(rightRenameMap);
        }
    }

    return (workItem);
}

function xcalarJoin(thriftHandle, leftTableName, rightTableName, joinTableName,
                    joinType, leftRenameMap, rightRenameMap, collisionCheck) {
    var deferred = jQuery.Deferred();

    if (verbose) {
        console.log("xcalarJoin(leftTableName = " + leftTableName +
                    ", rightTableName = " + rightTableName +
                    ", joinTableName = " + joinTableName +
                    ", joinType = " + JoinOperatorTStr[joinType] +
                    ", leftRenameMap = [" + leftRenameMap + "]" +
                    ", rightRenameMap = [" + rightRenameMap + "]" +
                    ", collisionCheck = " + collisionCheck +
                    ")");
    }

    var workItem = xcalarJoinWorkItem(leftTableName, rightTableName,
                                      joinTableName, joinType,
                                      leftRenameMap, rightRenameMap,
                                      collisionCheck);
    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var joinOutput = result.output.outputResult.joinOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(joinOutput);
    })
    .fail(function(error) {
        console.log(JSON.stringify(error));
        console.log("xcalarJoin() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarProjectWorkItem(numColumns, columns,
                               srcTableName, dstTableName) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.projectInput = new XcalarApiProjectInputT();
    workItem.input.projectInput.srcTable = new XcalarApiTableT();
    workItem.input.projectInput.dstTable = new XcalarApiTableT();

    workItem.api = XcalarApisT.XcalarApiProject;
    workItem.input.projectInput.srcTable.tableName = srcTableName;
    workItem.input.projectInput.srcTable.tableId = XcalarApiTableIdInvalidT;
    workItem.input.projectInput.dstTable.tableName = dstTableName;
    workItem.input.projectInput.dstTable.tableId = XcalarApiTableIdInvalidT;
    workItem.input.projectInput.numColumns = numColumns;
    workItem.input.projectInput.columnNames = columns;
    return (workItem);
}

function xcalarProject(thriftHandle, numColumns, columns,
                       srcTableName, dstTableName) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarProject(srcTableName = " + srcTableName +
                    ", dstTableName = " + dstTableName +
                    ", numColumns = " + numColumns +
                    ", columns = [" + columns + "]" +
                    ")");
    }

    var workItem = xcalarProjectWorkItem(numColumns, columns,
                                         srcTableName, dstTableName);

    var projectOutput;
    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        projectOutput = result.output.outputResult.projectOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(projectOutput);
    })
    .fail(function(error) {
        console.log("xcalarProject() caught exception: " + error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarFilterWorkItem(srcTableName, dstTableName, filterStr) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.filterInput = new XcalarApiFilterInputT();
    workItem.input.filterInput.srcTable = new XcalarApiTableT();
    workItem.input.filterInput.dstTable = new XcalarApiTableT();

    workItem.api = XcalarApisT.XcalarApiFilter;
    workItem.input.filterInput.srcTable.tableName = srcTableName;
    workItem.input.filterInput.srcTable.tableId = XcalarApiTableIdInvalidT;
    workItem.input.filterInput.dstTable.tableName = dstTableName;
    workItem.input.filterInput.dstTable.tableId = XcalarApiTableIdInvalidT;
    workItem.input.filterInput.filterStr = filterStr;
    return (workItem);
}

function xcalarFilter(thriftHandle, filterStr, srcTableName, dstTableName) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarFilter(srcTableName = " + srcTableName +
                    ", dstTableName = " + dstTableName + ", filterStr = " +
                    filterStr + ")");
    }

    var workItem = xcalarFilterWorkItem(srcTableName, dstTableName, filterStr);

    var filterOutput;
    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        filterOutput = result.output.outputResult.filterOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(filterOutput);
    })
    .fail(function(error) {
        console.log("xcalarFilter() caught exception: " + error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarGroupByWorkItem(srcTableName, dstTableName, groupByEvalStr,
                               newFieldName, includeSrcSample, icvMode) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.groupByInput = new XcalarApiGroupByInputT();
    workItem.input.groupByInput.srcTable = new XcalarApiTableT();
    workItem.input.groupByInput.dstTable = new XcalarApiTableT();

    workItem.api = XcalarApisT.XcalarApiGroupBy;
    workItem.input.groupByInput.srcTable.tableName = srcTableName;
    workItem.input.groupByInput.srcTable.tableId = XcalarApiTableIdInvalidT;
    workItem.input.groupByInput.dstTable.tableName = dstTableName;
    workItem.input.groupByInput.dstTable.tableId = XcalarApiTableIdInvalidT;
    workItem.input.groupByInput.evalStr = groupByEvalStr;
    workItem.input.groupByInput.newFieldName = newFieldName;
    workItem.input.groupByInput.includeSrcTableSample = includeSrcSample;
    workItem.input.groupByInput.icvMode = icvMode;
    return (workItem);
}

function xcalarGroupByWithWorkItem(thriftHandle, workItem) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarGroupBy(srcTableName = " + srcTableName +
                    ", dstTableName = " + dstTableName + ", groupByEvalStr = " +
                    groupByEvalStr + ", newFieldName = " + newFieldName +
                    ", icvMode = " + icvMode + ")");
    }

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var groupByOutput = result.output.outputResult.groupByOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(groupByOutput);
    })
    .fail(function(error) {
        console.log("xcalarGroupBy() caught exception: " + error);
        deferred.reject(error);
    });
    return (deferred.promise());
}

function xcalarGroupBy(thriftHandle, srcTableName, dstTableName, groupByEvalStr,
                       newFieldName, includeSrcSample, icvMode) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarGroupBy(srcTableName = " + srcTableName +
                    ", dstTableName = " + dstTableName + ", groupByEvalStr = " +
                    groupByEvalStr + ", newFieldName = " + newFieldName +
                    ", icvMode = " + icvMode + ")");
    }

    var workItem = xcalarGroupByWorkItem(srcTableName, dstTableName,
                                         groupByEvalStr, newFieldName,
                                         includeSrcSample, icvMode);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var groupByOutput = result.output.outputResult.groupByOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(groupByOutput);
    })
    .fail(function(error) {
        console.log("xcalarGroupBy() caught exception: " + error);
        deferred.reject(error);
    });
    return (deferred.promise());
}

function xcalarResultSetAbsoluteWorkItem(resultSetId, position) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.resultSetAbsoluteInput =
        new XcalarApiResultSetAbsoluteInputT();

    workItem.api = XcalarApisT.XcalarApiResultSetAbsolute;
    workItem.input.resultSetAbsoluteInput.resultSetId = resultSetId;
    workItem.input.resultSetAbsoluteInput.position = position;
    return (workItem);
}

function xcalarResultSetAbsolute(thriftHandle, resultSetId, position) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarResultSetAbsolute(resultSetId = " +
                    resultSetId + ", position = " +
                    position.toString() + ")");
    }
    var workItem = xcalarResultSetAbsoluteWorkItem(resultSetId, position);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = result.output.hdr.status;
        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(status);
    })
    .fail(function(error) {
        console.log("xcalarResultSetAbsolute() caught exception:", error);
        deferred.reject(error);
    });
    return (deferred.promise());
}

function xcalarFreeResultSetWorkItem(resultSetId) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.freeResultSetInput = new XcalarApiFreeResultSetInputT();

    workItem.api = XcalarApisT.XcalarApiFreeResultSet;
    workItem.input.freeResultSetInput.resultSetId = resultSetId;
    return (workItem);
}

function xcalarFreeResultSet(thriftHandle, resultSetId) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarFreeResultSet(resultSetId = " +
                    resultSetId + ")");
    }
    var workItem = xcalarFreeResultSetWorkItem(resultSetId);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        // XXX FIXME bug 136
        var status = StatusT.StatusOk;
        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(status);
    })
    .fail(function(error) {
        console.log("xcalarResultSetAbsolute() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarDeleteDagNodesWorkItem(namePattern, srcType) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.apiVersion = 0;
    workItem.api = XcalarApisT.XcalarApiDeleteObjects;
    workItem.input.deleteDagNodeInput = new XcalarApiDagNodeNamePatternInputT();
    workItem.input.deleteDagNodeInput.namePattern = namePattern;
    workItem.input.deleteDagNodeInput.srcType = srcType;
    return (workItem);
}

function xcalarDeleteDagNodes(thriftHandle, namePattern, srcType) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarDeleteDagNodes(namePattern = " + namePattern + ")");
    }
    var workItem = xcalarDeleteDagNodesWorkItem(namePattern, srcType);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var deleteDagNodesOutput = result.output.outputResult.
                                                           deleteDagNodesOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(deleteDagNodesOutput);
    })
    .fail(function(error) {
        console.log("xcalarDeleteDagNodes() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarGetTableRefCountWorkItem(tableName) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.getTableRefCountInput = new XcalarApiTableT();

    workItem.api = XcalarApisT.XcalarApiGetTableRefCount;
    workItem.input.getTableRefCountInput.tableName = tableName;
    workItem.input.getTableRefCountInput.tableId = XcalarApiTableIdInvalidT;
    return (workItem);
}

function xcalarGetTableRefCount(thriftHandle, tableName) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarGetTableRefCount(tableName = " + tableName + ")");
    }
    var workItem = xcalarGetTableRefCountWorkItem(tableName);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var getTableRefCountOutput =
                              result.output.outputResult.getTableRefCountOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(getTableRefCountOutput);
    })
    .fail(function(error) {
        console.log("xcalarDeleteTable() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarApiMapWorkItem(evalStr, srcTableName, dstTableName,
                              newFieldName, icvMode) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.mapInput = new XcalarApiMapInputT();
    workItem.input.mapInput.srcTable = new XcalarApiTableT();
    workItem.input.mapInput.dstTable = new XcalarApiTableT();

    workItem.api = XcalarApisT.XcalarApiMap;
    workItem.input.mapInput.evalStr = evalStr;
    workItem.input.mapInput.srcTable.tableName = srcTableName;
    workItem.input.mapInput.srcTable.tableId = XcalarApiTableIdInvalidT;
    workItem.input.mapInput.dstTable.tableName = dstTableName;
    workItem.input.mapInput.dstTable.tableId = XcalarApiTableIdInvalidT;
    workItem.input.mapInput.newFieldName = newFieldName;
    workItem.input.mapInput.icvMode = icvMode;
    return (workItem);
}

function xcalarApiMapWithWorkItem(thriftHandle, workItem) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarApiMap(newFieldName = " + newFieldName +
                    ", evalStr = " + evalStr + ", srcTableName = " +
                    srcTableName + ", dstTableName = " + dstTableName +
                    ", icvMode = " + icvMode + ")");
    }

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result){
        var mapOutput = result.output.outputResult.mapOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(mapOutput);
    })
    .fail(function(error) {
        console.log("xcalarApiMap() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarApiMap(thriftHandle, newFieldName, evalStr, srcTableName,
                      dstTableName, icvMode) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarApiMap(newFieldName = " + newFieldName +
                    ", evalStr = " + evalStr + ", srcTableName = " +
                    srcTableName + ", dstTableName = " + dstTableName +
                    ", icvMode = " + icvMode + ")");
    }

    var workItem = xcalarApiMapWorkItem(evalStr, srcTableName, dstTableName,
                                        newFieldName, icvMode);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result){
        var mapOutput = result.output.outputResult.mapOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(mapOutput);
    })
    .fail(function(error) {
        console.log("xcalarApiMap() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarApiGetRowNumWorkItem(srcTableName, dstTableName,
                              newFieldName) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.getRowNumInput = new XcalarApiGetRowNumInputT();
    workItem.input.getRowNumInput.srcTable = new XcalarApiTableT();
    workItem.input.getRowNumInput.dstTable = new XcalarApiTableT();

    workItem.api = XcalarApisT.XcalarApiGetRowNum;
    workItem.input.getRowNumInput.srcTable.tableName = srcTableName;
    workItem.input.getRowNumInput.srcTable.tableId = XcalarApiTableIdInvalidT;
    workItem.input.getRowNumInput.dstTable.tableName = dstTableName;
    workItem.input.getRowNumInput.dstTable.tableId = XcalarApiTableIdInvalidT;
    workItem.input.getRowNumInput.newFieldName = newFieldName;
    return (workItem);
}

function xcalarApiGetRowNum(thriftHandle, newFieldName, srcTableName,
                      dstTableName) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarApiGetRowNum(newFieldName = " + newFieldName +
                    ", srcTableName = " + srcTableName +
                    ", dstTableName = " + dstTableName + ")");
    }

    var workItem = xcalarApiGetRowNumWorkItem(srcTableName, dstTableName,
                                        newFieldName);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result){
        var getRowNumOutput = result.output.outputResult.getRowNumOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(getRowNumOutput);
    })
    .fail(function(error) {
        console.log("xcalarApiGetRowNum() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarAggregateWorkItem(srcTableName, dstTableName, aggregateEvalStr) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.aggregateInput = new XcalarApiAggregateInputT();
    workItem.input.aggregateInput.srcTable = new XcalarApiTableT();
    workItem.input.aggregateInput.dstTable = new XcalarApiTableT();

    workItem.api = XcalarApisT.XcalarApiAggregate;
    workItem.input.aggregateInput.srcTable.tableName = srcTableName;
    workItem.input.aggregateInput.srcTable.tableId = XcalarApiTableIdInvalidT;
    workItem.input.aggregateInput.dstTable.tableName = dstTableName;
    workItem.input.aggregateInput.dstTable.tableId = XcalarApiTableIdInvalidT;
    workItem.input.aggregateInput.evalStr = aggregateEvalStr;
    return (workItem);
}

function xcalarAggregate(thriftHandle, srcTableName, dstTableName, aggregateEvalStr) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarAggregate(srcTableName = " + srcTableName +
                    ", dstTableName = " + dstTableName +
                    ", aggregateEvalStr = " + aggregateEvalStr + ")");
    }

    var workItem = xcalarAggregateWorkItem(srcTableName, dstTableName, aggregateEvalStr);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var aggregateOutput = result.output.outputResult.aggregateOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(aggregateOutput.jsonAnswer);
    })
    .fail(function(error) {
        console.log("xcalarAggregate() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarAddExportTargetWorkItem(target) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();

    workItem.api = XcalarApisT.XcalarApiAddExportTarget;
    workItem.input.addTargetInput = target;
    return (workItem);
}

function xcalarAddExportTarget(thriftHandle, target) {
    var deferred = jQuery.Deferred();
    console.log("xcalarAddExportTarget(target.hdr.name = " + target.hdr.name +
                ", target.hdr.type = " + ExTargetTypeTStr[target.hdr.type] +
                ")");

    var workItem = xcalarAddExportTargetWorkItem(target);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(status);
    })
    .fail(function(error) {
        console.log("xcalarAddExportTarget() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarListExportTargetsWorkItem(typePattern, namePattern) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.listTargetsInput = new XcalarApiListExportTargetsInputT();

    workItem.api = XcalarApisT.XcalarApiListExportTargets;
    workItem.input.listTargetsInput.targetTypePattern = typePattern;
    workItem.input.listTargetsInput.targetNamePattern = namePattern;
    return (workItem);
}

function xcalarListExportTargets(thriftHandle, typePattern, namePattern) {
    var deferred = jQuery.Deferred();
    console.log("xcalarListExportTargets(typePattern = " + typePattern +
                ", namePattern = " + namePattern + ")");

    var workItem = xcalarListExportTargetsWorkItem(typePattern, namePattern);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var listExportTargetsOutput =
            result.output.outputResult.listTargetsOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(listExportTargetsOutput);
    })
    .fail(function(error) {
        console.log("xcalarListExportTargets() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarExportWorkItem(tableName, target, specInput, createRule,
                              sorted, numColumns, columns, exportName) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.exportInput = new XcalarApiExportInputT();
    workItem.input.exportInput.srcTable = new XcalarApiTableT();
    workItem.input.exportInput.meta = new ExExportMetaT();

    workItem.api = XcalarApisT.XcalarApiExport;
    workItem.input.exportInput.srcTable.tableName = tableName;
    workItem.input.exportInput.srcTable.tableId = XcalarApiTableIdInvalidT;
    workItem.input.exportInput.exportName = exportName;
    workItem.input.exportInput.meta.target = target;
    workItem.input.exportInput.meta.specificInput = specInput;
    workItem.input.exportInput.meta.sorted = sorted;
    workItem.input.exportInput.meta.numColumns = numColumns;
    workItem.input.exportInput.meta.columns = columns;
    workItem.input.exportInput.meta.createRule = createRule;
    return (workItem);
}

function xcalarExport(thriftHandle, tableName, target, specInput, createRule,
                      sorted, numColumns, columns, exportName) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarExport(tableName = " + tableName +
                    ", target.type = " + ExTargetTypeTStr[target.type] +
                    ", target.name = " + target.name +
                    ", createRule = " + createRule +
                    ", specInput = " + JSON.stringify(specInput) +
                    ", sorted = " + sorted +
                    ", numColumns = " + numColumns +
                    ", columns = " + JSON.stringify(columns) +
                    ", exportName = " + exportName +
                    ")");
    }

    var workItem = xcalarExportWorkItem(tableName, target, specInput, createRule,
                                        sorted, numColumns, columns, exportName);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(status);
    })
    .fail(function(error) {
        console.log("xcalarExport() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarListFilesWorkItem(url, recursive, fileNamePattern) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.listFilesInput = new XcalarApiListFilesInputT();

    workItem.api = XcalarApisT.XcalarApiListFiles;
    workItem.input.listFilesInput.url = url;
    workItem.input.listFilesInput.recursive = recursive;
    workItem.input.listFilesInput.fileNamePattern = fileNamePattern;
    return (workItem);
}

function xcalarListFiles(thriftHandle, url, recursive, fileNamePattern) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarListFiles(url = " + url + ")");
    }

    var workItem = xcalarListFilesWorkItem(url, recursive, fileNamePattern);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var listFilesOutput = result.output.outputResult.listFilesOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(listFilesOutput);
    })
    .fail(function(error) {
        console.log("xcalarListFiles() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarApiDeleteRetinaWorkItem(retinaName) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.api = XcalarApisT.XcalarApiDeleteRetina;
    workItem.input.deleteRetinaInput = retinaName;
    return (workItem);
}

function xcalarApiDeleteRetina(thriftHandle, retinaName) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarApiDeleteRetina(retinaName = " + retinaName + ")");
    }
    var workItem = xcalarApiDeleteRetinaWorkItem(retinaName);
    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = result.output.hdr.status;
        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(status);
    })
    .fail(function(error) {
        console.log("xcalarApiDeleteRetina() caught exception: ", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarMakeRetinaWorkItem(retinaName, tableArray) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.makeRetinaInput = new XcalarApiMakeRetinaInputT();

    workItem.api = XcalarApisT.XcalarApiMakeRetina;
    workItem.input.makeRetinaInput.retinaName = retinaName;
    workItem.input.makeRetinaInput.numTables = tableArray.length;
    workItem.input.makeRetinaInput.tableArray = tableArray;
    return (workItem);
}

function xcalarMakeRetina(thriftHandle, retinaName, tableArray) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarMakeRetina(retinaName = " + retinaName +
                    ", tableArray = " + JSON.stringify(tableArray) + ")");
    }
    var workItem = xcalarMakeRetinaWorkItem(retinaName, tableArray);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = (result.jobStatus != StatusT.StatusOk) ?
                     result.jobStatus : result.output.hdr.status;
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(status);
    })
    .fail(function(error) {
        console.log("xcalarMakeRetina() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());

}

function xcalarListRetinasWorkItem() {
    var workItem = new WorkItem();
    workItem.api = XcalarApisT.XcalarApiListRetinas;
    return (workItem);
}

function xcalarListRetinas(thriftHandle) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarListRetinas()");
    }

    var workItem = xcalarListRetinasWorkItem();

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var listRetinasOutput = result.output.outputResult.listRetinasOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(listRetinasOutput);
    })
    .fail(function(error) {
        console.log("xcalarListRetinas() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarGetRetinaWorkItem(retinaName) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();

    workItem.api = XcalarApisT.XcalarApiGetRetina;
    workItem.input.getRetinaInput = retinaName;
    return (workItem);
}

function xcalarGetRetina(thriftHandle, retinaName) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarGetRetina(retinaName = " + retinaName + ")");
    }
    var workItem = xcalarGetRetinaWorkItem(retinaName);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var getRetinaOutput = result.output.outputResult.getRetinaOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(getRetinaOutput);
    })
    .fail(function(error) {
        console.log("xcalarGetRetina() caught exception: " + error);
        deferred.reject(error);
    });
    return (deferred.promise());
}

function xcalarUpdateRetinaWorkItem(retinaName, dagNodeId, paramType,
                                    paramValue) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.updateRetinaInput = new XcalarApiUpdateRetinaInputT();

    workItem.api = XcalarApisT.XcalarApiUpdateRetina;
    workItem.input.updateRetinaInput.retinaName = retinaName;
    workItem.input.updateRetinaInput.dagNodeId = dagNodeId;

    workItem.input.updateRetinaInput.paramInput = new XcalarApiParamInputT();
    workItem.input.updateRetinaInput.paramInput.paramType = paramType;
    workItem.input.updateRetinaInput.paramInput.paramInputArgs = new XcalarApiParamInputArgsT();
    switch (paramType) {
    case XcalarApisT.XcalarApiBulkLoad:
        workItem.input.updateRetinaInput.paramInput.paramInputArgs.paramLoad =
                                         new XcalarApiParamLoadT();
        workItem.input.updateRetinaInput.paramInput.paramInputArgs.paramLoad.datasetUrl =
                                         paramValue;
        break;
    case XcalarApisT.XcalarApiFilter:
        workItem.input.updateRetinaInput.paramInput.paramInputArgs.paramFilter =
                                         new XcalarApiParamFilterT();
        workItem.input.updateRetinaInput.paramInput.paramInputArgs.paramFilter.filterStr =
                                         paramValue;
        break;
    case XcalarApisT.XcalarApiExport:
        workItem.input.updateRetinaInput.paramInput.paramInputArgs.paramExport =
                                         new XcalarApiParamExportT();
        workItem.input.updateRetinaInput.paramInput.paramInputArgs.paramExport.fileName =
                                         paramValue;
        break;
    }
    return (workItem);
}

function xcalarUpdateRetina(thriftHandle, retinaName, dagNodeId,
                            paramType, paramValue) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarUpdateRetina(retinaName = " + retinaName + ", " +
                    "dagNodeId = " + dagNodeId + ", paramType = " +
                    XcalarApisTStr[paramType] + ", paramValue = " + paramValue + ")");
    }
    var workItem = xcalarUpdateRetinaWorkItem(retinaName, dagNodeId, paramType,
                                              paramValue);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = (result.jobStatus != StatusT.StatusOk) ?
                     result.jobStatus : result.output.hdr.status;
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(status);
    })
    .fail(function(error) {
        console.log("xcalarUpdateRetina() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarExecuteRetinaWorkItem(retinaName, parameters) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.executeRetinaInput = new XcalarApiExecuteRetinaInputT();

    workItem.api = XcalarApisT.XcalarApiExecuteRetina;
    workItem.input.executeRetinaInput.retinaName = retinaName;
    workItem.input.executeRetinaInput.numParameters = parameters.length;
    workItem.input.executeRetinaInput.parameters = parameters;
    return (workItem);
}

function xcalarExecuteRetina(thriftHandle, retinaName, parameters) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarExecuteRetina(retinaName = " + retinaName + ")");
        for (var ii = 0; ii < parameters.length; ii++) {
            parameter = parameters[ii];
            console.log(parameter.parameterName + " = " + parameter.parameterValue);
        }
    }
    var workItem = xcalarExecuteRetinaWorkItem(retinaName, parameters);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = (result.jobStatus != StatusT.StatusOk) ?
                    result.jobStatus : result.output.hdr.status;
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(status);
    })
    .fail(function(error) {
        console.log("xcalarExecuteRetina() caught exception:", error);
        deferred.reject(error);
    });
    return (deferred.promise());
}

function xcalarListParametersInRetinaWorkItem(retinaName) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();

    workItem.api = XcalarApisT.XcalarApiListParametersInRetina;
    workItem.input.listParametersInRetinaInput = retinaName;
    return (workItem);
}

function xcalarListParametersInRetina(thriftHandle, retinaName) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarListParametersInRetina(retinaName = " + retinaName +
                    ")");
    }

    var workItem = xcalarListParametersInRetinaWorkItem(retinaName);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var listParametersInRetinaOutput =
                        result.output.outputResult.listParametersInRetinaOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(listParametersInRetinaOutput);
    })
    .fail(function(error) {
        console.log("xcalarListParametersInRetina() caught exception:", error);
        deferred.reject(error);
    });
    return (deferred.promise());
}

function xcalarKeyLookupWorkItem(scope, key) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.keyLookupInput = new XcalarApiKeyLookupInputT();
    workItem.input.keyLookupInput.scope = scope;
    workItem.input.keyLookupInput.key = key;
    workItem.api = XcalarApisT.XcalarApiKeyLookup;
    return (workItem);
}

function xcalarKeyLookup(thriftHandle, scope, key) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarKeyLookup(scope = " + scope + ", key = "
                    + key + ")");
    }

    var workItem = xcalarKeyLookupWorkItem(scope, key);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var keyLookupOutput = result.output.outputResult.keyLookupOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(keyLookupOutput);
    })
    .fail(function(error) {
        console.log("xcalarKeyLookup() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarKeyAddOrReplaceWorkItem(scope, persist, key, value) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.keyAddOrReplaceInput = new XcalarApiKeyAddOrReplaceInputT();
    workItem.input.keyAddOrReplaceInput.scope = scope;
    workItem.input.keyAddOrReplaceInput.kvPair = new XcalarApiKeyValuePairT();

    workItem.api = XcalarApisT.XcalarApiKeyAddOrReplace;
    workItem.input.keyAddOrReplaceInput.persist = persist;
    workItem.input.keyAddOrReplaceInput.kvPair.key = key;
    workItem.input.keyAddOrReplaceInput.kvPair.value = value;
    return (workItem);
}

function xcalarKeyAddOrReplace(thriftHandle, scope, key, value, persist) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        if (superVerbose) {
            console.log("xcalarKeyAddOrReplace(source = " + scope + ", key = " +
                        key + ", value = " + value + ", persist = " +
                        persist.toString() + ")");
        } else {
            console.log("xcalarKeyAddOrReplace(source = " + scope + ", key = " +
                        key + ", value = <superVerbose mode only>, persist = " +
                        persist.toString() + ")");
        }
    }

    var workItem = xcalarKeyAddOrReplaceWorkItem(scope, persist, key, value);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = result.output.hdr.status;
        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(status);
    })
    .fail(function(error) {
        console.log("xcalarKeyAddOrReplace() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarKeyAppendWorkItem(scope, key, suffix) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.keyAppendInput = new XcalarApiKeyAppendInputT();
    workItem.input.keyAppendInput.scope = scope;
    workItem.input.keyAppendInput.key = key;
    workItem.input.keyAppendInput.suffix = suffix;
    workItem.api = XcalarApisT.XcalarApiKeyAppend;
    return (workItem);
}

function xcalarKeyAppend(thriftHandle, scope, key, suffix) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        if (superVerbose) {
            console.log("xcalarKeyAppend(scope = " + scope + ", key = " + key +
                        ", suffix = " + suffix + ")");
        } else {
            console.log("xcalarKeyAppend(scope = " + scope + ", key = " + key +
                        ", suffix = <superVerbose mode only>)");
        }
    }

    var workItem = xcalarKeyAppendWorkItem(scope, key, suffix);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = result.output.hdr.status;
        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(status);
    })
    .fail(function(error) {
        console.log("xcalarKeyAppend() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarKeySetIfEqualWorkItem(scope, persist, keyCompare, valueCompare,
                                     valueReplace, keySecondary, valueSecondary)
{
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.keySetIfEqualInput = new XcalarApiKeySetIfEqualInputT();
    workItem.api = XcalarApisT.XcalarApiKeySetIfEqual;

    workItem.input.keySetIfEqualInput.scope = scope;
    workItem.input.keySetIfEqualInput.keyCompare = keyCompare;
    workItem.input.keySetIfEqualInput.valueCompare = valueCompare;
    workItem.input.keySetIfEqualInput.valueReplace = valueReplace;

    if (keySecondary) {
        workItem.input.keySetIfEqualInput.countSecondaryPairs = 1;
        workItem.input.keySetIfEqualInput.keySecondary = keySecondary;
        workItem.input.keySetIfEqualInput.valueSecondary = valueSecondary;
    } else {
        // keySecondary is "", undefined, or null.
        workItem.input.keySetIfEqualInput.countSecondaryPairs = 0;
    }

    return (workItem);
}

function xcalarKeySetIfEqual(thriftHandle, scope, persist, keyCompare,
                             valueCompare, valueReplace, keySecondary,
                             valueSecondary) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        if (superVerbose) {
            console.log("xcalarKeySetIfEqual(scope = " + scope + ", persist = "
                        + persist + ", keyCompare = " + keyCompare +
                        ", valueCompare = " + valueCompare + ", valueReplace = "
                        + valueReplace + ", keySecondary = " + keySecondary +
                        ", valueSecondary = " + valueSecondary + ")");
        } else {
            console.log("xcalarKeySetIfEqual(scope = " + scope + ", persist = "
                        + persist + ", keyCompare = " + keyCompare +
                        ", valueCompare = <superVerbose mode only>" +
                        ", valueReplace = <superVerbose mode only>" +
                        ", keySecondary = " + keySecondary +
                        ", valueSecondary = <superVerbose mode only>" + ")");

        }
    }

    var workItem = xcalarKeySetIfEqualWorkItem(scope, persist, keyCompare,
                                               valueCompare, valueReplace,
                                               keySecondary, valueSecondary);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = result.output.hdr.status;
        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(status);
    })
    .fail(function(error) {
        console.log("xcalarKeySetIfEqual() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarKeyDeleteWorkItem(scope, key) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.keyDeleteInput = new XcalarApiKeyDeleteInputT();

    workItem.api = XcalarApisT.XcalarApiKeyDelete;
    workItem.input.keyDeleteInput.scope = scope;
    workItem.input.keyDeleteInput.key = key;
    return (workItem);
}

function xcalarKeyDelete(thriftHandle, scope, key) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarKeyDelete(scope = " + scope + ", key = " +
                    key + ")");
    }

    var workItem = xcalarKeyDeleteWorkItem(scope, key);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(status);
    })
    .fail(function(error) {
        console.log("xcalarKeyLookup() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarApiTopWorkItem(measureIntervalInMs) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.topInput = new XcalarApiTopInputT();

    workItem.api = XcalarApisT.XcalarApiTop;
    workItem.input.topInput.measureIntervalInMs = measureIntervalInMs;
    return (workItem);
}

function xcalarApiTop(thriftHandle, measureIntervalInMs) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarApiTop(measureIntervalInMs = ", measureIntervalInMs,
                    ")");
    }

    var workItem = xcalarApiTopWorkItem(measureIntervalInMs);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var topOutput = result.output.outputResult.topOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            topOutput = new XcalarApiTopOutputT();
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }

        deferred.resolve(topOutput);
    })
    .fail(function(error) {
        console.log("xcalarApiTop() caught exception: ", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarApiMemoryWorkItem(tagName) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.memoryInput = new XcalarApiMemoryInputT();

    workItem.api = XcalarApisT.XcalarApiMemory;
    workItem.input.memoryInput.tagName = tagName;
    return (workItem);
}

function xcalarApiMemory(thriftHandle, tagName) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarApiMemory(tagName = ", tagName, ")");
    }

    var workItem = xcalarApiMemoryWorkItem(tagName);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var memOutput = result.output.outputResult.memoryOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            memOutput = new XcalarApiMemoryOutputT();
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }

        deferred.resolve(memOutput);
    })
    .fail(function(error) {
        console.log("xcalarApiMemory() caught exception: ", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarApiSessionNewWorkItem(sessionName, fork, forkedSessionName) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.sessionNewInput = new XcalarApiSessionNewInputT();

    workItem.api = XcalarApisT.XcalarApiSessionNew;
    workItem.input.sessionNewInput.sessionName = sessionName;
    workItem.input.sessionNewInput.fork = fork;
    workItem.input.sessionNewInput.forkedSessionName = forkedSessionName;
    return (workItem);
}

function xcalarApiSessionNew(thriftHandle, sessionName, fork,
                             forkedSessionName) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarApiSessionNew(sessionName = ", sessionName, ", ",
                    "fork = ", fork, ", ",
                    "forkedSessionName = ", forkedSessionName, ")");
    }
    var workItem = xcalarApiSessionNewWorkItem(sessionName, fork,
                                               forkedSessionName);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(result);
    })
    .fail(function(error) {
        console.log("xcalarApiSessionNew() caught exception:",error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarApiSessionDeleteWorkItem(pattern) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.sessionDeleteInput = new XcalarApiSessionDeleteInputT();

    workItem.api = XcalarApisT.XcalarApiSessionDelete;
    workItem.input.sessionDeleteInput.sessionName = pattern;
      // not actually used by delete...
    workItem.input.sessionDeleteInput.noCleanup = false;
    return (workItem);
}

function xcalarApiSessionDelete(thriftHandle, pattern) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarApiSessionDelete(pattern = " + pattern + ")");
    }
    var workItem = xcalarApiSessionDeleteWorkItem(pattern);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(result);
    })
    .fail(function(error) {
        console.log("xcalarApiSessionDelete() caught exception:",error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarApiSessionInfoWorkItem(name) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.sessionInfoInput = new XcalarApiSessionInfoInputT();

    workItem.api = XcalarApisT.XcalarApiSessionInfo;
    workItem.input.sessionInfoInput.sessionName = name;
    return (workItem);
}

function xcalarApiSessionInfo(thriftHandle, name) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarApiSessionInfo(name = )", name);
    }
    var workItem = xcalarApiSessionInfoWorkItem(name);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(result);
    })
    .fail(function(error) {
        console.log("xcalarApiSessionInfo() caught exception:",error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarApiSessionInactWorkItem(name, noCleanup) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.sessionDeleteInput = new XcalarApiSessionDeleteInputT();

    workItem.api = XcalarApisT.XcalarApiSessionInact;
    workItem.input.sessionDeleteInput.sessionName = name;
    workItem.input.sessionDeleteInput.noCleanup = noCleanup;
    return (workItem);
}

// noCleanup = true means that the datasets and tables belonging to the
// session will not be dropped when the session is made inactive
function xcalarApiSessionInact(thriftHandle, name, noCleanup) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarApiSessionInact(name = )", name);
    }
    var workItem = xcalarApiSessionInactWorkItem(name, noCleanup);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(result);
    })
    .fail(function(error) {
        console.log("xcalarApiSessionInact() caught exception:",error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarApiSessionListWorkItem(pattern) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();

    workItem.api = XcalarApisT.XcalarApiSessionList;
    workItem.input.sessionListInput = pattern;
    return (workItem);
}

function xcalarApiSessionList(thriftHandle, pattern) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarApiSessionList(pattern = )", pattern);
    }

    var workItem = xcalarApiSessionListWorkItem(pattern);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var sessionListOutput = result.output.outputResult.sessionListOutput;

        if (result.jobStatus != StatusT.StatusOk) {
            deferred.reject(result.jobStatus);
        }
        deferred.resolve(sessionListOutput);
    })
    .fail(function(error) {
        console.log("xcalarApiSessionList() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarApiSessionPersistWorkItem(pattern) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.sessionDeleteInput = new XcalarApiSessionDeleteInputT();

    workItem.api = XcalarApisT.XcalarApiSessionPersist;
    workItem.input.sessionDeleteInput.sessionName = pattern;
     // not actually used by persist
    workItem.input.sessionDeleteInput.noCleanup = false;
    return (workItem);
}

function xcalarApiSessionPersist(thriftHandle, pattern) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarApiSessionPersist(pattern = )", pattern);
    }

    var workItem = xcalarApiSessionPersistWorkItem(pattern);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = result.output.hdr.status;
        var sessionListOutput = result.output.outputResult.sessionListOutput;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(sessionListOutput);
    })
    .fail(function(error) {
        console.log("xcalarApiSessionPersist() caught exception:",error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

// noCleanup = true means the tables and datasets will not be dropped
// when the old session is made inactive
function xcalarApiSessionSwitchWorkItem(sessionName, origSessionName,
                                        noCleanup) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.sessionSwitchInput = new XcalarApiSessionSwitchInputT();

    workItem.api = XcalarApisT.XcalarApiSessionSwitch;
    workItem.input.sessionSwitchInput.sessionName = sessionName;
    workItem.input.sessionSwitchInput.origSessionName = origSessionName;
    workItem.input.sessionSwitchInput.noCleanup = noCleanup;
    return (workItem);
}

function xcalarApiSessionSwitch(thriftHandle, sessionName, origSessionName,
                                noCleanup) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarApiSessionSwitch(sessionName = ", sessionName, ", ",
                    "origSessionName = ", origSessionName,
                    "bypass clean up = ", noCleanup, ")");
    }
    var workItem = xcalarApiSessionSwitchWorkItem(sessionName, origSessionName,
                                                  noCleanup);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(result);
    })
    .fail(function(error) {
        console.log("xcalarApiSessionSwitch() caught exception:",error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarApiSessionRenameWorkItem(sessionName, origSessionName) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.sessionRenameInput = new XcalarApiSessionRenameInputT();

    workItem.api = XcalarApisT.XcalarApiSessionRename;
    workItem.input.sessionRenameInput.sessionName = sessionName;
    workItem.input.sessionRenameInput.origSessionName = origSessionName;
    return (workItem);
}

function xcalarApiSessionRename(thriftHandle, sessionName, origSessionName) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarApiSessionRename(sessionName = ", sessionName, ", ",
                    "origSessionName = ", origSessionName);
    }

    var workItem = xcalarApiSessionRenameWorkItem(sessionName, origSessionName);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(result);
    })
    .fail(function(error) {
        console.log("xcalarApiSessionRename() caught exception:",error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarApiListXdfsWorkItem(fnNamePattern, categoryPattern) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.listXdfsInput = new XcalarApiListXdfsInputT();

    workItem.api = XcalarApisT.XcalarApiListXdfs;
    workItem.input.listXdfsInput.fnNamePattern = fnNamePattern;
    workItem.input.listXdfsInput.categoryPattern = categoryPattern;
    return (workItem);
}

function xcalarApiListXdfs(thriftHandle, fnNamePattern, categoryPattern) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarApiListXdfs(fnNamePattern = ", fnNamePattern, ", ",
                    "categoryPattern = ", categoryPattern, ")");
    }
    var workItem = xcalarApiListXdfsWorkItem(fnNamePattern, categoryPattern);
    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var listXdfsOutput = result.output.outputResult.listXdfsOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            listXdfsOutput = new XcalarApiListXdfsOutputT();
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }

        deferred.resolve(listXdfsOutput);
    })
    .fail(function(error) {
        console.log("xcalarApiListXdfs() caught exception: ", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarApiUdfAddUpdateWorkItem(api, type, moduleName, source)
{
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.udfAddUpdateInput = new UdfModuleSrcT();

    workItem.api = api;

    workItem.input.udfAddUpdateInput.type = type;
    workItem.input.udfAddUpdateInput.moduleName = moduleName;
    workItem.input.udfAddUpdateInput.source = source;

    return (workItem);
}

function xcalarApiUdfAdd(thriftHandle, type, moduleName, source)
{
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarApiUdfAdd(type = ", type, ", moduleName = ",
                    moduleName, ", ", "source = ", source, ")");
    }
    var workItem = xcalarApiUdfAddUpdateWorkItem(XcalarApisT.XcalarApiUdfAdd,
                                                 type, moduleName, source);
    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = result.output.hdr.status;
        var udfAddUpdateOutput = result.output.outputResult.udfAddUpdateOutput;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status, udfAddUpdateOutput);
        }

        deferred.resolve(status);
    })
    .fail(function(error) {
        console.log(JSON.stringify(error));
        console.log("xcalarApiUdfAdd() caught exception: ", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarApiUdfUpdate(thriftHandle, type, moduleName, source)
{
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarApiUdfUpdate(moduleName = ", moduleName,
                    ", ", "source = ", source, ")");
    }
    var workItem = xcalarApiUdfAddUpdateWorkItem(XcalarApisT.XcalarApiUdfUpdate,
                                                 type, moduleName, source);
    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = result.output.hdr.status;
        var udfAddUpdateOutput = result.output.outputResult.udfAddUpdateOutput;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status, udfAddUpdateOutput);
        }

        deferred.resolve(status);
    })
    .fail(function(error) {
        console.log(JSON.stringify(error));
        console.log("xcalarApiUdfUpdate() caught exception: ", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarApiUdfDeleteWorkItem(moduleName)
{
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.udfDeleteInput = new XcalarApiUdfDeleteInputT();

    workItem.api = XcalarApisT.XcalarApiUdfDelete;

    workItem.input.udfDeleteInput.moduleName = moduleName;

    return (workItem);
}

function xcalarApiUdfDelete(thriftHandle, moduleName)
{
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarApiUdfDelete(moduleName = ", moduleName, ")");
    }
    var workItem = xcalarApiUdfDeleteWorkItem(moduleName);
    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }

        deferred.resolve(status);
    })
    .fail(function(error) {
        console.log(JSON.stringify(error));
        console.log("xcalarApiUdfDelete() caught exception: ", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarApiUdfGetWorkItem(moduleName)
{
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.udfGetInput = new XcalarApiUdfGetInputT();

    workItem.api = XcalarApisT.XcalarApiUdfGet;

    workItem.input.udfGetInput.moduleName = moduleName;

    return (workItem);
}

function xcalarApiUdfGet(thriftHandle, moduleName)
{
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarApiUdfGet(moduleName = ", moduleName, ")");
    }
    var workItem = xcalarApiUdfGetWorkItem(moduleName);
    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }

        deferred.resolve(result.output.outputResult.udfGetOutput);
    })
    .fail(function(error) {
        console.log(JSON.stringify(error));
        console.log("xcalarApiUdfGet() caught exception: ", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarApiGetQuery(thriftHandle, workItem) {
    var deferred = jQuery.Deferred();
    workItem.origApi = workItem.api;
    workItem.api = XcalarApisT.XcalarApiGetQuery;

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var getQueryOutput = result.output.outputResult.getQueryOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            getQueryOutput = new XcalarApiGetQueryOutputT();
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }

        deferred.resolve(getQueryOutput);
    })
    .fail(function(error) {
        console.log("xcalarApiGetQuery() caught exception: ", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarApiCreateDhtWorkItem(dhtName, upperBound, lowerBound, ordering) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.createDhtInput = new XcalarApiCreateDhtInputT();
    workItem.input.createDhtInput.dhtArgs = new DhtArgsT();

    workItem.api = XcalarApisT.XcalarApiCreateDht;
    workItem.input.createDhtInput.dhtName = dhtName;
    workItem.input.createDhtInput.dhtArgs.upperBound = upperBound;
    workItem.input.createDhtInput.dhtArgs.lowerBound = lowerBound;
    workItem.input.createDhtInput.dhtArgs.ordering = ordering;

    return (workItem);
}

function xcalarApiCreateDht(thriftHandle, dhtName, upperBound, lowerBound, ordering) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarApiCreateDht(dhtName = " + dhtName + ", upperBound = " +
                    upperBound + ", lowerBound = " + lowerBound +
                    ", ordering = " + ordering + ")");
    }

    var workItem = xcalarApiCreateDhtWorkItem(dhtName, upperBound, lowerBound, ordering);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }

        deferred.resolve(status);
    })
    .fail(function(error) {
        console.log("xcalarApiCreateDht() caught exception: ", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarApiDeleteDhtWorkItem(dhtName) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.deleteDhtInput = new XcalarApiDeleteDhtInputT();

    workItem.api = XcalarApisT.XcalarApiDeleteDht;
    workItem.input.deleteDhtInput.dhtName = dhtName;

    return (workItem);
}

function xcalarApiDeleteDht(thriftHandle, dhtName) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarApiDeleteDht(dhtName = " + dhtName + ")");
    }

    var workItem = xcalarApiDeleteDhtWorkItem(dhtName);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk &&
            status != StatusT.StatusNsNotFound) {
            deferred.reject(status);
        }

        deferred.resolve(status);
    })
    .fail(function(error) {
        console.log("xcalarApiDeleteDht() caught exception: ", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarApiSupportGenerateWorkItem() {
    var workItem = new WorkItem();
    workItem.api = XcalarApisT.XcalarApiSupportGenerate;
    return (workItem);
}

function xcalarApiSupportGenerate(thriftHandle) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarApiSupportGenerate()");
    }

    var workItem = xcalarApiSupportGenerateWorkItem();

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk &&
            status != StatusT.StatusNsNotFound) {
            deferred.reject(status);
        }

        deferred.resolve(result.output.outputResult.supportGenerateOutput);
    })
    .fail(function(error) {
        console.log("xcalarApiSupportGenerate() caught exception: ", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}


function xcalarScheduleTaskWorkItem(taskName, scheduleInSecond, period,
                                    recurCount, type, arg) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.input.schedTaskInput = new XcalarApiSchedTaskInputT();

    workItem.input.schedTaskInput.time = new XcalarApiSchedTaskTimeT();

    workItem.api = XcalarApisT.XcalarApiSchedTaskCreate;
    workItem.input.schedTaskInput.name = taskName;

    workItem.input.schedTaskInput.time.schedTimeInSecond = scheduleInSecond;
    workItem.input.schedTaskInput.time.recurSeconds = period;
    workItem.input.schedTaskInput.time.recurCount = recurCount;
    workItem.input.schedTaskInput.type = type;
    workItem.input.schedTaskInput.arg = arg;

    return (workItem);
}

function xcalarScheduleTask(thriftHandle, taskName, scheduleInSecond, period,
                            recurCount, type, arg) {

    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarScheduleTask(sched task name = " + taskName + ")" +
                    ", scheduleInSecond: " + scheduleInSecond + ", period: " +
                    period + ", recurCount: " + recurCount + ", type: " + type);
    }

    var workItem = xcalarScheduleTaskWorkItem(taskName, scheduleInSecond,
                                              period, recurCount, type, arg);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = (result.jobStatus != StatusT.StatusOk) ?
                    result.jobStatus : result.output.hdr.status;
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(status);
    })
    .fail(function(error) {
        console.log("xcalarScheduleTask() caught exception:", error);
        deferred.reject(error);
    });
    return (deferred.promise());
}

function xcalarDeleteSchedTaskWorkItem(name) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();
    workItem.apiVersion = 0;
    workItem.api = XcalarApisT.XcalarApiDeleteSchedTask;

    workItem.input.deleteSchedTaskInput = new XcalarApiDeleteSchedTaskInputT();
    workItem.input.deleteSchedTaskInput.name = name;

    return (workItem);
}

function xcalarDeleteSchedTask(thriftHandle, name) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarDeleteSchedTask(name = " + name + ")");
    }
    var workItem = xcalarDeleteSchedTaskWorkItem(name);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var status = result.output.hdr.status;
        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(status);
    })
    .fail(function(error) {
        console.log("xcalarDeleteSchedTask() caught exception:", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}


function xcalarListSchedTaskWorkItem(namePattern) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();

    workItem.api = XcalarApisT.XcalarApiSchedTaskList;
    workItem.input.listSchedTaskInput = new XcalarApiListSchedTaskInputT();
    workItem.input.listSchedTaskInput.namePattern = namePattern;
    return (workItem);
}

function xcalarListSchedTask(thriftHandle, namePattern) {
    var deferred = jQuery.Deferred();
    if (verbose) {
        console.log("xcalarListSchedTask(namePattern = " + namePattern + ")");
    }

    var workItem = xcalarListSchedTaskWorkItem(namePattern);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var listSchedTaskOutput = result.output.outputResult.listSchedTaskOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }
        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }
        deferred.resolve(listSchedTaskOutput);
    })
    .fail(function(error) {
        console.log("xcalarListSchedTask() caught exception:", error);
        deferred.reject(error);
    });
    return (deferred.promise());
}

function xcalarApiImportRetinaWorkItem(retinaName, overwrite, retina) {
    var workItem = new WorkItem();
    var encodedRetina = btoa(retina);
    workItem.input = new XcalarApiInputT();

    workItem.api = XcalarApisT.XcalarApiImportRetina;
    workItem.input.importRetinaInput = new XcalarApiImportRetinaInputT();
    workItem.input.importRetinaInput.retinaName = retinaName;
    workItem.input.importRetinaInput.overwriteExistingUdf = overwrite;
    workItem.input.importRetinaInput.retinaSize = encodedRetina.length;
    workItem.input.importRetinaInput.retina = encodedRetina;

    return (workItem);
}

function xcalarApiImportRetina(thriftHandle, retinaName, overwrite, retina) {
    var deferred = jQuery.Deferred();

    if (verbose) {
        console.log("xcalarApiImportRetina(retinaName = " + retinaName +
                    ", overwrite = " + overwrite + ")")
    }

    var workItem = xcalarApiImportRetinaWorkItem(retinaName, overwrite, retina);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var importRetinaOutput = result.output.outputResult.importRetinaOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }

        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }

        deferred.resolve(importRetinaOutput);
    })
    .fail(function (error) {
        console.log("xcalarApiImportRetina() caught exception: ", error);
        deferred.reject(error);
    });
    return (deferred.promise());
}

function xcalarApiExportRetinaWorkItem(retinaName) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();

    workItem.api = XcalarApisT.XcalarApiExportRetina;
    workItem.input.exportRetinaInput = new XcalarApiExportRetinaInputT();
    workItem.input.exportRetinaInput.retinaName = retinaName;

    // Undocumented feature. Please don't use this yet. Not tested
    workItem.input.exportRetinaInput.writeToFile = false;
    workItem.input.exportRetinaInput.retinaFilePath = "";
    workItem.input.exportRetinaInput.overwriteIfExists = false;

    return (workItem);
}

function xcalarApiExportRetina(thriftHandle, retinaName) {
    var deferred = jQuery.Deferred();

    if (verbose) {
        console.log("xcalarApiExportRetina(retinaName = " + retinaName + ")");
    }

    var workItem = xcalarApiExportRetinaWorkItem(retinaName);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var exportRetinaOutput = result.output.outputResult.exportRetinaOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }

        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }

        exportRetinaOutput.retina = atob(exportRetinaOutput.retina);
        exportRetinaOutput.retinaSize = exportRetinaOutput.retina.length;

        deferred.resolve(exportRetinaOutput);
    })
    .fail(function (error) {
        console.log("xcalarApiExportRetina() caught exception: ", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarApiStartFuncTestWorkItem(parallel, runAllTests, testNamePatterns) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();

    workItem.api = XcalarApisT.XcalarApiStartFuncTests;
    workItem.input.startFuncTestInput = new XcalarApiStartFuncTestInputT();
    workItem.input.startFuncTestInput.parallel = parallel;
    workItem.input.startFuncTestInput.runAllTests = runAllTests;
    workItem.input.startFuncTestInput.testNamePatterns = testNamePatterns;
    workItem.input.startFuncTestInput.numTestPatterns = testNamePatterns.length;

    return (workItem);
}

function xcalarApiStartFuncTest(thriftHandle, parallel, runAllTests, testNamePatterns) {
    var deferred = jQuery.Deferred();

    if (verbose) {
        console.log("xcalarApiStartFuncTest(parallel = ", parallel, ", runAllTests = ",
                    runAllTests, ", testNamePatterns = ", testNamePatterns, ")")
    }

    var workItem = xcalarApiStartFuncTestWorkItem(parallel, runAllTests, testNamePatterns);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var startFuncTestOutput = result.output.outputResult.startFuncTestOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }

        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }

        deferred.resolve(startFuncTestOutput);
    })
    .fail(function(error) {
        console.log("xcalarApiStartFuncTest() caught exception: ", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}

function xcalarApiListFuncTestWorkItem(namePattern) {
    var workItem = new WorkItem();
    workItem.input = new XcalarApiInputT();

    workItem.api = XcalarApisT.XcalarApiListFuncTests;
    workItem.input.listFuncTestInput = new XcalarApiListFuncTestInputT();
    workItem.input.listFuncTestInput.namePattern = namePattern;

    return (workItem);
}

function xcalarApiListFuncTest(thriftHandle, namePattern) {
    var deferred = jQuery.Deferred();

    if (verbose) {
        console.log("xcalarApiListFuncTest(namePattern = ", namePattern, ")");
    }

    var workItem = xcalarApiListFuncTestWorkItem(namePattern);

    thriftHandle.client.queueWorkAsync(workItem)
    .then(function(result) {
        var listFuncTestOutput = result.output.outputResult.listFuncTestOutput;
        var status = result.output.hdr.status;

        if (result.jobStatus != StatusT.StatusOk) {
            status = result.jobStatus;
        }

        if (status != StatusT.StatusOk) {
            deferred.reject(status);
        }

        deferred.resolve(listFuncTestOutput);
    })
    .fail(function(error) {
        console.log("xcalarApiListFuncTest() caught exception: ", error);
        deferred.reject(error);
    });

    return (deferred.promise());
}
// Scroll all the way down to add test cases
// Or search for function addTestCase

(function($, TestSuite) {
    "use strict";

    if (!jQuery || typeof jQuery.Deferred !== "function") {
        throw "Requires jQuery 1.5+ to use asynchronous requests.";
    }

    var TestCaseEnabled = true;
    var TestCaseDisabled = false;

    // Test related variables
    var datasetPrefix = ".XcalarDS.";
    var passes
    ,   fails
    ,   skips
    ,   returnValue
    ,   defaultTimeout
    ,   disableIsPass
    ,   testCases;

    var thriftHandle
    ,   loadArgs
    ,   loadOutput
    ,   origDataset
    ,   yelpUserDataset
    ,   yelpReviewsDataset
    ,   moviesDataset
    ,   moviesDatasetSet = false
    ,   queryName
    ,   origTable
    ,   origStrTable
    ,   aggrTable
    ,   queryTableName;

    var makeResultSetOutput1
    ,   makeResultSetOutput2
    ,   makeResultSetOutput3
    ,   newTableOutput;

    // For retina test
    var retinaName
    ,   retinaFilterDagNodeId
    ,   retinaFilterParamType
    ,   retinaFilterParamStr
    ,   retinaExportDagNodeId
    ,   retinaExportParamType
    ,   retinaExportParamStr
    ,   paramInput
    ,   retinaImportName;

    testCases = [];
   // For start nodes test
    var startNodesState;
    var system = require('system');
    var fs = require('fs');
    var qaTestDir = system.env['QATEST_DIR'];

    console.log("Qa test dir: " + qaTestDir);
    startNodesState = TestCaseEnabled;

    system.args.forEach(function(arg, i) {
        if (arg === "nostartnodes") {
            console.log("Disabling testStartNodes()");
            startNodesState = TestCaseDisabled;
        }
    });

    function TestObj(options) {
        this.deferred = options.deferred || jQuery.Deferred();
        if (options.hasOwnProperty("currentTestNumber")) {
            this.currentTestNumber = options.currentTestNumber;
        } else {
            this.currentTestNumber = -1;
        }
        this.testName = options.testName || "Unnamed test";
        this.testFn = options.testFn;
        this.timeout = options.timeout || defaultTimeout;
        if (options.hasOwnProperty("testCaseEnabled")) {
            this.testCaseEnabled = options.testCaseEnabled;
        } else {
            this.testCaseEnabled = TestCaseEnabled;
        }
        this.witness = options.witness;
        return this;
    }

    TestObj.prototype = {
        "pass": function() {
            if (this.deferred.state() == "pending") {
                passes++;
                console.log("ok " + this.currentTestNumber + " - Test \"" +
                            this.testName + "\" passed");
                this.deferred.resolve();
            }
        },
        "fail": function(reason) {
            if (this.deferred.state() == "pending") {
                fails++;
                console.log("Test " + this.testName + " failed -- " + reason);
                console.log("not ok " + this.currentTestNumber + " - Test \"" +
                            this.testName +
                            "\" failed (" + reason + ")");
                this.deferred.reject();
            }
        },
        "skip": function() {
            console.log("====== Skipping " + this.testName + " ======");
            console.log("ok " + this.currentTestNumber + " - Test \"" +
                        this.testName + "\" disabled # SKIP");
            skips++;
            if (disableIsPass) {
                this.deferred.resolve();
            } else {
                this.deferred.reject();
            }
        },
        "assert": function(statement, sucMsg, failMsg) {
            if (!statement) {
                var reason = "Assertion Failed!";
                if (failMsg) {
                    reason = "Assertion Failed! "+failMsg;
                }
                this.fail(reason);
            } else {
                if (sucMsg) {
                    console.log(sucMsg);
                }
            }
        },
        "trivial": function(deferred) {
            var self = this;
            deferred
            .then(function(retString) {
                printResult(retString);
                self.pass();
            })
            .fail(function(reason) {
                self.fail(reason);
            });
        }
    };

    function printResult(result) {
        if (result) {
            console.log(JSON.stringify(result));
        }
    }

    function getDatasetCount(datasetName) {
        var numRows = -1;
        var deferred = jQuery.Deferred();
        xcalarMakeResultSetFromDataset(thriftHandle, ".XcalarDS."+datasetName)
        .then(function(ret) {
            numRows = ret.numEntries;
            console.log(JSON.stringify(ret));
            return (xcalarFreeResultSet(thriftHandle, ret.resultSetId));
        })
        .then(function(ret) {
            deferred.resolve(numRows);
        })
        .fail(function() {
            deferred.reject("Failed to get dataset count");
        });
        return deferred.promise();
    }

    function addTestCase(testFn, testName, timeout, testCaseEnabled, witness)
    {
        testCases.push(new TestObj({
            "deferred": jQuery.Deferred(),
            "currentTestNumber": testCases.length + 1,
            "testName": testName,
            "testFn": testFn,
            "testCaseEnabled": testCaseEnabled,
            "timeout": timeout,
            "witness": witness
        }));
    }

    function runTestSuite(testCases)
    {
        var initialDeferred = $.Deferred();
        var ii;
        var deferred;
        deferred = initialDeferred;

        // Start chaining the callbacks
        for (ii = 0; ii < testCases.length; ii++) {
            deferred = deferred.then(
                // Need to trap the value of testCase and ii
                (function trapFn(testCase, currentTestNumber) {
                    return function() {
                        if (testCase.testCaseEnabled) {
                            console.log("====================Test ",
                                        testCase.currentTestNumber,
                                        " Begin====================");
                            console.log("Testing: ", testCase.testName,
                                        "                     ");
                            setTimeout(function() {
                                if (testCase.deferred.state() == "pending") {
                                    var reason = "Timed out after " +
                                                 (testCase.timeout / 1000) +
                                                 " seconds";
                                    testCase.fail(reason);
                                }
                            }, testCase.timeout);

                            testCase.testFn(testCase);
                        } else {
                            testCase.skip();
                        }

                        return testCase.deferred.promise();
                    };
                })(testCases[ii], ii + 1) // Invoking trapFn
            );
        }

        deferred.fail(function() {
            returnValue = 1;
        });

        deferred.always(function() {
            console.log("# pass", passes);
            console.log("# fail", fails);
            console.log("# skips", skips);
            console.log("==========================================");
            console.log("1.." + testCases.length + "\n");
            phantom.exit(returnValue);
        });

        // This starts the entire chain
        initialDeferred.resolve();
    }

    function testStartNodes(test) {
        test.trivial(xcalarStartNodes(thriftHandle, 4));
    }

    function testGetNumNodes(test) {
        test.trivial(xcalarGetNumNodes(thriftHandle));
    }

    function testGetVersion(test) {
        test.trivial(xcalarGetVersion(thriftHandle));
    }

    function testPreview(test) {
        var url = "nfs://" + qaTestDir + "/yelp/user";

        xcalarPreview(thriftHandle, url, "*", false, 11)
        .then(function(result) {
            printResult(result);
            var previewOutput = result;
            console.log("\t yelp/user preview : " + previewOutput.buffer);
            var expectedStr = "[\n{\"yelping";
            console.log("\t expected encoded: " + btoa(expectedStr))
            console.log("\t expected len: " + btoa(expectedStr).length)
            test.assert(previewOutput.buffer === expectedStr);
            test.assert(previewOutput.bufferLen === btoa(expectedStr).length);
            test.assert(previewOutput.fileName ===
                "yelp_academic_dataset_user_fixed.json");
            test.pass();
        })
        .fail(function(reason) {
            test.fail(StatusTStr[reason]);
        });
    }

    function testLoad(test) {
        loadArgs = new XcalarApiDfLoadArgsT();
        loadArgs.csv = new XcalarApiDfCsvLoadArgsT();
        loadArgs.csv.recordDelim = XcalarApiDefaultRecordDelimT;
        loadArgs.csv.fieldDelim = XcalarApiDefaultFieldDelimT;
        loadArgs.csv.quoteDelim = XcalarApiDefaultQuoteDelimT;
        loadArgs.csv.linesToSkip = 0;
        loadArgs.csv.isCRLF = false;

        xcalarLoad(thriftHandle, "file://" + qaTestDir + "/yelp/user", "yelp",
                   DfFormatTypeT.DfFormatJson, 0, loadArgs)
        .then(function(result) {
            printResult(result);
            loadOutput = result;
            origDataset = loadOutput.dataset.name;
            yelpUserDataset = loadOutput.dataset.name;
            return getDatasetCount("yelp");
        })
        .then(function(count) {
            test.assert(count === 70817);
            return (xcalarLoad(thriftHandle, "file://" + qaTestDir +
                               "/yelp/reviews", "yelpReviews",
                               DfFormatTypeT.DfFormatJson, 0, loadArgs));
        })
        .then(function(result) {
            yelpReviewsDataset = result.dataset.name;
            return getDatasetCount("yelpReviews");
        })
        .then(function(count) {
            test.assert(count == 335022);
            test.pass();
        })
        .fail(function(reason) {
            test.fail(StatusTStr[reason]);
        });
    }

    function testLoadRegex(test) {
        loadArgs = new XcalarApiDfLoadArgsT();
        loadArgs.csv = new XcalarApiDfCsvLoadArgsT();
        loadArgs.csv.recordDelim = XcalarApiDefaultRecordDelimT;
        loadArgs.csv.fieldDelim = XcalarApiDefaultFieldDelimT;
        loadArgs.csv.isCRLF = false;
        loadArgs.fileNamePattern = "re:(user|tip)\\/.*\\.json";
        loadArgs.recursive = true;

        xcalarLoad(thriftHandle, "nfs://" + qaTestDir +
                   "/yelp", "yelpTip",
                   DfFormatTypeT.DfFormatJson, 0, loadArgs)
        .then(function(result) {
            printResult(result);
            loadOutput = result;
            origDataset = loadOutput.dataset.name;
            return getDatasetCount("yelpTip");
        })
        .then(function(count) {
            test.assert(count === 184810)
            test.pass();
        })
        .fail(function(reason) {
            test.fail(StatusTStr[reason]);
        });
    }

    function loadHelper() {
        var lArgs = new XcalarApiDfLoadArgsT();
        lArgs.csv = new XcalarApiDfCsvLoadArgsT();
        lArgs.csv.recordDelim = XcalarApiDefaultRecordDelimT;
        lArgs.csv.fieldDelim = XcalarApiDefaultFieldDelimT;
        lArgs.csv.isCRLF = false;
        lArgs.csv.hasHeader = true;
        return lArgs;
    }

    function testLoadEdgeCaseDos(test) {
        var lArgs = loadHelper();
        lArgs.csv.isCRLF = false;
        lArgs.csv.fieldDelim = "\t";
        lArgs.csv.recordDelim = "\r";
        xcalarLoad(thriftHandle, "file://" + qaTestDir +
                   "/edgeCases/dosFormat.csv", "dosFormat",
                   DfFormatTypeT.DfFormatCsv, 0, lArgs)
        .then(function(result) {
            return getDatasetCount("dosFormat");
        })
        .then(function(numRows) {
            test.assert(numRows == 123);
            test.pass();
        })
        .fail(function(reason) {
            test.fail(reason);
        });
    }


    function testBadLoad(test) {
        loadArgs = new XcalarApiDfLoadArgsT();
        loadArgs.csv = new XcalarApiDfCsvLoadArgsT();
        loadArgs.csv.recordDelim = XcalarApiDefaultRecordDelimT;
        loadArgs.csv.fieldDelim = XcalarApiDefaultFieldDelimT;
        loadArgs.csv.isCRLF = false;

        xcalarLoad(thriftHandle, "nfs://" + qaTestDir + "/edgeCases/bad.json", "bad", DfFormatTypeT.DfFormatJson, 0, loadArgs)
        .done(function(result) {
            printResult(result);
            loadOutput = result;
            var errStr = "line: 2 column: 1 position: 10892 error: end of file expected near '{'(Failed to parse data format value)";
            var errFile = "nfs://" + qaTestDir + "/edgeCases/bad.json";
            if (loadOutput.errorString == errStr &&
                loadOutput.errorFile == errFile) {
                test.pass();
            } else {
                test.fail("errorString: \"" + loadOutput.errorString + "\" should be: \"" + errStr + "\" errorFile: \"" + loadOutput.errorFile + "\" should be: \"" + errFile);
            }
        })
        .fail(function(reason) {
            test.fail(StatusTStr[reason]);
        });
    }

    function testBulkDestroyDs(test) {
        loadArgs = new XcalarApiDfLoadArgsT();
        loadArgs.csv = new XcalarApiDfCsvLoadArgsT();
        loadArgs.csv.recordDelim = XcalarApiDefaultRecordDelimT;
        loadArgs.csv.fieldDelim = XcalarApiDefaultFieldDelimT;
        loadArgs.csv.isCRLF = false;

        xcalarLoad(thriftHandle, "file://" + qaTestDir + "/yelp/reviews",
                   "review", DfFormatTypeT.DfFormatJson, 0, loadArgs)
        .then(function(result) {
            var testloadOutput = result;
            return xcalarDeleteDagNodes(thriftHandle, "*",
                                        SourceTypeT.SrcDataset);
        })
        .then(function(destroyDatasetsOutput) {
            printResult(destroyDatasetsOutput);

            for (var i = 0, delDsStatus = null;
                i < destroyDatasetsOutput.numDataset; i ++) {
                delDsStatus = destroyDatasetsOutput.statuses[i];
                console.log("\t" + delDsStatus.datasetName + ": " +
                            StatusTStr[delDsStatus.status]);
            }
            test.pass();
        })
        .fail(function(reason) {
            test.fail(StatusTStr[reason]);
        });
    }

    function testLoadBogus(test) {
        xcalarLoad(thriftHandle, "somejunk", "junk", DfFormatTypeT.DfFormatJson,
                   0, loadArgs)
        .then(function(bogusOutput) {
            printResult(bogusOutput);
            test.fail("load succeeded when it should have failed");
        })
        .fail(function() {
            test.pass();
        });
    }

    function testListDatasets(test) {
        xcalarListDatasets(thriftHandle)
        .then(function(listDatasetsOutput) {
            printResult(listDatasetsOutput);

            var foundLoadDs = false;
            for (var i = 0, dataset = null; i < listDatasetsOutput.numDatasets;
                 i ++) {
                dataset = listDatasetsOutput.datasets[i];

                console.log("\tdataset[" + i.toString() + "].url = " +
                            dataset.url);
                console.log("\tdataset[" + i.toString() + "].name = " +
                            dataset.name);
                console.log("\tdataset[" + i.toString() + "].datasetId = " +
                    dataset.datasetId.toString());
                console.log("\tdataset[" + i.toString() + "].formatType = " +
                    DfFormatTypeTStr[dataset.formatType]);
                console.log("\tdataset[" + i.toString() + "].loadIsComplete = "+
                    dataset.loadIsComplete.toString());
                console.log("\tdataset[" + i.toString() + "].refCount = " +
                    dataset.refCount.toString());

                if (dataset.name === loadOutput.dataset.name) {
                    foundLoadDs = true;
                    break;
                }
            }
            test.assert(foundLoadDs,
                        "Found dataset \"" + loadOutput.dataset.name + "\"",
                        "Could not find loaded dataset \"" +
                        loadOutput.dataset.name + "\"");
            test.pass();

        })
        .fail(test.fail);
    }

    function testIndexDatasetIntSync(test) {
        test.trivial(xcalarIndexDataset(thriftHandle,
                     loadOutput.dataset.name, "review_count",
                     "yelp/user-review_count", "",
                     XcalarOrderingT.XcalarOrderingUnordered));
    }

    function testIndexDatasetInt(test) {
        xcalarIndexDataset(thriftHandle, loadOutput.dataset.name,
                           "votes.funny", "yelp/user-votes.funny", "",
                           XcalarOrderingT.XcalarOrderingUnordered)
        .done(function(indexOutput) {
            printResult(indexOutput);
            origTable = indexOutput.tableName;
            test.pass();
        })
        .fail(test.fail);
    }

    function testIndexDatasetStr(test) {
        xcalarIndexDataset(thriftHandle, loadOutput.dataset.name,
                           "user_id", "yelp/user-user_id", "",
                           XcalarOrderingT.XcalarOrderingUnordered)
        .done(function(indexStrOutput) {
            printResult(indexStrOutput);
            origStrTable = indexStrOutput.tableName;
            test.pass();
        })
        .fail(test.fail);
    }

    function testIndexTable(test) {
        test.trivial(xcalarIndexTable(thriftHandle, origStrTable,
                         "name", "yelp/user-name", "",
                         XcalarOrderingT.XcalarOrderingUnordered));
    }

    function testRenameNode(test) {
        xcalarRenameNode(thriftHandle, origTable, "newName")
        .then(function(status) {
            printResult(status);
            return xcalarRenameNode(thriftHandle, "newName", origTable);
        })
        .then(function(status) {
            printResult(status);
            test.pass();
        })
        .fail(function(status) {
            test.fail(StatusTStr[status]);
        });
    }

    function testGetQueryIndex(test) {
        var workItem = new WorkItem();
        workItem.input = new XcalarApiInputT();
        workItem.input.indexInput = new XcalarApiIndexInputT();
        workItem.input.indexInput.source = new XcalarApiNamedInputT();
        workItem.input.indexInput.dstTable = new XcalarApiTableT();

        workItem.api = XcalarApisT.XcalarApiIndex;
        workItem.input.indexInput.source.isTable = false;
        workItem.input.indexInput.source.name = "dataset";
        workItem.input.indexInput.source.xid = XcalarApiXidInvalidT;
        workItem.input.indexInput.dstTable.tableName = "dstTable";
        workItem.input.indexInput.dstTable.tableId = XcalarApiTableIdInvalidT;
        workItem.input.indexInput.keyName = "keyName";
        workItem.input.indexInput.dhtName = "";
        workItem.input.indexInput.ordering = XcalarOrderingT.XcalarOrderingUnordered;

        xcalarApiGetQuery(thriftHandle, workItem)
        .then(function(getQueryOutput) {
            console.log("\tquery =" + getQueryOutput.query.toString());
            test.pass();
        })
        .fail(test.fail);
    }

    function testGetQueryLoad(test) {
        var workItem = new WorkItem();
        workItem.input = new XcalarApiInputT();
        workItem.input.loadInput = new XcalarApiBulkLoadInputT();
        workItem.input.loadInput.dataset = new XcalarApiDatasetT();
        workItem.input.loadInput.loadArgs = new XcalarApiDfLoadArgsT();
        workItem.input.loadInput.loadArgs.csv = new XcalarApiDfCsvLoadArgsT();

        workItem.api = XcalarApisT.XcalarApiBulkLoad;
        workItem.input.loadInput.maxSize = 1024;
        workItem.input.loadInput.dagNodeId = 9;
        workItem.input.loadInput.loadArgs.csv.recordDelim = ",";
        workItem.input.loadInput.loadArgs.csv.fieldDelim = "\n";
        workItem.input.loadInput.loadArgs.csv.isCRLF = false;
        workItem.input.loadInput.loadArgs.csv.hasHeader = false;
        workItem.input.loadInput.dataset.url = "url";
        workItem.input.loadInput.dataset.datasetId = 2;
        workItem.input.loadInput.dataset.formatType =
                                                     DfFormatTypeT.DfFormatJson;
        workItem.input.loadInput.dataset.name = "datasetName";
        workItem.input.loadInput.dataset.loadIsComplete = false;
        workItem.input.loadInput.dataset.refCount = 32;

        xcalarApiGetQuery(thriftHandle, workItem)
        .done(function(getQueryOutput) {
            console.log("\tquery =" + getQueryOutput.query.toString());
            test.pass();
        })
        .fail(test.fail);
    }

    function testIndexDatasetBogus(test) {
         test.trivial(xcalarIndexDataset(thriftHandle, loadOutput.dataset.name,
                      "garbage", "yelp/user-garbage", "",
                      XcalarOrderingT.XcalarOrderingUnordered));
    }

    function testIndexTable2(test) {
        test.trivial(xcalarIndexTable(thriftHandle, origStrTable,
                     "yelping_since", "yelp/user-yelping_since", "",
                     XcalarOrderingT.XcalarOrderingUnordered));
    }

    function testIndexTableBogus(test) {
        test.trivial(xcalarIndexTable(thriftHandle, origTable,
                     "garbage2", "yelp/user-garbage2", "",
                     XcalarOrderingT.XcalarOrderingUnordered));
    }

    function testGetTableRefCount(test) {
        test.trivial(xcalarGetTableRefCount(thriftHandle, origTable));
    }

    function testGetTableMeta(test) {
        xcalarGetTableMeta(thriftHandle, origTable)
        .done(function(metaOutput) {
            printResult(metaOutput);

            var pgCount1 = 0;
            var pgCount2 = 0;
            var rowCount1 = 0;
            var rowCount2 = 0;
            var totalTranspageSent = 0;
            var totalTranspageRevc = 0;

            var totalXdbPageRequired = 0;
            var totalXdbPageConsumed = 0;

            for (var i = 0; i < metaOutput.numMetas; i ++) {
                rowCount1 += metaOutput.metas[i].numRows;
                pgCount1 += metaOutput.metas[i].numPages;
                for (var j = 0; j < metaOutput.metas[i].numSlots; j++) {
                    rowCount2 += metaOutput.metas[i].numRowsPerSlot[j];
                    pgCount2 += metaOutput.metas[i].numPagesPerSlot[j];
                }

                totalTranspageSent += metaOutput.metas[i].numTransPageSent;
                totalTranspageRevc += metaOutput.metas[i].numTransPageRecv;

                totalXdbPageRequired = metaOutput.metas[i].xdbPageRequiredInBytes
                totalXdbPageConsumed = metaOutput.metas[i].xdbPageConsumedInBytes
            }

            test.assert(totalXdbPageRequired > 0, undefined,
                        "Incorrect value (" + totalXdbPageRequired + ")" +
                        "returned for XDB page space required");

            test.assert(totalXdbPageRequired < totalXdbPageConsumed, undefined,
                        "totalXdbPageRequired (" + totalXdbPageRequired +
                        ")should less than consumed");

            test.assert(totalTranspageSent > 0, undefined,
                        "totalTranspageSent should be greater than 0");

            test.assert(totalTranspageSent == totalTranspageRevc, undefined,
                        "transpage sent (" + totalTranspageSent + ") does " +
                        "not match transpage recv (" + totalTranspageRevc + ")");

            if (pgCount1 == pgCount2 && rowCount1 == rowCount2) {
                test.pass();
            } else {
                var reason = "pgCount1: " + pgCount1 +
                    " pgCount2: " + pgCount2 +
                    " rowCount1: " + rowCount1 +
                    " rowCount2: " + rowCount2;
                test.fail(reason);
            }
        })
        .fail(test.fail);
    }

    function curryVerifyCountOutput(test) {
        function verifyCountOutput(metaOutput) {
            printResult(metaOutput);

            var totalCount = 0;
            for (var i = 0; i < metaOutput.numMetas; i ++) {
                totalCount += metaOutput.metas[i].numRows;
                console.log("Node " + i + ": " + metaOutput.metas[i].numRows);
            }

            console.log("\tcount: " + totalCount.toString());
            test.assert(totalCount === 70817, undefined,
                        "wrong count: " + totalCount + " expected: 70817");
            test.pass();
        }
        return (verifyCountOutput);
    }

    function testGetDatasetCount(test) {
        var verifyDatasetCount = curryVerifyCountOutput(test);
        xcalarGetDatasetMeta(thriftHandle, yelpUserDataset)
        .done(verifyDatasetCount)
        .fail(test.fail);
    }

    function testGetTableCount(test) {
        var verifyTableCount = curryVerifyCountOutput(test);
        xcalarGetTableMeta(thriftHandle, origTable)
        .done(verifyTableCount)
        .fail(test.fail);
    }

    function testListTables(test) {
        xcalarListTables(thriftHandle, "yelp*", SourceTypeT.SrcTable)
        .then(function(listTablesOutput) {
            printResult(listTablesOutput);

            var foundVotesFunny = false;
            for (var i = 0, node = null; i < listTablesOutput.numNodes; i ++) {
                node = listTablesOutput.nodeInfo[i];
                console.log("\ttable[" + i.toString() + "].tableName = " + node.name);
                console.log("\ttable[" + i.toString() + "].tableId = " +
                    node.dagNodeId.toString());
                console.log("\ttable[" + i.toString() + "].state = " +
                    node.state.toString());
                if (node.name === origTable && node.size > 0) {
                    foundVotesFunny = true;
                }
            }
            test.assert(foundVotesFunny, "Found node \"" + origTable + "\"",
                        "failed to find node \"" + origTable + "\"");
            test.pass();
        })
        .fail(test.fail);
    }

    function indexAggregateRaceTest(test) {
        var pathToFlightDataset = qaTestDir + "/flight/airlines_2007.csv";
        var pathToAirportDataset = qaTestDir + "/flight/airports.csv";
        var datasetName = "MgmtTest/indexAggregateRaceTest/flightDataset";
        var datasetName2 = "MgmtTest/indexAggregateRaceTest/airportDataset";
        var tmpTableName1 = "MgmtTest/indexAggregateRaceTest/tmpTable1";
        var tmpTableName2 = "MgmtTest/indexAggregateRaceTest/tmpTable2";
        var tmpTableName3 = "MgmtTest/indexAggregateRaceTest/tmpTable3";
        var tmpTableName4 = "MgmtTest/indexAggregateRaceTest/tmpTable4";
        var startTableName = "MgmtTest/indexAggregateRaceTest/startTable";
        var dstTableNameTemplate = "MgmtTest/indexAggregateRaceTest/dstTable";
        var groupByTableNameTemplate = "MgmtTest/indexAggregateRaceTest/groupByTable";
        var keyName = "Month_integer";
        var keyName2 = "Month";
        var keyName3 = "groupBySum";

        var failed = false;
        var raceFailedReason = "";

        var indexAndAggregateOutput = {};
        var indexAndAggDone = false;

        var numIndexes = 0;
        var indexDone = [];

        var aggTableName = { "sum": "MgmtTest/indexAggregateRaceTest/aggTableSum",
                             "avg": "MgmtTest/indexAggregateRaceTest/aggTableAvg",
                             "min": "MgmtTest/indexAggregateRaceTest/aggTableMin",
                             "max": "MgmtTest/indexAggregateRaceTest/aggtableMax",
                             "count": "MgmtTest/indexAggregateRaceTest/aggTableCount"};
        var expectedAggOutput = { "sum": 919477.0, "avg": 919477.0 / 138491.0,
                                  "min": 1, "max": 12, "count": 138491.0 };
        var aggDone = { "sum": false, "avg": false, "min": false, "max": false,
                        "count": false };
        var aggEvalStr = { "sum": "sum(" + keyName + ")",
                           "avg": "avg(" + keyName + ")",
                           "min": "min(" + keyName + ")",
                           "max": "max(" + keyName + ")",
                           "count": "count(" + keyName + ")" };

        function indexAndAggDoneFn() {
            var totalCompleted = 0;
            indexAndAggDone = true;

            function makeGroupByDoneFn(ii) {
                var groupByTableName = groupByTableNameTemplate + ii;
                function groupByDoneFnInt(groupByOutput) {
                    var aggStr = "sum(" + keyName3 + ")";
                    xcalarAggregate(thriftHandle, groupByTableName,
                                    groupByTableName + "-aggr",
                                    aggStr)
                    .done(function(aggregateOutput) {
                        console.log("aggStr: " + aggStr + ", tableName: \"" +
                                    groupByTableName + "\", output: " +
                                    aggregateOutput);
                        var answer = JSON.parse(aggregateOutput);
                        if (answer.Value != expectedAggOutput["sum"]) {
                            failed = true;
                            raceFailedReason += "Returned answer: " +
                                                answer.Value +
                                                " Expected answer: " +
                                                expectedAggOutput["sum"];
                        }
                    })
                    .fail(function(reason) {
                        failed = true;
                        raceFailedReason +="Aggregate failed. Server returned: "
                                           + StatusTStr[reason];
                    })
                    .always(function() {
                        totalCompleted++;
                        if (totalCompleted == numIndexes) {
                            test.assert(!failed, "", raceFailedReason);
                            test.pass();
                        }
                    });
                }
                return (groupByDoneFnInt);
            }

            if (failed) {
                test.fail(raceFailedReason);
            } else {
                // Now we verify that all the months are correct in dstTable
                for (var ii = 0; ii < numIndexes; ii++) {
                    var dstTableName = dstTableNameTemplate + ii;
                    var groupByTableName = groupByTableNameTemplate + ii;
                    xcalarGroupBy(thriftHandle, dstTableName, groupByTableName,
                                  "sum(" + keyName + ")", keyName3, false)
                    .done(makeGroupByDoneFn(ii))
                    .fail(function(reason) {
                        failed = true;
                        raceFailedReason = "Group by failed. Server returned: "
                                           + StatusTStr[reason];
                        totalCompleted++;
                        if (totalCompleted == numIndexes) {
                            test.assert(!failed, "", raceFiledReason);
                            test.pass();
                        }
                    });
                }
            }
        }

        function aggDoneFn(aggOutput, aggOp) {
            if (aggOutput !== null) {
                console.log("Aggregate on \"" + startTableName + "\" done. " +
                            aggEvalStr[aggOp] + " = " + aggOutput);
                indexAndAggregateOutput["aggOutput" + aggOp] = aggOutput;
                var answer = JSON.parse(aggOutput).Value;
                if (answer !== expectedAggOutput[aggOp]) {
                    failed = true;
                    raceFailedReason += "Aggregate returned wrong answer (" +
                                        answer + " instead of " +
                                        expectedAggOutput[aggOp] + ")";
                }
            }
            aggDone[aggOp] = true;
            var allAggDone = true;
            for (var key in aggDone) {
                if (!aggDone[key]) {
                    allAggDone = false;
                    break;
                }
            }

            var allIndexDone = true;
            for (var ii = 0; ii < numIndexes; ii++) {
                if (!indexDone[ii]) {
                    allIndexDone = false;
                }
            }

            if (allIndexDone && allAggDone && !indexAndAggDone) {
                indexAndAggDoneFn();
            }
        }

        function indexDoneFn(indexOutput, idx) {
            console.log("Index " + idx + " done");
            indexAndAggregateOutput["indexOutput" + idx] = indexOutput;
            indexDone[idx] = true;

            var allIndexDone = true;
            for (var ii = 0; ii < numIndexes; ii++) {
                if (!indexDone[ii]) {
                    allIndexDone = false;
                }
            }

            var allAggDone = true;
            for (var key in aggDone) {
                if (!aggDone[key]) {
                    allAggDone = false;
                    break;
                }
            }

            if (allIndexDone && allAggDone && !indexAndAggDone) {
                indexAndAggDoneFn();
            }
        }

        function startRace() {
            // Now we start the race
            for (var aggOp in aggDone) {
                xcalarAggregate(thriftHandle, startTableName,
                                aggTableName[aggOp], aggEvalStr[aggOp])
                .done(
                    (function(key) {
                        return (function(aggOutput) {
                                    aggDoneFn(aggOutput, key);
                                });
                    })(aggOp)
                )
                .fail((function(key) {
                    function anonymousFn(reason) {
                        raceFailedReason +=
                                      "Failed to aggregate. Server returned: " +
                                             StatusTStr[reason];
                        failed = true;
                        aggDoneFn(null, key);
                    }
                    return (anonymousFn);
                })(aggOp));

                var dstTableName = dstTableNameTemplate + numIndexes;

                xcalarIndexTable(thriftHandle, startTableName, keyName,
                                 dstTableName,
                                 "", XcalarOrderingT.XcalarOrderingUnordered)
                .done(
                    (function(idx) {
                    return (function(indexOutput) {
                            indexDoneFn(indexOutput, idx);
                            });
                    })(numIndexes)
                )
                .fail(function(reason) {
                    raceFailedReason += "Failed to index. Server returned: " +
                                        StatusTStr[reason];
                    failed = true;
                    indexDoneFn(null);
                });

                numIndexes++;

            }
        }

        function joinDoneFn() {
            xcalarIndexTable(thriftHandle, tmpTableName3, keyName2,
                             tmpTableName4, "",
                             XcalarOrderingT.XcalarOrderingUnordered)
            .done(function(indexOutput) {
                xcalarApiMap(thriftHandle, keyName, "int(" + keyName2 + ")",
                             tmpTableName3, startTableName)
                .done(startRace)
                .fail(function(reason) {
                    reason = "Failed to cast. Server returned: " +
                                  StatusTStr[reason];
                    test.fail(reason);
                });
            })
            .fail(function(reason) {
                reason = "Index failed. Server returned: " +
                             StatusTStr[reason];
                test.fail(reason);
            });
        }

        function loadDoneFn() {
            xcalarIndexDataset(thriftHandle, datasetName, "Dest", tmpTableName1,
                               "", XcalarOrderingT.XcalarOrderingUnordered)
            .done(function(indexOutput) {
                xcalarIndexDataset(thriftHandle, datasetName2, "iata",
                                   tmpTableName2, "",
                                   XcalarOrderingT.XcalarOrderingUnordered)
                .done(function(indexOutput) {
                    // For some reason, the join is required to reproduce the bug
                    xcalarJoin(thriftHandle, tmpTableName1, tmpTableName2,
                               tmpTableName3, JoinOperatorT.InnerJoin)
                    .done(function(result) {
                        joinDoneFn();
                    })
                    .fail(function(reason) {
                        reason = "Failed to join. Server returned: " +
                                     StatusTStr[reason];
                        test.fail(reason);
                    });
                })
                .fail(function(reason) {
                    reason = "Failed to index. Server returned: " +
                                 StatusTStr[reason];
                    test.fail(reason);
                });
            })
            .fail(function(reason) {
                reason = "Failed to index. Server returned: " +
                             StatusTStr[reason];
                test.fail(reason);
            });
        }

        var loadArgs = new XcalarApiDfLoadArgsT();
        loadArgs.csv = new XcalarApiDfCsvLoadArgsT();
        loadArgs.csv.recordDelim = XcalarApiDefaultRecordDelimT;
        loadArgs.csv.fieldDelim = ',';
        loadArgs.csv.isCRLF = false;
        loadArgs.csv.hasHeader = true;

        xcalarLoad(thriftHandle, "file://" + pathToFlightDataset, datasetName,
                   DfFormatTypeT.DfFormatCsv, 0, loadArgs)
        .done(function(loadOutput) {
            datasetName = loadOutput.dataset.name;
            xcalarLoad(thriftHandle, "file://" + pathToAirportDataset,
                       datasetName2,
                       DfFormatTypeT.DfFormatCsv, 0, loadArgs)
            .done(function(loadOutput) {
                datasetName2 = loadOutput.dataset.name;
                loadDoneFn();
            })
            .fail(function(reason) {
                reason = "Failed to load. Server returned: " +
                         StatusTStr[reason];
                test.fail(reason);
            });
        })
        .fail(function(reason) {
            reason = "Failed to load. Server returned: " + StatusTStr[reason];
            test.fail(reason);
        });
    }

    function testGetStats(test) {
        xcalarGetStats(thriftHandle, 0)
        .then(function(statOutput) {
            printResult(statOutput);

            for (var i = 0, stat = null; i < statOutput.numStats; i ++) {
                stat = statOutput.stats[i];

                console.log("\tstat[" + i.toString() + "].statName = " +
                        stat.statName);
                console.log("\tstat[" + i.toString() + "].statValue = " +
                        stat.statValue.toString());
                console.log("\tstat[" + i.toString() + "].statType = " +
                        stat.statType.toString());
                console.log("\tstat[" + i.toString() + "].statLife = " +
                        stat.statLife.toString());
                console.log("\tstat[" + i.toString() + "].groupId = " +
                        stat.groupId.toString());
            }
            test.assert(statOutput.numStats, undefined, "No stats returned");
            test.pass();
        })
        .fail(test.fail);
    }

    function testGetStatGroupIdMap(test) {
        xcalarGetStatGroupIdMap(thriftHandle, 0, 5)
        .then(function(groupMapOutput) {
            printResult(groupMapOutput);

            if (groupMapOutput.numGroupNames !== 0) {
                console.log("\tnumGroupNames: " +
                        groupMapOutput.numGroupNames.toString());

                for (var i = 0; i < groupMapOutput.numGroupNames; i ++) {
                    console.log("\tgroupName[" + i.toString() + "] = " +
                        groupMapOutput.groupName[i]);
                }

                test.pass();
            } else {
                var reason = "numGroupNames == 0";
                test.fail(reason);
            }
        })
        .fail(test.fail);
    }

    function testGetStatsByGroupId(test) {
        xcalarGetStatsByGroupId(thriftHandle, [0,1,2,3], [1,2])
        .then(function(statOutput) {
            printResult(statOutput);

            test.assert(statOutput.numStats == 40, undefined,
                        "Wrong number of stats returned");
            for (var i = 0, stat = null; i < statOutput.numStats; i ++) {
                stat = statOutput.stats[i];

                console.log("\tstat[" + i.toString() + "].statName = " +
                        stat.statName);
                console.log("\tstat[" + i.toString() + "].statValue = " +
                        stat.statValue.toString());
                console.log("\tstat[" + i.toString() + "].statType = " +
                        stat.statType.toString());
                console.log("\tstat[" + i.toString() + "].statLife = " +
                        stat.statLife.toString());
                console.log("\tstat[" + i.toString() + "].groupId = " +
                        stat.groupId.toString());
            }
            test.pass();
        })
        .fail(test.fail);
    }

    function testResetStats(test) {
        test.trivial(xcalarResetStats(thriftHandle, 0));
    }

    function testMakeResultSetFromDataset(test) {
        xcalarMakeResultSetFromDataset(thriftHandle,
                                       loadOutput.dataset.name)
        .then(function(result) {
            printResult(result);
            makeResultSetOutput1 = result;
            test.pass();
        })
        .fail(test.fail);
    }

    function testMakeResultSetFromTable(test) {
        xcalarMakeResultSetFromTable(thriftHandle,
                                     origTable)
        .then(function(result) {
            printResult(result);
            makeResultSetOutput2 = result;
            test.pass();
        })
        .fail(test.fail);
    }

    function testMakeResultSetFromAggregate(test) {
        xcalarMakeResultSetFromTable(thriftHandle, aggrTable)
        .then(function(result) {
            printResult(result);
            makeResultSetOutput3 = result;
            test.pass();
        })
        .fail(test.fail);
    }

    function testResultSetNextDataset(test) {
        xcalarResultSetNext(thriftHandle,
                            makeResultSetOutput1.resultSetId, 5)
        .then(function(resultNextOutput1) {
            printResult(resultNextOutput1);
            test.assert(resultNextOutput1.numKvPairs > 0)

            for (var i = 0, kvPair = null; i < resultNextOutput1.numKvPairs;
                 i++) {
                kvPair = resultNextOutput1.kvPair[i];

                console.log("\trecord[" + i.toString() + "].key = " +
                            kvPair.key);
                console.log("\trecord[" + i.toString() + "].value = " +
                            kvPair.value);
            }
            test.pass();
        })
        .fail(test.fail);
    }

    function testResultSetAbsolute(test) {
        test.trivial(xcalarResultSetAbsolute(thriftHandle,
                    makeResultSetOutput2.resultSetId, 1000));
    }

    function testResultSetAbsoluteBogus(test) {
        xcalarResultSetAbsolute(thriftHandle,
                                makeResultSetOutput2.resultSetId,
                                281474976710655)
        .then(test.fail)
        .fail(function() {
            test.pass();
        });
    }

    function testResultSetNextTable(test) {
        xcalarResultSetNext(thriftHandle,
                            makeResultSetOutput2.resultSetId, 5)
        .then(function(resultNextOutput2) {
            printResult(resultNextOutput2);
            test.assert(resultNextOutput2.numKvPairs > 0);

            for (var i = 0, kvPair = null; i < resultNextOutput2.numKvPairs;
                 i ++) {
                kvPair = resultNextOutput2.kvPair[i];
                console.log("\trecord[" + i.toString() + "].key = " +
                            kvPair.key);
                console.log("\trecord[" + i.toString() + "].value = " +
                            kvPair.value);
            }
            test.pass();
        })
        .fail(test.fail);
    }

    function testResultSetNextAggregate(test) {
        xcalarResultSetNext(thriftHandle,
                            makeResultSetOutput3.resultSetId, 5)
        .then(function(resultNextOutput3) {
            printResult(resultNextOutput3);
            test.assert(resultNextOutput3.numKvPairs > 0);

            for (var i = 0, kvPair = null; i < resultNextOutput3.numKvPairs;
                 i++) {
                kvPair = resultNextOutput3.kvPair[i];
                console.log("\trecord[" + i.toString() + "].key = " +
                            kvPair.key);
                console.log("\trecord[" + i.toString() + "].value = " +
                            kvPair.value);
            }
            test.pass();
        })
        .fail(test.fail);
    }

    function testFreeResultSetAggregate(test) {
        test.trivial(xcalarFreeResultSet(thriftHandle,
                                         makeResultSetOutput3.resultSetId));
    }

    function testFreeResultSetDataset(test) {
        test.trivial(xcalarFreeResultSet(thriftHandle,
                                         makeResultSetOutput1.resultSetId));
    }

    function testFreeResultSetTable(test) {
        test.trivial(xcalarFreeResultSet(thriftHandle,
                                         makeResultSetOutput2.resultSetId));
    }

    function testFilter(test) {
        xcalarFilter(thriftHandle, "gt(votes.funny, 900)", origTable,
                     "yelp/user-votes.funny-gt900")
        .then(function(ret) {
              test.assert(ret.tableName == "yelp/user-votes.funny-gt900");
              return xcalarMakeResultSetFromTable(thriftHandle, "yelp/user-votes.funny-gt900");
        })
        .then(function(ret) { 
              test.assert(ret.numEntries == 488);
              return xcalarFreeResultSet(thriftHandle, ret.resultSetId)
        })
        .then(function(ret) {
            test.pass();
        })
        .fail(test.fail);
    }

    function testProject(test) {
        var rs1 = null;
        var rs2 = null;
        var rs3 = null;
        var rs4 = null
        xcalarProject(thriftHandle, 2, ["votes.funny", "user_id"],
                      origTable, "yelp/user-votes.funny-projected")
        .then(function(ret) {
            test.assert(ret.tableName == "yelp/user-votes.funny-projected");
            return xcalarMakeResultSetFromTable(thriftHandle,
                                                "yelp/user-votes.funny-projected");
        })
        .then(function(ret) {
            rs1 = ret;
            test.assert(ret.metaOutput.numValues == 1);
            test.assert(ret.metaOutput.numImmediates == 0);
            return xcalarApiMap(thriftHandle, "votesFunnyPlusUseful",
                                "add(votes.funny, votes.useful)",
                                "yelp/user-votes.funny-gt900",
                                "yelp/user-votes.funny-plus-useful-map");
        })
        .then(function(ret) {
            test.assert(ret.tableName == "yelp/user-votes.funny-plus-useful-map");
            return xcalarMakeResultSetFromTable(thriftHandle,
                                                "yelp/user-votes.funny-plus-useful-map");
        })
        .then(function(ret) {
            rs2= ret;
            test.assert(ret.metaOutput.numValues == 2);
            test.assert(ret.metaOutput.numImmediates == 1);
            return xcalarApiMap(thriftHandle, "complimentsFunnyPlusCute",
                                "add(compliments.funny, compliments.cute)",
                                "yelp/user-votes.funny-plus-useful-map",
                                "yelp/user-compliments.funny-plus-cute-map");
        })
        .then(function(ret) {
            test.assert(ret.tableName == "yelp/user-compliments.funny-plus-cute-map");
            return xcalarMakeResultSetFromTable(thriftHandle,
                                                "yelp/user-compliments.funny-plus-cute-map");
        })
        .then(function(ret) {
            rs3 = ret;
            test.assert(ret.metaOutput.numValues == 3);
            test.assert(ret.metaOutput.numImmediates == 2);
            return xcalarProject(thriftHandle, 2,
                                 ["votesFunnyPlusUseful", "complimentsFunnyPlusCute"],
                                 "yelp/user-compliments.funny-plus-cute-map",
                                 "yelp/projected_two_immediate_columns");
        })
        .then(function(ret) {
            test.assert(ret.tableName == "yelp/projected_two_immediate_columns");
            return xcalarMakeResultSetFromTable(thriftHandle,
                                                "yelp/projected_two_immediate_columns");
        })
        .then(function(ret) {
            rs4 = ret;
            test.assert(ret.metaOutput.numValues == 2);
            test.assert(ret.metaOutput.numImmediates == 2);
            return xcalarFreeResultSet(thriftHandle, rs4.resultSetId);
        })
        .then(function(ret) {
            return xcalarFreeResultSet(thriftHandle, rs3.resultSetId);
        })
        .then(function(ret) {
            return xcalarFreeResultSet(thriftHandle, rs2.resultSetId);
        })
        .then(function(ret) {
            return xcalarFreeResultSet(thriftHandle, rs1.resultSetId);
        })
        .then(function(ret) {
            test.pass();
        })
        .fail(test.fail);
    }

    function testJoin(test) {
        var leftRenameMap = [];
        var map = new XcalarApiRenameMapT();
        map.oldName = yelpUserDataset;
        map.newName = "leftDataset";
        map.type = DfFieldTypeT.DfFatptr;
        leftRenameMap.push(map);

        var rightRenameMap = [];
        var map2 = new XcalarApiRenameMapT();
        map2.oldName = yelpUserDataset;
        map2.newName = "rightDataset";
        map2.type = DfFieldTypeT.DfFatptr;
        rightRenameMap.push(map2);

        xcalarJoin(thriftHandle, "yelp/user-votes.funny-gt900",
                   "yelp/user-votes.funny-gt900",
                   "yelp/user-dummyjoin",
                   JoinOperatorT.InnerJoin,
                   leftRenameMap, rightRenameMap)
        .then(function(result) {
            printResult(result);
            newTableOutput = result;
            test.pass();
        })
        .fail(function(reason) {
            test.fail(reason);
        });
    }

    function testGetOpStats(test) {
        test.trivial(xcalarApiGetOpStats(thriftHandle, "yelp/user-dummyjoin"));
    }

    function testCancel(test) {
        var cancelledTableName = "cancelledTable";
        var query = "index --key votes.funny --dataset " + datasetPrefix +
                    "yelp" + " --dsttable " + cancelledTableName + " --sorted";
        var queryNamePrefix = "testQuery-";

        function queryAndCancel(jj) {
            queryName = queryNamePrefix + "" + jj
            xcalarQuery(thriftHandle, queryName, query, true)
            .then(function() {
                return (xcalarApiCancelOp(thriftHandle, cancelledTableName));
            })
            .then(function(cancelStatus) {
                (function wait() {
                setTimeout(function() {
                    xcalarQueryState(thriftHandle, queryName)
                    .done(function(result) {
                        var qrStateOutput = result;
                        if (qrStateOutput.queryState === QueryStateT.qrProcessing ||
                            qrStateOutput.queryState === QueryStateT.qrNotStarted) {
                            return wait();
                        }

                        if (qrStateOutput.failedSingleQueryArray.length === 0 &&
                            qrStateOutput.queryState != QueryStateT.qrFinished) {
                            test.fail("no failed query. queryState: " +
                                      QueryStateTStr[qrStateOutput.queryState]);
                        }

                        if (qrStateOutput.queryState != QueryStateT.qrFinished &&
                            qrStateOutput.failedSingleQueryArray[0].status !=
                            StatusT.StatusCanceled) {
                            console.log("xxx" + JSON.stringify(qrStateOutput));
                            console.log(qrStateOutput.failedSingleQueryArray[0]
                                        .status);
                            test.fail("not canceled");
                         }

                        test.pass();

                     })
                     .fail(test.fail);
                 }, 1000);
             })();
            })
            .fail(function(reason) {
                if (reason == StatusT.StatusOperationHasFinished) {
                    // We try again
                    xcalarDeleteDagNodes(thriftHandle, cancelledTableName,
                                         SourceTypeT.SrcTable)
                    .then(function(deleteDagNodeOutput) {
                        if (deleteDagNodeOutput.numNodes != 1) {
                            test.fail("Number of nodes deleted != 1 (" + deleteDagNodeOutput.numNodes + ")");
                        } else if (deleteDagNodeOutput.statuses[0].status != StatusT.StatusOk) {
                            test.fail("Error deleting dag node. Status: " + StatusTStr[deleteDagNodeOutput.statuses[0].status] + "(" + deleteDagNodeOutput.statuses[0].status + ")");
                        } else {                    
                            queryAndCancel(jj + 1);
                        }
                    })
                    .fail(function(reason) {
                        test.fail("Failed to drop dag node. Reason: " + StatusTStr[reason]);
                    });
                } else {
                    test.fail("status: " + StatusTStr[reason]);
                }
            });
        }

        queryAndCancel(0);
    }

    function testQuery(test) {
        var query = "index --key votes.funny --dataset " + datasetPrefix +
                    "yelp" + " --dsttable yelp-votesFunnyTable; index --key " +
                    "review_count" +
                    " --srctable yelp-votesFunnyTable --dsttable " +
                    "yelp-review_countTable;" +
                    "  map --eval \"add(1,2)\"  --srctable yelp-votesFunnyTable"
                    + " --fieldName newField --dsttable yelp-mapTable;" +
                    " filter yelp-mapTable \" sub(2,1)\" yelp-filterTable;" +
                    " groupBy --srctable yelp-filterTable --eval " +
                    "\"avg(votes.cool)\" --fieldName avgCool --dsttable " +
                    "yelp-groupByTable;" +
                    " join --leftTable yelp-review_countTable --rightTable" +
                    "  yelp-groupByTable --joinTable " + queryTableName;

        queryName = "testQuery";

        test.trivial(xcalarQuery(thriftHandle, queryName, query, false));
    }

    function testGetDagOnAggr(test) {
        var query = "index --key recordNum --dataset " + origDataset +
                    " --dsttable yelpUsers#js0;" +
                    "aggregate --srctable yelpUsers#js0 --dsttable " +
                    "yelpUsers-aggregate#js1 --eval \"count(review_count)\"";

        var locaQueryName = "aggr query";

        console.log("submit query" + query);
        xcalarQuery(thriftHandle, locaQueryName, query, true)
        .done(function(queryOutput) {
            printResult(queryOutput);

            (function wait() {
              setTimeout(function() {
                xcalarQueryState(thriftHandle, locaQueryName)
                .then(function(result) {
                    var qrStateOutput = result;
                    if (qrStateOutput.queryState === QueryStateT.qrProcssing) {
                        return wait();
                    }

                    if (qrStateOutput.queryState === QueryStateT.qrFinished) {
                        console.log("call get dag on aggr");
                        return xcalarDag(thriftHandle,  "yelpUsers-aggregate#js1");
                    }

                    test.fail("qrStateOutput.queryState = " +
                              QueryStateTStr[qrStateOutput.queryState]);
                })
                .then(function(dagOutput) {
                    console.log("dagOutput.numNodes = " + dagOutput.numNodes);
                    test.assert(dagOutput.numNodes === 3, undefined,
                                "the number of dag node returned is incorrect");
                })
                .fail(test.fail);
              }, 1000);
            })();

        })
        .fail(test.fail);
    }

    function testQueryState(test) {
        test.trivial(xcalarQueryState(thriftHandle, queryName));
    }

    function testQueryCancel(test) {
        var query = "index --key votes.funny --dataset " + datasetPrefix +
            "yelp" + " --dsttable cancelledTable2 --sorted;" +
            "index --key votes.funny --dataset " + datasetPrefix +
            "yelp" + " --dsttable cancelledTable3 --sorted;" +
            "index --key votes.funny --dataset " + datasetPrefix +
            "yelp" + " --dsttable cancelledTable4 --sorted;";

        queryName = "testQuery2";
        var time = Math.random() * 1000 + 500;
        console.log("interval " + time);
        xcalarQuery(thriftHandle, queryName, query, true)
        .then(function() {
            return (xcalarQueryCancel(thriftHandle, queryName));
        })
        .then(function(cancelStatus) {
            (function wait() {
            setTimeout(function() {
                xcalarQueryState(thriftHandle, queryName)
                .done(function(result) {
                    var qrStateOutput = result;
                    if (qrStateOutput.queryState != QueryStateT.qrCancelled) {
                        test.fail("not canceled qrStateOutput.queryState = " +
                                  QueryStateTStr[qrStateOutput.queryState]);
                    }

                    test.pass();

                 })
                 .fail(test.fail);
             }, time);
         })();
        })
        .fail(function(reason) {
            test.fail("status: " + StatusTStr[reason]);
        });
    }

    function waitForDag(test) {
        var queryStateOutput;

        (function wait() {
            setTimeout(function() {
                xcalarQueryState(thriftHandle, queryName)
                .done(function(result) {
                    queryStateOutput = result;
                    if (queryStateOutput.queryState ===
                                                      QueryStateT.qrProcssing) {
                        return wait();
                    }

                    if (queryStateOutput.queryState ===
                                                       QueryStateT.qrFinished) {
                        test.pass();
                    } else {
                        var reason = "queryStateOutput.queryState = " +
                                    QueryStateTStr[queryStateOutput.queryState];
                        test.fail(reason);
                    }
                 })
                 .fail(function(reason) {
                     test.fail(reason);
                 });
             }, 1000);
         })();
    }

    function testDag(test) {
        xcalarDag(thriftHandle,  queryTableName)
        .done(function(dagOutput) {
            console.log("dagOutput.numNodes = " + dagOutput.numNodes);
            test.assert(dagOutput.numNodes === 9, undefined,
                        "the number of dag node returned is incorrect");
            test.pass();
        })
        .fail(test.fail);
    }

    function testGroupBy(test) {
        test.trivial(xcalarGroupBy(thriftHandle, "yelp/user-votes.funny-gt900",
                      "yelp/user-votes.funny-gt900-average",
                      "avg(votes.funny)", "averageVotesFunny", true));
    }

    function testAggregate(test) {
        aggrTable = "aggrTable";
        xcalarAggregate(thriftHandle, origStrTable, aggrTable, "sum(fans)")
        .done(function(aggregateOutput) {
            console.log("jsonAnswer: " + aggregateOutput + "\n");
            var jsonAnswer = JSON.parse(aggregateOutput);
            test.assert(jsonAnswer.Value === 114674, undefined,
                        "jsonAnswer !== 114674");
            test.pass();
        })
        .fail(test.fail);
    }

    function testMap(test) {
        var resultSetFromMapTable = -1;
        xcalarApiMap(thriftHandle, "votedCoolTimesFunny",
                     "mult(votes.cool, votes.funny)",
                     origTable,
                     "yelp/user-votes.cool-times-funny-map")
        .then(function(ret) {
            test.assert(ret.tableName === "yelp/user-votes.cool-times-funny-map")
            // sorting the values to be able to predictably assert on the return from map
            // NOTE: sorting must be done AFTER map command - sorting won't be preserved
            // if we do sort, *then* map!!
            return xcalarIndexTable(thriftHandle, ret.tableName,
                                    "review_count", "yelp/voted.cool-times-funny-sortedby-most_reviewed", "",
                                    XcalarOrderingT.XcalarOrderingDescending)
        })
        .then(function(ret) {
            test.assert(ret.tableName === "yelp/voted.cool-times-funny-sortedby-most_reviewed");
            return xcalarMakeResultSetFromTable(thriftHandle,
                                                ret.tableName);
        })
        .then(function(ret) {
            test.assert(ret.numEntries === 70817);
            resultSetFromMapTable = ret;
            return xcalarResultSetAbsolute(thriftHandle,
                                           ret.resultSetId, 0)
        })
        .then(function(ret) {
            return xcalarResultSetNext(thriftHandle,
                                       resultSetFromMapTable.resultSetId, 10)
        })
        .then(function(ret) {
            // assuming this dataset won't change
            var expected_review_counts = [3286, 3195, 3166, 2826, 2819, 2603, 2548, 2471, 2454, 2431];

            test.assert(ret.numKvPairs > 0);

            var prevVal = JSON.parse(ret.kvPair[0].value);
            console.log(prevVal.review_count);

            for (var i = 0, kvPair = null; i < ret.numKvPairs;
                 i ++) {
                kvPair = ret.kvPair[i];
                console.log("\trecord[" + i.toString() + "].key = " +
                            kvPair.key);
                console.log("\trecord[" + i.toString() + "].value = " +
                            kvPair.value);
                var curVal = JSON.parse(kvPair.value);
                test.assert(curVal.review_count == kvPair.key); // indexed by "review_count"
                test.assert(curVal.review_count == expected_review_counts[i]); // hard coded expectation
                test.assert(curVal.review_count <= prevVal.review_count); // sorted descending
                test.assert((curVal.votes.cool * curVal.votes.funny) == curVal.votedCoolTimesFunny);
                prevVal = curVal;
            }

            return xcalarFreeResultSet(thriftHandle, resultSetFromMapTable.resultSetId);
        })
        .then(function(ret) {
            test.pass();
        })
        .fail(test.fail);
    }

    function testApiGetRowNum(test) {
        test.trivial(xcalarApiGetRowNum(thriftHandle, "rowNum",
                           "yelp/user-votes.funny-gt900",
                           "yelp/user-votes.funny-rowNum"));
    }

    function testDestroyDatasetInUse(test) {
        xcalarDeleteDagNodes(thriftHandle, loadOutput.dataset.name, SourceTypeT.SrcDataset)
        .then(function(status) {
            var reason = "Destroyed dataset in use succeeded when "+
                         "it should have failed";
            test.fail(reason);
        })
        .fail(function(status) {
            if (status === StatusT.StatusDgNodeInUse) {
                test.pass();
            } else {
                test.fail(StatusTStr[status]);
            }
        });
    }

    function testAddExportTarget(test) {
        var target = new ExExportTargetT();
        target.hdr = new ExExportTargetHdrT();
        target.hdr.name = "Mgmtd Export Target";
        target.hdr.type = ExTargetTypeT.ExTargetSFType;
        target.specificInput = new ExAddTargetSpecificInputT();
        target.specificInput.odbcInput = new ExAddTargetODBCInputT();

        xcalarAddExportTarget(thriftHandle, target)
        .done(function(status) {
            printResult(status);
            test.pass();
        })
        .fail(function(reason) {
            // Don't fail if this test has been run before
            if (reason != StatusT.StatusExTargetAlreadyExists) {
                test.fail(StatusTStr[reason]);
            } else {
                test.pass();
            }
        });
    }

    function testListExportTargets(test) {
        test.trivial(xcalarListExportTargets(thriftHandle, "*", "*"));
    }

    function testExportCSV(test) {
        var specInput = new ExInitExportSpecificInputT();
        specInput.sfInput = new ExInitExportSFInputT();
        specInput.sfInput.fileName = "yelp-mgmtdTest" +
                                     Math.floor(Math.random()*10000) + ".csv";
        specInput.sfInput.splitRule = new ExSFFileSplitRuleT();
        specInput.sfInput.splitRule.type = ExSFFileSplitTypeT.ExSFFileSplitNone;
        specInput.sfInput.headerType = ExSFHeaderTypeT.ExSFHeaderSeparateFile;
        specInput.sfInput.format = DfFormatTypeT.DfFormatCsv;
        specInput.sfInput.formatArgs = new ExInitExportFormatSpecificArgsT();
        specInput.sfInput.formatArgs.csv = new ExInitExportCSVArgsT();
        specInput.sfInput.formatArgs.csv.fieldDelim = ",";
        specInput.sfInput.formatArgs.csv.recordDelim = "\n";
        specInput.sfInput.formatArgs.csv.quoteDelim = "\"";

        console.log("\texport file name = " + specInput.sfInput.fileName);
        var target = new ExExportTargetHdrT();
        target.type = ExTargetTypeT.ExTargetSFType;
        target.name = "Default";
        var numColumns = 2;
        var columnNames = ["user_id", "name"];
        var headerColumns = ["id_of_user", "user name"];
        var columns = columnNames.map(function (e, i) {
            var col = new ExColumnNameT();
            col.name = columnNames[i];
            col.headerAlias = headerColumns[i];
            return col;
        });

        xcalarExport(thriftHandle, "yelp/user-votes.funny-gt900",
                     target, specInput,
                     ExExportCreateRuleT.ExExportDeleteAndReplace,
                     true, numColumns, columns)
        .then(function(status) {
            printResult(status);
            test.pass();
        })
        .fail(function(reason) {
            test.fail(StatusTStr[reason]);
        });
    }

    function testExportCancel(test) {
        var specInput = new ExInitExportSpecificInputT();
        specInput.sfInput = new ExInitExportSFInputT();
        specInput.sfInput.fileName = "yelp-mgmtdTest" +
                                     Math.floor(Math.random()*1000 + 10000) + ".csv";
        specInput.sfInput.splitRule = new ExSFFileSplitRuleT();
        specInput.sfInput.splitRule.type = ExSFFileSplitTypeT.ExSFFileSplitForceSingle;
        specInput.sfInput.headerType = ExSFHeaderTypeT.ExSFHeaderEveryFile;
        specInput.sfInput.format = DfFormatTypeT.DfFormatCsv;
        specInput.sfInput.formatArgs = new ExInitExportFormatSpecificArgsT();
        specInput.sfInput.formatArgs.csv = new ExInitExportCSVArgsT();
        specInput.sfInput.formatArgs.csv.fieldDelim = ",";
        specInput.sfInput.formatArgs.csv.recordDelim = "\n";
        specInput.sfInput.formatArgs.csv.quoteDelim = "\"";

        console.log("\texport file name = " + specInput.sfInput.fileName);
        var target = new ExExportTargetHdrT();
        target.type = ExTargetTypeT.ExTargetSFType;
        target.name = "Default";
        var numColumns = 3;
        var columnNames = ["votes.funny", "user_id", "text"];
        var headerColumns = ["votes.funny", "id_of_user", "Review Contents"];
        var columns = columnNames.map(function (e, i) {
            var col = new ExColumnNameT();
            col.name = columnNames[i];
            col.headerAlias = headerColumns[i];
            return col;
        });

        function exportAndCancel(indexOutput) {
            console.log("Index done. Starting both export and cancel now");
            xcalarExport(thriftHandle, "yelp/reviews-votes.funny",
                         target, specInput,
                         ExExportCreateRuleT.ExExportDeleteAndReplace,
                         true, numColumns,
                         columns, "yelp/reviews-votes.funny-export-cancel")
            .then(function(status) {
                console.log("Export succeeded when it was supposed to be cancelled. Trying again");
                xcalarDeleteDagNodes(thriftHandle, "yelp/reviews-votes.funny-export-cancel",
                                     SourceTypeT.SrcExport)
                .then(function(deleteDagNodeOutput) {
                    if (deleteDagNodeOutput.numNodes != 1) {
                        test.fail("Number of nodes deleted != 1 (" + deleteDagNodeOutput.numNodes + ")");
                    } else if (deleteDagNodeOutput.statuses[0].status != StatusT.StatusOk) {
                        test.fail("Error deleting dag node. Status: " + StatusTStr[deleteDagNodeOutput.statuses[0].status] + deleteDagNodeOutput.statuses[0].status);
                    } else {
                        exportAndCancel(indexOutput);
                    }
                })
                .fail(function(reason) {
                    test.fail("Failed to drop dag node. Reason: " + StatusTStr[reason]);
                });
            })
            .fail(function(reason) {
                if (reason == StatusT.StatusCanceled) {
                    test.pass();
                } else {
                    test.fail("Export failed with reason: " + StatusTStr[reason]);
                }
            });
            xcalarApiCancelOp(thriftHandle, "yelp/reviews-votes.funny-export-cancel");
        }

        xcalarIndexDataset(thriftHandle, yelpReviewsDataset,
                           "votes.funny", "yelp/reviews-votes.funny", "",
                           XcalarOrderingT.XcalarOrderingAscending)
        .then(exportAndCancel)
        .fail(function(reason) {
            test.fail("Index of reviews dataset failed with: " + StatusTStr[reason] +  " (" + reason + ")");
        });
    }

    function testExportSQL(test) {
        var specInput = new ExInitExportSpecificInputT();
        specInput.sfInput = new ExInitExportSFInputT();
        specInput.sfInput.fileName = "yelp-mgmtdTest" +
                                     Math.floor(Math.random()*10000) + ".sql";
        specInput.sfInput.splitRule = new ExSFFileSplitRuleT();
        specInput.sfInput.splitRule.type = ExSFFileSplitTypeT.ExSFFileSplitNone;
        specInput.sfInput.headerType = ExSFHeaderTypeT.ExSFHeaderSeparateFile;
        specInput.sfInput.format = DfFormatTypeT.DfFormatSql;
        specInput.sfInput.formatArgs = new ExInitExportFormatSpecificArgsT();
        specInput.sfInput.formatArgs.sql = new ExInitExportSQLArgsT();
        specInput.sfInput.formatArgs.sql.tableName = "exportSqlTableName";
        specInput.sfInput.formatArgs.sql.dropTable = true;
        specInput.sfInput.formatArgs.sql.createTable = true;

        console.log("\texport file name = " + specInput.sfInput.fileName);
        var target = new ExExportTargetHdrT();
        target.type = ExTargetTypeT.ExTargetSFType;
        target.name = "Default";
        var numColumns = 2;
        var columnNames = ["user_id", "name"];
        var headerColumns = ["id_of_user", "user name"];
        var columns = columnNames.map(function (e, i) {
            var col = new ExColumnNameT();
            col.name = columnNames[i];
            col.headerAlias = headerColumns[i];
            return col;
        });

        xcalarExport(thriftHandle, "yelp/user-votes.funny-gt900",
                     target, specInput,
                     ExExportCreateRuleT.ExExportCreateOnly,
                     true, numColumns, columns)
        .then(function(status) {
            printResult(status);
            test.pass();
        })
        .fail(function(reason) {
            test.fail(StatusTStr[reason]);
        });
    }

    function testMakeRetina(test) {
        retinaName = "yelpRetina-1";
        var dstTable = new XcalarApiRetinaDstT();
        dstTable.numColumns = 3;
        var columnNames = ["user_id", "name", "votes.funny"];
        var headerColumns = ["User ID", "User Name", "Number of Funny Votes"];
        var columns = columnNames.map(function (e, i) {
            var col = new ExColumnNameT();
            col.name = columnNames[i];
            col.headerAlias = headerColumns[i];
            return col;
        });
        dstTable.columns = columns;
        dstTable.target = new XcalarApiNamedInputT();
        dstTable.target.name = "yelp/user-votes.funny-gt900-average";
        dstTable.target.isTable = true;
        xcalarMakeRetina(thriftHandle, retinaName, [dstTable])
        .then(function(status) {
            printResult(status);
            test.pass();
        })
        .fail(function(reason) {
            reason = "makeRetina failed with status: " + StatusTStr[reason];
            test.fail(reason);
        });
    }

    function testListRetinas(test) {
        xcalarListRetinas(thriftHandle)
        .then(function(listRetinasOutput) {
            var foundRetina = false;
            printResult(listRetinasOutput);
            for (var i = 0; i < listRetinasOutput.numRetinas; i ++) {
                if (listRetinasOutput.retinaDescs[i].retinaName == retinaName) {
                    foundRetina = true;
                }
                console.log("\tretinaDescs[" + i + "].retinaName = " +
                            listRetinasOutput.retinaDescs[i].retinaName);
            }
            test.assert(foundRetina, undefined,
                        "Could not find retina \"" + retinaName + "\"");
            test.pass();
        })
        .fail(function(reason) {
            test.fail(reason);
        });
    }

    function testGetRetina(iter, test) {
        xcalarGetRetina(thriftHandle, retinaName)
        .done(function(getRetinaOutput) {
            printResult(getRetinaOutput);

            console.log("\tretinaName: " +
                        getRetinaOutput.retina.retinaDesc.retinaName);
            console.log("\tnumNodes: " +
                        getRetinaOutput.retina.retinaDag.numNodes);

            for (var ii = 0; ii < getRetinaOutput.retina.retinaDag.numNodes;
                 ii++) {
                console.log("\tnode[" + ii + "].dagNodeId = " +
                            getRetinaOutput.retina.retinaDag.node[ii].dagNodeId);
                console.log("\tnode[" + ii + "].api = " +
                            XcalarApisTStr[getRetinaOutput.retina.retinaDag.
                            node[ii].api]);
                console.log("\tnode[" + ii + "].apiInputSize = " +
                            getRetinaOutput.retina.retinaDag.node[ii].inputSize);
                switch (getRetinaOutput.retina.retinaDag.node[ii].api) {
                case XcalarApisT.XcalarApiExport:
                    var exportInput = getRetinaOutput.retina.retinaDag.node[ii].
                                      input.exportInput;
                    var exportTargetType = exportInput.meta.target.type;
                    console.log("\tnode[" + ii + "].meta.exportTarget = " +
                                ExTargetTypeTStr[exportTargetType] + " (" +
                                exportTargetType + ")");
                    console.log("\tnode[" + ii + "].meta.numColumns = " +
                                exportInput.meta.numColumns);
                    console.log("\tnode[" + ii + "].meta.columns = " +
                                JSON.stringify(exportInput.meta.columns));
                    switch (exportTargetType) {
                    case ExTargetTypeT.ExTargetODBCType:
                        console.log("\tnode[" + ii +
                                 "].meta.specificInput.odbcInput.tableName = " +
                            exportInput.meta.specificInput.odbcInput.tableName);
                        break;
                    case ExTargetTypeT.ExTargetSFType:
                        console.log("\tnode[" + ii +
                                    "].meta.specificInput.sfInput.fileName = " +
                               exportInput.meta.specificInput.sfInput.fileName);
                        if (iter == 2) {
                            test.assert(
                                exportInput.meta.specificInput.sfInput.fileName
                                === retinaExportParamStr, undefined,
                            "exportFileName does not match parameterized string"
                            );
                        }
                        retinaExportDagNodeId = getRetinaOutput.retina.retinaDag
                                                .node[ii].dagNodeId;
                        break;
                    default:
                    break;
                    }
                    break;
                case XcalarApisT.XcalarApiFilter:
                    console.log("\tnode[" + ii + "].filterStr = " +
                                getRetinaOutput.retina.retinaDag.node[ii].
                                input.filterInput.filterStr);
                    if (iter == 2) {
                        test.assert(getRetinaOutput.retina.retinaDag.node[ii].
                                    input.filterInput.filterStr ===
                                    retinaFilterParamStr, undefined,
                               "FilterStr does not match parameterized string");
                    }

                    retinaFilterDagNodeId = getRetinaOutput.retina.retinaDag.
                                            node[ii].dagNodeId;
                    break;
                case XcalarApisT.XcalarApiBulkLoad:
                    console.log("\tnode[" + ii + "].datasetUrl = " +
                                getRetinaOutput.retina.retinaDag.node[ii].input.
                                loadInput.dataset.url);
                    break;
                default:
                    break;
                }
            }

            test.pass();
        })
        .fail(test.fail);
    }

    function testGetRetina1(test) {
        return (testGetRetina(1, test));
    }

    function testGetRetina2(test) {
        return (testGetRetina(2, test));
    }

    function testUpdateRetina(test) {
        xcalarUpdateRetina(thriftHandle, retinaName,
                           retinaFilterDagNodeId,
                           retinaFilterParamType,
                           retinaFilterParamStr)
        .then(function(status) {
            printResult(status);
            return (xcalarUpdateRetina(thriftHandle, retinaName,
                                       retinaExportDagNodeId,
                                       retinaExportParamType,
                                       retinaExportParamStr));
        })
        .then(function(status) {
            test.pass();
        })
        .fail(test.fail);
    }

    function testExecuteRetina(test) {
        var parameters = [];
        parameters.push(new XcalarApiParameterT({ parameterName: "foo",
                                                  parameterValue: "1000" }));

        xcalarListExportTargets(thriftHandle, "*", "Default")
        .then(function(listExportTargetsOutput) {
            if (listExportTargetsOutput.numTargets < 1) {
                var reason = "No export target named Default";
                test.fail(reason);
                return;
            }

            var exportTarget = listExportTargetsOutput.targets[0];
            if (exportTarget.hdr.type != ExTargetTypeT.ExTargetSFType) {
                var reason = "Default export target not filesystem";
                test.fail(reason);
                return;
            }

            var fullPath = exportTarget.specificInput.sfInput.url.
                           substring("file://".length) + "/" +
                           retinaExportParamStr;

            // Take the .csv off
            fullPath = fullPath.slice(0, -".csv".length);

            console.log("Checking for" + fullPath);

            if (fs.exists(fullPath) && fs.isDirectory(fullPath)) {
                console.log("Deleting " + fullPath);
                fs.removeTree(fullPath);
            }

            return (xcalarExecuteRetina(thriftHandle, retinaName, parameters));
        }, test.fail)
        .then(function(status) {
            test.pass();
        })
        .fail(function(error) {
            var reason = "xcalarExecuteRetina failed with reason: " +
                         StatusTStr[error];
            test.fail(reason);
        });
    }

    function testListParametersInRetina(test) {
        xcalarListParametersInRetina(thriftHandle, retinaName)
        .done(function(listParametersInRetinaOutput) {
            printResult(listParametersInRetinaOutput);

            console.log("\tnumParameters: " +
                        listParametersInRetinaOutput.numParameters);
            for (var i = 0; i < listParametersInRetinaOutput.numParameters;
                 i++) {
                console.log("\tparameters[" + i + "].parameterName = " +
                            listParametersInRetinaOutput.parameters[i].
                            parameterName);
                console.log("\tparameters[" + i + "].parameterValue = " +
                            listParametersInRetinaOutput.parameters[i].
                            parameterValue);
            }

            if (listParametersInRetinaOutput.numParameters == 1 &&
                listParametersInRetinaOutput.parameters[0].parameterName ==
                "foo") {
                test.pass();
            } else {
                var reason = "list Parameters seems wrong";
                test.fail(reason);
            }
        })
        .fail(function(reason) {
            test.fail(reason);
        });
    }

    function testDeleteRetina(test) {
        xcalarListRetinas(thriftHandle)
        .then(function(listRetinasOutput) {
            function makeDeleteOneRetina(ii) {
                return (function() {
                    if (ii == listRetinasOutput.numRetinas) {
                        test.pass();
                    } else {
                        console.log("Deleting ", listRetinasOutput.retinaDescs[ii].retinaName);
                        xcalarApiDeleteRetina(thriftHandle, listRetinasOutput.retinaDescs[ii].retinaName)
                        .done(makeDeleteOneRetina(ii + 1))
                        .fail(function(reason) {
                            test.fail("Error while deleting " + listRetinasOutput.retinaDescs[ii].retinaName + ": " + StatusTStr[reason] + " (" + reason + ")");
                        });
                    }
                });
            }

            (makeDeleteOneRetina(0))();
        })
        .fail(function(reason) {
            test.fail(reason);
        });
    }

    function testListFiles(test) {
        xcalarListFiles(thriftHandle, "file:///", false)
        .done(function(listFilesOutput) {
            printResult(listFilesOutput);

            for (var i = 0, file = null; i < listFilesOutput.numFiles; i ++) {
                file = listFilesOutput.files[i];

                console.log("\tfile[" + i.toString() + "].name = " + file.name);
                console.log("\tfile[" + i.toString() + "].attr.size = " +
                    file.attr.size.toString());
                console.log("\tfile[" + i.toString() + "].attr.isDirectory = " +
                    file.attr.isDirectory.toString());
            }

            test.pass();
        })
        .fail(test.fail);
    }

    // Witness to bug 2020
    function testApiMapStringToString(test) {
        var evalString = "string(user_id)";

        xcalarApiMap(thriftHandle, "castUserId", evalString, origTable,
                     "user_id2")
        .done(function(filterOutput) {
            test.pass();
        })
        .fail(test.fail);
    }

    // Witness to bug 238
    function testApiMapLongEvalString(test) {
        var evalString = "add(votes.funny, 1)";
        while (evalString.length <= XcalarApisConstantsT.XcalarApiMaxEvalStringLen) {
            evalString = "add(1, " + evalString + ")";
        }

        xcalarApiMap(thriftHandle, "DoesNotExist", evalString, origTable,
                     "ShouldNotExist")
        .done(function(filterOutput) {
            returnValue = 1;
            var reason = "Map succeeded with long eval string when it should have failed";
            test.fail(reason);
        })
        .fail(function(reason) {
            if (reason === StatusT.StatusEvalStringTooLong) {
                test.pass();
            } else {
                reason = "Map returned status " + StatusTStr[reason] + " (" + reason + ")"
                test.fail(reason);
            }
        });
    }

    function testApiFilterLongEvalString(test) {
        var evalString = "add(votes.funny, 1)";
        while (evalString.length <= XcalarApisConstantsT.XcalarApiMaxEvalStringLen) {
            evalString = "add(1, " + evalString + ")";
        }

        xcalarFilter(thriftHandle, evalString, origTable, "filterLongEvalStr")
        .done(function(filterOutput) {
            returnValue = 1;
            var reason = "Map succeeded with long eval string when it should have failed";
            test.fail(reason);
        })
        .fail(function(reason) {
            if (reason === StatusT.StatusEvalStringTooLong) {
                test.pass();
            } else {
                test.fail(reason);
            }
        });
    }

    function testApiKeyAddOrReplace(test, keyName, keyValue) {
        xcalarKeyAddOrReplace(thriftHandle,
                              XcalarApiKeyScopeT.XcalarApiKeyScopeGlobal,
                              keyName, keyValue, true)
        .done(function(status) {
            printResult(status);
            test.pass();
        })
        .fail(function(reason) {
            test.fail(reason);
        });

    }

    function testApiKeyInvalidScope(test) {
        // XXX Remove once XcalarApiKeyScopeUser is implemented.
        xcalarKeyAddOrReplace(thriftHandle,
                              XcalarApiKeyScopeT.XcalarApiKeyScopeUser,
                              "foo", "foobar", false)
        .done(function(status) {
            test.fail("Expected failure with scope XcalarApiKeyScopeUser.");
        })
        .fail(function(reason) {
            if (reason != StatusT.StatusUnimpl) {
                test.fail(reason);
            }
            xcalarKeyAddOrReplace(thriftHandle, 666, "foo", "foobar", false)
            .done(function(status) {
                test.fail("Expected failure given invalid scope.");
            })
            .fail(function(reason) {
                if (reason == StatusT.StatusInval) {
                    test.pass();
                } else {
                    test.fail(reason);
                }
            });
        });
    }

    function testApiKeyAdd(test) {
        testApiKeyAddOrReplace(test, "mykey", "myvalue1");
    }

    function testApiKeyReplace(test) {
        testApiKeyAddOrReplace(test, "mykey", "myvalue2");
    }

    function testSchedTask(test) {
        var dummyArg = new XcalarApiSchedArgTypeT();
        dummyArg.executeRetinaInput = new XcalarApiExecuteRetinaInputT();

        dummyArg.executeRetinaInput.retinaName = "dummyRetina";
        dummyArg.executeRetinaInput.numParameters = 0;

        xcalarScheduleTask(thriftHandle, "sched task", 1000, 0, 0,
                           SchedTaskTypeT.StQuery, dummyArg)
        .then(function() {
            xcalarListSchedTask(thriftHandle, "sched task")
            .done(function(listSchedTaskOutput) {
                if (listSchedTaskOutput.numSchedTask != 1) {
                    var reason = "wrong number of task. got \"" +
                                 listSchedTaskOutput.numSchedTask +
                                 "\" instead of \"1\"";
                    test.fail(reason);
                } else if (listSchedTaskOutput.schedTaskInfo[0].name !=
                           "sched task") {
                    var reason = "wrong name of task. got \"" +
                                 listSchedTaskOutput.schedTaskInfo[0].name +
                                 "\" instead of \"sched task\"";
                    test.fail(reason);
                } else if (listSchedTaskOutput.schedTaskInfo[0].numFailure != 0) {
                    var reason = "wrong numFailure of task. got \"" +
                                 listSchedTaskOutput.schedTaskInfo[0].numFailure +
                                 "\" instead of \"0\"";
                    test.fail(reason);
                } else if (listSchedTaskOutput.schedTaskInfo[0].
                           scheduleInfo.schedTimeInSecond != 1000) {
                    var reason = "wrong schedule time of task. got \"" +
                                 listSchedTaskOutput.schedTaskInfo[0].
                                 scheduleInfo.schedTimeInSecond +
                                 "\" instead of \"1000\"";
                    test.fail(reason);
                } else if (listSchedTaskOutput.schedTaskInfo[0].type !=
                           SchedTaskTypeT.StQuery) {
                    var reason = "wrong task type. got \"" +
                                 listSchedTaskOutput.schedTaskInfo[0].type +
                                 "\" instead of " + SchedTaskTypeT.StQuery;
                    test.fail(reason);
                } else if (listSchedTaskOutput.schedTaskInfo[0].arg.
                           executeRetinaInput.retinaName !=
                           dummyArg.executeRetinaInput.retinaName) {
                    var reason = "wrong retina name got \"" +
                                 listSchedTaskOutput.schedTaskInfo[0].arg.
                                 executeRetinaInput.retinaName +
                                 "\" instead of " +
                                 dummyArg.executeRetinaInput.retinaName;
                    test.fail(reason);
                }

                xcalarDeleteSchedTask(thriftHandle, "sched task")
                .done(function(status) {
                  printResult(status);
                  test.pass();
                })
                .fail(function(reason) {
                    test.fail(StatusTStr[reason]);
                });
           })
           .fail(function(reason) {
               test.fail(StatusTStr[reason]);
           });
        }, function(reason) {
            test.fail(StatusTStr[reason]);
        }
        );
    }

    function testApiKeyAppend(test) {
        // Insert original key
        xcalarKeyAddOrReplace(thriftHandle,
                              XcalarApiKeyScopeT.XcalarApiKeyScopeGlobal,
                              "myotherkey", "a", false)
        .then(function() {
            // Append first 'a'
            return xcalarKeyAppend(thriftHandle,
                                   XcalarApiKeyScopeT.XcalarApiKeyScopeGlobal,
                                   "myotherkey", "a");
        })
        .then(function() {
            // Append second 'a'
            return xcalarKeyAppend(thriftHandle,
                                   XcalarApiKeyScopeT.XcalarApiKeyScopeGlobal,
                                   "myotherkey", "a");
        })
        .then(function() {
            // Lookup. Make sure result is 'aaa'
            return xcalarKeyLookup(thriftHandle,
                                   XcalarApiKeyScopeT.XcalarApiKeyScopeGlobal,
                                   "myotherkey");
        })
        .then(function(lookupOutput) {
            if (lookupOutput.value != "aaa") {
                var reason = "wrong value. got \"" + lookupOutput.value + "\" instead of \"aaa\"";
                test.fail(reason);
            } else {
                test.pass();
            }
        })
        .fail(function(reason) {
            test.fail(reason);
        });
    }

    function testApiKeySetIfEqual(test) {
        // Insert original key
        xcalarKeyAddOrReplace(thriftHandle,
                              XcalarApiKeyScopeT.XcalarApiKeyScopeGlobal,
                              "yourkey", "b", false)
        .then(function() {
            // Try replacing with incorrect oldValue
            xcalarKeySetIfEqual(thriftHandle,
                                XcalarApiKeyScopeT.XcalarApiKeyScopeGlobal,
                                false, "yourkey", "wrongvalue", "x", "x", "x")
            .then(function() {
                var reason = "Expected failure due to incorrect oldValue.";
                test.fail(reason);
            })
            .fail(function(reason) {
                // Try replacing with correct oldValue
                xcalarKeySetIfEqual(thriftHandle,
                                   XcalarApiKeyScopeT.XcalarApiKeyScopeGlobal,
                                   false, "yourkey", "b", "c", "x", "y")
                .then(function() {
                    // Lookup. Make sure result is as expected
                    return xcalarKeyLookup(thriftHandle,
                                   XcalarApiKeyScopeT.XcalarApiKeyScopeGlobal,
                                   "yourkey");
                })
                .then(function(lookupOutput) {
                    if (lookupOutput.value != "c") {
                        test.fail("Wrong value. Got '" + lookupOutput.value +
                                  "'. Expected 'c'.");
                    } else {
                        return xcalarKeyLookup(thriftHandle,
                                     XcalarApiKeyScopeT.XcalarApiKeyScopeGlobal,
                                     "x");
                    }
                })
                .then(function(lookupOutput) {
                    if (lookupOutput.value != "y") {
                        test.fail("Wrong value. Got '" + lookupOutput.value +
                                  "'. Expected 'y'.");
                    } else {
                        xcalarKeySetIfEqual(thriftHandle,
                                     XcalarApiKeyScopeT.XcalarApiKeyScopeGlobal,
                                     false, "x", "y", "z")
                        .then(function() {
                            xcalarKeyLookup(thriftHandle,
                                     XcalarApiKeyScopeT.XcalarApiKeyScopeGlobal,
                                     "x")
                            .then(function(lookupOutput) {
                                if (lookupOutput.value != "z") {
                                    test.fail("Wrong value. Got '" +
                                         lookupOutput.value +
                                         "'. Expected 'z'.");
                                } else {
                                    test.pass();
                                }
                            })
                            .fail(function(reason) {
                                test.fail(reason);
                            });
                        })
                        .fail(function(reason) {
                            test.fail(reason);
                        });
                    }
                })
                .fail(function(reason) {
                    test.fail(reason);
                });
            });
        })
        .fail(function(reason) {
            test.fail(reason);
        });
    }

    function testApiKeyLookup(test) {
        xcalarKeyLookup(thriftHandle,
                        XcalarApiKeyScopeT.XcalarApiKeyScopeGlobal,
                        "mykey")
        .done(function(lookupOutput) {
            printResult(lookupOutput);
            if (lookupOutput.value != "myvalue2") {
                var reason = "wrong value. got \"" + lookupOutput.value + "\" instead of \"myvalue2\"";
                test.fail(reason);
            } else {
                test.pass();
            }
        })
        .fail(function(reason) {
            test.fail(reason);
        });
    }

    function testApiKeyDelete(test) {
        xcalarKeyDelete(thriftHandle,
                        XcalarApiKeyScopeT.XcalarApiKeyScopeGlobal, "mykey")
        .done(function(status) {
            printResult(status);
            test.pass();
        })
        .fail(function(reason) {
            test.fail(reason);
        });
    }

    function testApiKeyBogusLookup(test) {
        xcalarKeyLookup(thriftHandle,
                        XcalarApiKeyScopeT.XcalarApiKeyScopeGlobal,
                        "mykey")
        .done(function(lookupOutput) {
            printResult(lookupOutput);
            var reason = "lookup did not fail";
            test.fail(reason);
        })
        .fail(function(reason) {
            test.pass();
        });
    }

    function testApiKeySessions(test) {
        var session1 = "mgmtdTestApiKeySessions1" + (new Date().getTime());
        var session2 = "mgmtdTestApiKeySessions2" + (new Date().getTime());

        var keyName = "sessionKey";

        xcalarApiSessionList(thriftHandle, "*")
        .then(function(ret) {
            return xcalarApiSessionDelete(thriftHandle, "*")
            .always(function() {
                // Start in brand new sesion...
                xcalarApiSessionNew(thriftHandle, session1, false, "")
                .then(function() {
                    // ... and add a key.
                    return xcalarKeyAddOrReplace(thriftHandle,
                                                 XcalarApiKeyScopeT.XcalarApiKeyScopeSession,
                                                 keyName, "x", false);
                })
                .then(function() {
                    // Make sure it exists in this session.
                    return xcalarKeyLookup(thriftHandle,
                                           XcalarApiKeyScopeT.XcalarApiKeyScopeSession,
                                           keyName);
                })
                .then(function(lookupOutput) {
                    if (lookupOutput.value === "x") {
                        // Create a new session and switch to it.
                        return xcalarApiSessionNew(thriftHandle, session2, false, "");
                    } else {
                        test.fail("Failed lookup. Expected x got " + lookupOutput.value);
                    }
                })
                .then(function() {
                    return xcalarApiSessionSwitch(thriftHandle, session2, session1, false);
                })
                .then (function() {
                    // Make sure the key we created in the other session doesn't turn up
                    // in this one.
                    xcalarKeyLookup(thriftHandle,
                                    XcalarApiKeyScopeT.XcalarApiKeyScopeSession,
                                    keyName)
                    .then(function() {
                        test.fail("Lookup in session2 should have failed.");
                    })
                    .fail(function(reason) {
                        test.pass();
                    });
                })
                .fail(function(reason) {
                    test.fail(StatusTStr[reason]);
                });
            });
        }, function(reason) {
            test.fail(StatusTStr[reason]);
        });
    }

    function testTop(test) {
        xcalarApiTop(thriftHandle, XcalarApisConstantsT.XcalarApiDefaultTopIntervalInMs)
        .done(function(topOutput) {
            var ii;
            printResult(topOutput);
            for (ii = 0; ii < topOutput.numNodes; ii++) {
                console.log("\tNode Id: ", topOutput.topOutputPerNode[ii].nodeId);
                console.log("\tCpuUsage(%): ", topOutput.topOutputPerNode[ii].cpuUsageInPercent);
                console.log("\tMemUsage(%): ", topOutput.topOutputPerNode[ii].memUsageInPercent);
                console.log("\tMemUsed: ", topOutput.topOutputPerNode[ii].memUsedInBytes);
                console.log("\tMemAvailable: ", topOutput.topOutputPerNode[ii].totalAvailableMemInBytes);
                console.log("\n\n");
            }
            test.pass();
        })
        .fail(function(reason) {
            test.fail(reason);
        });
    }

    function testMemory(test) {
        xcalarApiMemory(thriftHandle, null)
        .done(function(memOutput) {
            var ii;
            for (ii = 0; ii < memOutput.numNodes; ii++) {
                var jj;
                var nodeOutput = memOutput.memOutputPerNode[ii];
                console.log("\tNode Id: ", nodeOutput.nodeId);
                console.log("\tNum Tags: ", nodeOutput.numTags);
                for (jj = 0; jj < nodeOutput.numTags; jj++) {
                    var tagOutput = nodeOutput.memOutputPerTag[jj];
                    console.log("\t", tagOutput.locName, "\t", tagOutput.tagName, "\t", tagOutput.memUsageInBytes);
                }
                console.log("\n\n");
            }
            test.pass();
        })
        .fail(function(reason) {
            test.fail(reason);
        });
    }

    function testListXdfs(test) {
        xcalarApiListXdfs(thriftHandle, "*", "*")
        .done(function(listXdfsOutput) {
            var ii;
            var jj;
            printResult(listXdfsOutput);
            for (ii = 0; ii < listXdfsOutput.numXdfs; ii++) {
                 var numArgs;
                 numArgs = listXdfsOutput.fnDescs[ii].numArgs;
                 if (numArgs < 0) {
                     numArgs *= -1;
                 }
                 console.log("\tfnName: ", listXdfsOutput.fnDescs[ii].fnName);
                 console.log("\tfnDesc: ", listXdfsOutput.fnDescs[ii].fnDesc);
                 console.log("\tNumArgs: ", listXdfsOutput.fnDescs[ii].numArgs);
                 for (jj = 0; jj < numArgs; jj++) {
                      console.log("\tArg ", jj, ": ", listXdfsOutput.fnDescs[ii].argDescs[jj].argDesc);
                 }
                 console.log("\n\n");
             }
             test.pass();
        })
        .fail(function(reason) {
            test.fail(reason);
        });
    }

    function testListVarArgUdf(test) {
        var fnName = "func";
        var argName = "*myArgsList";
        var source = "def " + fnName + "(" + argName + "):\n return \"\"\n";
        var moduleName = "mgmttestVarArgUdf";
        var fullyQualifiedFnName = moduleName + ":" + fnName;
        var ii;

        xcalarApiUdfDelete(thriftHandle, moduleName)
        .always(function () {
            xcalarApiUdfAdd(thriftHandle, UdfTypeT.UdfTypePython,
                             moduleName, source)
            .then(function () {
                return xcalarApiListXdfs(thriftHandle, fullyQualifiedFnName, "User-defined functions")
            })
            .then(function(listXdfsOutput) {
                if (listXdfsOutput.numXdfs != 1) {
                    for (ii = 0; ii < listXdfsOutput.numXdfs; ii++) {
                        console.log("Xdf: ", listXdfsOutput.fnDescs[ii].fnName);
                    }
                    test.fail("Number of XDFs returned = " + listXdfsOutput.numXdfs + " != 1");
                }

                if (listXdfsOutput.fnDescs[0].fnName != fullyQualifiedFnName) {
                    test.fail("Name of test returned: " + listXdfSOutput.fnDescs[0].fnName + " Expected: " + fullyQualifiedFnName)
                }

                if (listXdfsOutput.fnDescs[0].numArgs != -1) {
                    var numArgs;
                    numArgs = listXdfsOutput.fnDescs[0].numArgs;
                    if (numArgs < 0) {
                        numArgs *= -1;
                    }

                    console.log(listXdfsOutput.fnDescs[0].fnName)
                    for (ii = 0; ii < numArgs; ii++) {
                        console.log("Arg: ", listXdfsOutput.fndescs[0].argDescs[ii].argDesc);
                    }
                    test.fail("Number of args returned: " + listXdfsOutput.fnDescs[0].numArgs + " Expected: -1");
                }

                if (listXdfsOutput.fnDescs[0].argDescs[0].argDesc != argName) {
                    test.fail("Name of arg returned: " + listXdfsOutput.fnDescs[0].argDescs[ii].argDesc + " Expected: " + argName);
                }

                test.pass();
            })
            .fail(function(status) {
                test.fail("listXdfs returned status: " + StatusTStr[status])
            })
        });
    }

    function testCreateDht(test) {
        var dhtName = "mgmtTestCustomDht";

        function deleteTableSuccessFn(status) {
            xcalarApiDeleteDht(thriftHandle, dhtName)
            .done(function (status) {
                test.pass();
            })
            .fail(function(status) {
                var reason = "deleteDht returned status: " + StatusTStr[status];
                test.fail(reason);
            });
        }

        function indexDatasetSuccessFn(indexOutput) {
            xcalarGetTableMeta(thriftHandle, indexOutput.tableName)
            .done(function(metaOutput) {
                var totalCount = 0;
                for (var ii = 0; ii < metaOutput.numMetas; ii++) {
                    console.log("Node " + ii + " - " + metaOutput.metas[ii].numRows);
                    if (metaOutput.metas[ii].numRows === 0) {
                        var reason = "Node " + ii + " has 0 entries";
                        test.fail(reason);
                    }
                    totalCount += metaOutput.metas[ii].numRows;
                }

                if (totalCount === 70817) {
                    xcalarDeleteDagNodes(thriftHandle, indexOutput.tableName, SourceTypeT.SrcTable)
                    .done(deleteTableSuccessFn)
                    .fail(function(status) {
                        var reason = "deleteTable returned status: " + StatusTStr[status];
                        test.fail(reason);
                    });
                } else {
                    var reason = "Total count " + totalCount + " != 70817";
                    test.fail(reason);
                }
            })
            .fail(function(status) {
                var reason = "getCount returned status: " + StatusTStr[status];
                test.fail(reason);
            });
        }

        function createDhtSuccessFn(status) {
            xcalarIndexDataset(thriftHandle, yelpUserDataset,
                               "average_stars", "yelp/user-average_stars",
                               dhtName, XcalarOrderingT.XcalarOrderingInvalid)
            .done(indexDatasetSuccessFn)
            .fail(function(status) {
                var reason = "Index dataset returned status: " + StatusTStr[status];
                test.fail(reason);
            });
        }

        function startCreateDhtTest(status) {
            console.log("deleteDht returned status: " + StatusTStr[status]);
            xcalarApiCreateDht(thriftHandle, dhtName, 5.0, 0.0,
                               XcalarOrderingT.XcalarOrderingUnordered)
            .done(createDhtSuccessFn)
            .fail(function(status) {
                var reason = "createDht returned status: " + StatusTStr[status];
                test.fail(reason);
            });

        }

        xcalarApiDeleteDht(thriftHandle, dhtName)
        .then(startCreateDhtTest, startCreateDhtTest);
    }

    function testPyExecOnLoad(test) {

        var content = fs.read(system.env['MGMTDTEST_DIR'] +
                      '/PyExecOnLoadTest.py');

        xcalarApiUdfDelete(thriftHandle, "PyExecOnLoadTest")
        .always(function() {
            xcalarApiUdfAdd(thriftHandle, UdfTypeT.UdfTypePython,
                            "PyExecOnLoadTest", content)
            .done(function(uploadPythonOutput) {
                if (status == StatusT.StatusOk) {
                    loadArgs = new XcalarApiDfLoadArgsT();
                    loadArgs.csv = new XcalarApiDfCsvLoadArgsT();
                    loadArgs.udfLoadArgs = new XcalarApiUdfLoadArgsT();
                    loadArgs.csv.recordDelim = XcalarApiDefaultRecordDelimT;
                    loadArgs.csv.fieldDelim = XcalarApiDefaultFieldDelimT;
                    loadArgs.csv.isCRLF = false;
                    loadArgs.udfLoadArgs.fullyQualifiedFnName = "PyExecOnLoadTest:poorManCsvToJson";

                    xcalarLoad(thriftHandle,
                               "file://" + qaTestDir + "/operatorsTest/movies/movies.csv",
                               "movies",
                               DfFormatTypeT.DfFormatJson,
                               0,
                               loadArgs)
                    .done(function(result) {
                        printResult(result);
                        loadOutput = result;
                        moviesDataset = loadOutput.dataset.name;
                        moviesDatasetSet = true;
                        origDataset = loadOutput.dataset.name;
                        test.pass();
                    })
                    .fail(function(reason) {
                        test.fail(StatusTStr[reason]);
                    });
                } else {
                    var reason = "status = " + status;
                    test.fail(reason);
                }
            })
            .fail(function(reason) {
                test.fail(reason);
            });
        });
    }

    function testDeleteTable(test) {
        xcalarDeleteDagNodes(thriftHandle, "yelp/user-votes.funny-map", SourceTypeT.SrcTable)
        .done(function(status) {
            printResult(status);
            test.pass();
        })
        .fail(function(reason) {
            test.fail(reason);
        });
    }

/** None of these tests really work yet. It's just stubs for later
    function testSessionInfo(test) {
        xcalarApiSessionInfo(thriftHandle, "testSession");
        .done(function(status) {
            printResult(status);
            test.pass();
        })
        .fail(function(reason) {
            test.fail(reason);
        });
    }

    function testSessionNew(test) {
        xcalarApiSessionNew(thriftHandle, "testSession", false, "")
        .done(function(status) {
            printResult(status);
            test.pass();
        })
        .fail(function(reason) {
            test.fail(reason);
        });
    }

    function testSessionDelete(test) {
        xcalarApiSessionDelete(thriftHandle, "*")
        .done(function(status) {
            printResult(status);
            test.pass();
        })
        .fail(function(reason) {
            test.fail(reason);
        });
    }

    function testSessionInact(test) {
        xcalarApiSessionInact(thriftHandle, "*", false)
        .done(function(status) {
            printResult(status);
            test.pass();
        })
        .fail(function(reason) {
            test.fail(reason);
        });
    }

    function testSessionList(test) {
        xcalarApiSessionList(thriftHandle, "*")
        .done(function(sessionListOutput) {
            printResult(sessionListOutput);
            test.pass();
        })
        .fail(function(reason) {
            test.fail(reason);
        });
    }

    function testSessionRename(test) {
        xcalarApiSessionRename(thriftHandle, "testSession", "testSession2")
        .done(function(status) {
            printResult(status);
            test.pass();
        })
        .fail(function(reason) {
            test.fail(reason);
        });
    }

    function testSessionSwitch(test) {
        xcalarApiSessionSwitch(thriftHandle, "testSession2", "testSession3",
                               false)
        .done(function(status) {
            printResult(status);
            test.pass();
        })
        .fail(function(reason) {
            test.fail(reason);
        });
    }

    function testSessionPersist(test) {
        xcalarApiSessionPersist(thriftHandle, "*")
        .done(function(sessionListOutput) {
            printResult(sessionListOutput);
            test.pass();
        })
        .fail(function(reason) {
            test.fail(reason);
        });
    }
*/
    // Witness to bug 103
    function testBulkDeleteTables(test) {
        xcalarDeleteDagNodes(thriftHandle, "*", SourceTypeT.SrcTable)
        .done(function(deleteTablesOutput) {
            printResult(deleteTablesOutput);

            for (var i = 0, delTableStatus = null; i < deleteTablesOutput.numNodes; i ++) {
                delTableStatus = deleteTablesOutput.statuses[i];
                console.log("\t" + delTableStatus.nodeInfo.name + ": " +
                            StatusTStr[delTableStatus.status]);
            }
            test.pass();
        })
        .fail(test.fail);
    }

    function testBulkDeleteExport(test) {
        xcalarDeleteDagNodes(thriftHandle, "*", SourceTypeT.SrcExport)
        .done(function(deleteDagNodesOutput) {
            printResult(deleteDagNodesOutput);

            for (var i = 0, delTableStatus = null; i < deleteDagNodesOutput.numNodes; i ++) {
                delTableStatus = deleteDagNodesOutput.statuses[i];
                console.log("\t" + delTableStatus.nodeInfo.name + ": " +
                            StatusTStr[delTableStatus.status]);
            }

            test.pass();
        })
        .fail(test.fail);
    }

    function testBulkDeleteConstants(test) {
        xcalarDeleteDagNodes(thriftHandle, "*", SourceTypeT.SrcConstant)
        .done(function(deleteDagNodesOutput) {
            printResult(deleteDagNodesOutput);

            for (var i = 0, delTableStatus = null; i < deleteDagNodesOutput.numNodes; i ++) {
                delTableStatus = deleteDagNodesOutput.statuses[i];
                console.log("\t" + delTableStatus.nodeInfo.name + ": " +
                            StatusTStr[delTableStatus.status]);
            }

            test.pass();
        })
        .fail(test.fail);
    }

    function testBulkDeleteDataset(test) {
        xcalarDeleteDagNodes(thriftHandle, "*", SourceTypeT.SrcDataset)
        .done(function(deleteDagNodesOutput) {
            printResult(deleteDagNodesOutput);

            for (var i = 0, delTableStatus = null; i < deleteDagNodesOutput.numNodes; i ++) {
                delTableStatus = deleteDagNodesOutput.statuses[i];
                console.log("\t" + delTableStatus.nodeInfo.name + ": " +
                            StatusTStr[delTableStatus.status]);
            }

            test.pass();
        })
        .fail(test.fail);
    }

    function testDestroyDataset(test) {
        if (moviesDatasetSet) {
            xcalarDeleteDagNodes(thriftHandle, moviesDataset, SourceTypeT.SrcDataset)
            .done(function(status) {
                printResult(status);
                test.pass();
            })
            .fail(function(reason) {
                test.fail(StatusTStr[reason]);
            });
        } else {
            console.log("Skipping test because this test depends on testPyExecOnLoad\n");
            skip(test);
        }
    }

    // Witness to bug 98
    function testShutdown(test) {
        xcalarShutdown(thriftHandle)
        .done(function(status) {
            printResult(status);
            test.pass();
        })
        .fail(test.fail);
    }

    function testSupportGenerate(test) {

        xcalarApiSupportGenerate(thriftHandle)
        .done(function(output) {
            if (fs.exists(output.bundlePath)) {
                fs.removeTree(output.bundlePath);
                test.pass();
            } else {
                printResult(output);
                test.fail("Failed to locate bundle path from output.");
            }
        })
        .fail(function(reason) {
            test.fail(StatusTStr[reason]);
        });
    }

    function testUdf(test)
    {
        var source1 = "def foo():\n return 'foo'\n";
        var source2 = "def bar():\n return 'bar'\n";

        xcalarApiUdfDelete(thriftHandle, "mgmttest*")
        .always(function () {
            xcalarApiUdfAdd(thriftHandle, UdfTypeT.UdfTypePython,
                            "mgmttestfoo", source1)
            .then(function () {
                return xcalarApiUdfGet(thriftHandle, "mgmttestfoo");
            })
            .then(function (output) {
                if (output.source != source1) {
                    printResult(output);
                    test.fail("Expected source '" + source1 + "' got '" + output.source + "'.");
                } else {
                    return xcalarApiUdfUpdate(thriftHandle,
                                              UdfTypeT.UdfTypePython,
                                              "mgmttestfoo", source2);
                }
            })
            .then(function () {
                return xcalarApiUdfGet(thriftHandle, "mgmttestfoo");
            })
            .then(function (output) {
                if (output.source != source2) {
                    printResult(output);
                    test.fail("Expected source '" + source2 + "' got '" +
                            output.source + "'.");
                } else {
                    return xcalarApiUdfDelete(thriftHandle, "mgmttestfoo");
                }
            })
            .then(function () {
                test.pass();
            })
            .fail(function(reason) {
                test.fail(StatusTStr[reason]);
            });
        });
    }

    function doTestImportRetina(test, importRetinaName, retinaPath) {
        var file = fs.open(retinaPath, 'rb');
        var content = file.read();

        xcalarApiImportRetina(thriftHandle, importRetinaName, true, content)
        .done(function(importRetinaOutput) {
            console.log("numUdfs: " , importRetinaOutput.numUdfModules);
            if (importRetinaOutput.numUdfModules != 2) {
                test.fail("Number of Udf modules is wrong!");
            } else {
                var udfUploadFailed = false;
                for (var ii = 0; ii < importRetinaOutput.numUdfModules; ii++) {
                    console.log("udf[" + ii + "].moduleName = ",
                                importRetinaOutput.udfModuleStatuses[ii].moduleName);
                    console.log("udf[" + ii + "].status = ",
                                StatusTStr[importRetinaOutput.udfModuleStatuses[ii].status],
                                " (", importRetinaOutput.udfModuleStatuses[ii].status, ")");
                    if (importRetinaOutput.udfModuleStatuses[ii].status != StatusT.StatusOk &&
                        importRetinaOutput.udfModuleStatuses[ii].status != StatusT.StatusUdfModuleOverwrittenSuccessfully) {
                        udfUploadFailed = true;
                    }
                    console.log("udf[" + ii + "].error.message = ",
                                importRetinaOutput.udfModuleStatuses[ii].error.message);
                    console.log("udf[" + ii + "].error.traceback = ",
                                importRetinaOutput.udfModuleStatuses[ii].error.traceback);
                }

                if (udfUploadFailed) {
                    test.fail("Udf import failed");
                }
            }

            xcalarListRetinas(thriftHandle)
            .then(function(listRetinasOutput) {
                for (var ii = 0; ii < listRetinasOutput.numRetinas; ii++) {
                    if (listRetinasOutput.retinaDescs[ii].retinaName == importRetinaName) {
                        test.pass();
                    }
                }
                test.fail("Could not find " + importRetinaName + " in listRetinas");
            })
            .fail(function(reason) {
                test.fail(reason);
            });
        })
        .fail(function(reason) {
            test.fail("Import retina failed with status: " + StatusTStr[reason] +
                      "(" + reason + ")");
        });

        file.close();
    }

    function testImportRetina(test) {
        retinaImportName = "testImportRetina";
        doTestImportRetina(test, retinaImportName,
                           system.env['MGMTDTEST_DIR'] + "/testRetina.tar.gz");
    }

    // Needs to be after testImportRetina
    function testExportRetina(test) {
        var retinaPath = system.env['TMP_DIR'] + "/testRetina.tar.gz";
        if (retinaImportName == "") {
            test.fail("Needs to run after testImportRetina");
        }

        xcalarApiExportRetina(thriftHandle, retinaImportName)
        .done(function(exportRetinaOutput) {
            fs.write(retinaPath, exportRetinaOutput.retina, 'wb');
            doTestImportRetina(test, "testExportRetina", retinaPath);
        })
        .fail(function(reason) {
            test.fail("Export retina failed with status: " + StatusTStr[reason] +
                      "(" + reason + ")");
        });
    }

    function testFuncDriverList(test) {
        xcalarApiListFuncTest(thriftHandle, "libhello::*")
        .done(function(listFuncTestOutput) {
            if (listFuncTestOutput.numTests != 1) {
                var message = "numTests matching libhello::* is " + listFuncTestOutput.numTests
                for (ii = 0; ii < listFuncTestOutput.numTests; ii++) {
                    message += " " + listFuncTestOutput.testNames[ii];
                }

                test.fail(message);
            }

            if (listFuncTestOutput.testNames[0] != "libhello::hello") {
                test.fail("testName we got was " + listFuncTestOutput.testNames[0]);
            }

            test.pass();
        })
        .fail(function(reason) {
            test.fail("List functional tests failed with status: " + StatusTStr[reason] +
                      " (" + reason + ")");
        });
    }

    function testFuncDriverRun(test) {
        xcalarApiStartFuncTest(thriftHandle, false, false, ["libhello::*"])
        .done(function(startFuncTestOutput) {
            if (startFuncTestOutput.numTests != 1) {
                test.fail("numTests matching libhello::* is " + startFuncTestOutput.numTests);
            }

            if (startFuncTestOutput.testOutputs[0].testName != "libhello::hello") {
                test.fail("We got a bogus test name: " + startFuncTestOutput.testOutputs[0].testName);
            }

            if (startFuncTestOutput.testOutputs[0].status != StatusT.StatusOk) {
                test.fail(startFuncTestOutput.testOutputs[0].testName + " failed with status: " +
                          StatusTStr[startFuncTestOutput.testOutputs[0].status] + " (" +
                          startFuncTestOutput.testOutputs[0].status + ")");
            }

            test.pass();
        })
        .fail(function(reason) {
            test.fail("Run funtional tests failed with status: " + StatusTStr[reason] +
                      " (" + reason + ")");
        });
    }

    passes            = 0;
    fails             = 0;
    skips             = 0;
    returnValue       = 0;
    defaultTimeout    = 256000000;
    disableIsPass     = true;

    var content = fs.read(system.env['MGMTDTEST_DIR'] + '/test-config.cfg');
    var port = content.slice(content.indexOf('Thrift.Port'))
    port = port.slice(port.indexOf('=') + 1, port.indexOf('\n'))

    thriftHandle   = xcalarConnectThrift("localhost", port);
    loadArgs       = null;
    loadOutput     = null;
    origDataset    = null;
    yelpUserDataset = null;
    queryName      = null;
    origTable      = null;
    aggrTable      = null;
    origStrTable   = null;
    queryTableName = "yelp-joinTable";

    makeResultSetOutput1 = null;   // for dataset
    makeResultSetOutput2 = null;   // for table
    makeResultSetOutput3 = null;   // for aggregate
    newTableOutput       = null;

    retinaName            = "";
    retinaFilterDagNodeId = 0;
    retinaFilterParamType = XcalarApisT.XcalarApiFilter;
    retinaFilterParamStr  = "gt(votes.funny, <foo>)";
    retinaExportParamType = XcalarApisT.XcalarApiExport;
    retinaExportParamStr  = "retinaDstFile.csv";

    // Format
    // addTestCase(testFn, testName, timeout, TestCaseEnabled, Witness)
    addTestCase(testStartNodes, "startNodes", defaultTimeout, startNodesState, "");
    addTestCase(testGetNumNodes, "getNumNodes", defaultTimeout, TestCaseDisabled, "");
    addTestCase(testGetVersion, "getVersion", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testFuncDriverList, "listFuncTests", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testFuncDriverRun, "runFuncTests", defaultTimeout, TestCaseEnabled, "");

    // This actually starts our sessions, so run this before any test
    // that requires sessions
    addTestCase(testApiKeySessions, "key sessions", defaultTimeout, TestCaseEnabled, "");

    addTestCase(testBulkDestroyDs, "bulk destroy ds", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testSchedTask, "test schedtask", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testBadLoad, "bad load", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testLoad, "load", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testLoadRegex, "loadRegex", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testPreview, "preview", defaultTimeout, TestCaseEnabled, "");

    addTestCase(testLoadEdgeCaseDos, "loadDos", defaultTimeout, TestCaseEnabled, "4415");

    // Xc-1981
    addTestCase(testGetDagOnAggr, "get dag on aggregate", defaultTimeout, TestCaseDisabled, "1981");

    addTestCase(testLoadBogus, "bogus load", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testListDatasets, "list datasets", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testGetQueryIndex, "test get query Index", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testGetQueryLoad, "test get query Load", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testIndexDatasetIntSync, "index dataset (int) Sync", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testIndexDatasetInt, "index dataset (int)", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testIndexDatasetStr, "index dataset (str)", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testIndexTable, "index table (str) Sync", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testIndexDatasetBogus, "bogus index dataset", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testIndexTable2, "index table (str) 2", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testIndexTableBogus, "bogus index table 2", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testGetTableRefCount, "table refCount", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testGetTableMeta, "table meta", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testRenameNode, "rename node", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testGetDatasetCount, "dataset count", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testGetTableCount, "table count", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testListTables, "list tables", defaultTimeout, TestCaseEnabled, "");

    // XXX Re-enable as soon as bug is fixed
    addTestCase(testGetStats, "get stats", defaultTimeout, TestCaseEnabled, "");

    // XXX Re-enable as soon as bug is fixed
    addTestCase(testGetStatGroupIdMap, "get stats group id map", defaultTimeout, TestCaseEnabled, "");

    addTestCase(testGetStatsByGroupId, "get stats group id", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testResetStats, "reset stats", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testMakeResultSetFromDataset, "result set (via dataset)", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testMakeResultSetFromTable, "result set (via tables)", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testResultSetNextDataset, "result set next (dataset)", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testResultSetAbsolute, "result set absolute", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testResultSetAbsoluteBogus, "result set absolute bogus", defaultTimeout, TestCaseEnabled, "95");
    addTestCase(testResultSetNextTable, "result set next (table)", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testFreeResultSetDataset, "free result set (dataset)", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testFreeResultSetTable, "free result set (table)", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testFilter, "filter", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testProject, "project", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testJoin, "join", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testGetOpStats, "getOpStats", defaultTimeout, TestCaseEnabled, "");

    // XXX Re-enable when either the query-DAG bug is fixed or the test is changed to create a session and
    //     have the query run under the current session instead of creating its own.
    addTestCase(testCancel, "test cancel", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testQuery, "Submit Query", defaultTimeout, TestCaseDisabled, "");
    addTestCase(testQueryState, "Request query state of indexing dataset (int)", defaultTimeout, TestCaseDisabled, "");
    addTestCase(testQueryCancel, "test cancel query", defaultTimeout, TestCaseEnabled, "");
    addTestCase(waitForDag, "waitForDag", defaultTimeout, TestCaseDisabled, "");
    addTestCase(testDag, "dag", defaultTimeout, TestCaseDisabled, "568");
    addTestCase(testGroupBy, "groupBy", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testAggregate, "Aggregate", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testMakeResultSetFromAggregate, "result set of aggregate", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testResultSetNextAggregate, "result set next of aggregate", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testFreeResultSetAggregate, "result set free of aggregate", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testMap, "map", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testDestroyDatasetInUse, "destroy dataset in use", defaultTimeout, TestCaseDisabled, "");
    addTestCase(testAddExportTarget, "add export target", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testListExportTargets, "list export targets", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testExportCSV, "export csv", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testExportSQL, "export sql", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testExportCancel, "export cancel", defaultTimeout, TestCaseEnabled, "");

    // Together, these set of test cases make up the retina sanity
    addTestCase(testMakeRetina, "makeRetina", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testListRetinas, "listRetinas", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testGetRetina1, "getRetina - iter 1 / 2", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testUpdateRetina, "updateRetina", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testGetRetina2, "getRetina - iter 2 / 2", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testExecuteRetina, "executeRetina", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testListParametersInRetina, "listParametersInRetina", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testImportRetina, "importRetina", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testExportRetina, "exportRetina", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testDeleteRetina, "deleteRetina", defaultTimeout, TestCaseEnabled, "");

    addTestCase(testListFiles, "list files", defaultTimeout, TestCaseEnabled, "");

    // This pair must go together
    addTestCase(testPyExecOnLoad, "python during load", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testDestroyDataset, "destroy dataset", defaultTimeout, TestCaseEnabled, "");

    addTestCase(testUdf, "UDF test", defaultTimeout, TestCaseEnabled, "");

    // Witness to bug 238
    addTestCase(testApiMapLongEvalString, "Map long eval string", defaultTimeout, TestCaseEnabled, "238");
    addTestCase(testApiFilterLongEvalString, "Filter long eval string", defaultTimeout, TestCaseEnabled, "238");

    // Witness to bug 2020
    addTestCase(testApiMapStringToString, "cast string to string", defaultTimeout, TestCaseEnabled, "2020");

    addTestCase(testApiKeyAdd, "key add", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testApiKeyReplace, "key replace", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testApiKeyLookup, "key lookup", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testApiKeyDelete, "key delete", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testApiKeyBogusLookup, "bogus key lookup", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testApiKeyAppend, "key append", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testApiKeySetIfEqual, "key set if equal", defaultTimeout, TestCaseEnabled, "");

    addTestCase(testTop, "top test", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testMemory, "memory test", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testListXdfs, "listXdfs test", defaultTimeout, TestCaseEnabled, "");

    // Witness to bug Xc-4963
    addTestCase(testListVarArgUdf, "listVarArgUdf test", defaultTimeout, TestCaseEnabled, "4963");

    // Witness to bug Xc-2371
    addTestCase(indexAggregateRaceTest, "index-aggregate race test", defaultTimeout, TestCaseEnabled, "2371")

    // XXX Re-enable when waitpid bug is fixed
    addTestCase(testSupportGenerate, "support generate", defaultTimeout, TestCaseDisabled, "");

    // Re-enabled with delete DHT added
    addTestCase(testCreateDht, "create DHT test", defaultTimeout, TestCaseEnabled, "");

    // XXX re-enable when the query-DAG bug is fixed
    addTestCase(testDeleteTable, "delete table", defaultTimeout, TestCaseDisabled, "");

    addTestCase(testBulkDeleteTables, "bulk delete tables", defaultTimeout, TestCaseEnabled, "103");
    addTestCase(testBulkDeleteExport, "bulk delete export node", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testBulkDeleteConstants, "bulk delete constant node", defaultTimeout, TestCaseEnabled, "");
    addTestCase(testBulkDeleteDataset, "bulk delete datasets", defaultTimeout, TestCaseEnabled, "2314");
    addTestCase(testShutdown, "shutdown", defaultTimeout, TestCaseEnabled, "98");

    runTestSuite(testCases);
})($, {});
