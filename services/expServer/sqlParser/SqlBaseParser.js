// Generated from SqlBase.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = require('antlr4/index');
var SqlBaseVisitor = require('./SqlBaseVisitor').SqlBaseVisitor;

var grammarFileName = "SqlBase.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u0100\u09ad\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0003",
    "\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\b\u0003\b\u0006\b\u00e7\n\b\r\b\u000e\b\u00e8\u0003\b\u0007\b\u00ec",
    "\n\b\f\b\u000e\b\u00ef\u000b\b\u0003\b\u0005\b\u00f2\n\b\u0003\b\u0003",
    "\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005",
    "\t\u00fe\n\t\u0003\t\u0003\t\u0003\t\u0005\t\u0103\n\t\u0003\t\u0005",
    "\t\u0106\n\t\u0003\t\u0003\t\u0003\t\u0005\t\u010b\n\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0005\t\u0118\n\t\u0003\t\u0003\t\u0005\t\u011c\n\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0005\t\u0123\n\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0007\t\u0131\n\t\f\t\u000e\t\u0134\u000b\t\u0003\t\u0005\t\u0137",
    "\n\t\u0003\t\u0005\t\u013a\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0005\t\u0141\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0007\t\u0152\n\t\f\t\u000e\t\u0155\u000b\t\u0003\t\u0005\t\u0158",
    "\n\t\u0003\t\u0005\t\u015b\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0005\t\u0162\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0168\n",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u016e\n\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0176\n\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0005\t\u0196\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0005\t\u019e\n\t\u0003\t\u0003\t\u0005\t\u01a2\n\t\u0003\t\u0003\t",
    "\u0003\t\u0005\t\u01a7\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u01ad",
    "\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u01b5\n",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u01bb\n\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0005\t\u01c8\n\t\u0003\t\u0006\t\u01cb\n\t\r\t\u000e\t\u01cc\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u01d6\n\t",
    "\u0003\t\u0006\t\u01d9\n\t\r\t\u000e\t\u01da\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0005\t\u01eb\n\t\u0003\t\u0003\t\u0003\t\u0007\t",
    "\u01f0\n\t\f\t\u000e\t\u01f3\u000b\t\u0003\t\u0005\t\u01f6\n\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u01fe\n\t\u0003\t",
    "\u0003\t\u0003\t\u0007\t\u0203\n\t\f\t\u000e\t\u0206\u000b\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0005\t\u020c\n\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0005\t\u021b\n\t\u0003\t\u0003\t\u0005\t\u021f\n\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0005\t\u0225\n\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0005\t\u022b\n\t\u0003\t\u0005\t\u022e\n\t\u0003\t\u0005\t\u0231\n",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0237\n\t\u0003\t\u0003\t",
    "\u0005\t\u023b\n\t\u0003\t\u0003\t\u0005\t\u023f\n\t\u0003\t\u0003\t",
    "\u0003\t\u0005\t\u0244\n\t\u0003\t\u0003\t\u0005\t\u0248\n\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0250\n\t\u0003\t\u0005",
    "\t\u0253\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0005\t\u025c\n\t\u0003\t\u0003\t\u0003\t\u0005\t\u0261\n\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0005\t\u0267\n\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0005\t\u026e\n\t\u0003\t\u0005\t\u0271\n\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0005\t\u0277\n\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0007\t\u0280\n\t\f\t\u000e\t\u0283\u000b\t",
    "\u0005\t\u0285\n\t\u0003\t\u0003\t\u0005\t\u0289\n\t\u0003\t\u0003\t",
    "\u0003\t\u0005\t\u028e\n\t\u0003\t\u0003\t\u0003\t\u0005\t\u0293\n\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u029a\n\t\u0003\t\u0005",
    "\t\u029d\n\t\u0003\t\u0005\t\u02a0\n\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0005\t\u02a7\n\t\u0003\t\u0003\t\u0003\t\u0005\t\u02ac\n",
    "\t\u0003\t\u0003\t\u0003\t\u0005\t\u02b1\n\t\u0003\t\u0005\t\u02b4\n",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u02bd",
    "\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u02c5\n",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u02cb\n\t\u0003\t\u0003\t",
    "\u0005\t\u02cf\n\t\u0003\t\u0003\t\u0005\t\u02d3\n\t\u0003\t\u0003\t",
    "\u0005\t\u02d7\n\t\u0005\t\u02d9\n\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0005\t\u02e2\n\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0005\t\u02e8\n\t\u0003\t\u0003\t\u0003\t\u0005\t\u02ed\n\t\u0003",
    "\t\u0005\t\u02f0\n\t\u0003\t\u0003\t\u0005\t\u02f4\n\t\u0003\t\u0005",
    "\t\u02f7\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0007\t",
    "\u02ff\n\t\f\t\u000e\t\u0302\u000b\t\u0005\t\u0304\n\t\u0003\t\u0003",
    "\t\u0005\t\u0308\n\t\u0003\t\u0003\t\u0003\t\u0005\t\u030d\n\t\u0003",
    "\t\u0005\t\u0310\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0316\n",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u031e\n\t",
    "\u0003\t\u0003\t\u0003\t\u0005\t\u0323\n\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0005\t\u0329\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u032f\n",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0007\t\u0338",
    "\n\t\f\t\u000e\t\u033b\u000b\t\u0003\t\u0003\t\u0003\t\u0007\t\u0340",
    "\n\t\f\t\u000e\t\u0343\u000b\t\u0003\t\u0003\t\u0007\t\u0347\n\t\f\t",
    "\u000e\t\u034a\u000b\t\u0003\t\u0003\t\u0003\t\u0007\t\u034f\n\t\f\t",
    "\u000e\t\u0352\u000b\t\u0005\t\u0354\n\t\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0005\n\u035c\n\n\u0003\n\u0003\n\u0005\n\u0360\n",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u0367\n\n\u0003\n",
    "\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u03db\n\n\u0003\n",
    "\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u03e3\n\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u03eb\n\n\u0003\n\u0003\n",
    "\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u03f4\n\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005",
    "\n\u0400\n\n\u0003\u000b\u0003\u000b\u0005\u000b\u0404\n\u000b\u0003",
    "\u000b\u0005\u000b\u0407\n\u000b\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0005\u000b\u040d\n\u000b\u0003\u000b\u0003\u000b\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u0417\n\f\u0003\f",
    "\u0003\f\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0005\r\u0423\n\r\u0003\r\u0003\r\u0003\r\u0005\r\u0428\n\r\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000f\u0005\u000f\u042e\n\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u043a\n",
    "\u0010\u0005\u0010\u043c\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0005\u0010\u0441\n\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u0445",
    "\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u044a\n\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u044f\n\u0010\u0003",
    "\u0010\u0005\u0010\u0452\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0005\u0010\u0457\n\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u045b",
    "\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u0460\n\u0010",
    "\u0005\u0010\u0462\n\u0010\u0003\u0011\u0003\u0011\u0005\u0011\u0466",
    "\n\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0007\u0012\u046d\n\u0012\f\u0012\u000e\u0012\u0470\u000b\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0477",
    "\n\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0005\u0014\u047e\n\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0007",
    "\u0015\u0483\n\u0015\f\u0015\u000e\u0015\u0486\u000b\u0015\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0007\u0016\u048c\n\u0016\f\u0016",
    "\u000e\u0016\u048f\u000b\u0016\u0003\u0017\u0003\u0017\u0005\u0017\u0493",
    "\n\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0007\u0019\u04a0\n\u0019\f\u0019\u000e\u0019\u04a3\u000b\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0005\u001a\u04a9\n\u001a",
    "\u0003\u001a\u0005\u001a\u04ac\n\u001a\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0007\u001b\u04b1\n\u001b\f\u001b\u000e\u001b\u04b4\u000b\u001b",
    "\u0003\u001b\u0005\u001b\u04b7\n\u001b\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0005\u001c\u04bd\n\u001c\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0007\u001d\u04c3\n\u001d\f\u001d\u000e\u001d",
    "\u04c6\u000b\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0007\u001e\u04ce\n\u001e\f\u001e\u000e\u001e\u04d1",
    "\u000b\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u04db\n\u001f\u0003",
    " \u0003 \u0003 \u0003 \u0003 \u0005 \u04e2\n \u0003!\u0003!\u0003!\u0003",
    "!\u0005!\u04e8\n!\u0003\"\u0003\"\u0003\"\u0003#\u0005#\u04ee\n#\u0003",
    "#\u0003#\u0003#\u0003#\u0003#\u0006#\u04f5\n#\r#\u000e#\u04f6\u0005",
    "#\u04f9\n#\u0003$\u0003$\u0003$\u0003$\u0003$\u0007$\u0500\n$\f$\u000e",
    "$\u0503\u000b$\u0005$\u0505\n$\u0003$\u0003$\u0003$\u0003$\u0003$\u0007",
    "$\u050c\n$\f$\u000e$\u050f\u000b$\u0005$\u0511\n$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0007$\u0518\n$\f$\u000e$\u051b\u000b$\u0005$\u051d",
    "\n$\u0003$\u0003$\u0003$\u0003$\u0003$\u0007$\u0524\n$\f$\u000e$\u0527",
    "\u000b$\u0005$\u0529\n$\u0003$\u0005$\u052c\n$\u0003$\u0003$\u0003$",
    "\u0005$\u0531\n$\u0005$\u0533\n$\u0003%\u0005%\u0536\n%\u0003%\u0003",
    "%\u0003%\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0005&\u0541\n&\u0003",
    "&\u0007&\u0544\n&\f&\u000e&\u0547\u000b&\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003\'\u0005\'\u0551\n\'\u0003(\u0003(\u0005",
    "(\u0555\n(\u0003(\u0003(\u0005(\u0559\n(\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0005)\u0565\n)\u0003)\u0005",
    ")\u0568\n)\u0003)\u0003)\u0005)\u056c\n)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0005)\u0576\n)\u0003)\u0003)\u0005)\u057a",
    "\n)\u0005)\u057c\n)\u0003)\u0005)\u057f\n)\u0003)\u0003)\u0005)\u0583",
    "\n)\u0003)\u0005)\u0586\n)\u0003)\u0003)\u0005)\u058a\n)\u0003)\u0003",
    ")\u0007)\u058e\n)\f)\u000e)\u0591\u000b)\u0003)\u0005)\u0594\n)\u0003",
    ")\u0003)\u0005)\u0598\n)\u0003)\u0003)\u0003)\u0005)\u059d\n)\u0003",
    ")\u0005)\u05a0\n)\u0005)\u05a2\n)\u0003)\u0007)\u05a5\n)\f)\u000e)\u05a8",
    "\u000b)\u0003)\u0003)\u0005)\u05ac\n)\u0003)\u0005)\u05af\n)\u0003)",
    "\u0003)\u0005)\u05b3\n)\u0003)\u0005)\u05b6\n)\u0005)\u05b8\n)\u0003",
    "*\u0003*\u0003*\u0005*\u05bd\n*\u0003*\u0007*\u05c0\n*\f*\u000e*\u05c3",
    "\u000b*\u0003*\u0003*\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0007",
    "+\u05cd\n+\f+\u000e+\u05d0\u000b+\u0003+\u0003+\u0005+\u05d4\n+\u0003",
    ",\u0003,\u0003,\u0003,\u0007,\u05da\n,\f,\u000e,\u05dd\u000b,\u0003",
    ",\u0007,\u05e0\n,\f,\u000e,\u05e3\u000b,\u0003,\u0005,\u05e6\n,\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0007-\u05ed\n-\f-\u000e-\u05f0\u000b",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0007-\u05fc\n-\f-\u000e-\u05ff\u000b-\u0003-\u0003-\u0005-\u0603",
    "\n-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0007-\u060d",
    "\n-\f-\u000e-\u0610\u000b-\u0003-\u0003-\u0005-\u0614\n-\u0003.\u0003",
    ".\u0003.\u0003.\u0007.\u061a\n.\f.\u000e.\u061d\u000b.\u0005.\u061f",
    "\n.\u0003.\u0003.\u0005.\u0623\n.\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0007/\u062f\n/\f/\u000e/\u0632",
    "\u000b/\u0003/\u0003/\u0003/\u00030\u00030\u00030\u00030\u00030\u0007",
    "0\u063c\n0\f0\u000e0\u063f\u000b0\u00030\u00030\u00050\u0643\n0\u0003",
    "1\u00031\u00051\u0647\n1\u00031\u00051\u064a\n1\u00032\u00032\u0003",
    "2\u00052\u064f\n2\u00032\u00032\u00032\u00032\u00032\u00072\u0656\n",
    "2\f2\u000e2\u0659\u000b2\u00052\u065b\n2\u00032\u00032\u00032\u0005",
    "2\u0660\n2\u00032\u00032\u00032\u00072\u0665\n2\f2\u000e2\u0668\u000b",
    "2\u00052\u066a\n2\u00033\u00033\u00034\u00034\u00074\u0670\n4\f4\u000e",
    "4\u0673\u000b4\u00035\u00035\u00035\u00035\u00055\u0679\n5\u00035\u0003",
    "5\u00035\u00035\u00035\u00055\u0680\n5\u00036\u00056\u0683\n6\u0003",
    "6\u00036\u00036\u00056\u0688\n6\u00036\u00036\u00036\u00036\u00056\u068e",
    "\n6\u00036\u00036\u00056\u0692\n6\u00036\u00056\u0695\n6\u00036\u0005",
    "6\u0698\n6\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00077\u06a1",
    "\n7\f7\u000e7\u06a4\u000b7\u00037\u00037\u00057\u06a8\n7\u00038\u0003",
    "8\u00038\u00058\u06ad\n8\u00038\u00038\u00039\u00059\u06b2\n9\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00059\u06c4\n9\u00059\u06c6\n",
    "9\u00039\u00059\u06c9\n9\u0003:\u0003:\u0003:\u0003:\u0003;\u0003;\u0003",
    ";\u0007;\u06d2\n;\f;\u000e;\u06d5\u000b;\u0003<\u0003<\u0003<\u0003",
    "<\u0007<\u06db\n<\f<\u000e<\u06de\u000b<\u0003<\u0003<\u0003=\u0003",
    "=\u0005=\u06e4\n=\u0003>\u0003>\u0003>\u0003>\u0007>\u06ea\n>\f>\u000e",
    ">\u06ed\u000b>\u0003>\u0003>\u0003?\u0003?\u0003?\u0005?\u06f4\n?\u0003",
    "@\u0003@\u0005@\u06f8\n@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005",
    "@\u0700\n@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005@\u0708\n",
    "@\u0003@\u0003@\u0003@\u0003@\u0005@\u070e\n@\u0003A\u0003A\u0003A\u0003",
    "A\u0007A\u0714\nA\fA\u000eA\u0717\u000bA\u0003A\u0003A\u0003B\u0003",
    "B\u0003B\u0003B\u0003B\u0007B\u0720\nB\fB\u000eB\u0723\u000bB\u0005",
    "B\u0725\nB\u0003B\u0003B\u0003B\u0003C\u0005C\u072b\nC\u0003C\u0003",
    "C\u0005C\u072f\nC\u0005C\u0731\nC\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0005D\u073a\nD\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0005D\u0746\nD\u0005D\u0748\nD\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0005D\u074f\nD\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0005D\u0756\nD\u0003D\u0003D\u0003D\u0003D\u0005D\u075c\n",
    "D\u0003D\u0003D\u0003D\u0003D\u0005D\u0762\nD\u0005D\u0764\nD\u0003",
    "E\u0003E\u0003E\u0003E\u0003E\u0003E\u0007E\u076c\nE\fE\u000eE\u076f",
    "\u000bE\u0003E\u0003E\u0005E\u0773\nE\u0003F\u0003F\u0003F\u0005F\u0778",
    "\nF\u0003F\u0003F\u0003G\u0003G\u0003G\u0005G\u077f\nG\u0003G\u0003",
    "G\u0003H\u0003H\u0005H\u0785\nH\u0003H\u0003H\u0005H\u0789\nH\u0005",
    "H\u078b\nH\u0003I\u0003I\u0003I\u0007I\u0790\nI\fI\u000eI\u0793\u000b",
    "I\u0003J\u0003J\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003",
    "K\u0003K\u0003K\u0005K\u07a1\nK\u0005K\u07a3\nK\u0003K\u0003K\u0003",
    "K\u0003K\u0003K\u0003K\u0007K\u07ab\nK\fK\u000eK\u07ae\u000bK\u0003",
    "L\u0005L\u07b1\nL\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0005L\u07b9",
    "\nL\u0003L\u0003L\u0003L\u0003L\u0003L\u0007L\u07c0\nL\fL\u000eL\u07c3",
    "\u000bL\u0003L\u0003L\u0003L\u0005L\u07c8\nL\u0003L\u0003L\u0003L\u0003",
    "L\u0003L\u0003L\u0005L\u07d0\nL\u0003L\u0003L\u0003L\u0003L\u0005L\u07d6",
    "\nL\u0003L\u0003L\u0003L\u0005L\u07db\nL\u0003L\u0003L\u0003L\u0005",
    "L\u07e0\nL\u0003M\u0003M\u0003M\u0003M\u0005M\u07e6\nM\u0003M\u0003",
    "M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003",
    "M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0007M\u07fb\nM\f",
    "M\u000eM\u07fe\u000bM\u0003N\u0003N\u0003N\u0006N\u0803\nN\rN\u000e",
    "N\u0804\u0003N\u0003N\u0005N\u0809\nN\u0003N\u0003N\u0003N\u0003N\u0003",
    "N\u0006N\u0810\nN\rN\u000eN\u0811\u0003N\u0003N\u0005N\u0816\nN\u0003",
    "N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003",
    "N\u0003N\u0003N\u0003N\u0007N\u0826\nN\fN\u000eN\u0829\u000bN\u0005",
    "N\u082b\nN\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0005N\u0833\n",
    "N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0005N\u083c\nN\u0003",
    "N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003",
    "N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0006N\u0851",
    "\nN\rN\u000eN\u0852\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003",
    "N\u0003N\u0003N\u0005N\u085e\nN\u0003N\u0003N\u0003N\u0007N\u0863\n",
    "N\fN\u000eN\u0866\u000bN\u0005N\u0868\nN\u0003N\u0003N\u0003N\u0005",
    "N\u086d\nN\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003",
    "N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003",
    "N\u0003N\u0005N\u0883\nN\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003",
    "N\u0003N\u0007N\u088d\nN\fN\u000eN\u0890\u000bN\u0003O\u0003O\u0003",
    "O\u0003O\u0003O\u0003O\u0003O\u0003O\u0006O\u089a\nO\rO\u000eO\u089b",
    "\u0005O\u089e\nO\u0003P\u0003P\u0003Q\u0003Q\u0003R\u0003R\u0003S\u0003",
    "S\u0003T\u0003T\u0007T\u08aa\nT\fT\u000eT\u08ad\u000bT\u0003U\u0003",
    "U\u0003U\u0003U\u0005U\u08b3\nU\u0003V\u0005V\u08b6\nV\u0003V\u0003",
    "V\u0005V\u08ba\nV\u0003W\u0003W\u0003W\u0005W\u08bf\nW\u0003X\u0003",
    "X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003",
    "X\u0003X\u0003X\u0003X\u0005X\u08d0\nX\u0003X\u0003X\u0005X\u08d4\n",
    "X\u0003X\u0003X\u0003X\u0003X\u0003X\u0007X\u08db\nX\fX\u000eX\u08de",
    "\u000bX\u0003X\u0005X\u08e1\nX\u0005X\u08e3\nX\u0003Y\u0003Y\u0003Y",
    "\u0007Y\u08e8\nY\fY\u000eY\u08eb\u000bY\u0003Z\u0003Z\u0003Z\u0003Z",
    "\u0005Z\u08f1\nZ\u0003[\u0003[\u0003[\u0007[\u08f6\n[\f[\u000e[\u08f9",
    "\u000b[\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0005\\\u0900\n\\\u0003",
    "]\u0003]\u0003]\u0003]\u0003]\u0003^\u0003^\u0003^\u0003^\u0007^\u090b",
    "\n^\f^\u000e^\u090e\u000b^\u0003_\u0003_\u0003_\u0003_\u0003`\u0003",
    "`\u0003`\u0003`\u0003`\u0003`\u0003`\u0007`\u091b\n`\f`\u000e`\u091e",
    "\u000b`\u0003`\u0003`\u0003`\u0003`\u0003`\u0007`\u0925\n`\f`\u000e",
    "`\u0928\u000b`\u0005`\u092a\n`\u0003`\u0003`\u0003`\u0003`\u0003`\u0007",
    "`\u0931\n`\f`\u000e`\u0934\u000b`\u0005`\u0936\n`\u0005`\u0938\n`\u0003",
    "`\u0005`\u093b\n`\u0003`\u0005`\u093e\n`\u0003a\u0003a\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003",
    "a\u0003a\u0003a\u0005a\u0950\na\u0003b\u0003b\u0003b\u0003b\u0003b\u0003",
    "b\u0003b\u0005b\u0959\nb\u0003c\u0003c\u0003c\u0007c\u095e\nc\fc\u000e",
    "c\u0961\u000bc\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003",
    "d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0005d\u0972\nd\u0003",
    "e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003",
    "e\u0003e\u0003e\u0003e\u0003e\u0003e\u0005e\u0984\ne\u0003f\u0003f\u0003",
    "f\u0005f\u0989\nf\u0003g\u0003g\u0003h\u0005h\u098e\nh\u0003h\u0003",
    "h\u0005h\u0992\nh\u0003h\u0003h\u0005h\u0996\nh\u0003h\u0003h\u0005",
    "h\u099a\nh\u0003h\u0003h\u0005h\u099e\nh\u0003h\u0003h\u0005h\u09a2",
    "\nh\u0003h\u0003h\u0005h\u09a6\nh\u0003h\u0005h\u09a9\nh\u0003i\u0003",
    "i\u0003i\u0007\u0300\u0339\u0341\u0348\u0350\u0006J\u0094\u0098\u009a",
    "j\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a",
    "\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080",
    "\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098",
    "\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0",
    "\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8",
    "\u00ca\u00cc\u00ce\u00d0\u0002\u001c\u0003\u0002\u00ca\u00cb\u0004\u0002",
    "RRTT\u0005\u0002\\^\u00b0\u00b0\u00b6\u00b6\u0004\u0002\u000e\u000e",
    "!!\u0004\u0002..YY\u0004\u0002\u00b0\u00b0\u00b6\u00b6\u0004\u0002\u000f",
    "\u000f\u00d7\u00d7\u0003\u0002hk\u0003\u0002-.\u0004\u0002KKMM\u0004",
    "\u0002\u0011\u0011\u0013\u0013\u0003\u0002\u00f6\u00f7\u0003\u0002&",
    "\'\u0004\u0002\u008c\u008d\u0092\u0092\u0003\u0002\u008e\u0091\u0004",
    "\u0002\u008c\u008d\u0095\u0095\u0003\u0002~\u0080\u0003\u0002\u0084",
    "\u008b\u0003\u0002\u008c\u0096\u0003\u0002\u001f\"\u0003\u0002*+\u0003",
    "\u0002\u008c\u008d\u0004\u0002DD\u009d\u009d\u0004\u0002\u001b\u001b",
    "\u009b\u009b\u0003\u0002HI\n\u0002\r588@gl\u0083\u0091\u0091\u0097\u00a0",
    "\u00a2\u00ee\u00f0\u00f1\u0002\u0b50\u0002\u00d2\u0003\u0002\u0002\u0002",
    "\u0004\u00d5\u0003\u0002\u0002\u0002\u0006\u00d8\u0003\u0002\u0002\u0002",
    "\b\u00db\u0003\u0002\u0002\u0002\n\u00de\u0003\u0002\u0002\u0002\f\u00e1",
    "\u0003\u0002\u0002\u0002\u000e\u00e4\u0003\u0002\u0002\u0002\u0010\u0353",
    "\u0003\u0002\u0002\u0002\u0012\u03ff\u0003\u0002\u0002\u0002\u0014\u0401",
    "\u0003\u0002\u0002\u0002\u0016\u0410\u0003\u0002\u0002\u0002\u0018\u041c",
    "\u0003\u0002\u0002\u0002\u001a\u0429\u0003\u0002\u0002\u0002\u001c\u042d",
    "\u0003\u0002\u0002\u0002\u001e\u0461\u0003\u0002\u0002\u0002 \u0463",
    "\u0003\u0002\u0002\u0002\"\u0467\u0003\u0002\u0002\u0002$\u0473\u0003",
    "\u0002\u0002\u0002&\u047d\u0003\u0002\u0002\u0002(\u047f\u0003\u0002",
    "\u0002\u0002*\u0487\u0003\u0002\u0002\u0002,\u0490\u0003\u0002\u0002",
    "\u0002.\u0498\u0003\u0002\u0002\u00020\u049b\u0003\u0002\u0002\u0002",
    "2\u04a6\u0003\u0002\u0002\u00024\u04b6\u0003\u0002\u0002\u00026\u04bc",
    "\u0003\u0002\u0002\u00028\u04be\u0003\u0002\u0002\u0002:\u04c9\u0003",
    "\u0002\u0002\u0002<\u04da\u0003\u0002\u0002\u0002>\u04e1\u0003\u0002",
    "\u0002\u0002@\u04e3\u0003\u0002\u0002\u0002B\u04e9\u0003\u0002\u0002",
    "\u0002D\u04f8\u0003\u0002\u0002\u0002F\u0504\u0003\u0002\u0002\u0002",
    "H\u0535\u0003\u0002\u0002\u0002J\u053a\u0003\u0002\u0002\u0002L\u0550",
    "\u0003\u0002\u0002\u0002N\u0552\u0003\u0002\u0002\u0002P\u05b7\u0003",
    "\u0002\u0002\u0002R\u05b9\u0003\u0002\u0002\u0002T\u05d3\u0003\u0002",
    "\u0002\u0002V\u05d5\u0003\u0002\u0002\u0002X\u0613\u0003\u0002\u0002",
    "\u0002Z\u0622\u0003\u0002\u0002\u0002\\\u0624\u0003\u0002\u0002\u0002",
    "^\u0642\u0003\u0002\u0002\u0002`\u0644\u0003\u0002\u0002\u0002b\u064b",
    "\u0003\u0002\u0002\u0002d\u066b\u0003\u0002\u0002\u0002f\u066d\u0003",
    "\u0002\u0002\u0002h\u067f\u0003\u0002\u0002\u0002j\u0697\u0003\u0002",
    "\u0002\u0002l\u06a7\u0003\u0002\u0002\u0002n\u06a9\u0003\u0002\u0002",
    "\u0002p\u06c8\u0003\u0002\u0002\u0002r\u06ca\u0003\u0002\u0002\u0002",
    "t\u06ce\u0003\u0002\u0002\u0002v\u06d6\u0003\u0002\u0002\u0002x\u06e1",
    "\u0003\u0002\u0002\u0002z\u06e5\u0003\u0002\u0002\u0002|\u06f0\u0003",
    "\u0002\u0002\u0002~\u070d\u0003\u0002\u0002\u0002\u0080\u070f\u0003",
    "\u0002\u0002\u0002\u0082\u071a\u0003\u0002\u0002\u0002\u0084\u0730\u0003",
    "\u0002\u0002\u0002\u0086\u0763\u0003\u0002\u0002\u0002\u0088\u0772\u0003",
    "\u0002\u0002\u0002\u008a\u0777\u0003\u0002\u0002\u0002\u008c\u077e\u0003",
    "\u0002\u0002\u0002\u008e\u0782\u0003\u0002\u0002\u0002\u0090\u078c\u0003",
    "\u0002\u0002\u0002\u0092\u0794\u0003\u0002\u0002\u0002\u0094\u07a2\u0003",
    "\u0002\u0002\u0002\u0096\u07df\u0003\u0002\u0002\u0002\u0098\u07e5\u0003",
    "\u0002\u0002\u0002\u009a\u0882\u0003\u0002\u0002\u0002\u009c\u089d\u0003",
    "\u0002\u0002\u0002\u009e\u089f\u0003\u0002\u0002\u0002\u00a0\u08a1\u0003",
    "\u0002\u0002\u0002\u00a2\u08a3\u0003\u0002\u0002\u0002\u00a4\u08a5\u0003",
    "\u0002\u0002\u0002\u00a6\u08a7\u0003\u0002\u0002\u0002\u00a8\u08ae\u0003",
    "\u0002\u0002\u0002\u00aa\u08b9\u0003\u0002\u0002\u0002\u00ac\u08be\u0003",
    "\u0002\u0002\u0002\u00ae\u08e2\u0003\u0002\u0002\u0002\u00b0\u08e4\u0003",
    "\u0002\u0002\u0002\u00b2\u08ec\u0003\u0002\u0002\u0002\u00b4\u08f2\u0003",
    "\u0002\u0002\u0002\u00b6\u08fa\u0003\u0002\u0002\u0002\u00b8\u0901\u0003",
    "\u0002\u0002\u0002\u00ba\u0906\u0003\u0002\u0002\u0002\u00bc\u090f\u0003",
    "\u0002\u0002\u0002\u00be\u093d\u0003\u0002\u0002\u0002\u00c0\u094f\u0003",
    "\u0002\u0002\u0002\u00c2\u0958\u0003\u0002\u0002\u0002\u00c4\u095a\u0003",
    "\u0002\u0002\u0002\u00c6\u0971\u0003\u0002\u0002\u0002\u00c8\u0983\u0003",
    "\u0002\u0002\u0002\u00ca\u0988\u0003\u0002\u0002\u0002\u00cc\u098a\u0003",
    "\u0002\u0002\u0002\u00ce\u09a8\u0003\u0002\u0002\u0002\u00d0\u09aa\u0003",
    "\u0002\u0002\u0002\u00d2\u00d3\u0005\u0010\t\u0002\u00d3\u00d4\u0007",
    "\u0002\u0002\u0003\u00d4\u0003\u0003\u0002\u0002\u0002\u00d5\u00d6\u0005",
    "\u008eH\u0002\u00d6\u00d7\u0007\u0002\u0002\u0003\u00d7\u0005\u0003",
    "\u0002\u0002\u0002\u00d8\u00d9\u0005\u008aF\u0002\u00d9\u00da\u0007",
    "\u0002\u0002\u0003\u00da\u0007\u0003\u0002\u0002\u0002\u00db\u00dc\u0005",
    "\u008cG\u0002\u00dc\u00dd\u0007\u0002\u0002\u0003\u00dd\t\u0003\u0002",
    "\u0002\u0002\u00de\u00df\u0005\u00aeX\u0002\u00df\u00e0\u0007\u0002",
    "\u0002\u0003\u00e0\u000b\u0003\u0002\u0002\u0002\u00e1\u00e2\u0005\u00b0",
    "Y\u0002\u00e2\u00e3\u0007\u0002\u0002\u0003\u00e3\r\u0003\u0002\u0002",
    "\u0002\u00e4\u00ed\u0005\u0010\t\u0002\u00e5\u00e7\u0007\u0003\u0002",
    "\u0002\u00e6\u00e5\u0003\u0002\u0002\u0002\u00e7\u00e8\u0003\u0002\u0002",
    "\u0002\u00e8\u00e6\u0003\u0002\u0002\u0002\u00e8\u00e9\u0003\u0002\u0002",
    "\u0002\u00e9\u00ea\u0003\u0002\u0002\u0002\u00ea\u00ec\u0005\u0010\t",
    "\u0002\u00eb\u00e6\u0003\u0002\u0002\u0002\u00ec\u00ef\u0003\u0002\u0002",
    "\u0002\u00ed\u00eb\u0003\u0002\u0002\u0002\u00ed\u00ee\u0003\u0002\u0002",
    "\u0002\u00ee\u00f1\u0003\u0002\u0002\u0002\u00ef\u00ed\u0003\u0002\u0002",
    "\u0002\u00f0\u00f2\u0007\u0003\u0002\u0002\u00f1\u00f0\u0003\u0002\u0002",
    "\u0002\u00f1\u00f2\u0003\u0002\u0002\u0002\u00f2\u00f3\u0003\u0002\u0002",
    "\u0002\u00f3\u00f4\u0007\u0002\u0002\u0003\u00f4\u000f\u0003\u0002\u0002",
    "\u0002\u00f5\u0354\u0005\u001c\u000f\u0002\u00f6\u00f7\u0007d\u0002",
    "\u0002\u00f7\u0354\u0005\u00c6d\u0002\u00f8\u00f9\u0007Q\u0002\u0002",
    "\u00f9\u00fd\u0007\u00d1\u0002\u0002\u00fa\u00fb\u0007\u0081\u0002\u0002",
    "\u00fb\u00fc\u0007\"\u0002\u0002\u00fc\u00fe\u0007$\u0002\u0002\u00fd",
    "\u00fa\u0003\u0002\u0002\u0002\u00fd\u00fe\u0003\u0002\u0002\u0002\u00fe",
    "\u00ff\u0003\u0002\u0002\u0002\u00ff\u0102\u0005\u00c6d\u0002\u0100",
    "\u0101\u0007t\u0002\u0002\u0101\u0103\u0007\u00f2\u0002\u0002\u0102",
    "\u0100\u0003\u0002\u0002\u0002\u0102\u0103\u0003\u0002\u0002\u0002\u0103",
    "\u0105\u0003\u0002\u0002\u0002\u0104\u0106\u0005\u001a\u000e\u0002\u0105",
    "\u0104\u0003\u0002\u0002\u0002\u0105\u0106\u0003\u0002\u0002\u0002\u0106",
    "\u010a\u0003\u0002\u0002\u0002\u0107\u0108\u0007O\u0002\u0002\u0108",
    "\u0109\u0007\u00bc\u0002\u0002\u0109\u010b\u00050\u0019\u0002\u010a",
    "\u0107\u0003\u0002\u0002\u0002\u010a\u010b\u0003\u0002\u0002\u0002\u010b",
    "\u0354\u0003\u0002\u0002\u0002\u010c\u010d\u0007o\u0002\u0002\u010d",
    "\u010e\u0007\u00d1\u0002\u0002\u010e\u010f\u0005\u00c6d\u0002\u010f",
    "\u0110\u0007u\u0002\u0002\u0110\u0111\u0007\u00bc\u0002\u0002\u0111",
    "\u0112\u00050\u0019\u0002\u0112\u0354\u0003\u0002\u0002\u0002\u0113",
    "\u0114\u0007g\u0002\u0002\u0114\u0117\u0007\u00d1\u0002\u0002\u0115",
    "\u0116\u0007\u0081\u0002\u0002\u0116\u0118\u0007$\u0002\u0002\u0117",
    "\u0115\u0003\u0002\u0002\u0002\u0117\u0118\u0003\u0002\u0002\u0002\u0118",
    "\u0119\u0003\u0002\u0002\u0002\u0119\u011b\u0005\u00c6d\u0002\u011a",
    "\u011c\t\u0002\u0002\u0002\u011b\u011a\u0003\u0002\u0002\u0002\u011b",
    "\u011c\u0003\u0002\u0002\u0002\u011c\u0354\u0003\u0002\u0002\u0002\u011d",
    "\u0122\u0005\u0014\u000b\u0002\u011e\u011f\u0007\u0004\u0002\u0002\u011f",
    "\u0120\u0005\u00b0Y\u0002\u0120\u0121\u0007\u0005\u0002\u0002\u0121",
    "\u0123\u0003\u0002\u0002\u0002\u0122\u011e\u0003\u0002\u0002\u0002\u0122",
    "\u0123\u0003\u0002\u0002\u0002\u0123\u0124\u0003\u0002\u0002\u0002\u0124",
    "\u0132\u0005.\u0018\u0002\u0125\u0126\u0007\u00b9\u0002\u0002\u0126",
    "\u0131\u00050\u0019\u0002\u0127\u0128\u0007\u00d9\u0002\u0002\u0128",
    "\u0129\u0007\u0016\u0002\u0002\u0129\u0131\u0005r:\u0002\u012a\u0131",
    "\u0005\u0016\f\u0002\u012b\u0131\u0005\u001a\u000e\u0002\u012c\u012d",
    "\u0007t\u0002\u0002\u012d\u0131\u0007\u00f2\u0002\u0002\u012e\u012f",
    "\u0007\u00bb\u0002\u0002\u012f\u0131\u00050\u0019\u0002\u0130\u0125",
    "\u0003\u0002\u0002\u0002\u0130\u0127\u0003\u0002\u0002\u0002\u0130\u012a",
    "\u0003\u0002\u0002\u0002\u0130\u012b\u0003\u0002\u0002\u0002\u0130\u012c",
    "\u0003\u0002\u0002\u0002\u0130\u012e\u0003\u0002\u0002\u0002\u0131\u0134",
    "\u0003\u0002\u0002\u0002\u0132\u0130\u0003\u0002\u0002\u0002\u0132\u0133",
    "\u0003\u0002\u0002\u0002\u0133\u0139\u0003\u0002\u0002\u0002\u0134\u0132",
    "\u0003\u0002\u0002\u0002\u0135\u0137\u0007\u0010\u0002\u0002\u0136\u0135",
    "\u0003\u0002\u0002\u0002\u0136\u0137\u0003\u0002\u0002\u0002\u0137\u0138",
    "\u0003\u0002\u0002\u0002\u0138\u013a\u0005\u001c\u000f\u0002\u0139\u0136",
    "\u0003\u0002\u0002\u0002\u0139\u013a\u0003\u0002\u0002\u0002\u013a\u0354",
    "\u0003\u0002\u0002\u0002\u013b\u0140\u0005\u0014\u000b\u0002\u013c\u013d",
    "\u0007\u0004\u0002\u0002\u013d\u013e\u0005\u00b0Y\u0002\u013e\u013f",
    "\u0007\u0005\u0002\u0002\u013f\u0141\u0003\u0002\u0002\u0002\u0140\u013c",
    "\u0003\u0002\u0002\u0002\u0140\u0141\u0003\u0002\u0002\u0002\u0141\u0153",
    "\u0003\u0002\u0002\u0002\u0142\u0143\u0007t\u0002\u0002\u0143\u0152",
    "\u0007\u00f2\u0002\u0002\u0144\u0145\u0007\u00d9\u0002\u0002\u0145\u0146",
    "\u0007\u0016\u0002\u0002\u0146\u0147\u0007\u0004\u0002\u0002\u0147\u0148",
    "\u0005\u00b0Y\u0002\u0148\u0149\u0007\u0005\u0002\u0002\u0149\u0152",
    "\u0003\u0002\u0002\u0002\u014a\u0152\u0005\u0016\f\u0002\u014b\u0152",
    "\u0005\u0018\r\u0002\u014c\u0152\u0005\u0086D\u0002\u014d\u0152\u0005",
    "<\u001f\u0002\u014e\u0152\u0005\u001a\u000e\u0002\u014f\u0150\u0007",
    "\u00bb\u0002\u0002\u0150\u0152\u00050\u0019\u0002\u0151\u0142\u0003",
    "\u0002\u0002\u0002\u0151\u0144\u0003\u0002\u0002\u0002\u0151\u014a\u0003",
    "\u0002\u0002\u0002\u0151\u014b\u0003\u0002\u0002\u0002\u0151\u014c\u0003",
    "\u0002\u0002\u0002\u0151\u014d\u0003\u0002\u0002\u0002\u0151\u014e\u0003",
    "\u0002\u0002\u0002\u0151\u014f\u0003\u0002\u0002\u0002\u0152\u0155\u0003",
    "\u0002\u0002\u0002\u0153\u0151\u0003\u0002\u0002\u0002\u0153\u0154\u0003",
    "\u0002\u0002\u0002\u0154\u015a\u0003\u0002\u0002\u0002\u0155\u0153\u0003",
    "\u0002\u0002\u0002\u0156\u0158\u0007\u0010\u0002\u0002\u0157\u0156\u0003",
    "\u0002\u0002\u0002\u0157\u0158\u0003\u0002\u0002\u0002\u0158\u0159\u0003",
    "\u0002\u0002\u0002\u0159\u015b\u0005\u001c\u000f\u0002\u015a\u0157\u0003",
    "\u0002\u0002\u0002\u015a\u015b\u0003\u0002\u0002\u0002\u015b\u0354\u0003",
    "\u0002\u0002\u0002\u015c\u015d\u0007Q\u0002\u0002\u015d\u0161\u0007",
    "R\u0002\u0002\u015e\u015f\u0007\u0081\u0002\u0002\u015f\u0160\u0007",
    "\"\u0002\u0002\u0160\u0162\u0007$\u0002\u0002\u0161\u015e\u0003\u0002",
    "\u0002\u0002\u0161\u0162\u0003\u0002\u0002\u0002\u0162\u0163\u0003\u0002",
    "\u0002\u0002\u0163\u0164\u0005\u008aF\u0002\u0164\u0165\u0007&\u0002",
    "\u0002\u0165\u0167\u0005\u008aF\u0002\u0166\u0168\u0005\u001a\u000e",
    "\u0002\u0167\u0166\u0003\u0002\u0002\u0002\u0167\u0168\u0003\u0002\u0002",
    "\u0002\u0168\u0354\u0003\u0002\u0002\u0002\u0169\u016a\u0007\u00d5\u0002",
    "\u0002\u016a\u016b\u0007R\u0002\u0002\u016b\u016d\u0005\u008aF\u0002",
    "\u016c\u016e\u0005\"\u0012\u0002\u016d\u016c\u0003\u0002\u0002\u0002",
    "\u016d\u016e\u0003\u0002\u0002\u0002\u016e\u016f\u0003\u0002\u0002\u0002",
    "\u016f\u0170\u0007\u00d6\u0002\u0002\u0170\u0175\u0007\u00d8\u0002\u0002",
    "\u0171\u0176\u0005\u00c6d\u0002\u0172\u0173\u0007/\u0002\u0002\u0173",
    "\u0174\u0007b\u0002\u0002\u0174\u0176\u0005t;\u0002\u0175\u0171\u0003",
    "\u0002\u0002\u0002\u0175\u0172\u0003\u0002\u0002\u0002\u0175\u0176\u0003",
    "\u0002\u0002\u0002\u0176\u0354\u0003\u0002\u0002\u0002\u0177\u0178\u0007",
    "o\u0002\u0002\u0178\u0179\u0007R\u0002\u0002\u0179\u017a\u0005\u008a",
    "F\u0002\u017a\u017b\u0007\u000f\u0002\u0002\u017b\u017c\u0007b\u0002",
    "\u0002\u017c\u017d\u0007\u0004\u0002\u0002\u017d\u017e\u0005\u00b0Y",
    "\u0002\u017e\u017f\u0007\u0005\u0002\u0002\u017f\u0354\u0003\u0002\u0002",
    "\u0002\u0180\u0181\u0007o\u0002\u0002\u0181\u0182\t\u0003\u0002\u0002",
    "\u0182\u0183\u0005\u008aF\u0002\u0183\u0184\u0007p\u0002\u0002\u0184",
    "\u0185\u0007l\u0002\u0002\u0185\u0186\u0005\u008aF\u0002\u0186\u0354",
    "\u0003\u0002\u0002\u0002\u0187\u0188\u0007o\u0002\u0002\u0188\u0189",
    "\t\u0003\u0002\u0002\u0189\u018a\u0005\u008aF\u0002\u018a\u018b\u0007",
    "u\u0002\u0002\u018b\u018c\u0007\u00bb\u0002\u0002\u018c\u018d\u0005",
    "0\u0019\u0002\u018d\u0354\u0003\u0002\u0002\u0002\u018e\u018f\u0007",
    "o\u0002\u0002\u018f\u0190\t\u0003\u0002\u0002\u0190\u0191\u0005\u008a",
    "F\u0002\u0191\u0192\u0007\u00ba\u0002\u0002\u0192\u0195\u0007\u00bb",
    "\u0002\u0002\u0193\u0194\u0007\u0081\u0002\u0002\u0194\u0196\u0007$",
    "\u0002\u0002\u0195\u0193\u0003\u0002\u0002\u0002\u0195\u0196\u0003\u0002",
    "\u0002\u0002\u0196\u0197\u0003\u0002\u0002\u0002\u0197\u0198\u00050",
    "\u0019\u0002\u0198\u0354\u0003\u0002\u0002\u0002\u0199\u019a\u0007o",
    "\u0002\u0002\u019a\u019b\u0007R\u0002\u0002\u019b\u019d\u0005\u008a",
    "F\u0002\u019c\u019e\u0005\"\u0012\u0002\u019d\u019c\u0003\u0002\u0002",
    "\u0002\u019d\u019e\u0003\u0002\u0002\u0002\u019e\u019f\u0003\u0002\u0002",
    "\u0002\u019f\u01a1\u0007\u00c9\u0002\u0002\u01a0\u01a2\u0007c\u0002",
    "\u0002\u01a1\u01a0\u0003\u0002\u0002\u0002\u01a1\u01a2\u0003\u0002\u0002",
    "\u0002\u01a2\u01a3\u0003\u0002\u0002\u0002\u01a3\u01a4\u0005\u00c6d",
    "\u0002\u01a4\u01a6\u0005\u00b2Z\u0002\u01a5\u01a7\u0005\u00acW\u0002",
    "\u01a6\u01a5\u0003\u0002\u0002\u0002\u01a6\u01a7\u0003\u0002\u0002\u0002",
    "\u01a7\u0354\u0003\u0002\u0002\u0002\u01a8\u01a9\u0007o\u0002\u0002",
    "\u01a9\u01aa\u0007R\u0002\u0002\u01aa\u01ac\u0005\u008aF\u0002\u01ab",
    "\u01ad\u0005\"\u0012\u0002\u01ac\u01ab\u0003\u0002\u0002\u0002\u01ac",
    "\u01ad\u0003\u0002\u0002\u0002\u01ad\u01ae\u0003\u0002\u0002\u0002\u01ae",
    "\u01af\u0007u\u0002\u0002\u01af\u01b0\u0007\u00a2\u0002\u0002\u01b0",
    "\u01b4\u0007\u00f2\u0002\u0002\u01b1\u01b2\u0007O\u0002\u0002\u01b2",
    "\u01b3\u0007\u00a3\u0002\u0002\u01b3\u01b5\u00050\u0019\u0002\u01b4",
    "\u01b1\u0003\u0002\u0002\u0002\u01b4\u01b5\u0003\u0002\u0002\u0002\u01b5",
    "\u0354\u0003\u0002\u0002\u0002\u01b6\u01b7\u0007o\u0002\u0002\u01b7",
    "\u01b8\u0007R\u0002\u0002\u01b8\u01ba\u0005\u008aF\u0002\u01b9\u01bb",
    "\u0005\"\u0012\u0002\u01ba\u01b9\u0003\u0002\u0002\u0002\u01ba\u01bb",
    "\u0003\u0002\u0002\u0002\u01bb\u01bc\u0003\u0002\u0002\u0002\u01bc\u01bd",
    "\u0007u\u0002\u0002\u01bd\u01be\u0007\u00a3\u0002\u0002\u01be\u01bf",
    "\u00050\u0019\u0002\u01bf\u0354\u0003\u0002\u0002\u0002\u01c0\u01c1",
    "\u0007o\u0002\u0002\u01c1\u01c2\u0007R\u0002\u0002\u01c2\u01c3\u0005",
    "\u008aF\u0002\u01c3\u01c7\u0007\u000f\u0002\u0002\u01c4\u01c5\u0007",
    "\u0081\u0002\u0002\u01c5\u01c6\u0007\"\u0002\u0002\u01c6\u01c8\u0007",
    "$\u0002\u0002\u01c7\u01c4\u0003\u0002\u0002\u0002\u01c7\u01c8\u0003",
    "\u0002\u0002\u0002\u01c8\u01ca\u0003\u0002\u0002\u0002\u01c9\u01cb\u0005",
    " \u0011\u0002\u01ca\u01c9\u0003\u0002\u0002\u0002\u01cb\u01cc\u0003",
    "\u0002\u0002\u0002\u01cc\u01ca\u0003\u0002\u0002\u0002\u01cc\u01cd\u0003",
    "\u0002\u0002\u0002\u01cd\u0354\u0003\u0002\u0002\u0002\u01ce\u01cf\u0007",
    "o\u0002\u0002\u01cf\u01d0\u0007T\u0002\u0002\u01d0\u01d1\u0005\u008a",
    "F\u0002\u01d1\u01d5\u0007\u000f\u0002\u0002\u01d2\u01d3\u0007\u0081",
    "\u0002\u0002\u01d3\u01d4\u0007\"\u0002\u0002\u01d4\u01d6\u0007$\u0002",
    "\u0002\u01d5\u01d2\u0003\u0002\u0002\u0002\u01d5\u01d6\u0003\u0002\u0002",
    "\u0002\u01d6\u01d8\u0003\u0002\u0002\u0002\u01d7\u01d9\u0005\"\u0012",
    "\u0002\u01d8\u01d7\u0003\u0002\u0002\u0002\u01d9\u01da\u0003\u0002\u0002",
    "\u0002\u01da\u01d8\u0003\u0002\u0002\u0002\u01da\u01db\u0003\u0002\u0002",
    "\u0002\u01db\u0354\u0003\u0002\u0002\u0002\u01dc\u01dd\u0007o\u0002",
    "\u0002\u01dd\u01de\u0007R\u0002\u0002\u01de\u01df\u0005\u008aF\u0002",
    "\u01df\u01e0\u0005\"\u0012\u0002\u01e0\u01e1\u0007p\u0002\u0002\u01e1",
    "\u01e2\u0007l\u0002\u0002\u01e2\u01e3\u0005\"\u0012\u0002\u01e3\u0354",
    "\u0003\u0002\u0002\u0002\u01e4\u01e5\u0007o\u0002\u0002\u01e5\u01e6",
    "\u0007R\u0002\u0002\u01e6\u01e7\u0005\u008aF\u0002\u01e7\u01ea\u0007",
    "g\u0002\u0002\u01e8\u01e9\u0007\u0081\u0002\u0002\u01e9\u01eb\u0007",
    "$\u0002\u0002\u01ea\u01e8\u0003\u0002\u0002\u0002\u01ea\u01eb\u0003",
    "\u0002\u0002\u0002\u01eb\u01ec\u0003\u0002\u0002\u0002\u01ec\u01f1\u0005",
    "\"\u0012\u0002\u01ed\u01ee\u0007\u0006\u0002\u0002\u01ee\u01f0\u0005",
    "\"\u0012\u0002\u01ef\u01ed\u0003\u0002\u0002\u0002\u01f0\u01f3\u0003",
    "\u0002\u0002\u0002\u01f1\u01ef\u0003\u0002\u0002\u0002\u01f1\u01f2\u0003",
    "\u0002\u0002\u0002\u01f2\u01f5\u0003\u0002\u0002\u0002\u01f3\u01f1\u0003",
    "\u0002\u0002\u0002\u01f4\u01f6\u0007\u00ce\u0002\u0002\u01f5\u01f4\u0003",
    "\u0002\u0002\u0002\u01f5\u01f6\u0003\u0002\u0002\u0002\u01f6\u0354\u0003",
    "\u0002\u0002\u0002\u01f7\u01f8\u0007o\u0002\u0002\u01f8\u01f9\u0007",
    "T\u0002\u0002\u01f9\u01fa\u0005\u008aF\u0002\u01fa\u01fd\u0007g\u0002",
    "\u0002\u01fb\u01fc\u0007\u0081\u0002\u0002\u01fc\u01fe\u0007$\u0002",
    "\u0002\u01fd\u01fb\u0003\u0002\u0002\u0002\u01fd\u01fe\u0003\u0002\u0002",
    "\u0002\u01fe\u01ff\u0003\u0002\u0002\u0002\u01ff\u0204\u0005\"\u0012",
    "\u0002\u0200\u0201\u0007\u0006\u0002\u0002\u0201\u0203\u0005\"\u0012",
    "\u0002\u0202\u0200\u0003\u0002\u0002\u0002\u0203\u0206\u0003\u0002\u0002",
    "\u0002\u0204\u0202\u0003\u0002\u0002\u0002\u0204\u0205\u0003\u0002\u0002",
    "\u0002\u0205\u0354\u0003\u0002\u0002\u0002\u0206\u0204\u0003\u0002\u0002",
    "\u0002\u0207\u0208\u0007o\u0002\u0002\u0208\u0209\u0007R\u0002\u0002",
    "\u0209\u020b\u0005\u008aF\u0002\u020a\u020c\u0005\"\u0012\u0002\u020b",
    "\u020a\u0003\u0002\u0002\u0002\u020b\u020c\u0003\u0002\u0002\u0002\u020c",
    "\u020d\u0003\u0002\u0002\u0002\u020d\u020e\u0007u\u0002\u0002\u020e",
    "\u020f\u0005\u001a\u000e\u0002\u020f\u0354\u0003\u0002\u0002\u0002\u0210",
    "\u0211\u0007o\u0002\u0002\u0211\u0212\u0007R\u0002\u0002\u0212\u0213",
    "\u0005\u008aF\u0002\u0213\u0214\u0007\u00e2\u0002\u0002\u0214\u0215",
    "\u0007e\u0002\u0002\u0215\u0354\u0003\u0002\u0002\u0002\u0216\u0217",
    "\u0007g\u0002\u0002\u0217\u021a\u0007R\u0002\u0002\u0218\u0219\u0007",
    "\u0081\u0002\u0002\u0219\u021b\u0007$\u0002\u0002\u021a\u0218\u0003",
    "\u0002\u0002\u0002\u021a\u021b\u0003\u0002\u0002\u0002\u021b\u021c\u0003",
    "\u0002\u0002\u0002\u021c\u021e\u0005\u008aF\u0002\u021d\u021f\u0007",
    "\u00ce\u0002\u0002\u021e\u021d\u0003\u0002\u0002\u0002\u021e\u021f\u0003",
    "\u0002\u0002\u0002\u021f\u0354\u0003\u0002\u0002\u0002\u0220\u0221\u0007",
    "g\u0002\u0002\u0221\u0224\u0007T\u0002\u0002\u0222\u0223\u0007\u0081",
    "\u0002\u0002\u0223\u0225\u0007$\u0002\u0002\u0224\u0222\u0003\u0002",
    "\u0002\u0002\u0224\u0225\u0003\u0002\u0002\u0002\u0225\u0226\u0003\u0002",
    "\u0002\u0002\u0226\u0354\u0005\u008aF\u0002\u0227\u022a\u0007Q\u0002",
    "\u0002\u0228\u0229\u0007\u001f\u0002\u0002\u0229\u022b\u0007U\u0002",
    "\u0002\u022a\u0228\u0003\u0002\u0002\u0002\u022a\u022b\u0003\u0002\u0002",
    "\u0002\u022b\u0230\u0003\u0002\u0002\u0002\u022c\u022e\u0007\u00b7\u0002",
    "\u0002\u022d\u022c\u0003\u0002\u0002\u0002\u022d\u022e\u0003\u0002\u0002",
    "\u0002\u022e\u022f\u0003\u0002\u0002\u0002\u022f\u0231\u0007\u00b8\u0002",
    "\u0002\u0230\u022d\u0003\u0002\u0002\u0002\u0230\u0231\u0003\u0002\u0002",
    "\u0002\u0231\u0232\u0003\u0002\u0002\u0002\u0232\u0236\u0007T\u0002",
    "\u0002\u0233\u0234\u0007\u0081\u0002\u0002\u0234\u0235\u0007\"\u0002",
    "\u0002\u0235\u0237\u0007$\u0002\u0002\u0236\u0233\u0003\u0002\u0002",
    "\u0002\u0236\u0237\u0003\u0002\u0002\u0002\u0237\u0238\u0003\u0002\u0002",
    "\u0002\u0238\u023a\u0005\u008aF\u0002\u0239\u023b\u0005z>\u0002\u023a",
    "\u0239\u0003\u0002\u0002\u0002\u023a\u023b\u0003\u0002\u0002\u0002\u023b",
    "\u023e\u0003\u0002\u0002\u0002\u023c\u023d\u0007t\u0002\u0002\u023d",
    "\u023f\u0007\u00f2\u0002\u0002\u023e\u023c\u0003\u0002\u0002\u0002\u023e",
    "\u023f\u0003\u0002\u0002\u0002\u023f\u0243\u0003\u0002\u0002\u0002\u0240",
    "\u0241\u0007\u00d9\u0002\u0002\u0241\u0242\u0007?\u0002\u0002\u0242",
    "\u0244\u0005r:\u0002\u0243\u0240\u0003\u0002\u0002\u0002\u0243\u0244",
    "\u0003\u0002\u0002\u0002\u0244\u0247\u0003\u0002\u0002\u0002\u0245\u0246",
    "\u0007\u00bb\u0002\u0002\u0246\u0248\u00050\u0019\u0002\u0247\u0245",
    "\u0003\u0002\u0002\u0002\u0247\u0248\u0003\u0002\u0002\u0002\u0248\u0249",
    "\u0003\u0002\u0002\u0002\u0249\u024a\u0007\u0010\u0002\u0002\u024a\u024b",
    "\u0005\u001c\u000f\u0002\u024b\u0354\u0003\u0002\u0002\u0002\u024c\u024f",
    "\u0007Q\u0002\u0002\u024d\u024e\u0007\u001f\u0002\u0002\u024e\u0250",
    "\u0007U\u0002\u0002\u024f\u024d\u0003\u0002\u0002\u0002\u024f\u0250",
    "\u0003\u0002\u0002\u0002\u0250\u0252\u0003\u0002\u0002\u0002\u0251\u0253",
    "\u0007\u00b7\u0002\u0002\u0252\u0251\u0003\u0002\u0002\u0002\u0252\u0253",
    "\u0003\u0002\u0002\u0002\u0253\u0254\u0003\u0002\u0002\u0002\u0254\u0255",
    "\u0007\u00b8\u0002\u0002\u0255\u0256\u0007T\u0002\u0002\u0256\u025b",
    "\u0005\u008aF\u0002\u0257\u0258\u0007\u0004\u0002\u0002\u0258\u0259",
    "\u0005\u00b0Y\u0002\u0259\u025a\u0007\u0005\u0002\u0002\u025a\u025c",
    "\u0003\u0002\u0002\u0002\u025b\u0257\u0003\u0002\u0002\u0002\u025b\u025c",
    "\u0003\u0002\u0002\u0002\u025c\u025d\u0003\u0002\u0002\u0002\u025d\u0260",
    "\u0005.\u0018\u0002\u025e\u025f\u0007\u00b9\u0002\u0002\u025f\u0261",
    "\u00050\u0019\u0002\u0260\u025e\u0003\u0002\u0002\u0002\u0260\u0261",
    "\u0003\u0002\u0002\u0002\u0261\u0354\u0003\u0002\u0002\u0002\u0262\u0263",
    "\u0007o\u0002\u0002\u0263\u0264\u0007T\u0002\u0002\u0264\u0266\u0005",
    "\u008aF\u0002\u0265\u0267\u0007\u0010\u0002\u0002\u0266\u0265\u0003",
    "\u0002\u0002\u0002\u0266\u0267\u0003\u0002\u0002\u0002\u0267\u0268\u0003",
    "\u0002\u0002\u0002\u0268\u0269\u0005\u001c\u000f\u0002\u0269\u0354\u0003",
    "\u0002\u0002\u0002\u026a\u026d\u0007Q\u0002\u0002\u026b\u026c\u0007",
    "\u001f\u0002\u0002\u026c\u026e\u0007U\u0002\u0002\u026d\u026b\u0003",
    "\u0002\u0002\u0002\u026d\u026e\u0003\u0002\u0002\u0002\u026e\u0270\u0003",
    "\u0002\u0002\u0002\u026f\u0271\u0007\u00b8\u0002\u0002\u0270\u026f\u0003",
    "\u0002\u0002\u0002\u0270\u0271\u0003\u0002\u0002\u0002\u0271\u0272\u0003",
    "\u0002\u0002\u0002\u0272\u0276\u0007\u00af\u0002\u0002\u0273\u0274\u0007",
    "\u0081\u0002\u0002\u0274\u0275\u0007\"\u0002\u0002\u0275\u0277\u0007",
    "$\u0002\u0002\u0276\u0273\u0003\u0002\u0002\u0002\u0276\u0277\u0003",
    "\u0002\u0002\u0002\u0277\u0278\u0003\u0002\u0002\u0002\u0278\u0279\u0005",
    "\u00c4c\u0002\u0279\u027a\u0007\u0010\u0002\u0002\u027a\u0284\u0007",
    "\u00f2\u0002\u0002\u027b\u027c\u0007\u00a1\u0002\u0002\u027c\u0281\u0005",
    "B\"\u0002\u027d\u027e\u0007\u0006\u0002\u0002\u027e\u0280\u0005B\"\u0002",
    "\u027f\u027d\u0003\u0002\u0002\u0002\u0280\u0283\u0003\u0002\u0002\u0002",
    "\u0281\u027f\u0003\u0002\u0002\u0002\u0281\u0282\u0003\u0002\u0002\u0002",
    "\u0282\u0285\u0003\u0002\u0002\u0002\u0283\u0281\u0003\u0002\u0002\u0002",
    "\u0284\u027b\u0003\u0002\u0002\u0002\u0284\u0285\u0003\u0002\u0002\u0002",
    "\u0285\u0354\u0003\u0002\u0002\u0002\u0286\u0288\u0007g\u0002\u0002",
    "\u0287\u0289\u0007\u00b8\u0002\u0002\u0288\u0287\u0003\u0002\u0002\u0002",
    "\u0288\u0289\u0003\u0002\u0002\u0002\u0289\u028a\u0003\u0002\u0002\u0002",
    "\u028a\u028d\u0007\u00af\u0002\u0002\u028b\u028c\u0007\u0081\u0002\u0002",
    "\u028c\u028e\u0007$\u0002\u0002\u028d\u028b\u0003\u0002\u0002\u0002",
    "\u028d\u028e\u0003\u0002\u0002\u0002\u028e\u028f\u0003\u0002\u0002\u0002",
    "\u028f\u0354\u0005\u00c4c\u0002\u0290\u0292\u0007Z\u0002\u0002\u0291",
    "\u0293\t\u0004\u0002\u0002\u0292\u0291\u0003\u0002\u0002\u0002\u0292",
    "\u0293\u0003\u0002\u0002\u0002\u0293\u0294\u0003\u0002\u0002\u0002\u0294",
    "\u0354\u0005\u0010\t\u0002\u0295\u0296\u0007`\u0002\u0002\u0296\u0299",
    "\u0007a\u0002\u0002\u0297\u0298\t\u0005\u0002\u0002\u0298\u029a\u0005",
    "\u00c6d\u0002\u0299\u0297\u0003\u0002\u0002\u0002\u0299\u029a\u0003",
    "\u0002\u0002\u0002\u029a\u029f\u0003\u0002\u0002\u0002\u029b\u029d\u0007",
    "&\u0002\u0002\u029c\u029b\u0003\u0002\u0002\u0002\u029c\u029d\u0003",
    "\u0002\u0002\u0002\u029d\u029e\u0003\u0002\u0002\u0002\u029e\u02a0\u0007",
    "\u00f2\u0002\u0002\u029f\u029c\u0003\u0002\u0002\u0002\u029f\u02a0\u0003",
    "\u0002\u0002\u0002\u02a0\u0354\u0003\u0002\u0002\u0002\u02a1\u02a2\u0007",
    "`\u0002\u0002\u02a2\u02a3\u0007R\u0002\u0002\u02a3\u02a6\u0007\u00b0",
    "\u0002\u0002\u02a4\u02a5\t\u0005\u0002\u0002\u02a5\u02a7\u0005\u00c6",
    "d\u0002\u02a6\u02a4\u0003\u0002\u0002\u0002\u02a6\u02a7\u0003\u0002",
    "\u0002\u0002\u02a7\u02a8\u0003\u0002\u0002\u0002\u02a8\u02a9\u0007&",
    "\u0002\u0002\u02a9\u02ab\u0007\u00f2\u0002\u0002\u02aa\u02ac\u0005\"",
    "\u0012\u0002\u02ab\u02aa\u0003\u0002\u0002\u0002\u02ab\u02ac\u0003\u0002",
    "\u0002\u0002\u02ac\u0354\u0003\u0002\u0002\u0002\u02ad\u02ae\u0007`",
    "\u0002\u0002\u02ae\u02b3\u0007\u00d2\u0002\u0002\u02af\u02b1\u0007&",
    "\u0002\u0002\u02b0\u02af\u0003\u0002\u0002\u0002\u02b0\u02b1\u0003\u0002",
    "\u0002\u0002\u02b1\u02b2\u0003\u0002\u0002\u0002\u02b2\u02b4\u0007\u00f2",
    "\u0002\u0002\u02b3\u02b0\u0003\u0002\u0002\u0002\u02b3\u02b4\u0003\u0002",
    "\u0002\u0002\u02b4\u0354\u0003\u0002\u0002\u0002\u02b5\u02b6\u0007`",
    "\u0002\u0002\u02b6\u02b7\u0007\u00bb\u0002\u0002\u02b7\u02bc\u0005\u008a",
    "F\u0002\u02b8\u02b9\u0007\u0004\u0002\u0002\u02b9\u02ba\u00054\u001b",
    "\u0002\u02ba\u02bb\u0007\u0005\u0002\u0002\u02bb\u02bd\u0003\u0002\u0002",
    "\u0002\u02bc\u02b8\u0003\u0002\u0002\u0002\u02bc\u02bd\u0003\u0002\u0002",
    "\u0002\u02bd\u0354\u0003\u0002\u0002\u0002\u02be\u02bf\u0007`\u0002",
    "\u0002\u02bf\u02c0\u0007b\u0002\u0002\u02c0\u02c1\t\u0005\u0002\u0002",
    "\u02c1\u02c4\u0005\u008aF\u0002\u02c2\u02c3\t\u0005\u0002\u0002\u02c3",
    "\u02c5\u0005\u00c6d\u0002\u02c4\u02c2\u0003\u0002\u0002\u0002\u02c4",
    "\u02c5\u0003\u0002\u0002\u0002\u02c5\u0354\u0003\u0002\u0002\u0002\u02c6",
    "\u02c7\u0007`\u0002\u0002\u02c7\u02c8\u0007e\u0002\u0002\u02c8\u02ca",
    "\u0005\u008aF\u0002\u02c9\u02cb\u0005\"\u0012\u0002\u02ca\u02c9\u0003",
    "\u0002\u0002\u0002\u02ca\u02cb\u0003\u0002\u0002\u0002\u02cb\u0354\u0003",
    "\u0002\u0002\u0002\u02cc\u02ce\u0007`\u0002\u0002\u02cd\u02cf\u0005",
    "\u00c6d\u0002\u02ce\u02cd\u0003\u0002\u0002\u0002\u02ce\u02cf\u0003",
    "\u0002\u0002\u0002\u02cf\u02d0\u0003\u0002\u0002\u0002\u02d0\u02d8\u0007",
    "f\u0002\u0002\u02d1\u02d3\u0007&\u0002\u0002\u02d2\u02d1\u0003\u0002",
    "\u0002\u0002\u02d2\u02d3\u0003\u0002\u0002\u0002\u02d3\u02d6\u0003\u0002",
    "\u0002\u0002\u02d4\u02d7\u0005\u00c4c\u0002\u02d5\u02d7\u0007\u00f2",
    "\u0002\u0002\u02d6\u02d4\u0003\u0002\u0002\u0002\u02d6\u02d5\u0003\u0002",
    "\u0002\u0002\u02d7\u02d9\u0003\u0002\u0002\u0002\u02d8\u02d2\u0003\u0002",
    "\u0002\u0002\u02d8\u02d9\u0003\u0002\u0002\u0002\u02d9\u0354\u0003\u0002",
    "\u0002\u0002\u02da\u02db\u0007`\u0002\u0002\u02db\u02dc\u0007Q\u0002",
    "\u0002\u02dc\u02dd\u0007R\u0002\u0002\u02dd\u0354\u0005\u008aF\u0002",
    "\u02de\u02df\t\u0006\u0002\u0002\u02df\u02e1\u0007\u00af\u0002\u0002",
    "\u02e0\u02e2\u0007\u00b0\u0002\u0002\u02e1\u02e0\u0003\u0002\u0002\u0002",
    "\u02e1\u02e2\u0003\u0002\u0002\u0002\u02e2\u02e3\u0003\u0002\u0002\u0002",
    "\u02e3\u0354\u0005&\u0014\u0002\u02e4\u02e5\t\u0006\u0002\u0002\u02e5",
    "\u02e7\u0007\u00d1\u0002\u0002\u02e6\u02e8\u0007\u00b0\u0002\u0002\u02e7",
    "\u02e6\u0003\u0002\u0002\u0002\u02e7\u02e8\u0003\u0002\u0002\u0002\u02e8",
    "\u02e9\u0003\u0002\u0002\u0002\u02e9\u0354\u0005\u00c6d\u0002\u02ea",
    "\u02ec\t\u0006\u0002\u0002\u02eb\u02ed\u0007R\u0002\u0002\u02ec\u02eb",
    "\u0003\u0002\u0002\u0002\u02ec\u02ed\u0003\u0002\u0002\u0002\u02ed\u02ef",
    "\u0003\u0002\u0002\u0002\u02ee\u02f0\t\u0007\u0002\u0002\u02ef\u02ee",
    "\u0003\u0002\u0002\u0002\u02ef\u02f0\u0003\u0002\u0002\u0002\u02f0\u02f1",
    "\u0003\u0002\u0002\u0002\u02f1\u02f3\u0005\u008aF\u0002\u02f2\u02f4",
    "\u0005\"\u0012\u0002\u02f3\u02f2\u0003\u0002\u0002\u0002\u02f3\u02f4",
    "\u0003\u0002\u0002\u0002\u02f4\u02f6\u0003\u0002\u0002\u0002\u02f5\u02f7",
    "\u0005(\u0015\u0002\u02f6\u02f5\u0003\u0002\u0002\u0002\u02f6\u02f7",
    "\u0003\u0002\u0002\u0002\u02f7\u0354\u0003\u0002\u0002\u0002\u02f8\u02f9",
    "\u0007\u00b1\u0002\u0002\u02f9\u02fa\u0007R\u0002\u0002\u02fa\u0354",
    "\u0005\u008aF\u0002\u02fb\u0303\u0007\u00b1\u0002\u0002\u02fc\u0304",
    "\u0007\u00f2\u0002\u0002\u02fd\u02ff\u000b\u0002\u0002\u0002\u02fe\u02fd",
    "\u0003\u0002\u0002\u0002\u02ff\u0302\u0003\u0002\u0002\u0002\u0300\u0301",
    "\u0003\u0002\u0002\u0002\u0300\u02fe\u0003\u0002\u0002\u0002\u0301\u0304",
    "\u0003\u0002\u0002\u0002\u0302\u0300\u0003\u0002\u0002\u0002\u0303\u02fc",
    "\u0003\u0002\u0002\u0002\u0303\u0300\u0003\u0002\u0002\u0002\u0304\u0354",
    "\u0003\u0002\u0002\u0002\u0305\u0307\u0007\u00b3\u0002\u0002\u0306\u0308",
    "\u0007\u00b5\u0002\u0002\u0307\u0306\u0003\u0002\u0002\u0002\u0307\u0308",
    "\u0003\u0002\u0002\u0002\u0308\u0309\u0003\u0002\u0002\u0002\u0309\u030a",
    "\u0007R\u0002\u0002\u030a\u030f\u0005\u008aF\u0002\u030b\u030d\u0007",
    "\u0010\u0002\u0002\u030c\u030b\u0003\u0002\u0002\u0002\u030c\u030d\u0003",
    "\u0002\u0002\u0002\u030d\u030e\u0003\u0002\u0002\u0002\u030e\u0310\u0005",
    "\u001c\u000f\u0002\u030f\u030c\u0003\u0002\u0002\u0002\u030f\u0310\u0003",
    "\u0002\u0002\u0002\u0310\u0354\u0003\u0002\u0002\u0002\u0311\u0312\u0007",
    "\u00b4\u0002\u0002\u0312\u0315\u0007R\u0002\u0002\u0313\u0314\u0007",
    "\u0081\u0002\u0002\u0314\u0316\u0007$\u0002\u0002\u0315\u0313\u0003",
    "\u0002\u0002\u0002\u0315\u0316\u0003\u0002\u0002\u0002\u0316\u0317\u0003",
    "\u0002\u0002\u0002\u0317\u0354\u0005\u008aF\u0002\u0318\u0319\u0007",
    "\u00b2\u0002\u0002\u0319\u0354\u0007\u00b3\u0002\u0002\u031a\u031b\u0007",
    "\u00e5\u0002\u0002\u031b\u031d\u0007w\u0002\u0002\u031c\u031e\u0007",
    "\u00f0\u0002\u0002\u031d\u031c\u0003\u0002\u0002\u0002\u031d\u031e\u0003",
    "\u0002\u0002\u0002\u031e\u031f\u0003\u0002\u0002\u0002\u031f\u0320\u0007",
    "\u00f1\u0002\u0002\u0320\u0322\u0007\u00f2\u0002\u0002\u0321\u0323\u0007",
    "\u009e\u0002\u0002\u0322\u0321\u0003\u0002\u0002\u0002\u0322\u0323\u0003",
    "\u0002\u0002\u0002\u0323\u0324\u0003\u0002\u0002\u0002\u0324\u0325\u0007",
    "X\u0002\u0002\u0325\u0326\u0007R\u0002\u0002\u0326\u0328\u0005\u008a",
    "F\u0002\u0327\u0329\u0005\"\u0012\u0002\u0328\u0327\u0003\u0002\u0002",
    "\u0002\u0328\u0329\u0003\u0002\u0002\u0002\u0329\u0354\u0003\u0002\u0002",
    "\u0002\u032a\u032b\u0007\u00d4\u0002\u0002\u032b\u032c\u0007R\u0002",
    "\u0002\u032c\u032e\u0005\u008aF\u0002\u032d\u032f\u0005\"\u0012\u0002",
    "\u032e\u032d\u0003\u0002\u0002\u0002\u032e\u032f\u0003\u0002\u0002\u0002",
    "\u032f\u0354\u0003\u0002\u0002\u0002\u0330\u0331\u0007\u00e0\u0002\u0002",
    "\u0331\u0332\u0007\u00e1\u0002\u0002\u0332\u0333\u0007R\u0002\u0002",
    "\u0333\u0354\u0005\u008aF\u0002\u0334\u0335\t\b\u0002\u0002\u0335\u0339",
    "\u0005\u00c6d\u0002\u0336\u0338\u000b\u0002\u0002\u0002\u0337\u0336",
    "\u0003\u0002\u0002\u0002\u0338\u033b\u0003\u0002\u0002\u0002\u0339\u033a",
    "\u0003\u0002\u0002\u0002\u0339\u0337\u0003\u0002\u0002\u0002\u033a\u0354",
    "\u0003\u0002\u0002\u0002\u033b\u0339\u0003\u0002\u0002\u0002\u033c\u033d",
    "\u0007u\u0002\u0002\u033d\u0341\u0007\u00e6\u0002\u0002\u033e\u0340",
    "\u000b\u0002\u0002\u0002\u033f\u033e\u0003\u0002\u0002\u0002\u0340\u0343",
    "\u0003\u0002\u0002\u0002\u0341\u0342\u0003\u0002\u0002\u0002\u0341\u033f",
    "\u0003\u0002\u0002\u0002\u0342\u0354\u0003\u0002\u0002\u0002\u0343\u0341",
    "\u0003\u0002\u0002\u0002\u0344\u0348\u0007u\u0002\u0002\u0345\u0347",
    "\u000b\u0002\u0002\u0002\u0346\u0345\u0003\u0002\u0002\u0002\u0347\u034a",
    "\u0003\u0002\u0002\u0002\u0348\u0349\u0003\u0002\u0002\u0002\u0348\u0346",
    "\u0003\u0002\u0002\u0002\u0349\u0354\u0003\u0002\u0002\u0002\u034a\u0348",
    "\u0003\u0002\u0002\u0002\u034b\u0354\u0007v\u0002\u0002\u034c\u0350",
    "\u0005\u0012\n\u0002\u034d\u034f\u000b\u0002\u0002\u0002\u034e\u034d",
    "\u0003\u0002\u0002\u0002\u034f\u0352\u0003\u0002\u0002\u0002\u0350\u0351",
    "\u0003\u0002\u0002\u0002\u0350\u034e\u0003\u0002\u0002\u0002\u0351\u0354",
    "\u0003\u0002\u0002\u0002\u0352\u0350\u0003\u0002\u0002\u0002\u0353\u00f5",
    "\u0003\u0002\u0002\u0002\u0353\u00f6\u0003\u0002\u0002\u0002\u0353\u00f8",
    "\u0003\u0002\u0002\u0002\u0353\u010c\u0003\u0002\u0002\u0002\u0353\u0113",
    "\u0003\u0002\u0002\u0002\u0353\u011d\u0003\u0002\u0002\u0002\u0353\u013b",
    "\u0003\u0002\u0002\u0002\u0353\u015c\u0003\u0002\u0002\u0002\u0353\u0169",
    "\u0003\u0002\u0002\u0002\u0353\u0177\u0003\u0002\u0002\u0002\u0353\u0180",
    "\u0003\u0002\u0002\u0002\u0353\u0187\u0003\u0002\u0002\u0002\u0353\u018e",
    "\u0003\u0002\u0002\u0002\u0353\u0199\u0003\u0002\u0002\u0002\u0353\u01a8",
    "\u0003\u0002\u0002\u0002\u0353\u01b6\u0003\u0002\u0002\u0002\u0353\u01c0",
    "\u0003\u0002\u0002\u0002\u0353\u01ce\u0003\u0002\u0002\u0002\u0353\u01dc",
    "\u0003\u0002\u0002\u0002\u0353\u01e4\u0003\u0002\u0002\u0002\u0353\u01f7",
    "\u0003\u0002\u0002\u0002\u0353\u0207\u0003\u0002\u0002\u0002\u0353\u0210",
    "\u0003\u0002\u0002\u0002\u0353\u0216\u0003\u0002\u0002\u0002\u0353\u0220",
    "\u0003\u0002\u0002\u0002\u0353\u0227\u0003\u0002\u0002\u0002\u0353\u024c",
    "\u0003\u0002\u0002\u0002\u0353\u0262\u0003\u0002\u0002\u0002\u0353\u026a",
    "\u0003\u0002\u0002\u0002\u0353\u0286\u0003\u0002\u0002\u0002\u0353\u0290",
    "\u0003\u0002\u0002\u0002\u0353\u0295\u0003\u0002\u0002\u0002\u0353\u02a1",
    "\u0003\u0002\u0002\u0002\u0353\u02ad\u0003\u0002\u0002\u0002\u0353\u02b5",
    "\u0003\u0002\u0002\u0002\u0353\u02be\u0003\u0002\u0002\u0002\u0353\u02c6",
    "\u0003\u0002\u0002\u0002\u0353\u02cc\u0003\u0002\u0002\u0002\u0353\u02da",
    "\u0003\u0002\u0002\u0002\u0353\u02de\u0003\u0002\u0002\u0002\u0353\u02e4",
    "\u0003\u0002\u0002\u0002\u0353\u02ea\u0003\u0002\u0002\u0002\u0353\u02f8",
    "\u0003\u0002\u0002\u0002\u0353\u02fb\u0003\u0002\u0002\u0002\u0353\u0305",
    "\u0003\u0002\u0002\u0002\u0353\u0311\u0003\u0002\u0002\u0002\u0353\u0318",
    "\u0003\u0002\u0002\u0002\u0353\u031a\u0003\u0002\u0002\u0002\u0353\u032a",
    "\u0003\u0002\u0002\u0002\u0353\u0330\u0003\u0002\u0002\u0002\u0353\u0334",
    "\u0003\u0002\u0002\u0002\u0353\u033c\u0003\u0002\u0002\u0002\u0353\u0344",
    "\u0003\u0002\u0002\u0002\u0353\u034b\u0003\u0002\u0002\u0002\u0353\u034c",
    "\u0003\u0002\u0002\u0002\u0354\u0011\u0003\u0002\u0002\u0002\u0355\u0356",
    "\u0007Q\u0002\u0002\u0356\u0400\u0007\u00e6\u0002\u0002\u0357\u0358",
    "\u0007g\u0002\u0002\u0358\u0400\u0007\u00e6\u0002\u0002\u0359\u035b",
    "\u0007\u00dd\u0002\u0002\u035a\u035c\u0007\u00e6\u0002\u0002\u035b\u035a",
    "\u0003\u0002\u0002\u0002\u035b\u035c\u0003\u0002\u0002\u0002\u035c\u0400",
    "\u0003\u0002\u0002\u0002\u035d\u035f\u0007\u00dc\u0002\u0002\u035e\u0360",
    "\u0007\u00e6\u0002\u0002\u035f\u035e\u0003\u0002\u0002\u0002\u035f\u0360",
    "\u0003\u0002\u0002\u0002\u0360\u0400\u0003\u0002\u0002\u0002\u0361\u0362",
    "\u0007`\u0002\u0002\u0362\u0400\u0007\u00dd\u0002\u0002\u0363\u0364",
    "\u0007`\u0002\u0002\u0364\u0366\u0007\u00e6\u0002\u0002\u0365\u0367",
    "\u0007\u00dd\u0002\u0002\u0366\u0365\u0003\u0002\u0002\u0002\u0366\u0367",
    "\u0003\u0002\u0002\u0002\u0367\u0400\u0003\u0002\u0002\u0002\u0368\u0369",
    "\u0007`\u0002\u0002\u0369\u0400\u0007\u00e9\u0002\u0002\u036a\u036b",
    "\u0007`\u0002\u0002\u036b\u0400\u0007\u00e7\u0002\u0002\u036c\u036d",
    "\u0007`\u0002\u0002\u036d\u036e\u0007J\u0002\u0002\u036e\u0400\u0007",
    "\u00e7\u0002\u0002\u036f\u0370\u0007\u00e3\u0002\u0002\u0370\u0400\u0007",
    "R\u0002\u0002\u0371\u0372\u0007\u00e4\u0002\u0002\u0372\u0400\u0007",
    "R\u0002\u0002\u0373\u0374\u0007`\u0002\u0002\u0374\u0400\u0007\u00e8",
    "\u0002\u0002\u0375\u0376\u0007`\u0002\u0002\u0376\u0377\u0007Q\u0002",
    "\u0002\u0377\u0400\u0007R\u0002\u0002\u0378\u0379\u0007`\u0002\u0002",
    "\u0379\u0400\u0007\u00ea\u0002\u0002\u037a\u037b\u0007`\u0002\u0002",
    "\u037b\u0400\u0007\u00ec\u0002\u0002\u037c\u037d\u0007`\u0002\u0002",
    "\u037d\u0400\u0007\u00ed\u0002\u0002\u037e\u037f\u0007Q\u0002\u0002",
    "\u037f\u0400\u0007\u00eb\u0002\u0002\u0380\u0381\u0007g\u0002\u0002",
    "\u0381\u0400\u0007\u00eb\u0002\u0002\u0382\u0383\u0007o\u0002\u0002",
    "\u0383\u0400\u0007\u00eb\u0002\u0002\u0384\u0385\u0007\u00de\u0002\u0002",
    "\u0385\u0400\u0007R\u0002\u0002\u0386\u0387\u0007\u00de\u0002\u0002",
    "\u0387\u0400\u0007\u00d1\u0002\u0002\u0388\u0389\u0007\u00df\u0002\u0002",
    "\u0389\u0400\u0007R\u0002\u0002\u038a\u038b\u0007\u00df\u0002\u0002",
    "\u038b\u0400\u0007\u00d1\u0002\u0002\u038c\u038d\u0007Q\u0002\u0002",
    "\u038d\u038e\u0007\u00b8\u0002\u0002\u038e\u0400\u0007|\u0002\u0002",
    "\u038f\u0390\u0007g\u0002\u0002\u0390\u0391\u0007\u00b8\u0002\u0002",
    "\u0391\u0400\u0007|\u0002\u0002\u0392\u0393\u0007o\u0002\u0002\u0393",
    "\u0394\u0007R\u0002\u0002\u0394\u0395\u0005\u008aF\u0002\u0395\u0396",
    "\u0007\"\u0002\u0002\u0396\u0397\u0007\u00cc\u0002\u0002\u0397\u0400",
    "\u0003\u0002\u0002\u0002\u0398\u0399\u0007o\u0002\u0002\u0399\u039a",
    "\u0007R\u0002\u0002\u039a\u039b\u0005\u008aF\u0002\u039b\u039c\u0007",
    "\u00cc\u0002\u0002\u039c\u039d\u0007\u0016\u0002\u0002\u039d\u0400\u0003",
    "\u0002\u0002\u0002\u039e\u039f\u0007o\u0002\u0002\u039f\u03a0\u0007",
    "R\u0002\u0002\u03a0\u03a1\u0005\u008aF\u0002\u03a1\u03a2\u0007\"\u0002",
    "\u0002\u03a2\u03a3\u0007\u00cd\u0002\u0002\u03a3\u0400\u0003\u0002\u0002",
    "\u0002\u03a4\u03a5\u0007o\u0002\u0002\u03a5\u03a6\u0007R\u0002\u0002",
    "\u03a6\u03a7\u0005\u008aF\u0002\u03a7\u03a8\u0007\u00be\u0002\u0002",
    "\u03a8\u03a9\u0007\u0016\u0002\u0002\u03a9\u0400\u0003\u0002\u0002\u0002",
    "\u03aa\u03ab\u0007o\u0002\u0002\u03ab\u03ac\u0007R\u0002\u0002\u03ac",
    "\u03ad\u0005\u008aF\u0002\u03ad\u03ae\u0007\"\u0002\u0002\u03ae\u03af",
    "\u0007\u00be\u0002\u0002\u03af\u0400\u0003\u0002\u0002\u0002\u03b0\u03b1",
    "\u0007o\u0002\u0002\u03b1\u03b2\u0007R\u0002\u0002\u03b2\u03b3\u0005",
    "\u008aF\u0002\u03b3\u03b4\u0007\"\u0002\u0002\u03b4\u03b5\u0007\u00bf",
    "\u0002\u0002\u03b5\u03b6\u0007\u0010\u0002\u0002\u03b6\u03b7\u0007\u00c0",
    "\u0002\u0002\u03b7\u0400\u0003\u0002\u0002\u0002\u03b8\u03b9\u0007o",
    "\u0002\u0002\u03b9\u03ba\u0007R\u0002\u0002\u03ba\u03bb\u0005\u008a",
    "F\u0002\u03bb\u03bc\u0007u\u0002\u0002\u03bc\u03bd\u0007\u00be\u0002",
    "\u0002\u03bd\u03be\u0007\u00c1\u0002\u0002\u03be\u0400\u0003\u0002\u0002",
    "\u0002\u03bf\u03c0\u0007o\u0002\u0002\u03c0\u03c1\u0007R\u0002\u0002",
    "\u03c1\u03c2\u0005\u008aF\u0002\u03c2\u03c3\u0007\u00c2\u0002\u0002",
    "\u03c3\u03c4\u0007D\u0002\u0002\u03c4\u0400\u0003\u0002\u0002\u0002",
    "\u03c5\u03c6\u0007o\u0002\u0002\u03c6\u03c7\u0007R\u0002\u0002\u03c7",
    "\u03c8\u0005\u008aF\u0002\u03c8\u03c9\u0007\u00c3\u0002\u0002\u03c9",
    "\u03ca\u0007D\u0002\u0002\u03ca\u0400\u0003\u0002\u0002\u0002\u03cb",
    "\u03cc\u0007o\u0002\u0002\u03cc\u03cd\u0007R\u0002\u0002\u03cd\u03ce",
    "\u0005\u008aF\u0002\u03ce\u03cf\u0007\u00c4\u0002\u0002\u03cf\u03d0",
    "\u0007D\u0002\u0002\u03d0\u0400\u0003\u0002\u0002\u0002\u03d1\u03d2",
    "\u0007o\u0002\u0002\u03d2\u03d3\u0007R\u0002\u0002\u03d3\u03d4\u0005",
    "\u008aF\u0002\u03d4\u03d5\u0007\u00c6\u0002\u0002\u03d5\u0400\u0003",
    "\u0002\u0002\u0002\u03d6\u03d7\u0007o\u0002\u0002\u03d7\u03d8\u0007",
    "R\u0002\u0002\u03d8\u03da\u0005\u008aF\u0002\u03d9\u03db\u0005\"\u0012",
    "\u0002\u03da\u03d9\u0003\u0002\u0002\u0002\u03da\u03db\u0003\u0002\u0002",
    "\u0002\u03db\u03dc\u0003\u0002\u0002\u0002\u03dc\u03dd\u0007\u00c7\u0002",
    "\u0002\u03dd\u0400\u0003\u0002\u0002\u0002\u03de\u03df\u0007o\u0002",
    "\u0002\u03df\u03e0\u0007R\u0002\u0002\u03e0\u03e2\u0005\u008aF\u0002",
    "\u03e1\u03e3\u0005\"\u0012\u0002\u03e2\u03e1\u0003\u0002\u0002\u0002",
    "\u03e2\u03e3\u0003\u0002\u0002\u0002\u03e3\u03e4\u0003\u0002\u0002\u0002",
    "\u03e4\u03e5\u0007\u00c8\u0002\u0002\u03e5\u0400\u0003\u0002\u0002\u0002",
    "\u03e6\u03e7\u0007o\u0002\u0002\u03e7\u03e8\u0007R\u0002\u0002\u03e8",
    "\u03ea\u0005\u008aF\u0002\u03e9\u03eb\u0005\"\u0012\u0002\u03ea\u03e9",
    "\u0003\u0002\u0002\u0002\u03ea\u03eb\u0003\u0002\u0002\u0002\u03eb\u03ec",
    "\u0003\u0002\u0002\u0002\u03ec\u03ed\u0007u\u0002\u0002\u03ed\u03ee",
    "\u0007\u00c5\u0002\u0002\u03ee\u0400\u0003\u0002\u0002\u0002\u03ef\u03f0",
    "\u0007o\u0002\u0002\u03f0\u03f1\u0007R\u0002\u0002\u03f1\u03f3\u0005",
    "\u008aF\u0002\u03f2\u03f4\u0005\"\u0012\u0002\u03f3\u03f2\u0003\u0002",
    "\u0002\u0002\u03f3\u03f4\u0003\u0002\u0002\u0002\u03f4\u03f5\u0003\u0002",
    "\u0002\u0002\u03f5\u03f6\u0007U\u0002\u0002\u03f6\u03f7\u0007b\u0002",
    "\u0002\u03f7\u0400\u0003\u0002\u0002\u0002\u03f8\u03f9\u0007x\u0002",
    "\u0002\u03f9\u0400\u0007y\u0002\u0002\u03fa\u0400\u0007z\u0002\u0002",
    "\u03fb\u0400\u0007{\u0002\u0002\u03fc\u0400\u0007\u00d3\u0002\u0002",
    "\u03fd\u03fe\u0007W\u0002\u0002\u03fe\u0400\u0007\u000e\u0002\u0002",
    "\u03ff\u0355\u0003\u0002\u0002\u0002\u03ff\u0357\u0003\u0002\u0002\u0002",
    "\u03ff\u0359\u0003\u0002\u0002\u0002\u03ff\u035d\u0003\u0002\u0002\u0002",
    "\u03ff\u0361\u0003\u0002\u0002\u0002\u03ff\u0363\u0003\u0002\u0002\u0002",
    "\u03ff\u0368\u0003\u0002\u0002\u0002\u03ff\u036a\u0003\u0002\u0002\u0002",
    "\u03ff\u036c\u0003\u0002\u0002\u0002\u03ff\u036f\u0003\u0002\u0002\u0002",
    "\u03ff\u0371\u0003\u0002\u0002\u0002\u03ff\u0373\u0003\u0002\u0002\u0002",
    "\u03ff\u0375\u0003\u0002\u0002\u0002\u03ff\u0378\u0003\u0002\u0002\u0002",
    "\u03ff\u037a\u0003\u0002\u0002\u0002\u03ff\u037c\u0003\u0002\u0002\u0002",
    "\u03ff\u037e\u0003\u0002\u0002\u0002\u03ff\u0380\u0003\u0002\u0002\u0002",
    "\u03ff\u0382\u0003\u0002\u0002\u0002\u03ff\u0384\u0003\u0002\u0002\u0002",
    "\u03ff\u0386\u0003\u0002\u0002\u0002\u03ff\u0388\u0003\u0002\u0002\u0002",
    "\u03ff\u038a\u0003\u0002\u0002\u0002\u03ff\u038c\u0003\u0002\u0002\u0002",
    "\u03ff\u038f\u0003\u0002\u0002\u0002\u03ff\u0392\u0003\u0002\u0002\u0002",
    "\u03ff\u0398\u0003\u0002\u0002\u0002\u03ff\u039e\u0003\u0002\u0002\u0002",
    "\u03ff\u03a4\u0003\u0002\u0002\u0002\u03ff\u03aa\u0003\u0002\u0002\u0002",
    "\u03ff\u03b0\u0003\u0002\u0002\u0002\u03ff\u03b8\u0003\u0002\u0002\u0002",
    "\u03ff\u03bf\u0003\u0002\u0002\u0002\u03ff\u03c5\u0003\u0002\u0002\u0002",
    "\u03ff\u03cb\u0003\u0002\u0002\u0002\u03ff\u03d1\u0003\u0002\u0002\u0002",
    "\u03ff\u03d6\u0003\u0002\u0002\u0002\u03ff\u03de\u0003\u0002\u0002\u0002",
    "\u03ff\u03e6\u0003\u0002\u0002\u0002\u03ff\u03ef\u0003\u0002\u0002\u0002",
    "\u03ff\u03f8\u0003\u0002\u0002\u0002\u03ff\u03fa\u0003\u0002\u0002\u0002",
    "\u03ff\u03fb\u0003\u0002\u0002\u0002\u03ff\u03fc\u0003\u0002\u0002\u0002",
    "\u03ff\u03fd\u0003\u0002\u0002\u0002\u0400\u0013\u0003\u0002\u0002\u0002",
    "\u0401\u0403\u0007Q\u0002\u0002\u0402\u0404\u0007\u00b8\u0002\u0002",
    "\u0403\u0402\u0003\u0002\u0002\u0002\u0403\u0404\u0003\u0002\u0002\u0002",
    "\u0404\u0406\u0003\u0002\u0002\u0002\u0405\u0407\u0007\u00da\u0002\u0002",
    "\u0406\u0405\u0003\u0002\u0002\u0002\u0406\u0407\u0003\u0002\u0002\u0002",
    "\u0407\u0408\u0003\u0002\u0002\u0002\u0408\u040c\u0007R\u0002\u0002",
    "\u0409\u040a\u0007\u0081\u0002\u0002\u040a\u040b\u0007\"\u0002\u0002",
    "\u040b\u040d\u0007$\u0002\u0002\u040c\u0409\u0003\u0002\u0002\u0002",
    "\u040c\u040d\u0003\u0002\u0002\u0002\u040d\u040e\u0003\u0002\u0002\u0002",
    "\u040e\u040f\u0005\u008aF\u0002\u040f\u0015\u0003\u0002\u0002\u0002",
    "\u0410\u0411\u0007\u00cc\u0002\u0002\u0411\u0412\u0007\u0016\u0002\u0002",
    "\u0412\u0416\u0005r:\u0002\u0413\u0414\u0007\u00cd\u0002\u0002\u0414",
    "\u0415\u0007\u0016\u0002\u0002\u0415\u0417\u0005v<\u0002\u0416\u0413",
    "\u0003\u0002\u0002\u0002\u0416\u0417\u0003\u0002\u0002\u0002\u0417\u0418",
    "\u0003\u0002\u0002\u0002\u0418\u0419\u0007X\u0002\u0002\u0419\u041a",
    "\u0007\u00f6\u0002\u0002\u041a\u041b\u0007\u00bd\u0002\u0002\u041b\u0017",
    "\u0003\u0002\u0002\u0002\u041c\u041d\u0007\u00be\u0002\u0002\u041d\u041e",
    "\u0007\u0016\u0002\u0002\u041e\u041f\u0005r:\u0002\u041f\u0422\u0007",
    "?\u0002\u0002\u0420\u0423\u00058\u001d\u0002\u0421\u0423\u0005:\u001e",
    "\u0002\u0422\u0420\u0003\u0002\u0002\u0002\u0422\u0421\u0003\u0002\u0002",
    "\u0002\u0423\u0427\u0003\u0002\u0002\u0002\u0424\u0425\u0007\u00bf\u0002",
    "\u0002\u0425\u0426\u0007\u0010\u0002\u0002\u0426\u0428\u0007\u00c0\u0002",
    "\u0002\u0427\u0424\u0003\u0002\u0002\u0002\u0427\u0428\u0003\u0002\u0002",
    "\u0002\u0428\u0019\u0003\u0002\u0002\u0002\u0429\u042a\u0007\u00c1\u0002",
    "\u0002\u042a\u042b\u0007\u00f2\u0002\u0002\u042b\u001b\u0003\u0002\u0002",
    "\u0002\u042c\u042e\u0005*\u0016\u0002\u042d\u042c\u0003\u0002\u0002",
    "\u0002\u042d\u042e\u0003\u0002\u0002\u0002\u042e\u042f\u0003\u0002\u0002",
    "\u0002\u042f\u0430\u0005D#\u0002\u0430\u001d\u0003\u0002\u0002\u0002",
    "\u0431\u0432\u0007V\u0002\u0002\u0432\u0433\u0007\u009e\u0002\u0002",
    "\u0433\u0434\u0007R\u0002\u0002\u0434\u043b\u0005\u008aF\u0002\u0435",
    "\u0439\u0005\"\u0012\u0002\u0436\u0437\u0007\u0081\u0002\u0002\u0437",
    "\u0438\u0007\"\u0002\u0002\u0438\u043a\u0007$\u0002\u0002\u0439\u0436",
    "\u0003\u0002\u0002\u0002\u0439\u043a\u0003\u0002\u0002\u0002\u043a\u043c",
    "\u0003\u0002\u0002\u0002\u043b\u0435\u0003\u0002\u0002\u0002\u043b\u043c",
    "\u0003\u0002\u0002\u0002\u043c\u0462\u0003\u0002\u0002\u0002\u043d\u043e",
    "\u0007V\u0002\u0002\u043e\u0440\u0007X\u0002\u0002\u043f\u0441\u0007",
    "R\u0002\u0002\u0440\u043f\u0003\u0002\u0002\u0002\u0440\u0441\u0003",
    "\u0002\u0002\u0002\u0441\u0442\u0003\u0002\u0002\u0002\u0442\u0444\u0005",
    "\u008aF\u0002\u0443\u0445\u0005\"\u0012\u0002\u0444\u0443\u0003\u0002",
    "\u0002\u0002\u0444\u0445\u0003\u0002\u0002\u0002\u0445\u0462\u0003\u0002",
    "\u0002\u0002\u0446\u0447\u0007V\u0002\u0002\u0447\u0449\u0007\u009e",
    "\u0002\u0002\u0448\u044a\u0007\u00f0\u0002\u0002\u0449\u0448\u0003\u0002",
    "\u0002\u0002\u0449\u044a\u0003\u0002\u0002\u0002\u044a\u044b\u0003\u0002",
    "\u0002\u0002\u044b\u044c\u0007S\u0002\u0002\u044c\u044e\u0007\u00f2",
    "\u0002\u0002\u044d\u044f\u0005\u0086D\u0002\u044e\u044d\u0003\u0002",
    "\u0002\u0002\u044e\u044f\u0003\u0002\u0002\u0002\u044f\u0451\u0003\u0002",
    "\u0002\u0002\u0450\u0452\u0005<\u001f\u0002\u0451\u0450\u0003\u0002",
    "\u0002\u0002\u0451\u0452\u0003\u0002\u0002\u0002\u0452\u0462\u0003\u0002",
    "\u0002\u0002\u0453\u0454\u0007V\u0002\u0002\u0454\u0456\u0007\u009e",
    "\u0002\u0002\u0455\u0457\u0007\u00f0\u0002\u0002\u0456\u0455\u0003\u0002",
    "\u0002\u0002\u0456\u0457\u0003\u0002\u0002\u0002\u0457\u0458\u0003\u0002",
    "\u0002\u0002\u0458\u045a\u0007S\u0002\u0002\u0459\u045b\u0007\u00f2",
    "\u0002\u0002\u045a\u0459\u0003\u0002\u0002\u0002\u045a\u045b\u0003\u0002",
    "\u0002\u0002\u045b\u045c\u0003\u0002\u0002\u0002\u045c\u045f\u0005.",
    "\u0018\u0002\u045d\u045e\u0007\u00b9\u0002\u0002\u045e\u0460\u00050",
    "\u0019\u0002\u045f\u045d\u0003\u0002\u0002\u0002\u045f\u0460\u0003\u0002",
    "\u0002\u0002\u0460\u0462\u0003\u0002\u0002\u0002\u0461\u0431\u0003\u0002",
    "\u0002\u0002\u0461\u043d\u0003\u0002\u0002\u0002\u0461\u0446\u0003\u0002",
    "\u0002\u0002\u0461\u0453\u0003\u0002\u0002\u0002\u0462\u001f\u0003\u0002",
    "\u0002\u0002\u0463\u0465\u0005\"\u0012\u0002\u0464\u0466\u0005\u001a",
    "\u000e\u0002\u0465\u0464\u0003\u0002\u0002\u0002\u0465\u0466\u0003\u0002",
    "\u0002\u0002\u0466!\u0003\u0002\u0002\u0002\u0467\u0468\u0007D\u0002",
    "\u0002\u0468\u0469\u0007\u0004\u0002\u0002\u0469\u046e\u0005$\u0013",
    "\u0002\u046a\u046b\u0007\u0006\u0002\u0002\u046b\u046d\u0005$\u0013",
    "\u0002\u046c\u046a\u0003\u0002\u0002\u0002\u046d\u0470\u0003\u0002\u0002",
    "\u0002\u046e\u046c\u0003\u0002\u0002\u0002\u046e\u046f\u0003\u0002\u0002",
    "\u0002\u046f\u0471\u0003\u0002\u0002\u0002\u0470\u046e\u0003\u0002\u0002",
    "\u0002\u0471\u0472\u0007\u0005\u0002\u0002\u0472#\u0003\u0002\u0002",
    "\u0002\u0473\u0476\u0005\u00c6d\u0002\u0474\u0475\u0007\u0084\u0002",
    "\u0002\u0475\u0477\u0005\u009cO\u0002\u0476\u0474\u0003\u0002\u0002",
    "\u0002\u0476\u0477\u0003\u0002\u0002\u0002\u0477%\u0003\u0002\u0002",
    "\u0002\u0478\u047e\u0005\u00c4c\u0002\u0479\u047e\u0007\u00f2\u0002",
    "\u0002\u047a\u047e\u0005\u009eP\u0002\u047b\u047e\u0005\u00a0Q\u0002",
    "\u047c\u047e\u0005\u00a2R\u0002\u047d\u0478\u0003\u0002\u0002\u0002",
    "\u047d\u0479\u0003\u0002\u0002\u0002\u047d\u047a\u0003\u0002\u0002\u0002",
    "\u047d\u047b\u0003\u0002\u0002\u0002\u047d\u047c\u0003\u0002\u0002\u0002",
    "\u047e\'\u0003\u0002\u0002\u0002\u047f\u0484\u0005\u00c6d\u0002\u0480",
    "\u0481\u0007\u0007\u0002\u0002\u0481\u0483\u0005\u00c6d\u0002\u0482",
    "\u0480\u0003\u0002\u0002\u0002\u0483\u0486\u0003\u0002\u0002\u0002\u0484",
    "\u0482\u0003\u0002\u0002\u0002\u0484\u0485\u0003\u0002\u0002\u0002\u0485",
    ")\u0003\u0002\u0002\u0002\u0486\u0484\u0003\u0002\u0002\u0002\u0487",
    "\u0488\u0007O\u0002\u0002\u0488\u048d\u0005,\u0017\u0002\u0489\u048a",
    "\u0007\u0006\u0002\u0002\u048a\u048c\u0005,\u0017\u0002\u048b\u0489",
    "\u0003\u0002\u0002\u0002\u048c\u048f\u0003\u0002\u0002\u0002\u048d\u048b",
    "\u0003\u0002\u0002\u0002\u048d\u048e\u0003\u0002\u0002\u0002\u048e+",
    "\u0003\u0002\u0002\u0002\u048f\u048d\u0003\u0002\u0002\u0002\u0490\u0492",
    "\u0005\u00c6d\u0002\u0491\u0493\u0007\u0010\u0002\u0002\u0492\u0491",
    "\u0003\u0002\u0002\u0002\u0492\u0493\u0003\u0002\u0002\u0002\u0493\u0494",
    "\u0003\u0002\u0002\u0002\u0494\u0495\u0007\u0004\u0002\u0002\u0495\u0496",
    "\u0005\u001c\u000f\u0002\u0496\u0497\u0007\u0005\u0002\u0002\u0497-",
    "\u0003\u0002\u0002\u0002\u0498\u0499\u0007\u00a1\u0002\u0002\u0499\u049a",
    "\u0005\u00c4c\u0002\u049a/\u0003\u0002\u0002\u0002\u049b\u049c\u0007",
    "\u0004\u0002\u0002\u049c\u04a1\u00052\u001a\u0002\u049d\u049e\u0007",
    "\u0006\u0002\u0002\u049e\u04a0\u00052\u001a\u0002\u049f\u049d\u0003",
    "\u0002\u0002\u0002\u04a0\u04a3\u0003\u0002\u0002\u0002\u04a1\u049f\u0003",
    "\u0002\u0002\u0002\u04a1\u04a2\u0003\u0002\u0002\u0002\u04a2\u04a4\u0003",
    "\u0002\u0002\u0002\u04a3\u04a1\u0003\u0002\u0002\u0002\u04a4\u04a5\u0007",
    "\u0005\u0002\u0002\u04a51\u0003\u0002\u0002\u0002\u04a6\u04ab\u0005",
    "4\u001b\u0002\u04a7\u04a9\u0007\u0084\u0002\u0002\u04a8\u04a7\u0003",
    "\u0002\u0002\u0002\u04a8\u04a9\u0003\u0002\u0002\u0002\u04a9\u04aa\u0003",
    "\u0002\u0002\u0002\u04aa\u04ac\u00056\u001c\u0002\u04ab\u04a8\u0003",
    "\u0002\u0002\u0002\u04ab\u04ac\u0003\u0002\u0002\u0002\u04ac3\u0003",
    "\u0002\u0002\u0002\u04ad\u04b2\u0005\u00c6d\u0002\u04ae\u04af\u0007",
    "\u0007\u0002\u0002\u04af\u04b1\u0005\u00c6d\u0002\u04b0\u04ae\u0003",
    "\u0002\u0002\u0002\u04b1\u04b4\u0003\u0002\u0002\u0002\u04b2\u04b0\u0003",
    "\u0002\u0002\u0002\u04b2\u04b3\u0003\u0002\u0002\u0002\u04b3\u04b7\u0003",
    "\u0002\u0002\u0002\u04b4\u04b2\u0003\u0002\u0002\u0002\u04b5\u04b7\u0007",
    "\u00f2\u0002\u0002\u04b6\u04ad\u0003\u0002\u0002\u0002\u04b6\u04b5\u0003",
    "\u0002\u0002\u0002\u04b75\u0003\u0002\u0002\u0002\u04b8\u04bd\u0007",
    "\u00f6\u0002\u0002\u04b9\u04bd\u0007\u00f7\u0002\u0002\u04ba\u04bd\u0005",
    "\u00a4S\u0002\u04bb\u04bd\u0007\u00f2\u0002\u0002\u04bc\u04b8\u0003",
    "\u0002\u0002\u0002\u04bc\u04b9\u0003\u0002\u0002\u0002\u04bc\u04ba\u0003",
    "\u0002\u0002\u0002\u04bc\u04bb\u0003\u0002\u0002\u0002\u04bd7\u0003",
    "\u0002\u0002\u0002\u04be\u04bf\u0007\u0004\u0002\u0002\u04bf\u04c4\u0005",
    "\u009cO\u0002\u04c0\u04c1\u0007\u0006\u0002\u0002\u04c1\u04c3\u0005",
    "\u009cO\u0002\u04c2\u04c0\u0003\u0002\u0002\u0002\u04c3\u04c6\u0003",
    "\u0002\u0002\u0002\u04c4\u04c2\u0003\u0002\u0002\u0002\u04c4\u04c5\u0003",
    "\u0002\u0002\u0002\u04c5\u04c7\u0003\u0002\u0002\u0002\u04c6\u04c4\u0003",
    "\u0002\u0002\u0002\u04c7\u04c8\u0007\u0005\u0002\u0002\u04c89\u0003",
    "\u0002\u0002\u0002\u04c9\u04ca\u0007\u0004\u0002\u0002\u04ca\u04cf\u0005",
    "8\u001d\u0002\u04cb\u04cc\u0007\u0006\u0002\u0002\u04cc\u04ce\u0005",
    "8\u001d\u0002\u04cd\u04cb\u0003\u0002\u0002\u0002\u04ce\u04d1\u0003",
    "\u0002\u0002\u0002\u04cf\u04cd\u0003\u0002\u0002\u0002\u04cf\u04d0\u0003",
    "\u0002\u0002\u0002\u04d0\u04d2\u0003\u0002\u0002\u0002\u04d1\u04cf\u0003",
    "\u0002\u0002\u0002\u04d2\u04d3\u0007\u0005\u0002\u0002\u04d3;\u0003",
    "\u0002\u0002\u0002\u04d4\u04d5\u0007\u00bf\u0002\u0002\u04d5\u04d6\u0007",
    "\u0010\u0002\u0002\u04d6\u04db\u0005> \u0002\u04d7\u04d8\u0007\u00bf",
    "\u0002\u0002\u04d8\u04d9\u0007\u0016\u0002\u0002\u04d9\u04db\u0005@",
    "!\u0002\u04da\u04d4\u0003\u0002\u0002\u0002\u04da\u04d7\u0003\u0002",
    "\u0002\u0002\u04db=\u0003\u0002\u0002\u0002\u04dc\u04dd\u0007\u00cf",
    "\u0002\u0002\u04dd\u04de\u0007\u00f2\u0002\u0002\u04de\u04df\u0007\u00d0",
    "\u0002\u0002\u04df\u04e2\u0007\u00f2\u0002\u0002\u04e0\u04e2\u0005\u00c6",
    "d\u0002\u04e1\u04dc\u0003\u0002\u0002\u0002\u04e1\u04e0\u0003\u0002",
    "\u0002\u0002\u04e2?\u0003\u0002\u0002\u0002\u04e3\u04e7\u0007\u00f2",
    "\u0002\u0002\u04e4\u04e5\u0007O\u0002\u0002\u04e5\u04e6\u0007\u00a3",
    "\u0002\u0002\u04e6\u04e8\u00050\u0019\u0002\u04e7\u04e4\u0003\u0002",
    "\u0002\u0002\u04e7\u04e8\u0003\u0002\u0002\u0002\u04e8A\u0003\u0002",
    "\u0002\u0002\u04e9\u04ea\u0005\u00c6d\u0002\u04ea\u04eb\u0007\u00f2",
    "\u0002\u0002\u04ebC\u0003\u0002\u0002\u0002\u04ec\u04ee\u0005\u001e",
    "\u0010\u0002\u04ed\u04ec\u0003\u0002\u0002\u0002\u04ed\u04ee\u0003\u0002",
    "\u0002\u0002\u04ee\u04ef\u0003\u0002\u0002\u0002\u04ef\u04f0\u0005J",
    "&\u0002\u04f0\u04f1\u0005F$\u0002\u04f1\u04f9\u0003\u0002\u0002\u0002",
    "\u04f2\u04f4\u0005V,\u0002\u04f3\u04f5\u0005H%\u0002\u04f4\u04f3\u0003",
    "\u0002\u0002\u0002\u04f5\u04f6\u0003\u0002\u0002\u0002\u04f6\u04f4\u0003",
    "\u0002\u0002\u0002\u04f6\u04f7\u0003\u0002\u0002\u0002\u04f7\u04f9\u0003",
    "\u0002\u0002\u0002\u04f8\u04ed\u0003\u0002\u0002\u0002\u04f8\u04f2\u0003",
    "\u0002\u0002\u0002\u04f9E\u0003\u0002\u0002\u0002\u04fa\u04fb\u0007",
    "\u001b\u0002\u0002\u04fb\u04fc\u0007\u0016\u0002\u0002\u04fc\u0501\u0005",
    "N(\u0002\u04fd\u04fe\u0007\u0006\u0002\u0002\u04fe\u0500\u0005N(\u0002",
    "\u04ff\u04fd\u0003\u0002\u0002\u0002\u0500\u0503\u0003\u0002\u0002\u0002",
    "\u0501\u04ff\u0003\u0002\u0002\u0002\u0501\u0502\u0003\u0002\u0002\u0002",
    "\u0502\u0505\u0003\u0002\u0002\u0002\u0503\u0501\u0003\u0002\u0002\u0002",
    "\u0504\u04fa\u0003\u0002\u0002\u0002\u0504\u0505\u0003\u0002\u0002\u0002",
    "\u0505\u0510\u0003\u0002\u0002\u0002\u0506\u0507\u0007\u009c\u0002\u0002",
    "\u0507\u0508\u0007\u0016\u0002\u0002\u0508\u050d\u0005\u0092J\u0002",
    "\u0509\u050a\u0007\u0006\u0002\u0002\u050a\u050c\u0005\u0092J\u0002",
    "\u050b\u0509\u0003\u0002\u0002\u0002\u050c\u050f\u0003\u0002\u0002\u0002",
    "\u050d\u050b\u0003\u0002\u0002\u0002\u050d\u050e\u0003\u0002\u0002\u0002",
    "\u050e\u0511\u0003\u0002\u0002\u0002\u050f\u050d\u0003\u0002\u0002\u0002",
    "\u0510\u0506\u0003\u0002\u0002\u0002\u0510\u0511\u0003\u0002\u0002\u0002",
    "\u0511\u051c\u0003\u0002\u0002\u0002\u0512\u0513\u0007\u009d\u0002\u0002",
    "\u0513\u0514\u0007\u0016\u0002\u0002\u0514\u0519\u0005\u0092J\u0002",
    "\u0515\u0516\u0007\u0006\u0002\u0002\u0516\u0518\u0005\u0092J\u0002",
    "\u0517\u0515\u0003\u0002\u0002\u0002\u0518\u051b\u0003\u0002\u0002\u0002",
    "\u0519\u0517\u0003\u0002\u0002\u0002\u0519\u051a\u0003\u0002\u0002\u0002",
    "\u051a\u051d\u0003\u0002\u0002\u0002\u051b\u0519\u0003\u0002\u0002\u0002",
    "\u051c\u0512\u0003\u0002\u0002\u0002\u051c\u051d\u0003\u0002\u0002\u0002",
    "\u051d\u0528\u0003\u0002\u0002\u0002\u051e\u051f\u0007\u009b\u0002\u0002",
    "\u051f\u0520\u0007\u0016\u0002\u0002\u0520\u0525\u0005N(\u0002\u0521",
    "\u0522\u0007\u0006\u0002\u0002\u0522\u0524\u0005N(\u0002\u0523\u0521",
    "\u0003\u0002\u0002\u0002\u0524\u0527\u0003\u0002\u0002\u0002\u0525\u0523",
    "\u0003\u0002\u0002\u0002\u0525\u0526\u0003\u0002\u0002\u0002\u0526\u0529",
    "\u0003\u0002\u0002\u0002\u0527\u0525\u0003\u0002\u0002\u0002\u0528\u051e",
    "\u0003\u0002\u0002\u0002\u0528\u0529\u0003\u0002\u0002\u0002\u0529\u052b",
    "\u0003\u0002\u0002\u0002\u052a\u052c\u0005\u00ba^\u0002\u052b\u052a",
    "\u0003\u0002\u0002\u0002\u052b\u052c\u0003\u0002\u0002\u0002\u052c\u0532",
    "\u0003\u0002\u0002\u0002\u052d\u0530\u0007\u001d\u0002\u0002\u052e\u0531",
    "\u0007\u0011\u0002\u0002\u052f\u0531\u0005\u0092J\u0002\u0530\u052e",
    "\u0003\u0002\u0002\u0002\u0530\u052f\u0003\u0002\u0002\u0002\u0531\u0533",
    "\u0003\u0002\u0002\u0002\u0532\u052d\u0003\u0002\u0002\u0002\u0532\u0533",
    "\u0003\u0002\u0002\u0002\u0533G\u0003\u0002\u0002\u0002\u0534\u0536",
    "\u0005\u001e\u0010\u0002\u0535\u0534\u0003\u0002\u0002\u0002\u0535\u0536",
    "\u0003\u0002\u0002\u0002\u0536\u0537\u0003\u0002\u0002\u0002\u0537\u0538",
    "\u0005P)\u0002\u0538\u0539\u0005F$\u0002\u0539I\u0003\u0002\u0002\u0002",
    "\u053a\u053b\b&\u0001\u0002\u053b\u053c\u0005L\'\u0002\u053c\u0545\u0003",
    "\u0002\u0002\u0002\u053d\u053e\f\u0003\u0002\u0002\u053e\u0540\t\t\u0002",
    "\u0002\u053f\u0541\u0005d3\u0002\u0540\u053f\u0003\u0002\u0002\u0002",
    "\u0540\u0541\u0003\u0002\u0002\u0002\u0541\u0542\u0003\u0002\u0002\u0002",
    "\u0542\u0544\u0005J&\u0004\u0543\u053d\u0003\u0002\u0002\u0002\u0544",
    "\u0547\u0003\u0002\u0002\u0002\u0545\u0543\u0003\u0002\u0002\u0002\u0545",
    "\u0546\u0003\u0002\u0002\u0002\u0546K\u0003\u0002\u0002\u0002\u0547",
    "\u0545\u0003\u0002\u0002\u0002\u0548\u0551\u0005P)\u0002\u0549\u054a",
    "\u0007R\u0002\u0002\u054a\u0551\u0005\u008aF\u0002\u054b\u0551\u0005",
    "\u0080A\u0002\u054c\u054d\u0007\u0004\u0002\u0002\u054d\u054e\u0005",
    "D#\u0002\u054e\u054f\u0007\u0005\u0002\u0002\u054f\u0551\u0003\u0002",
    "\u0002\u0002\u0550\u0548\u0003\u0002\u0002\u0002\u0550\u0549\u0003\u0002",
    "\u0002\u0002\u0550\u054b\u0003\u0002\u0002\u0002\u0550\u054c\u0003\u0002",
    "\u0002\u0002\u0551M\u0003\u0002\u0002\u0002\u0552\u0554\u0005\u0092",
    "J\u0002\u0553\u0555\t\n\u0002\u0002\u0554\u0553\u0003\u0002\u0002\u0002",
    "\u0554\u0555\u0003\u0002\u0002\u0002\u0555\u0558\u0003\u0002\u0002\u0002",
    "\u0556\u0557\u0007,\u0002\u0002\u0557\u0559\t\u000b\u0002\u0002\u0558",
    "\u0556\u0003\u0002\u0002\u0002\u0558\u0559\u0003\u0002\u0002\u0002\u0559",
    "O\u0003\u0002\u0002\u0002\u055a\u055b\u0007\r\u0002\u0002\u055b\u055c",
    "\u0007\u009f\u0002\u0002\u055c\u055d\u0007\u0004\u0002\u0002\u055d\u055e",
    "\u0005\u0090I\u0002\u055e\u055f\u0007\u0005\u0002\u0002\u055f\u0565",
    "\u0003\u0002\u0002\u0002\u0560\u0561\u0007r\u0002\u0002\u0561\u0565",
    "\u0005\u0090I\u0002\u0562\u0563\u0007\u00a0\u0002\u0002\u0563\u0565",
    "\u0005\u0090I\u0002\u0564\u055a\u0003\u0002\u0002\u0002\u0564\u0560",
    "\u0003\u0002\u0002\u0002\u0564\u0562\u0003\u0002\u0002\u0002\u0565\u0567",
    "\u0003\u0002\u0002\u0002\u0566\u0568\u0005\u0086D\u0002\u0567\u0566",
    "\u0003\u0002\u0002\u0002\u0567\u0568\u0003\u0002\u0002\u0002\u0568\u056b",
    "\u0003\u0002\u0002\u0002\u0569\u056a\u0007\u00a5\u0002\u0002\u056a\u056c",
    "\u0007\u00f2\u0002\u0002\u056b\u0569\u0003\u0002\u0002\u0002\u056b\u056c",
    "\u0003\u0002\u0002\u0002\u056c\u056d\u0003\u0002\u0002\u0002\u056d\u056e",
    "\u0007\u00a1\u0002\u0002\u056e\u057b\u0007\u00f2\u0002\u0002\u056f\u0579",
    "\u0007\u0010\u0002\u0002\u0570\u057a\u0005t;\u0002\u0571\u057a\u0005",
    "\u00b0Y\u0002\u0572\u0575\u0007\u0004\u0002\u0002\u0573\u0576\u0005",
    "t;\u0002\u0574\u0576\u0005\u00b0Y\u0002\u0575\u0573\u0003\u0002\u0002",
    "\u0002\u0575\u0574\u0003\u0002\u0002\u0002\u0576\u0577\u0003\u0002\u0002",
    "\u0002\u0577\u0578\u0007\u0005\u0002\u0002\u0578\u057a\u0003\u0002\u0002",
    "\u0002\u0579\u0570\u0003\u0002\u0002\u0002\u0579\u0571\u0003\u0002\u0002",
    "\u0002\u0579\u0572\u0003\u0002\u0002\u0002\u057a\u057c\u0003\u0002\u0002",
    "\u0002\u057b\u056f\u0003\u0002\u0002\u0002\u057b\u057c\u0003\u0002\u0002",
    "\u0002\u057c\u057e\u0003\u0002\u0002\u0002\u057d\u057f\u0005\u0086D",
    "\u0002\u057e\u057d\u0003\u0002\u0002\u0002\u057e\u057f\u0003\u0002\u0002",
    "\u0002\u057f\u0582\u0003\u0002\u0002\u0002\u0580\u0581\u0007\u00a4\u0002",
    "\u0002\u0581\u0583\u0007\u00f2\u0002\u0002\u0582\u0580\u0003\u0002\u0002",
    "\u0002\u0582\u0583\u0003\u0002\u0002\u0002\u0583\u0585\u0003\u0002\u0002",
    "\u0002\u0584\u0586\u0005V,\u0002\u0585\u0584\u0003\u0002\u0002\u0002",
    "\u0585\u0586\u0003\u0002\u0002\u0002\u0586\u0589\u0003\u0002\u0002\u0002",
    "\u0587\u0588\u0007\u0014\u0002\u0002\u0588\u058a\u0005\u0094K\u0002",
    "\u0589\u0587\u0003\u0002\u0002\u0002\u0589\u058a\u0003\u0002\u0002\u0002",
    "\u058a\u05b8\u0003\u0002\u0002\u0002\u058b\u058f\u0007\r\u0002\u0002",
    "\u058c\u058e\u0005R*\u0002\u058d\u058c\u0003\u0002\u0002\u0002\u058e",
    "\u0591\u0003\u0002\u0002\u0002\u058f\u058d\u0003\u0002\u0002\u0002\u058f",
    "\u0590\u0003\u0002\u0002\u0002\u0590\u0593\u0003\u0002\u0002\u0002\u0591",
    "\u058f\u0003\u0002\u0002\u0002\u0592\u0594\u0005d3\u0002\u0593\u0592",
    "\u0003\u0002\u0002\u0002\u0593\u0594\u0003\u0002\u0002\u0002\u0594\u0595",
    "\u0003\u0002\u0002\u0002\u0595\u0597\u0005\u0090I\u0002\u0596\u0598",
    "\u0005V,\u0002\u0597\u0596\u0003\u0002\u0002\u0002\u0597\u0598\u0003",
    "\u0002\u0002\u0002\u0598\u05a2\u0003\u0002\u0002\u0002\u0599\u059f\u0005",
    "V,\u0002\u059a\u059c\u0007\r\u0002\u0002\u059b\u059d\u0005d3\u0002\u059c",
    "\u059b\u0003\u0002\u0002\u0002\u059c\u059d\u0003\u0002\u0002\u0002\u059d",
    "\u059e\u0003\u0002\u0002\u0002\u059e\u05a0\u0005\u0090I\u0002\u059f",
    "\u059a\u0003\u0002\u0002\u0002\u059f\u05a0\u0003\u0002\u0002\u0002\u05a0",
    "\u05a2\u0003\u0002\u0002\u0002\u05a1\u058b\u0003\u0002\u0002\u0002\u05a1",
    "\u0599\u0003\u0002\u0002\u0002\u05a2\u05a6\u0003\u0002\u0002\u0002\u05a3",
    "\u05a5\u0005b2\u0002\u05a4\u05a3\u0003\u0002\u0002\u0002\u05a5\u05a8",
    "\u0003\u0002\u0002\u0002\u05a6\u05a4\u0003\u0002\u0002\u0002\u05a6\u05a7",
    "\u0003\u0002\u0002\u0002\u05a7\u05ab\u0003\u0002\u0002\u0002\u05a8\u05a6",
    "\u0003\u0002\u0002\u0002\u05a9\u05aa\u0007\u0014\u0002\u0002\u05aa\u05ac",
    "\u0005\u0094K\u0002\u05ab\u05a9\u0003\u0002\u0002\u0002\u05ab\u05ac",
    "\u0003\u0002\u0002\u0002\u05ac\u05ae\u0003\u0002\u0002\u0002\u05ad\u05af",
    "\u0005X-\u0002\u05ae\u05ad\u0003\u0002\u0002\u0002\u05ae\u05af\u0003",
    "\u0002\u0002\u0002\u05af\u05b2\u0003\u0002\u0002\u0002\u05b0\u05b1\u0007",
    "\u001c\u0002\u0002\u05b1\u05b3\u0005\u0094K\u0002\u05b2\u05b0\u0003",
    "\u0002\u0002\u0002\u05b2\u05b3\u0003\u0002\u0002\u0002\u05b3\u05b5\u0003",
    "\u0002\u0002\u0002\u05b4\u05b6\u0005\u00ba^\u0002\u05b5\u05b4\u0003",
    "\u0002\u0002\u0002\u05b5\u05b6\u0003\u0002\u0002\u0002\u05b6\u05b8\u0003",
    "\u0002\u0002\u0002\u05b7\u0564\u0003\u0002\u0002\u0002\u05b7\u05a1\u0003",
    "\u0002\u0002\u0002\u05b8Q\u0003\u0002\u0002\u0002\u05b9\u05ba\u0007",
    "\b\u0002\u0002\u05ba\u05c1\u0005T+\u0002\u05bb\u05bd\u0007\u0006\u0002",
    "\u0002\u05bc\u05bb\u0003\u0002\u0002\u0002\u05bc\u05bd\u0003\u0002\u0002",
    "\u0002\u05bd\u05be\u0003\u0002\u0002\u0002\u05be\u05c0\u0005T+\u0002",
    "\u05bf\u05bc\u0003\u0002\u0002\u0002\u05c0\u05c3\u0003\u0002\u0002\u0002",
    "\u05c1\u05bf\u0003\u0002\u0002\u0002\u05c1\u05c2\u0003\u0002\u0002\u0002",
    "\u05c2\u05c4\u0003\u0002\u0002\u0002\u05c3\u05c1\u0003\u0002\u0002\u0002",
    "\u05c4\u05c5\u0007\t\u0002\u0002\u05c5S\u0003\u0002\u0002\u0002\u05c6",
    "\u05d4\u0005\u00c6d\u0002\u05c7\u05c8\u0005\u00c6d\u0002\u05c8\u05c9",
    "\u0007\u0004\u0002\u0002\u05c9\u05ce\u0005\u009aN\u0002\u05ca\u05cb",
    "\u0007\u0006\u0002\u0002\u05cb\u05cd\u0005\u009aN\u0002\u05cc\u05ca",
    "\u0003\u0002\u0002\u0002\u05cd\u05d0\u0003\u0002\u0002\u0002\u05ce\u05cc",
    "\u0003\u0002\u0002\u0002\u05ce\u05cf\u0003\u0002\u0002\u0002\u05cf\u05d1",
    "\u0003\u0002\u0002\u0002\u05d0\u05ce\u0003\u0002\u0002\u0002\u05d1\u05d2",
    "\u0007\u0005\u0002\u0002\u05d2\u05d4\u0003\u0002\u0002\u0002\u05d3\u05c6",
    "\u0003\u0002\u0002\u0002\u05d3\u05c7\u0003\u0002\u0002\u0002\u05d4U",
    "\u0003\u0002\u0002\u0002\u05d5\u05d6\u0007\u000e\u0002\u0002\u05d6\u05db",
    "\u0005f4\u0002\u05d7\u05d8\u0007\u0006\u0002\u0002\u05d8\u05da\u0005",
    "f4\u0002\u05d9\u05d7\u0003\u0002\u0002\u0002\u05da\u05dd\u0003\u0002",
    "\u0002\u0002\u05db\u05d9\u0003\u0002\u0002\u0002\u05db\u05dc\u0003\u0002",
    "\u0002\u0002\u05dc\u05e1\u0003\u0002\u0002\u0002\u05dd\u05db\u0003\u0002",
    "\u0002\u0002\u05de\u05e0\u0005b2\u0002\u05df\u05de\u0003\u0002\u0002",
    "\u0002\u05e0\u05e3\u0003\u0002\u0002\u0002\u05e1\u05df\u0003\u0002\u0002",
    "\u0002\u05e1\u05e2\u0003\u0002\u0002\u0002\u05e2\u05e5\u0003\u0002\u0002",
    "\u0002\u05e3\u05e1\u0003\u0002\u0002\u0002\u05e4\u05e6\u0005\\/\u0002",
    "\u05e5\u05e4\u0003\u0002\u0002\u0002\u05e5\u05e6\u0003\u0002\u0002\u0002",
    "\u05e6W\u0003\u0002\u0002\u0002\u05e7\u05e8\u0007\u0015\u0002\u0002",
    "\u05e8\u05e9\u0007\u0016\u0002\u0002\u05e9\u05ee\u0005\u0092J\u0002",
    "\u05ea\u05eb\u0007\u0006\u0002\u0002\u05eb\u05ed\u0005\u0092J\u0002",
    "\u05ec\u05ea\u0003\u0002\u0002\u0002\u05ed\u05f0\u0003\u0002\u0002\u0002",
    "\u05ee\u05ec\u0003\u0002\u0002\u0002\u05ee\u05ef\u0003\u0002\u0002\u0002",
    "\u05ef\u0602\u0003\u0002\u0002\u0002\u05f0\u05ee\u0003\u0002\u0002\u0002",
    "\u05f1\u05f2\u0007O\u0002\u0002\u05f2\u0603\u0007\u001a\u0002\u0002",
    "\u05f3\u05f4\u0007O\u0002\u0002\u05f4\u0603\u0007\u0019\u0002\u0002",
    "\u05f5\u05f6\u0007\u0017\u0002\u0002\u05f6\u05f7\u0007\u0018\u0002\u0002",
    "\u05f7\u05f8\u0007\u0004\u0002\u0002\u05f8\u05fd\u0005Z.\u0002\u05f9",
    "\u05fa\u0007\u0006\u0002\u0002\u05fa\u05fc\u0005Z.\u0002\u05fb\u05f9",
    "\u0003\u0002\u0002\u0002\u05fc\u05ff\u0003\u0002\u0002\u0002\u05fd\u05fb",
    "\u0003\u0002\u0002\u0002\u05fd\u05fe\u0003\u0002\u0002\u0002\u05fe\u0600",
    "\u0003\u0002\u0002\u0002\u05ff\u05fd\u0003\u0002\u0002\u0002\u0600\u0601",
    "\u0007\u0005\u0002\u0002\u0601\u0603\u0003\u0002\u0002\u0002\u0602\u05f1",
    "\u0003\u0002\u0002\u0002\u0602\u05f3\u0003\u0002\u0002\u0002\u0602\u05f5",
    "\u0003\u0002\u0002\u0002\u0602\u0603\u0003\u0002\u0002\u0002\u0603\u0614",
    "\u0003\u0002\u0002\u0002\u0604\u0605\u0007\u0015\u0002\u0002\u0605\u0606",
    "\u0007\u0016\u0002\u0002\u0606\u0607\u0007\u0017\u0002\u0002\u0607\u0608",
    "\u0007\u0018\u0002\u0002\u0608\u0609\u0007\u0004\u0002\u0002\u0609\u060e",
    "\u0005Z.\u0002\u060a\u060b\u0007\u0006\u0002\u0002\u060b\u060d\u0005",
    "Z.\u0002\u060c\u060a\u0003\u0002\u0002\u0002\u060d\u0610\u0003\u0002",
    "\u0002\u0002\u060e\u060c\u0003\u0002\u0002\u0002\u060e\u060f\u0003\u0002",
    "\u0002\u0002\u060f\u0611\u0003\u0002\u0002\u0002\u0610\u060e\u0003\u0002",
    "\u0002\u0002\u0611\u0612\u0007\u0005\u0002\u0002\u0612\u0614\u0003\u0002",
    "\u0002\u0002\u0613\u05e7\u0003\u0002\u0002\u0002\u0613\u0604\u0003\u0002",
    "\u0002\u0002\u0614Y\u0003\u0002\u0002\u0002\u0615\u061e\u0007\u0004",
    "\u0002\u0002\u0616\u061b\u0005\u0092J\u0002\u0617\u0618\u0007\u0006",
    "\u0002\u0002\u0618\u061a\u0005\u0092J\u0002\u0619\u0617\u0003\u0002",
    "\u0002\u0002\u061a\u061d\u0003\u0002\u0002\u0002\u061b\u0619\u0003\u0002",
    "\u0002\u0002\u061b\u061c\u0003\u0002\u0002\u0002\u061c\u061f\u0003\u0002",
    "\u0002\u0002\u061d\u061b\u0003\u0002\u0002\u0002\u061e\u0616\u0003\u0002",
    "\u0002\u0002\u061e\u061f\u0003\u0002\u0002\u0002\u061f\u0620\u0003\u0002",
    "\u0002\u0002\u0620\u0623\u0007\u0005\u0002\u0002\u0621\u0623\u0005\u0092",
    "J\u0002\u0622\u0615\u0003\u0002\u0002\u0002\u0622\u0621\u0003\u0002",
    "\u0002\u0002\u0623[\u0003\u0002\u0002\u0002\u0624\u0625\u0007@\u0002",
    "\u0002\u0625\u0626\u0007\u0004\u0002\u0002\u0626\u0627\u0005\u0090I",
    "\u0002\u0627\u0628\u0007/\u0002\u0002\u0628\u0629\u0005^0\u0002\u0629",
    "\u062a\u0007!\u0002\u0002\u062a\u062b\u0007\u0004\u0002\u0002\u062b",
    "\u0630\u0005`1\u0002\u062c\u062d\u0007\u0006\u0002\u0002\u062d\u062f",
    "\u0005`1\u0002\u062e\u062c\u0003\u0002\u0002\u0002\u062f\u0632\u0003",
    "\u0002\u0002\u0002\u0630\u062e\u0003\u0002\u0002\u0002\u0630\u0631\u0003",
    "\u0002\u0002\u0002\u0631\u0633\u0003\u0002\u0002\u0002\u0632\u0630\u0003",
    "\u0002\u0002\u0002\u0633\u0634\u0007\u0005\u0002\u0002\u0634\u0635\u0007",
    "\u0005\u0002\u0002\u0635]\u0003\u0002\u0002\u0002\u0636\u0643\u0005",
    "\u00c6d\u0002\u0637\u0638\u0007\u0004\u0002\u0002\u0638\u063d\u0005",
    "\u00c6d\u0002\u0639\u063a\u0007\u0006\u0002\u0002\u063a\u063c\u0005",
    "\u00c6d\u0002\u063b\u0639\u0003\u0002\u0002\u0002\u063c\u063f\u0003",
    "\u0002\u0002\u0002\u063d\u063b\u0003\u0002\u0002\u0002\u063d\u063e\u0003",
    "\u0002\u0002\u0002\u063e\u0640\u0003\u0002\u0002\u0002\u063f\u063d\u0003",
    "\u0002\u0002\u0002\u0640\u0641\u0007\u0005\u0002\u0002\u0641\u0643\u0003",
    "\u0002\u0002\u0002\u0642\u0636\u0003\u0002\u0002\u0002\u0642\u0637\u0003",
    "\u0002\u0002\u0002\u0643_\u0003\u0002\u0002\u0002\u0644\u0649\u0005",
    "\u0092J\u0002\u0645\u0647\u0007\u0010\u0002\u0002\u0646\u0645\u0003",
    "\u0002\u0002\u0002\u0646\u0647\u0003\u0002\u0002\u0002\u0647\u0648\u0003",
    "\u0002\u0002\u0002\u0648\u064a\u0005\u00c6d\u0002\u0649\u0646\u0003",
    "\u0002\u0002\u0002\u0649\u064a\u0003\u0002\u0002\u0002\u064aa\u0003",
    "\u0002\u0002\u0002\u064b\u064c\u0007A\u0002\u0002\u064c\u064e\u0007",
    "T\u0002\u0002\u064d\u064f\u00078\u0002\u0002\u064e\u064d\u0003\u0002",
    "\u0002\u0002\u064e\u064f\u0003\u0002\u0002\u0002\u064f\u0650\u0003\u0002",
    "\u0002\u0002\u0650\u0651\u0005\u00c4c\u0002\u0651\u065a\u0007\u0004",
    "\u0002\u0002\u0652\u0657\u0005\u0092J\u0002\u0653\u0654\u0007\u0006",
    "\u0002\u0002\u0654\u0656\u0005\u0092J\u0002\u0655\u0653\u0003\u0002",
    "\u0002\u0002\u0656\u0659\u0003\u0002\u0002\u0002\u0657\u0655\u0003\u0002",
    "\u0002\u0002\u0657\u0658\u0003\u0002\u0002\u0002\u0658\u065b\u0003\u0002",
    "\u0002\u0002\u0659\u0657\u0003\u0002\u0002\u0002\u065a\u0652\u0003\u0002",
    "\u0002\u0002\u065a\u065b\u0003\u0002\u0002\u0002\u065b\u065c\u0003\u0002",
    "\u0002\u0002\u065c\u065d\u0007\u0005\u0002\u0002\u065d\u0669\u0005\u00c6",
    "d\u0002\u065e\u0660\u0007\u0010\u0002\u0002\u065f\u065e\u0003\u0002",
    "\u0002\u0002\u065f\u0660\u0003\u0002\u0002\u0002\u0660\u0661\u0003\u0002",
    "\u0002\u0002\u0661\u0666\u0005\u00c6d\u0002\u0662\u0663\u0007\u0006",
    "\u0002\u0002\u0663\u0665\u0005\u00c6d\u0002\u0664\u0662\u0003\u0002",
    "\u0002\u0002\u0665\u0668\u0003\u0002\u0002\u0002\u0666\u0664\u0003\u0002",
    "\u0002\u0002\u0666\u0667\u0003\u0002\u0002\u0002\u0667\u066a\u0003\u0002",
    "\u0002\u0002\u0668\u0666\u0003\u0002\u0002\u0002\u0669\u065f\u0003\u0002",
    "\u0002\u0002\u0669\u066a\u0003\u0002\u0002\u0002\u066ac\u0003\u0002",
    "\u0002\u0002\u066b\u066c\t\f\u0002\u0002\u066ce\u0003\u0002\u0002\u0002",
    "\u066d\u0671\u0005~@\u0002\u066e\u0670\u0005h5\u0002\u066f\u066e\u0003",
    "\u0002\u0002\u0002\u0670\u0673\u0003\u0002\u0002\u0002\u0671\u066f\u0003",
    "\u0002\u0002\u0002\u0671\u0672\u0003\u0002\u0002\u0002\u0672g\u0003",
    "\u0002\u0002\u0002\u0673\u0671\u0003\u0002\u0002\u0002\u0674\u0675\u0005",
    "j6\u0002\u0675\u0676\u00076\u0002\u0002\u0676\u0678\u0005~@\u0002\u0677",
    "\u0679\u0005l7\u0002\u0678\u0677\u0003\u0002\u0002\u0002\u0678\u0679",
    "\u0003\u0002\u0002\u0002\u0679\u0680\u0003\u0002\u0002\u0002\u067a\u067b",
    "\u0007>\u0002\u0002\u067b\u067c\u0005j6\u0002\u067c\u067d\u00076\u0002",
    "\u0002\u067d\u067e\u0005~@\u0002\u067e\u0680\u0003\u0002\u0002\u0002",
    "\u067f\u0674\u0003\u0002\u0002\u0002\u067f\u067a\u0003\u0002\u0002\u0002",
    "\u0680i\u0003\u0002\u0002\u0002\u0681\u0683\u00079\u0002\u0002\u0682",
    "\u0681\u0003\u0002\u0002\u0002\u0682\u0683\u0003\u0002\u0002\u0002\u0683",
    "\u0698\u0003\u0002\u0002\u0002\u0684\u0698\u00077\u0002\u0002\u0685",
    "\u0687\u0007:\u0002\u0002\u0686\u0688\u00078\u0002\u0002\u0687\u0686",
    "\u0003\u0002\u0002\u0002\u0687\u0688\u0003\u0002\u0002\u0002\u0688\u0698",
    "\u0003\u0002\u0002\u0002\u0689\u068a\u0007:\u0002\u0002\u068a\u0698",
    "\u0007;\u0002\u0002\u068b\u068d\u0007<\u0002\u0002\u068c\u068e\u0007",
    "8\u0002\u0002\u068d\u068c\u0003\u0002\u0002\u0002\u068d\u068e\u0003",
    "\u0002\u0002\u0002\u068e\u0698\u0003\u0002\u0002\u0002\u068f\u0691\u0007",
    "=\u0002\u0002\u0690\u0692\u00078\u0002\u0002\u0691\u0690\u0003\u0002",
    "\u0002\u0002\u0691\u0692\u0003\u0002\u0002\u0002\u0692\u0698\u0003\u0002",
    "\u0002\u0002\u0693\u0695\u0007:\u0002\u0002\u0694\u0693\u0003\u0002",
    "\u0002\u0002\u0694\u0695\u0003\u0002\u0002\u0002\u0695\u0696\u0003\u0002",
    "\u0002\u0002\u0696\u0698\u0007\u00ef\u0002\u0002\u0697\u0682\u0003\u0002",
    "\u0002\u0002\u0697\u0684\u0003\u0002\u0002\u0002\u0697\u0685\u0003\u0002",
    "\u0002\u0002\u0697\u0689\u0003\u0002\u0002\u0002\u0697\u068b\u0003\u0002",
    "\u0002\u0002\u0697\u068f\u0003\u0002\u0002\u0002\u0697\u0694\u0003\u0002",
    "\u0002\u0002\u0698k\u0003\u0002\u0002\u0002\u0699\u069a\u0007?\u0002",
    "\u0002\u069a\u06a8\u0005\u0094K\u0002\u069b\u069c\u0007\u00a1\u0002",
    "\u0002\u069c\u069d\u0007\u0004\u0002\u0002\u069d\u06a2\u0005\u00c6d",
    "\u0002\u069e\u069f\u0007\u0006\u0002\u0002\u069f\u06a1\u0005\u00c6d",
    "\u0002\u06a0\u069e\u0003\u0002\u0002\u0002\u06a1\u06a4\u0003\u0002\u0002",
    "\u0002\u06a2\u06a0\u0003\u0002\u0002\u0002\u06a2\u06a3\u0003\u0002\u0002",
    "\u0002\u06a3\u06a5\u0003\u0002\u0002\u0002\u06a4\u06a2\u0003\u0002\u0002",
    "\u0002\u06a5\u06a6\u0007\u0005\u0002\u0002\u06a6\u06a8\u0003\u0002\u0002",
    "\u0002\u06a7\u0699\u0003\u0002\u0002\u0002\u06a7\u069b\u0003\u0002\u0002",
    "\u0002\u06a8m\u0003\u0002\u0002\u0002\u06a9\u06aa\u0007m\u0002\u0002",
    "\u06aa\u06ac\u0007\u0004\u0002\u0002\u06ab\u06ad\u0005p9\u0002\u06ac",
    "\u06ab\u0003\u0002\u0002\u0002\u06ac\u06ad\u0003\u0002\u0002\u0002\u06ad",
    "\u06ae\u0003\u0002\u0002\u0002\u06ae\u06af\u0007\u0005\u0002\u0002\u06af",
    "o\u0003\u0002\u0002\u0002\u06b0\u06b2\u0007\u008d\u0002\u0002\u06b1",
    "\u06b0\u0003\u0002\u0002\u0002\u06b1\u06b2\u0003\u0002\u0002\u0002\u06b2",
    "\u06b3\u0003\u0002\u0002\u0002\u06b3\u06b4\t\r\u0002\u0002\u06b4\u06c9",
    "\u0007\u0097\u0002\u0002\u06b5\u06b6\u0005\u0092J\u0002\u06b6\u06b7",
    "\u0007F\u0002\u0002\u06b7\u06c9\u0003\u0002\u0002\u0002\u06b8\u06b9",
    "\u0007\u0098\u0002\u0002\u06b9\u06ba\u0007\u00f6\u0002\u0002\u06ba\u06bb",
    "\u0007\u0099\u0002\u0002\u06bb\u06bc\u0007\u009a\u0002\u0002\u06bc\u06c5",
    "\u0007\u00f6\u0002\u0002\u06bd\u06c3\u0007?\u0002\u0002\u06be\u06c4",
    "\u0005\u00c6d\u0002\u06bf\u06c0\u0005\u00c4c\u0002\u06c0\u06c1\u0007",
    "\u0004\u0002\u0002\u06c1\u06c2\u0007\u0005\u0002\u0002\u06c2\u06c4\u0003",
    "\u0002\u0002\u0002\u06c3\u06be\u0003\u0002\u0002\u0002\u06c3\u06bf\u0003",
    "\u0002\u0002\u0002\u06c4\u06c6\u0003\u0002\u0002\u0002\u06c5\u06bd\u0003",
    "\u0002\u0002\u0002\u06c5\u06c6\u0003\u0002\u0002\u0002\u06c6\u06c9\u0003",
    "\u0002\u0002\u0002\u06c7\u06c9\u0005\u0092J\u0002\u06c8\u06b1\u0003",
    "\u0002\u0002\u0002\u06c8\u06b5\u0003\u0002\u0002\u0002\u06c8\u06b8\u0003",
    "\u0002\u0002\u0002\u06c8\u06c7\u0003\u0002\u0002\u0002\u06c9q\u0003",
    "\u0002\u0002\u0002\u06ca\u06cb\u0007\u0004\u0002\u0002\u06cb\u06cc\u0005",
    "t;\u0002\u06cc\u06cd\u0007\u0005\u0002\u0002\u06cds\u0003\u0002\u0002",
    "\u0002\u06ce\u06d3\u0005\u00c6d\u0002\u06cf\u06d0\u0007\u0006\u0002",
    "\u0002\u06d0\u06d2\u0005\u00c6d\u0002\u06d1\u06cf\u0003\u0002\u0002",
    "\u0002\u06d2\u06d5\u0003\u0002\u0002\u0002\u06d3\u06d1\u0003\u0002\u0002",
    "\u0002\u06d3\u06d4\u0003\u0002\u0002\u0002\u06d4u\u0003\u0002\u0002",
    "\u0002\u06d5\u06d3\u0003\u0002\u0002\u0002\u06d6\u06d7\u0007\u0004\u0002",
    "\u0002\u06d7\u06dc\u0005x=\u0002\u06d8\u06d9\u0007\u0006\u0002\u0002",
    "\u06d9\u06db\u0005x=\u0002\u06da\u06d8\u0003\u0002\u0002\u0002\u06db",
    "\u06de\u0003\u0002\u0002\u0002\u06dc\u06da\u0003\u0002\u0002\u0002\u06dc",
    "\u06dd\u0003\u0002\u0002\u0002\u06dd\u06df\u0003\u0002\u0002\u0002\u06de",
    "\u06dc\u0003\u0002\u0002\u0002\u06df\u06e0\u0007\u0005\u0002\u0002\u06e0",
    "w\u0003\u0002\u0002\u0002\u06e1\u06e3\u0005\u00c6d\u0002\u06e2\u06e4",
    "\t\n\u0002\u0002\u06e3\u06e2\u0003\u0002\u0002\u0002\u06e3\u06e4\u0003",
    "\u0002\u0002\u0002\u06e4y\u0003\u0002\u0002\u0002\u06e5\u06e6\u0007",
    "\u0004\u0002\u0002\u06e6\u06eb\u0005|?\u0002\u06e7\u06e8\u0007\u0006",
    "\u0002\u0002\u06e8\u06ea\u0005|?\u0002\u06e9\u06e7\u0003\u0002\u0002",
    "\u0002\u06ea\u06ed\u0003\u0002\u0002\u0002\u06eb\u06e9\u0003\u0002\u0002",
    "\u0002\u06eb\u06ec\u0003\u0002\u0002\u0002\u06ec\u06ee\u0003\u0002\u0002",
    "\u0002\u06ed\u06eb\u0003\u0002\u0002\u0002\u06ee\u06ef\u0007\u0005\u0002",
    "\u0002\u06ef{\u0003\u0002\u0002\u0002\u06f0\u06f3\u0005\u00c6d\u0002",
    "\u06f1\u06f2\u0007t\u0002\u0002\u06f2\u06f4\u0007\u00f2\u0002\u0002",
    "\u06f3\u06f1\u0003\u0002\u0002\u0002\u06f3\u06f4\u0003\u0002\u0002\u0002",
    "\u06f4}\u0003\u0002\u0002\u0002\u06f5\u06f7\u0005\u0088E\u0002\u06f6",
    "\u06f8\u0005n8\u0002\u06f7\u06f6\u0003\u0002\u0002\u0002\u06f7\u06f8",
    "\u0003\u0002\u0002\u0002\u06f8\u06f9\u0003\u0002\u0002\u0002\u06f9\u06fa",
    "\u0005\u0084C\u0002\u06fa\u070e\u0003\u0002\u0002\u0002\u06fb\u06fc",
    "\u0007\u0004\u0002\u0002\u06fc\u06fd\u0005D#\u0002\u06fd\u06ff\u0007",
    "\u0005\u0002\u0002\u06fe\u0700\u0005n8\u0002\u06ff\u06fe\u0003\u0002",
    "\u0002\u0002\u06ff\u0700\u0003\u0002\u0002\u0002\u0700\u0701\u0003\u0002",
    "\u0002\u0002\u0701\u0702\u0005\u0084C\u0002\u0702\u070e\u0003\u0002",
    "\u0002\u0002\u0703\u0704\u0007\u0004\u0002\u0002\u0704\u0705\u0005f",
    "4\u0002\u0705\u0707\u0007\u0005\u0002\u0002\u0706\u0708\u0005n8\u0002",
    "\u0707\u0706\u0003\u0002\u0002\u0002\u0707\u0708\u0003\u0002\u0002\u0002",
    "\u0708\u0709\u0003\u0002\u0002\u0002\u0709\u070a\u0005\u0084C\u0002",
    "\u070a\u070e\u0003\u0002\u0002\u0002\u070b\u070e\u0005\u0080A\u0002",
    "\u070c\u070e\u0005\u0082B\u0002\u070d\u06f5\u0003\u0002\u0002\u0002",
    "\u070d\u06fb\u0003\u0002\u0002\u0002\u070d\u0703\u0003\u0002\u0002\u0002",
    "\u070d\u070b\u0003\u0002\u0002\u0002\u070d\u070c\u0003\u0002\u0002\u0002",
    "\u070e\u007f\u0003\u0002\u0002\u0002\u070f\u0710\u0007P\u0002\u0002",
    "\u0710\u0715\u0005\u0092J\u0002\u0711\u0712\u0007\u0006\u0002\u0002",
    "\u0712\u0714\u0005\u0092J\u0002\u0713\u0711\u0003\u0002\u0002\u0002",
    "\u0714\u0717\u0003\u0002\u0002\u0002\u0715\u0713\u0003\u0002\u0002\u0002",
    "\u0715\u0716\u0003\u0002\u0002\u0002\u0716\u0718\u0003\u0002\u0002\u0002",
    "\u0717\u0715\u0003\u0002\u0002\u0002\u0718\u0719\u0005\u0084C\u0002",
    "\u0719\u0081\u0003\u0002\u0002\u0002\u071a\u071b\u0005\u00c6d\u0002",
    "\u071b\u0724\u0007\u0004\u0002\u0002\u071c\u0721\u0005\u0092J\u0002",
    "\u071d\u071e\u0007\u0006\u0002\u0002\u071e\u0720\u0005\u0092J\u0002",
    "\u071f\u071d\u0003\u0002\u0002\u0002\u0720\u0723\u0003\u0002\u0002\u0002",
    "\u0721\u071f\u0003\u0002\u0002\u0002\u0721\u0722\u0003\u0002\u0002\u0002",
    "\u0722\u0725\u0003\u0002\u0002\u0002\u0723\u0721\u0003\u0002\u0002\u0002",
    "\u0724\u071c\u0003\u0002\u0002\u0002\u0724\u0725\u0003\u0002\u0002\u0002",
    "\u0725\u0726\u0003\u0002\u0002\u0002\u0726\u0727\u0007\u0005\u0002\u0002",
    "\u0727\u0728\u0005\u0084C\u0002\u0728\u0083\u0003\u0002\u0002\u0002",
    "\u0729\u072b\u0007\u0010\u0002\u0002\u072a\u0729\u0003\u0002\u0002\u0002",
    "\u072a\u072b\u0003\u0002\u0002\u0002\u072b\u072c\u0003\u0002\u0002\u0002",
    "\u072c\u072e\u0005\u00caf\u0002\u072d\u072f\u0005r:\u0002\u072e\u072d",
    "\u0003\u0002\u0002\u0002\u072e\u072f\u0003\u0002\u0002\u0002\u072f\u0731",
    "\u0003\u0002\u0002\u0002\u0730\u072a\u0003\u0002\u0002\u0002\u0730\u0731",
    "\u0003\u0002\u0002\u0002\u0731\u0085\u0003\u0002\u0002\u0002\u0732\u0733",
    "\u0007N\u0002\u0002\u0733\u0734\u0007[\u0002\u0002\u0734\u0735\u0007",
    "\u00a2\u0002\u0002\u0735\u0739\u0007\u00f2\u0002\u0002\u0736\u0737\u0007",
    "O\u0002\u0002\u0737\u0738\u0007\u00a3\u0002\u0002\u0738\u073a\u0005",
    "0\u0019\u0002\u0739\u0736\u0003\u0002\u0002\u0002\u0739\u073a\u0003",
    "\u0002\u0002\u0002\u073a\u0764\u0003\u0002\u0002\u0002\u073b\u073c\u0007",
    "N\u0002\u0002\u073c\u073d\u0007[\u0002\u0002\u073d\u0747\u0007\u00a6",
    "\u0002\u0002\u073e\u073f\u0007\u00a7\u0002\u0002\u073f\u0740\u0007\u00a8",
    "\u0002\u0002\u0740\u0741\u0007\u0016\u0002\u0002\u0741\u0745\u0007\u00f2",
    "\u0002\u0002\u0742\u0743\u0007\u00ac\u0002\u0002\u0743\u0744\u0007\u0016",
    "\u0002\u0002\u0744\u0746\u0007\u00f2\u0002\u0002\u0745\u0742\u0003\u0002",
    "\u0002\u0002\u0745\u0746\u0003\u0002\u0002\u0002\u0746\u0748\u0003\u0002",
    "\u0002\u0002\u0747\u073e\u0003\u0002\u0002\u0002\u0747\u0748\u0003\u0002",
    "\u0002\u0002\u0748\u074e\u0003\u0002\u0002\u0002\u0749\u074a\u0007\u00a9",
    "\u0002\u0002\u074a\u074b\u0007\u00aa\u0002\u0002\u074b\u074c\u0007\u00a8",
    "\u0002\u0002\u074c\u074d\u0007\u0016\u0002\u0002\u074d\u074f\u0007\u00f2",
    "\u0002\u0002\u074e\u0749\u0003\u0002\u0002\u0002\u074e\u074f\u0003\u0002",
    "\u0002\u0002\u074f\u0755\u0003\u0002\u0002\u0002\u0750\u0751\u0007r",
    "\u0002\u0002\u0751\u0752\u0007\u00ab\u0002\u0002\u0752\u0753\u0007\u00a8",
    "\u0002\u0002\u0753\u0754\u0007\u0016\u0002\u0002\u0754\u0756\u0007\u00f2",
    "\u0002\u0002\u0755\u0750\u0003\u0002\u0002\u0002\u0755\u0756\u0003\u0002",
    "\u0002\u0002\u0756\u075b\u0003\u0002\u0002\u0002\u0757\u0758\u0007\u00ad",
    "\u0002\u0002\u0758\u0759\u0007\u00a8\u0002\u0002\u0759\u075a\u0007\u0016",
    "\u0002\u0002\u075a\u075c\u0007\u00f2\u0002\u0002\u075b\u0757\u0003\u0002",
    "\u0002\u0002\u075b\u075c\u0003\u0002\u0002\u0002\u075c\u0761\u0003\u0002",
    "\u0002\u0002\u075d\u075e\u0007)\u0002\u0002\u075e\u075f\u0007\u00db",
    "\u0002\u0002\u075f\u0760\u0007\u0010\u0002\u0002\u0760\u0762\u0007\u00f2",
    "\u0002\u0002\u0761\u075d\u0003\u0002\u0002\u0002\u0761\u0762\u0003\u0002",
    "\u0002\u0002\u0762\u0764\u0003\u0002\u0002\u0002\u0763\u0732\u0003\u0002",
    "\u0002\u0002\u0763\u073b\u0003\u0002\u0002\u0002\u0764\u0087\u0003\u0002",
    "\u0002\u0002\u0765\u0773\u0005\u008aF\u0002\u0766\u0767\u0005\u00c8",
    "e\u0002\u0767\u0768\u0007\u0004\u0002\u0002\u0768\u076d\u0005\u0088",
    "E\u0002\u0769\u076a\u0007\u0006\u0002\u0002\u076a\u076c\u0005\u0088",
    "E\u0002\u076b\u0769\u0003\u0002\u0002\u0002\u076c\u076f\u0003\u0002",
    "\u0002\u0002\u076d\u076b\u0003\u0002\u0002\u0002\u076d\u076e\u0003\u0002",
    "\u0002\u0002\u076e\u0770\u0003\u0002\u0002\u0002\u076f\u076d\u0003\u0002",
    "\u0002\u0002\u0770\u0771\u0007\u0005\u0002\u0002\u0771\u0773\u0003\u0002",
    "\u0002\u0002\u0772\u0765\u0003\u0002\u0002\u0002\u0772\u0766\u0003\u0002",
    "\u0002\u0002\u0773\u0089\u0003\u0002\u0002\u0002\u0774\u0775\u0005\u00c6",
    "d\u0002\u0775\u0776\u0007\u0007\u0002\u0002\u0776\u0778\u0003\u0002",
    "\u0002\u0002\u0777\u0774\u0003\u0002\u0002\u0002\u0777\u0778\u0003\u0002",
    "\u0002\u0002\u0778\u0779\u0003\u0002\u0002\u0002\u0779\u077a\u0005\u00c6",
    "d\u0002\u077a\u008b\u0003\u0002\u0002\u0002\u077b\u077c\u0005\u00c6",
    "d\u0002\u077c\u077d\u0007\u0007\u0002\u0002\u077d\u077f\u0003\u0002",
    "\u0002\u0002\u077e\u077b\u0003\u0002\u0002\u0002\u077e\u077f\u0003\u0002",
    "\u0002\u0002\u077f\u0780\u0003\u0002\u0002\u0002\u0780\u0781\u0005\u00c6",
    "d\u0002\u0781\u008d\u0003\u0002\u0002\u0002\u0782\u078a\u0005\u0092",
    "J\u0002\u0783\u0785\u0007\u0010\u0002\u0002\u0784\u0783\u0003\u0002",
    "\u0002\u0002\u0784\u0785\u0003\u0002\u0002\u0002\u0785\u0788\u0003\u0002",
    "\u0002\u0002\u0786\u0789\u0005\u00c6d\u0002\u0787\u0789\u0005r:\u0002",
    "\u0788\u0786\u0003\u0002\u0002\u0002\u0788\u0787\u0003\u0002\u0002\u0002",
    "\u0789\u078b\u0003\u0002\u0002\u0002\u078a\u0784\u0003\u0002\u0002\u0002",
    "\u078a\u078b\u0003\u0002\u0002\u0002\u078b\u008f\u0003\u0002\u0002\u0002",
    "\u078c\u0791\u0005\u008eH\u0002\u078d\u078e\u0007\u0006\u0002\u0002",
    "\u078e\u0790\u0005\u008eH\u0002\u078f\u078d\u0003\u0002\u0002\u0002",
    "\u0790\u0793\u0003\u0002\u0002\u0002\u0791\u078f\u0003\u0002\u0002\u0002",
    "\u0791\u0792\u0003\u0002\u0002\u0002\u0792\u0091\u0003\u0002\u0002\u0002",
    "\u0793\u0791\u0003\u0002\u0002\u0002\u0794\u0795\u0005\u0094K\u0002",
    "\u0795\u0093\u0003\u0002\u0002\u0002\u0796\u0797\bK\u0001\u0002\u0797",
    "\u0798\u0007\"\u0002\u0002\u0798\u07a3\u0005\u0094K\u0007\u0799\u079a",
    "\u0007$\u0002\u0002\u079a\u079b\u0007\u0004\u0002\u0002\u079b\u079c",
    "\u0005\u001c\u000f\u0002\u079c\u079d\u0007\u0005\u0002\u0002\u079d\u07a3",
    "\u0003\u0002\u0002\u0002\u079e\u07a0\u0005\u0098M\u0002\u079f\u07a1",
    "\u0005\u0096L\u0002\u07a0\u079f\u0003\u0002\u0002\u0002\u07a0\u07a1",
    "\u0003\u0002\u0002\u0002\u07a1\u07a3\u0003\u0002\u0002\u0002\u07a2\u0796",
    "\u0003\u0002\u0002\u0002\u07a2\u0799\u0003\u0002\u0002\u0002\u07a2\u079e",
    "\u0003\u0002\u0002\u0002\u07a3\u07ac\u0003\u0002\u0002\u0002\u07a4\u07a5",
    "\f\u0004\u0002\u0002\u07a5\u07a6\u0007 \u0002\u0002\u07a6\u07ab\u0005",
    "\u0094K\u0005\u07a7\u07a8\f\u0003\u0002\u0002\u07a8\u07a9\u0007\u001f",
    "\u0002\u0002\u07a9\u07ab\u0005\u0094K\u0004\u07aa\u07a4\u0003\u0002",
    "\u0002\u0002\u07aa\u07a7\u0003\u0002\u0002\u0002\u07ab\u07ae\u0003\u0002",
    "\u0002\u0002\u07ac\u07aa\u0003\u0002\u0002\u0002\u07ac\u07ad\u0003\u0002",
    "\u0002\u0002\u07ad\u0095\u0003\u0002\u0002\u0002\u07ae\u07ac\u0003\u0002",
    "\u0002\u0002\u07af\u07b1\u0007\"\u0002\u0002\u07b0\u07af\u0003\u0002",
    "\u0002\u0002\u07b0\u07b1\u0003\u0002\u0002\u0002\u07b1\u07b2\u0003\u0002",
    "\u0002\u0002\u07b2\u07b3\u0007%\u0002\u0002\u07b3\u07b4\u0005\u0098",
    "M\u0002\u07b4\u07b5\u0007 \u0002\u0002\u07b5\u07b6\u0005\u0098M\u0002",
    "\u07b6\u07e0\u0003\u0002\u0002\u0002\u07b7\u07b9\u0007\"\u0002\u0002",
    "\u07b8\u07b7\u0003\u0002\u0002\u0002\u07b8\u07b9\u0003\u0002\u0002\u0002",
    "\u07b9\u07ba\u0003\u0002\u0002\u0002\u07ba\u07bb\u0007!\u0002\u0002",
    "\u07bb\u07bc\u0007\u0004\u0002\u0002\u07bc\u07c1\u0005\u0092J\u0002",
    "\u07bd\u07be\u0007\u0006\u0002\u0002\u07be\u07c0\u0005\u0092J\u0002",
    "\u07bf\u07bd\u0003\u0002\u0002\u0002\u07c0\u07c3\u0003\u0002\u0002\u0002",
    "\u07c1\u07bf\u0003\u0002\u0002\u0002\u07c1\u07c2\u0003\u0002\u0002\u0002",
    "\u07c2\u07c4\u0003\u0002\u0002\u0002\u07c3\u07c1\u0003\u0002\u0002\u0002",
    "\u07c4\u07c5\u0007\u0005\u0002\u0002\u07c5\u07e0\u0003\u0002\u0002\u0002",
    "\u07c6\u07c8\u0007\"\u0002\u0002\u07c7\u07c6\u0003\u0002\u0002\u0002",
    "\u07c7\u07c8\u0003\u0002\u0002\u0002\u07c8\u07c9\u0003\u0002\u0002\u0002",
    "\u07c9\u07ca\u0007!\u0002\u0002\u07ca\u07cb\u0007\u0004\u0002\u0002",
    "\u07cb\u07cc\u0005\u001c\u000f\u0002\u07cc\u07cd\u0007\u0005\u0002\u0002",
    "\u07cd\u07e0\u0003\u0002\u0002\u0002\u07ce\u07d0\u0007\"\u0002\u0002",
    "\u07cf\u07ce\u0003\u0002\u0002\u0002\u07cf\u07d0\u0003\u0002\u0002\u0002",
    "\u07d0\u07d1\u0003\u0002\u0002\u0002\u07d1\u07d2\t\u000e\u0002\u0002",
    "\u07d2\u07e0\u0005\u0098M\u0002\u07d3\u07d5\u0007(\u0002\u0002\u07d4",
    "\u07d6\u0007\"\u0002\u0002\u07d5\u07d4\u0003\u0002\u0002\u0002\u07d5",
    "\u07d6\u0003\u0002\u0002\u0002\u07d6\u07d7\u0003\u0002\u0002\u0002\u07d7",
    "\u07e0\u0007)\u0002\u0002\u07d8\u07da\u0007(\u0002\u0002\u07d9\u07db",
    "\u0007\"\u0002\u0002\u07da\u07d9\u0003\u0002\u0002\u0002\u07da\u07db",
    "\u0003\u0002\u0002\u0002\u07db\u07dc\u0003\u0002\u0002\u0002\u07dc\u07dd",
    "\u0007\u0013\u0002\u0002\u07dd\u07de\u0007\u000e\u0002\u0002\u07de\u07e0",
    "\u0005\u0098M\u0002\u07df\u07b0\u0003\u0002\u0002\u0002\u07df\u07b8",
    "\u0003\u0002\u0002\u0002\u07df\u07c7\u0003\u0002\u0002\u0002\u07df\u07cf",
    "\u0003\u0002\u0002\u0002\u07df\u07d3\u0003\u0002\u0002\u0002\u07df\u07d8",
    "\u0003\u0002\u0002\u0002\u07e0\u0097\u0003\u0002\u0002\u0002\u07e1\u07e2",
    "\bM\u0001\u0002\u07e2\u07e6\u0005\u009aN\u0002\u07e3\u07e4\t\u000f\u0002",
    "\u0002\u07e4\u07e6\u0005\u0098M\t\u07e5\u07e1\u0003\u0002\u0002\u0002",
    "\u07e5\u07e3\u0003\u0002\u0002\u0002\u07e6\u07fc\u0003\u0002\u0002\u0002",
    "\u07e7\u07e8\f\b\u0002\u0002\u07e8\u07e9\t\u0010\u0002\u0002\u07e9\u07fb",
    "\u0005\u0098M\t\u07ea\u07eb\f\u0007\u0002\u0002\u07eb\u07ec\t\u0011",
    "\u0002\u0002\u07ec\u07fb\u0005\u0098M\b\u07ed\u07ee\f\u0006\u0002\u0002",
    "\u07ee\u07ef\u0007\u0093\u0002\u0002\u07ef\u07fb\u0005\u0098M\u0007",
    "\u07f0\u07f1\f\u0005\u0002\u0002\u07f1\u07f2\u0007\u0096\u0002\u0002",
    "\u07f2\u07fb\u0005\u0098M\u0006\u07f3\u07f4\f\u0004\u0002\u0002\u07f4",
    "\u07f5\u0007\u0094\u0002\u0002\u07f5\u07fb\u0005\u0098M\u0005\u07f6",
    "\u07f7\f\u0003\u0002\u0002\u07f7\u07f8\u0005\u009eP\u0002\u07f8\u07f9",
    "\u0005\u0098M\u0004\u07f9\u07fb\u0003\u0002\u0002\u0002\u07fa\u07e7",
    "\u0003\u0002\u0002\u0002\u07fa\u07ea\u0003\u0002\u0002\u0002\u07fa\u07ed",
    "\u0003\u0002\u0002\u0002\u07fa\u07f0\u0003\u0002\u0002\u0002\u07fa\u07f3",
    "\u0003\u0002\u0002\u0002\u07fa\u07f6\u0003\u0002\u0002\u0002\u07fb\u07fe",
    "\u0003\u0002\u0002\u0002\u07fc\u07fa\u0003\u0002\u0002\u0002\u07fc\u07fd",
    "\u0003\u0002\u0002\u0002\u07fd\u0099\u0003\u0002\u0002\u0002\u07fe\u07fc",
    "\u0003\u0002\u0002\u0002\u07ff\u0800\bN\u0001\u0002\u0800\u0802\u0007",
    "1\u0002\u0002\u0801\u0803\u0005\u00b8]\u0002\u0802\u0801\u0003\u0002",
    "\u0002\u0002\u0803\u0804\u0003\u0002\u0002\u0002\u0804\u0802\u0003\u0002",
    "\u0002\u0002\u0804\u0805\u0003\u0002\u0002\u0002\u0805\u0808\u0003\u0002",
    "\u0002\u0002\u0806\u0807\u00074\u0002\u0002\u0807\u0809\u0005\u0092",
    "J\u0002\u0808\u0806\u0003\u0002\u0002\u0002\u0808\u0809\u0003\u0002",
    "\u0002\u0002\u0809\u080a\u0003\u0002\u0002\u0002\u080a\u080b\u00075",
    "\u0002\u0002\u080b\u0883\u0003\u0002\u0002\u0002\u080c\u080d\u00071",
    "\u0002\u0002\u080d\u080f\u0005\u0092J\u0002\u080e\u0810\u0005\u00b8",
    "]\u0002\u080f\u080e\u0003\u0002\u0002\u0002\u0810\u0811\u0003\u0002",
    "\u0002\u0002\u0811\u080f\u0003\u0002\u0002\u0002\u0811\u0812\u0003\u0002",
    "\u0002\u0002\u0812\u0815\u0003\u0002\u0002\u0002\u0813\u0814\u00074",
    "\u0002\u0002\u0814\u0816\u0005\u0092J\u0002\u0815\u0813\u0003\u0002",
    "\u0002\u0002\u0815\u0816\u0003\u0002\u0002\u0002\u0816\u0817\u0003\u0002",
    "\u0002\u0002\u0817\u0818\u00075\u0002\u0002\u0818\u0883\u0003\u0002",
    "\u0002\u0002\u0819\u081a\u0007_\u0002\u0002\u081a\u081b\u0007\u0004",
    "\u0002\u0002\u081b\u081c\u0005\u0092J\u0002\u081c\u081d\u0007\u0010",
    "\u0002\u0002\u081d\u081e\u0005\u00aeX\u0002\u081e\u081f\u0007\u0005",
    "\u0002\u0002\u081f\u0883\u0003\u0002\u0002\u0002\u0820\u0821\u0007s",
    "\u0002\u0002\u0821\u082a\u0007\u0004\u0002\u0002\u0822\u0827\u0005\u008e",
    "H\u0002\u0823\u0824\u0007\u0006\u0002\u0002\u0824\u0826\u0005\u008e",
    "H\u0002\u0825\u0823\u0003\u0002\u0002\u0002\u0826\u0829\u0003\u0002",
    "\u0002\u0002\u0827\u0825\u0003\u0002\u0002\u0002\u0827\u0828\u0003\u0002",
    "\u0002\u0002\u0828\u082b\u0003\u0002\u0002\u0002\u0829\u0827\u0003\u0002",
    "\u0002\u0002\u082a\u0822\u0003\u0002\u0002\u0002\u082a\u082b\u0003\u0002",
    "\u0002\u0002\u082b\u082c\u0003\u0002\u0002\u0002\u082c\u0883\u0007\u0005",
    "\u0002\u0002\u082d\u082e\u0007K\u0002\u0002\u082e\u082f\u0007\u0004",
    "\u0002\u0002\u082f\u0832\u0005\u0092J\u0002\u0830\u0831\u0007}\u0002",
    "\u0002\u0831\u0833\u0007,\u0002\u0002\u0832\u0830\u0003\u0002\u0002",
    "\u0002\u0832\u0833\u0003\u0002\u0002\u0002\u0833\u0834\u0003\u0002\u0002",
    "\u0002\u0834\u0835\u0007\u0005\u0002\u0002\u0835\u0883\u0003\u0002\u0002",
    "\u0002\u0836\u0837\u0007M\u0002\u0002\u0837\u0838\u0007\u0004\u0002",
    "\u0002\u0838\u083b\u0005\u0092J\u0002\u0839\u083a\u0007}\u0002\u0002",
    "\u083a\u083c\u0007,\u0002\u0002\u083b\u0839\u0003\u0002\u0002\u0002",
    "\u083b\u083c\u0003\u0002\u0002\u0002\u083c\u083d\u0003\u0002\u0002\u0002",
    "\u083d\u083e\u0007\u0005\u0002\u0002\u083e\u0883\u0003\u0002\u0002\u0002",
    "\u083f\u0840\u0007\u0082\u0002\u0002\u0840\u0841\u0007\u0004\u0002\u0002",
    "\u0841\u0842\u0005\u0098M\u0002\u0842\u0843\u0007!\u0002\u0002\u0843",
    "\u0844\u0005\u0098M\u0002\u0844\u0845\u0007\u0005\u0002\u0002\u0845",
    "\u0883\u0003\u0002\u0002\u0002\u0846\u0883\u0005\u009cO\u0002\u0847",
    "\u0883\u0007\u008e\u0002\u0002\u0848\u0849\u0005\u00c4c\u0002\u0849",
    "\u084a\u0007\u0007\u0002\u0002\u084a\u084b\u0007\u008e\u0002\u0002\u084b",
    "\u0883\u0003\u0002\u0002\u0002\u084c\u084d\u0007\u0004\u0002\u0002\u084d",
    "\u0850\u0005\u008eH\u0002\u084e\u084f\u0007\u0006\u0002\u0002\u084f",
    "\u0851\u0005\u008eH\u0002\u0850\u084e\u0003\u0002\u0002\u0002\u0851",
    "\u0852\u0003\u0002\u0002\u0002\u0852\u0850\u0003\u0002\u0002\u0002\u0852",
    "\u0853\u0003\u0002\u0002\u0002\u0853\u0854\u0003\u0002\u0002\u0002\u0854",
    "\u0855\u0007\u0005\u0002\u0002\u0855\u0883\u0003\u0002\u0002\u0002\u0856",
    "\u0857\u0007\u0004\u0002\u0002\u0857\u0858\u0005\u001c\u000f\u0002\u0858",
    "\u0859\u0007\u0005\u0002\u0002\u0859\u0883\u0003\u0002\u0002\u0002\u085a",
    "\u085b\u0005\u00c4c\u0002\u085b\u0867\u0007\u0004\u0002\u0002\u085c",
    "\u085e\u0005d3\u0002\u085d\u085c\u0003\u0002\u0002\u0002\u085d\u085e",
    "\u0003\u0002\u0002\u0002\u085e\u085f\u0003\u0002\u0002\u0002\u085f\u0864",
    "\u0005\u0092J\u0002\u0860\u0861\u0007\u0006\u0002\u0002\u0861\u0863",
    "\u0005\u0092J\u0002\u0862\u0860\u0003\u0002\u0002\u0002\u0863\u0866",
    "\u0003\u0002\u0002\u0002\u0864\u0862\u0003\u0002\u0002\u0002\u0864\u0865",
    "\u0003\u0002\u0002\u0002\u0865\u0868\u0003\u0002\u0002\u0002\u0866\u0864",
    "\u0003\u0002\u0002\u0002\u0867\u085d\u0003\u0002\u0002\u0002\u0867\u0868",
    "\u0003\u0002\u0002\u0002\u0868\u0869\u0003\u0002\u0002\u0002\u0869\u086c",
    "\u0007\u0005\u0002\u0002\u086a\u086b\u0007C\u0002\u0002\u086b\u086d",
    "\u0005\u00be`\u0002\u086c\u086a\u0003\u0002\u0002\u0002\u086c\u086d",
    "\u0003\u0002\u0002\u0002\u086d\u0883\u0003\u0002\u0002\u0002\u086e\u086f",
    "\u0005\u00c4c\u0002\u086f\u0870\u0007\u0004\u0002\u0002\u0870\u0871",
    "\t\u0012\u0002\u0002\u0871\u0872\u0005\u0092J\u0002\u0872\u0873\u0007",
    "\u000e\u0002\u0002\u0873\u0874\u0005\u0092J\u0002\u0874\u0875\u0007",
    "\u0005\u0002\u0002\u0875\u0883\u0003\u0002\u0002\u0002\u0876\u0883\u0005",
    "\u00c6d\u0002\u0877\u0878\u0007\u0004\u0002\u0002\u0878\u0879\u0005",
    "\u0092J\u0002\u0879\u087a\u0007\u0005\u0002\u0002\u087a\u0883\u0003",
    "\u0002\u0002\u0002\u087b\u087c\u0007\u0083\u0002\u0002\u087c\u087d\u0007",
    "\u0004\u0002\u0002\u087d\u087e\u0005\u00c6d\u0002\u087e\u087f\u0007",
    "\u000e\u0002\u0002\u087f\u0880\u0005\u0098M\u0002\u0880\u0881\u0007",
    "\u0005\u0002\u0002\u0881\u0883\u0003\u0002\u0002\u0002\u0882\u07ff\u0003",
    "\u0002\u0002\u0002\u0882\u080c\u0003\u0002\u0002\u0002\u0882\u0819\u0003",
    "\u0002\u0002\u0002\u0882\u0820\u0003\u0002\u0002\u0002\u0882\u082d\u0003",
    "\u0002\u0002\u0002\u0882\u0836\u0003\u0002\u0002\u0002\u0882\u083f\u0003",
    "\u0002\u0002\u0002\u0882\u0846\u0003\u0002\u0002\u0002\u0882\u0847\u0003",
    "\u0002\u0002\u0002\u0882\u0848\u0003\u0002\u0002\u0002\u0882\u084c\u0003",
    "\u0002\u0002\u0002\u0882\u0856\u0003\u0002\u0002\u0002\u0882\u085a\u0003",
    "\u0002\u0002\u0002\u0882\u086e\u0003\u0002\u0002\u0002\u0882\u0876\u0003",
    "\u0002\u0002\u0002\u0882\u0877\u0003\u0002\u0002\u0002\u0882\u087b\u0003",
    "\u0002\u0002\u0002\u0883\u088e\u0003\u0002\u0002\u0002\u0884\u0885\f",
    "\u0007\u0002\u0002\u0885\u0886\u0007\n\u0002\u0002\u0886\u0887\u0005",
    "\u0098M\u0002\u0887\u0888\u0007\u000b\u0002\u0002\u0888\u088d\u0003",
    "\u0002\u0002\u0002\u0889\u088a\f\u0005\u0002\u0002\u088a\u088b\u0007",
    "\u0007\u0002\u0002\u088b\u088d\u0005\u00c6d\u0002\u088c\u0884\u0003",
    "\u0002\u0002\u0002\u088c\u0889\u0003\u0002\u0002\u0002\u088d\u0890\u0003",
    "\u0002\u0002\u0002\u088e\u088c\u0003\u0002\u0002\u0002\u088e\u088f\u0003",
    "\u0002\u0002\u0002\u088f\u009b\u0003\u0002\u0002\u0002\u0890\u088e\u0003",
    "\u0002\u0002\u0002\u0891\u089e\u0007)\u0002\u0002\u0892\u089e\u0005",
    "\u00a6T\u0002\u0893\u0894\u0005\u00c6d\u0002\u0894\u0895\u0007\u00f2",
    "\u0002\u0002\u0895\u089e\u0003\u0002\u0002\u0002\u0896\u089e\u0005\u00ce",
    "h\u0002\u0897\u089e\u0005\u00a4S\u0002\u0898\u089a\u0007\u00f2\u0002",
    "\u0002\u0899\u0898\u0003\u0002\u0002\u0002\u089a\u089b\u0003\u0002\u0002",
    "\u0002\u089b\u0899\u0003\u0002\u0002\u0002\u089b\u089c\u0003\u0002\u0002",
    "\u0002\u089c\u089e\u0003\u0002\u0002\u0002\u089d\u0891\u0003\u0002\u0002",
    "\u0002\u089d\u0892\u0003\u0002\u0002\u0002\u089d\u0893\u0003\u0002\u0002",
    "\u0002\u089d\u0896\u0003\u0002\u0002\u0002\u089d\u0897\u0003\u0002\u0002",
    "\u0002\u089d\u0899\u0003\u0002\u0002\u0002\u089e\u009d\u0003\u0002\u0002",
    "\u0002\u089f\u08a0\t\u0013\u0002\u0002\u08a0\u009f\u0003\u0002\u0002",
    "\u0002\u08a1\u08a2\t\u0014\u0002\u0002\u08a2\u00a1\u0003\u0002\u0002",
    "\u0002\u08a3\u08a4\t\u0015\u0002\u0002\u08a4\u00a3\u0003\u0002\u0002",
    "\u0002\u08a5\u08a6\t\u0016\u0002\u0002\u08a6\u00a5\u0003\u0002\u0002",
    "\u0002\u08a7\u08ab\u00070\u0002\u0002\u08a8\u08aa\u0005\u00a8U\u0002",
    "\u08a9\u08a8\u0003\u0002\u0002\u0002\u08aa\u08ad\u0003\u0002\u0002\u0002",
    "\u08ab\u08a9\u0003\u0002\u0002\u0002\u08ab\u08ac\u0003\u0002\u0002\u0002",
    "\u08ac\u00a7\u0003\u0002\u0002\u0002\u08ad\u08ab\u0003\u0002\u0002\u0002",
    "\u08ae\u08af\u0005\u00aaV\u0002\u08af\u08b2\u0005\u00c6d\u0002\u08b0",
    "\u08b1\u0007l\u0002\u0002\u08b1\u08b3\u0005\u00c6d\u0002\u08b2\u08b0",
    "\u0003\u0002\u0002\u0002\u08b2\u08b3\u0003\u0002\u0002\u0002\u08b3\u00a9",
    "\u0003\u0002\u0002\u0002\u08b4\u08b6\t\u0017\u0002\u0002\u08b5\u08b4",
    "\u0003\u0002\u0002\u0002\u08b5\u08b6\u0003\u0002\u0002\u0002\u08b6\u08b7",
    "\u0003\u0002\u0002\u0002\u08b7\u08ba\t\r\u0002\u0002\u08b8\u08ba\u0007",
    "\u00f2\u0002\u0002\u08b9\u08b5\u0003\u0002\u0002\u0002\u08b9\u08b8\u0003",
    "\u0002\u0002\u0002\u08ba\u00ab\u0003\u0002\u0002\u0002\u08bb\u08bf\u0007",
    "K\u0002\u0002\u08bc\u08bd\u0007L\u0002\u0002\u08bd\u08bf\u0005\u00c6",
    "d\u0002\u08be\u08bb\u0003\u0002\u0002\u0002\u08be\u08bc\u0003\u0002",
    "\u0002\u0002\u08bf\u00ad\u0003\u0002\u0002\u0002\u08c0\u08c1\u0007q",
    "\u0002\u0002\u08c1\u08c2\u0007\u0088\u0002\u0002\u08c2\u08c3\u0005\u00ae",
    "X\u0002\u08c3\u08c4\u0007\u008a\u0002\u0002\u08c4\u08e3\u0003\u0002",
    "\u0002\u0002\u08c5\u08c6\u0007r\u0002\u0002\u08c6\u08c7\u0007\u0088",
    "\u0002\u0002\u08c7\u08c8\u0005\u00aeX\u0002\u08c8\u08c9\u0007\u0006",
    "\u0002\u0002\u08c9\u08ca\u0005\u00aeX\u0002\u08ca\u08cb\u0007\u008a",
    "\u0002\u0002\u08cb\u08e3\u0003\u0002\u0002\u0002\u08cc\u08d3\u0007s",
    "\u0002\u0002\u08cd\u08cf\u0007\u0088\u0002\u0002\u08ce\u08d0\u0005\u00b4",
    "[\u0002\u08cf\u08ce\u0003\u0002\u0002\u0002\u08cf\u08d0\u0003\u0002",
    "\u0002\u0002\u08d0\u08d1\u0003\u0002\u0002\u0002\u08d1\u08d4\u0007\u008a",
    "\u0002\u0002\u08d2\u08d4\u0007\u0086\u0002\u0002\u08d3\u08cd\u0003\u0002",
    "\u0002\u0002\u08d3\u08d2\u0003\u0002\u0002\u0002\u08d4\u08e3\u0003\u0002",
    "\u0002\u0002\u08d5\u08e0\u0005\u00c6d\u0002\u08d6\u08d7\u0007\u0004",
    "\u0002\u0002\u08d7\u08dc\u0007\u00f6\u0002\u0002\u08d8\u08d9\u0007\u0006",
    "\u0002\u0002\u08d9\u08db\u0007\u00f6\u0002\u0002\u08da\u08d8\u0003\u0002",
    "\u0002\u0002\u08db\u08de\u0003\u0002\u0002\u0002\u08dc\u08da\u0003\u0002",
    "\u0002\u0002\u08dc\u08dd\u0003\u0002\u0002\u0002\u08dd\u08df\u0003\u0002",
    "\u0002\u0002\u08de\u08dc\u0003\u0002\u0002\u0002\u08df\u08e1\u0007\u0005",
    "\u0002\u0002\u08e0\u08d6\u0003\u0002\u0002\u0002\u08e0\u08e1\u0003\u0002",
    "\u0002\u0002\u08e1\u08e3\u0003\u0002\u0002\u0002\u08e2\u08c0\u0003\u0002",
    "\u0002\u0002\u08e2\u08c5\u0003\u0002\u0002\u0002\u08e2\u08cc\u0003\u0002",
    "\u0002\u0002\u08e2\u08d5\u0003\u0002\u0002\u0002\u08e3\u00af\u0003\u0002",
    "\u0002\u0002\u08e4\u08e9\u0005\u00b2Z\u0002\u08e5\u08e6\u0007\u0006",
    "\u0002\u0002\u08e6\u08e8\u0005\u00b2Z\u0002\u08e7\u08e5\u0003\u0002",
    "\u0002\u0002\u08e8\u08eb\u0003\u0002\u0002\u0002\u08e9\u08e7\u0003\u0002",
    "\u0002\u0002\u08e9\u08ea\u0003\u0002\u0002\u0002\u08ea\u00b1\u0003\u0002",
    "\u0002\u0002\u08eb\u08e9\u0003\u0002\u0002\u0002\u08ec\u08ed\u0005\u00c6",
    "d\u0002\u08ed\u08f0\u0005\u00aeX\u0002\u08ee\u08ef\u0007t\u0002\u0002",
    "\u08ef\u08f1\u0007\u00f2\u0002\u0002\u08f0\u08ee\u0003\u0002\u0002\u0002",
    "\u08f0\u08f1\u0003\u0002\u0002\u0002\u08f1\u00b3\u0003\u0002\u0002\u0002",
    "\u08f2\u08f7\u0005\u00b6\\\u0002\u08f3\u08f4\u0007\u0006\u0002\u0002",
    "\u08f4\u08f6\u0005\u00b6\\\u0002\u08f5\u08f3\u0003\u0002\u0002\u0002",
    "\u08f6\u08f9\u0003\u0002\u0002\u0002\u08f7\u08f5\u0003\u0002\u0002\u0002",
    "\u08f7\u08f8\u0003\u0002\u0002\u0002\u08f8\u00b5\u0003\u0002\u0002\u0002",
    "\u08f9\u08f7\u0003\u0002\u0002\u0002\u08fa\u08fb\u0005\u00c6d\u0002",
    "\u08fb\u08fc\u0007\f\u0002\u0002\u08fc\u08ff\u0005\u00aeX\u0002\u08fd",
    "\u08fe\u0007t\u0002\u0002\u08fe\u0900\u0007\u00f2\u0002\u0002\u08ff",
    "\u08fd\u0003\u0002\u0002\u0002\u08ff\u0900\u0003\u0002\u0002\u0002\u0900",
    "\u00b7\u0003\u0002\u0002\u0002\u0901\u0902\u00072\u0002\u0002\u0902",
    "\u0903\u0005\u0092J\u0002\u0903\u0904\u00073\u0002\u0002\u0904\u0905",
    "\u0005\u0092J\u0002\u0905\u00b9\u0003\u0002\u0002\u0002\u0906\u0907",
    "\u0007B\u0002\u0002\u0907\u090c\u0005\u00bc_\u0002\u0908\u0909\u0007",
    "\u0006\u0002\u0002\u0909\u090b\u0005\u00bc_\u0002\u090a\u0908\u0003",
    "\u0002\u0002\u0002\u090b\u090e\u0003\u0002\u0002\u0002\u090c\u090a\u0003",
    "\u0002\u0002\u0002\u090c\u090d\u0003\u0002\u0002\u0002\u090d\u00bb\u0003",
    "\u0002\u0002\u0002\u090e\u090c\u0003\u0002\u0002\u0002\u090f\u0910\u0005",
    "\u00c6d\u0002\u0910\u0911\u0007\u0010\u0002\u0002\u0911\u0912\u0005",
    "\u00be`\u0002\u0912\u00bd\u0003\u0002\u0002\u0002\u0913\u093e\u0005",
    "\u00c6d\u0002\u0914\u0937\u0007\u0004\u0002\u0002\u0915\u0916\u0007",
    "\u009c\u0002\u0002\u0916\u0917\u0007\u0016\u0002\u0002\u0917\u091c\u0005",
    "\u0092J\u0002\u0918\u0919\u0007\u0006\u0002\u0002\u0919\u091b\u0005",
    "\u0092J\u0002\u091a\u0918\u0003\u0002\u0002\u0002\u091b\u091e\u0003",
    "\u0002\u0002\u0002\u091c\u091a\u0003\u0002\u0002\u0002\u091c\u091d\u0003",
    "\u0002\u0002\u0002\u091d\u0938\u0003\u0002\u0002\u0002\u091e\u091c\u0003",
    "\u0002\u0002\u0002\u091f\u0920\t\u0018\u0002\u0002\u0920\u0921\u0007",
    "\u0016\u0002\u0002\u0921\u0926\u0005\u0092J\u0002\u0922\u0923\u0007",
    "\u0006\u0002\u0002\u0923\u0925\u0005\u0092J\u0002\u0924\u0922\u0003",
    "\u0002\u0002\u0002\u0925\u0928\u0003\u0002\u0002\u0002\u0926\u0924\u0003",
    "\u0002\u0002\u0002\u0926\u0927\u0003\u0002\u0002\u0002\u0927\u092a\u0003",
    "\u0002\u0002\u0002\u0928\u0926\u0003\u0002\u0002\u0002\u0929\u091f\u0003",
    "\u0002\u0002\u0002\u0929\u092a\u0003\u0002\u0002\u0002\u092a\u0935\u0003",
    "\u0002\u0002\u0002\u092b\u092c\t\u0019\u0002\u0002\u092c\u092d\u0007",
    "\u0016\u0002\u0002\u092d\u0932\u0005N(\u0002\u092e\u092f\u0007\u0006",
    "\u0002\u0002\u092f\u0931\u0005N(\u0002\u0930\u092e\u0003\u0002\u0002",
    "\u0002\u0931\u0934\u0003\u0002\u0002\u0002\u0932\u0930\u0003\u0002\u0002",
    "\u0002\u0932\u0933\u0003\u0002\u0002\u0002\u0933\u0936\u0003\u0002\u0002",
    "\u0002\u0934\u0932\u0003\u0002\u0002\u0002\u0935\u092b\u0003\u0002\u0002",
    "\u0002\u0935\u0936\u0003\u0002\u0002\u0002\u0936\u0938\u0003\u0002\u0002",
    "\u0002\u0937\u0915\u0003\u0002\u0002\u0002\u0937\u0929\u0003\u0002\u0002",
    "\u0002\u0938\u093a\u0003\u0002\u0002\u0002\u0939\u093b\u0005\u00c0a",
    "\u0002\u093a\u0939\u0003\u0002\u0002\u0002\u093a\u093b\u0003\u0002\u0002",
    "\u0002\u093b\u093c\u0003\u0002\u0002\u0002\u093c\u093e\u0007\u0005\u0002",
    "\u0002\u093d\u0913\u0003\u0002\u0002\u0002\u093d\u0914\u0003\u0002\u0002",
    "\u0002\u093e\u00bf\u0003\u0002\u0002\u0002\u093f\u0940\u0007E\u0002",
    "\u0002\u0940\u0950\u0005\u00c2b\u0002\u0941\u0942\u0007F\u0002\u0002",
    "\u0942\u0950\u0005\u00c2b\u0002\u0943\u0944\u0007E\u0002\u0002\u0944",
    "\u0945\u0007%\u0002\u0002\u0945\u0946\u0005\u00c2b\u0002\u0946\u0947",
    "\u0007 \u0002\u0002\u0947\u0948\u0005\u00c2b\u0002\u0948\u0950\u0003",
    "\u0002\u0002\u0002\u0949\u094a\u0007F\u0002\u0002\u094a\u094b\u0007",
    "%\u0002\u0002\u094b\u094c\u0005\u00c2b\u0002\u094c\u094d\u0007 \u0002",
    "\u0002\u094d\u094e\u0005\u00c2b\u0002\u094e\u0950\u0003\u0002\u0002",
    "\u0002\u094f\u093f\u0003\u0002\u0002\u0002\u094f\u0941\u0003\u0002\u0002",
    "\u0002\u094f\u0943\u0003\u0002\u0002\u0002\u094f\u0949\u0003\u0002\u0002",
    "\u0002\u0950\u00c1\u0003\u0002\u0002\u0002\u0951\u0952\u0007G\u0002",
    "\u0002\u0952\u0959\t\u001a\u0002\u0002\u0953\u0954\u0007J\u0002\u0002",
    "\u0954\u0959\u0007N\u0002\u0002\u0955\u0956\u0005\u0092J\u0002\u0956",
    "\u0957\t\u001a\u0002\u0002\u0957\u0959\u0003\u0002\u0002\u0002\u0958",
    "\u0951\u0003\u0002\u0002\u0002\u0958\u0953\u0003\u0002\u0002\u0002\u0958",
    "\u0955\u0003\u0002\u0002\u0002\u0959\u00c3\u0003\u0002\u0002\u0002\u095a",
    "\u095f\u0005\u00c6d\u0002\u095b\u095c\u0007\u0007\u0002\u0002\u095c",
    "\u095e\u0005\u00c6d\u0002\u095d\u095b\u0003\u0002\u0002\u0002\u095e",
    "\u0961\u0003\u0002\u0002\u0002\u095f\u095d\u0003\u0002\u0002\u0002\u095f",
    "\u0960\u0003\u0002\u0002\u0002\u0960\u00c5\u0003\u0002\u0002\u0002\u0961",
    "\u095f\u0003\u0002\u0002\u0002\u0962\u0972\u0005\u00caf\u0002\u0963",
    "\u0972\u0007\u00ef\u0002\u0002\u0964\u0972\u0007=\u0002\u0002\u0965",
    "\u0972\u00079\u0002\u0002\u0966\u0972\u0007:\u0002\u0002\u0967\u0972",
    "\u0007;\u0002\u0002\u0968\u0972\u0007<\u0002\u0002\u0969\u0972\u0007",
    ">\u0002\u0002\u096a\u0972\u00076\u0002\u0002\u096b\u0972\u00077\u0002",
    "\u0002\u096c\u0972\u0007?\u0002\u0002\u096d\u0972\u0007h\u0002\u0002",
    "\u096e\u0972\u0007k\u0002\u0002\u096f\u0972\u0007i\u0002\u0002\u0970",
    "\u0972\u0007j\u0002\u0002\u0971\u0962\u0003\u0002\u0002\u0002\u0971",
    "\u0963\u0003\u0002\u0002\u0002\u0971\u0964\u0003\u0002\u0002\u0002\u0971",
    "\u0965\u0003\u0002\u0002\u0002\u0971\u0966\u0003\u0002\u0002\u0002\u0971",
    "\u0967\u0003\u0002\u0002\u0002\u0971\u0968\u0003\u0002\u0002\u0002\u0971",
    "\u0969\u0003\u0002\u0002\u0002\u0971\u096a\u0003\u0002\u0002\u0002\u0971",
    "\u096b\u0003\u0002\u0002\u0002\u0971\u096c\u0003\u0002\u0002\u0002\u0971",
    "\u096d\u0003\u0002\u0002\u0002\u0971\u096e\u0003\u0002\u0002\u0002\u0971",
    "\u096f\u0003\u0002\u0002\u0002\u0971\u0970\u0003\u0002\u0002\u0002\u0972",
    "\u00c7\u0003\u0002\u0002\u0002\u0973\u0984\u0007\u00fa\u0002\u0002\u0974",
    "\u0984\u0005\u00d0i\u0002\u0975\u0984\u0007\u00ef\u0002\u0002\u0976",
    "\u0984\u0007=\u0002\u0002\u0977\u0984\u00079\u0002\u0002\u0978\u0984",
    "\u0007:\u0002\u0002\u0979\u0984\u0007;\u0002\u0002\u097a\u0984\u0007",
    "<\u0002\u0002\u097b\u0984\u0007>\u0002\u0002\u097c\u0984\u00076\u0002",
    "\u0002\u097d\u0984\u00077\u0002\u0002\u097e\u0984\u0007?\u0002\u0002",
    "\u097f\u0984\u0007h\u0002\u0002\u0980\u0984\u0007k\u0002\u0002\u0981",
    "\u0984\u0007i\u0002\u0002\u0982\u0984\u0007j\u0002\u0002\u0983\u0973",
    "\u0003\u0002\u0002\u0002\u0983\u0974\u0003\u0002\u0002\u0002\u0983\u0975",
    "\u0003\u0002\u0002\u0002\u0983\u0976\u0003\u0002\u0002\u0002\u0983\u0977",
    "\u0003\u0002\u0002\u0002\u0983\u0978\u0003\u0002\u0002\u0002\u0983\u0979",
    "\u0003\u0002\u0002\u0002\u0983\u097a\u0003\u0002\u0002\u0002\u0983\u097b",
    "\u0003\u0002\u0002\u0002\u0983\u097c\u0003\u0002\u0002\u0002\u0983\u097d",
    "\u0003\u0002\u0002\u0002\u0983\u097e\u0003\u0002\u0002\u0002\u0983\u097f",
    "\u0003\u0002\u0002\u0002\u0983\u0980\u0003\u0002\u0002\u0002\u0983\u0981",
    "\u0003\u0002\u0002\u0002\u0983\u0982\u0003\u0002\u0002\u0002\u0984\u00c9",
    "\u0003\u0002\u0002\u0002\u0985\u0989\u0007\u00fa\u0002\u0002\u0986\u0989",
    "\u0005\u00ccg\u0002\u0987\u0989\u0005\u00d0i\u0002\u0988\u0985\u0003",
    "\u0002\u0002\u0002\u0988\u0986\u0003\u0002\u0002\u0002\u0988\u0987\u0003",
    "\u0002\u0002\u0002\u0989\u00cb\u0003\u0002\u0002\u0002\u098a\u098b\u0007",
    "\u00fb\u0002\u0002\u098b\u00cd\u0003\u0002\u0002\u0002\u098c\u098e\u0007",
    "\u008d\u0002\u0002\u098d\u098c\u0003\u0002\u0002\u0002\u098d\u098e\u0003",
    "\u0002\u0002\u0002\u098e\u098f\u0003\u0002\u0002\u0002\u098f\u09a9\u0007",
    "\u00f7\u0002\u0002\u0990\u0992\u0007\u008d\u0002\u0002\u0991\u0990\u0003",
    "\u0002\u0002\u0002\u0991\u0992\u0003\u0002\u0002\u0002\u0992\u0993\u0003",
    "\u0002\u0002\u0002\u0993\u09a9\u0007\u00f6\u0002\u0002\u0994\u0996\u0007",
    "\u008d\u0002\u0002\u0995\u0994\u0003\u0002\u0002\u0002\u0995\u0996\u0003",
    "\u0002\u0002\u0002\u0996\u0997\u0003\u0002\u0002\u0002\u0997\u09a9\u0007",
    "\u00f3\u0002\u0002\u0998\u099a\u0007\u008d\u0002\u0002\u0999\u0998\u0003",
    "\u0002\u0002\u0002\u0999\u099a\u0003\u0002\u0002\u0002\u099a\u099b\u0003",
    "\u0002\u0002\u0002\u099b\u09a9\u0007\u00f4\u0002\u0002\u099c\u099e\u0007",
    "\u008d\u0002\u0002\u099d\u099c\u0003\u0002\u0002\u0002\u099d\u099e\u0003",
    "\u0002\u0002\u0002\u099e\u099f\u0003\u0002\u0002\u0002\u099f\u09a9\u0007",
    "\u00f5\u0002\u0002\u09a0\u09a2\u0007\u008d\u0002\u0002\u09a1\u09a0\u0003",
    "\u0002\u0002\u0002\u09a1\u09a2\u0003\u0002\u0002\u0002\u09a2\u09a3\u0003",
    "\u0002\u0002\u0002\u09a3\u09a9\u0007\u00f8\u0002\u0002\u09a4\u09a6\u0007",
    "\u008d\u0002\u0002\u09a5\u09a4\u0003\u0002\u0002\u0002\u09a5\u09a6\u0003",
    "\u0002\u0002\u0002\u09a6\u09a7\u0003\u0002\u0002\u0002\u09a7\u09a9\u0007",
    "\u00f9\u0002\u0002\u09a8\u098d\u0003\u0002\u0002\u0002\u09a8\u0991\u0003",
    "\u0002\u0002\u0002\u09a8\u0995\u0003\u0002\u0002\u0002\u09a8\u0999\u0003",
    "\u0002\u0002\u0002\u09a8\u099d\u0003\u0002\u0002\u0002\u09a8\u09a1\u0003",
    "\u0002\u0002\u0002\u09a8\u09a5\u0003\u0002\u0002\u0002\u09a9\u00cf\u0003",
    "\u0002\u0002\u0002\u09aa\u09ab\t\u001b\u0002\u0002\u09ab\u00d1\u0003",
    "\u0002\u0002\u0002\u014a\u00e8\u00ed\u00f1\u00fd\u0102\u0105\u010a\u0117",
    "\u011b\u0122\u0130\u0132\u0136\u0139\u0140\u0151\u0153\u0157\u015a\u0161",
    "\u0167\u016d\u0175\u0195\u019d\u01a1\u01a6\u01ac\u01b4\u01ba\u01c7\u01cc",
    "\u01d5\u01da\u01ea\u01f1\u01f5\u01fd\u0204\u020b\u021a\u021e\u0224\u022a",
    "\u022d\u0230\u0236\u023a\u023e\u0243\u0247\u024f\u0252\u025b\u0260\u0266",
    "\u026d\u0270\u0276\u0281\u0284\u0288\u028d\u0292\u0299\u029c\u029f\u02a6",
    "\u02ab\u02b0\u02b3\u02bc\u02c4\u02ca\u02ce\u02d2\u02d6\u02d8\u02e1\u02e7",
    "\u02ec\u02ef\u02f3\u02f6\u0300\u0303\u0307\u030c\u030f\u0315\u031d\u0322",
    "\u0328\u032e\u0339\u0341\u0348\u0350\u0353\u035b\u035f\u0366\u03da\u03e2",
    "\u03ea\u03f3\u03ff\u0403\u0406\u040c\u0416\u0422\u0427\u042d\u0439\u043b",
    "\u0440\u0444\u0449\u044e\u0451\u0456\u045a\u045f\u0461\u0465\u046e\u0476",
    "\u047d\u0484\u048d\u0492\u04a1\u04a8\u04ab\u04b2\u04b6\u04bc\u04c4\u04cf",
    "\u04da\u04e1\u04e7\u04ed\u04f6\u04f8\u0501\u0504\u050d\u0510\u0519\u051c",
    "\u0525\u0528\u052b\u0530\u0532\u0535\u0540\u0545\u0550\u0554\u0558\u0564",
    "\u0567\u056b\u0575\u0579\u057b\u057e\u0582\u0585\u0589\u058f\u0593\u0597",
    "\u059c\u059f\u05a1\u05a6\u05ab\u05ae\u05b2\u05b5\u05b7\u05bc\u05c1\u05ce",
    "\u05d3\u05db\u05e1\u05e5\u05ee\u05fd\u0602\u060e\u0613\u061b\u061e\u0622",
    "\u0630\u063d\u0642\u0646\u0649\u064e\u0657\u065a\u065f\u0666\u0669\u0671",
    "\u0678\u067f\u0682\u0687\u068d\u0691\u0694\u0697\u06a2\u06a7\u06ac\u06b1",
    "\u06c3\u06c5\u06c8\u06d3\u06dc\u06e3\u06eb\u06f3\u06f7\u06ff\u0707\u070d",
    "\u0715\u0721\u0724\u072a\u072e\u0730\u0739\u0745\u0747\u074e\u0755\u075b",
    "\u0761\u0763\u076d\u0772\u0777\u077e\u0784\u0788\u078a\u0791\u07a0\u07a2",
    "\u07aa\u07ac\u07b0\u07b8\u07c1\u07c7\u07cf\u07d5\u07da\u07df\u07e5\u07fa",
    "\u07fc\u0804\u0808\u0811\u0815\u0827\u082a\u0832\u083b\u0852\u085d\u0864",
    "\u0867\u086c\u0882\u088c\u088e\u089b\u089d\u08ab\u08b2\u08b5\u08b9\u08be",
    "\u08cf\u08d3\u08dc\u08e0\u08e2\u08e9\u08f0\u08f7\u08ff\u090c\u091c\u0926",
    "\u0929\u0932\u0935\u0937\u093a\u093d\u094f\u0958\u095f\u0971\u0983\u0988",
    "\u098d\u0991\u0995\u0999\u099d\u09a1\u09a5\u09a8"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "';'", "'('", "')'", "','", "'.'", "'/*+'", "'*/'", 
                     "'['", "']'", "':'", null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, "'<=>'", 
                     "'<>'", "'!='", "'<'", null, "'>'", null, "'+'", "'-'", 
                     "'*'", "'/'", "'%'", null, "'~'", "'&'", "'|'", "'||'", 
                     "'^'", null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, "'/**/'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, "SELECT", "FROM", "ADD", "AS", "ALL", 
                      "ANY", "DISTINCT", "WHERE", "GROUP", "BY", "GROUPING", 
                      "SETS", "CUBE", "ROLLUP", "ORDER", "HAVING", "LIMIT", 
                      "AT", "OR", "AND", "IN", "NOT", "NO", "EXISTS", "BETWEEN", 
                      "LIKE", "RLIKE", "IS", "NULL", "TRUE", "FALSE", "NULLS", 
                      "ASC", "DESC", "FOR", "INTERVAL", "CASE", "WHEN", 
                      "THEN", "ELSE", "END", "JOIN", "CROSS", "OUTER", "INNER", 
                      "LEFT", "SEMI", "RIGHT", "FULL", "NATURAL", "ON", 
                      "PIVOT", "LATERAL", "WINDOW", "OVER", "PARTITION", 
                      "RANGE", "ROWS", "UNBOUNDED", "PRECEDING", "FOLLOWING", 
                      "CURRENT", "FIRST", "AFTER", "LAST", "ROW", "WITH", 
                      "VALUES", "CREATE", "TABLE", "DIRECTORY", "VIEW", 
                      "REPLACE", "INSERT", "DELETE", "INTO", "DESCRIBE", 
                      "EXPLAIN", "FORMAT", "LOGICAL", "CODEGEN", "COST", 
                      "CAST", "SHOW", "TABLES", "COLUMNS", "COLUMN", "USE", 
                      "PARTITIONS", "FUNCTIONS", "DROP", "UNION", "EXCEPT", 
                      "SETMINUS", "INTERSECT", "TO", "TABLESAMPLE", "STRATIFY", 
                      "ALTER", "RENAME", "ARRAY", "MAP", "STRUCT", "COMMENT", 
                      "SET", "RESET", "DATA", "START", "TRANSACTION", "COMMIT", 
                      "ROLLBACK", "MACRO", "IGNORE", "BOTH", "LEADING", 
                      "TRAILING", "IF", "POSITION", "EXTRACT", "EQ", "NSEQ", 
                      "NEQ", "NEQJ", "LT", "LTE", "GT", "GTE", "PLUS", "MINUS", 
                      "ASTERISK", "SLASH", "PERCENT", "DIV", "TILDE", "AMPERSAND", 
                      "PIPE", "CONCAT_PIPE", "HAT", "PERCENTLIT", "BUCKET", 
                      "OUT", "OF", "SORT", "CLUSTER", "DISTRIBUTE", "OVERWRITE", 
                      "TRANSFORM", "REDUCE", "USING", "SERDE", "SERDEPROPERTIES", 
                      "RECORDREADER", "RECORDWRITER", "DELIMITED", "FIELDS", 
                      "TERMINATED", "COLLECTION", "ITEMS", "KEYS", "ESCAPED", 
                      "LINES", "SEPARATED", "SQLFUNCTION", "EXTENDED", "REFRESH", 
                      "CLEAR", "CACHE", "UNCACHE", "LAZY", "FORMATTED", 
                      "GLOBAL", "TEMPORARY", "OPTIONS", "UNSET", "TBLPROPERTIES", 
                      "DBPROPERTIES", "BUCKETS", "SKEWED", "STORED", "DIRECTORIES", 
                      "LOCATION", "EXCHANGE", "ARCHIVE", "UNARCHIVE", "FILEFORMAT", 
                      "TOUCH", "COMPACT", "CONCATENATE", "CHANGE", "CASCADE", 
                      "RESTRICT", "CLUSTERED", "SORTED", "PURGE", "INPUTFORMAT", 
                      "OUTPUTFORMAT", "DATABASE", "DATABASES", "DFS", "TRUNCATE", 
                      "ANALYZE", "COMPUTE", "LIST", "STATISTICS", "PARTITIONED", 
                      "EXTERNAL", "DEFINED", "REVOKE", "GRANT", "LOCK", 
                      "UNLOCK", "MSCK", "REPAIR", "RECOVER", "EXPORT", "IMPORT", 
                      "LOAD", "ROLE", "ROLES", "COMPACTIONS", "PRINCIPALS", 
                      "TRANSACTIONS", "INDEX", "INDEXES", "LOCKS", "OPTION", 
                      "ANTI", "LOCAL", "INPATH", "STRING", "BIGINT_LITERAL", 
                      "SMALLINT_LITERAL", "TINYINT_LITERAL", "INTEGER_VALUE", 
                      "DECIMAL_VALUE", "DOUBLE_LITERAL", "BIGDECIMAL_LITERAL", 
                      "IDENTIFIER", "BACKQUOTED_IDENTIFIER", "SIMPLE_COMMENT", 
                      "BRACKETED_EMPTY_COMMENT", "BRACKETED_COMMENT", "WS", 
                      "UNRECOGNIZED" ];

var ruleNames =  [ "singleStatement", "singleExpression", "singleTableIdentifier", 
                   "singleFunctionIdentifier", "singleDataType", "singleTableSchema", 
                   "statements", "statement", "unsupportedHiveNativeCommands", 
                   "createTableHeader", "bucketSpec", "skewSpec", "locationSpec", 
                   "query", "insertInto", "partitionSpecLocation", "partitionSpec", 
                   "partitionVal", "describeFuncName", "describeColName", 
                   "ctes", "namedQuery", "tableProvider", "tablePropertyList", 
                   "tableProperty", "tablePropertyKey", "tablePropertyValue", 
                   "constantList", "nestedConstantList", "createFileFormat", 
                   "fileFormat", "storageHandler", "resource", "queryNoWith", 
                   "queryOrganization", "multiInsertQueryBody", "queryTerm", 
                   "queryPrimary", "sortItem", "querySpecification", "hint", 
                   "hintStatement", "fromClause", "aggregation", "groupingSet", 
                   "pivotClause", "pivotColumn", "pivotValue", "lateralView", 
                   "setQuantifier", "relation", "joinRelation", "joinType", 
                   "joinCriteria", "sample", "sampleMethod", "identifierList", 
                   "identifierSeq", "orderedIdentifierList", "orderedIdentifier", 
                   "identifierCommentList", "identifierComment", "relationPrimary", 
                   "inlineTable", "functionTable", "tableAlias", "rowFormat", 
                   "tableIdentifierWithFunc", "tableIdentifier", "functionIdentifier", 
                   "namedExpression", "namedExpressionSeq", "expression", 
                   "booleanExpression", "predicate", "valueExpression", 
                   "primaryExpression", "constant", "comparisonOperator", 
                   "arithmeticOperator", "predicateOperator", "booleanValue", 
                   "interval", "intervalField", "intervalValue", "colPosition", 
                   "dataType", "colTypeList", "colType", "complexColTypeList", 
                   "complexColType", "whenClause", "windows", "namedWindow", 
                   "windowSpec", "windowFrame", "frameBound", "qualifiedName", 
                   "identifier", "sqlFuncIdentifier", "strictIdentifier", 
                   "quotedIdentifier", "number", "nonReserved" ];

function SqlBaseParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;

	  /**
	   * Verify whether current token is a valid decimal token (which contains dot).
	   * Returns true if the character that follows the token is not a digit or letter or underscore.
	   *
	   * For example:
	   * For char stream "2.3", "2." is not a valid decimal token, because it is followed by digit '3'.
	   * For char stream "2.3_", "2.3" is not a valid decimal token, because it is followed by '_'.
	   * For char stream "2.3W", "2.3" is not a valid decimal token, because it is followed by 'W'.
	   * For char stream "12.0D 34.E2+0.12 "  12.0D is a valid decimal token because it is followed
	   * by a space. 34.E2 is a valid decimal token because it is followed by symbol '+'
	   * which is not a digit or letter or underscore.
	   */
	  function isValidDecimal() {
	    var nextChar = this._input.LA(1);
	    if (nextChar >= 'A' && nextChar <= 'Z' || nextChar >= '0' && nextChar <= '9' ||
	      nextChar == '_') {
	      return false;
	    } else {
	      return true;
	    }
	  }

    return this;
}

SqlBaseParser.prototype = Object.create(antlr4.Parser.prototype);
SqlBaseParser.prototype.constructor = SqlBaseParser;

Object.defineProperty(SqlBaseParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

SqlBaseParser.EOF = antlr4.Token.EOF;
SqlBaseParser.T__0 = 1;
SqlBaseParser.T__1 = 2;
SqlBaseParser.T__2 = 3;
SqlBaseParser.T__3 = 4;
SqlBaseParser.T__4 = 5;
SqlBaseParser.T__5 = 6;
SqlBaseParser.T__6 = 7;
SqlBaseParser.T__7 = 8;
SqlBaseParser.T__8 = 9;
SqlBaseParser.T__9 = 10;
SqlBaseParser.SELECT = 11;
SqlBaseParser.FROM = 12;
SqlBaseParser.ADD = 13;
SqlBaseParser.AS = 14;
SqlBaseParser.ALL = 15;
SqlBaseParser.ANY = 16;
SqlBaseParser.DISTINCT = 17;
SqlBaseParser.WHERE = 18;
SqlBaseParser.GROUP = 19;
SqlBaseParser.BY = 20;
SqlBaseParser.GROUPING = 21;
SqlBaseParser.SETS = 22;
SqlBaseParser.CUBE = 23;
SqlBaseParser.ROLLUP = 24;
SqlBaseParser.ORDER = 25;
SqlBaseParser.HAVING = 26;
SqlBaseParser.LIMIT = 27;
SqlBaseParser.AT = 28;
SqlBaseParser.OR = 29;
SqlBaseParser.AND = 30;
SqlBaseParser.IN = 31;
SqlBaseParser.NOT = 32;
SqlBaseParser.NO = 33;
SqlBaseParser.EXISTS = 34;
SqlBaseParser.BETWEEN = 35;
SqlBaseParser.LIKE = 36;
SqlBaseParser.RLIKE = 37;
SqlBaseParser.IS = 38;
SqlBaseParser.NULL = 39;
SqlBaseParser.TRUE = 40;
SqlBaseParser.FALSE = 41;
SqlBaseParser.NULLS = 42;
SqlBaseParser.ASC = 43;
SqlBaseParser.DESC = 44;
SqlBaseParser.FOR = 45;
SqlBaseParser.INTERVAL = 46;
SqlBaseParser.CASE = 47;
SqlBaseParser.WHEN = 48;
SqlBaseParser.THEN = 49;
SqlBaseParser.ELSE = 50;
SqlBaseParser.END = 51;
SqlBaseParser.JOIN = 52;
SqlBaseParser.CROSS = 53;
SqlBaseParser.OUTER = 54;
SqlBaseParser.INNER = 55;
SqlBaseParser.LEFT = 56;
SqlBaseParser.SEMI = 57;
SqlBaseParser.RIGHT = 58;
SqlBaseParser.FULL = 59;
SqlBaseParser.NATURAL = 60;
SqlBaseParser.ON = 61;
SqlBaseParser.PIVOT = 62;
SqlBaseParser.LATERAL = 63;
SqlBaseParser.WINDOW = 64;
SqlBaseParser.OVER = 65;
SqlBaseParser.PARTITION = 66;
SqlBaseParser.RANGE = 67;
SqlBaseParser.ROWS = 68;
SqlBaseParser.UNBOUNDED = 69;
SqlBaseParser.PRECEDING = 70;
SqlBaseParser.FOLLOWING = 71;
SqlBaseParser.CURRENT = 72;
SqlBaseParser.FIRST = 73;
SqlBaseParser.AFTER = 74;
SqlBaseParser.LAST = 75;
SqlBaseParser.ROW = 76;
SqlBaseParser.WITH = 77;
SqlBaseParser.VALUES = 78;
SqlBaseParser.CREATE = 79;
SqlBaseParser.TABLE = 80;
SqlBaseParser.DIRECTORY = 81;
SqlBaseParser.VIEW = 82;
SqlBaseParser.REPLACE = 83;
SqlBaseParser.INSERT = 84;
SqlBaseParser.DELETE = 85;
SqlBaseParser.INTO = 86;
SqlBaseParser.DESCRIBE = 87;
SqlBaseParser.EXPLAIN = 88;
SqlBaseParser.FORMAT = 89;
SqlBaseParser.LOGICAL = 90;
SqlBaseParser.CODEGEN = 91;
SqlBaseParser.COST = 92;
SqlBaseParser.CAST = 93;
SqlBaseParser.SHOW = 94;
SqlBaseParser.TABLES = 95;
SqlBaseParser.COLUMNS = 96;
SqlBaseParser.COLUMN = 97;
SqlBaseParser.USE = 98;
SqlBaseParser.PARTITIONS = 99;
SqlBaseParser.FUNCTIONS = 100;
SqlBaseParser.DROP = 101;
SqlBaseParser.UNION = 102;
SqlBaseParser.EXCEPT = 103;
SqlBaseParser.SETMINUS = 104;
SqlBaseParser.INTERSECT = 105;
SqlBaseParser.TO = 106;
SqlBaseParser.TABLESAMPLE = 107;
SqlBaseParser.STRATIFY = 108;
SqlBaseParser.ALTER = 109;
SqlBaseParser.RENAME = 110;
SqlBaseParser.ARRAY = 111;
SqlBaseParser.MAP = 112;
SqlBaseParser.STRUCT = 113;
SqlBaseParser.COMMENT = 114;
SqlBaseParser.SET = 115;
SqlBaseParser.RESET = 116;
SqlBaseParser.DATA = 117;
SqlBaseParser.START = 118;
SqlBaseParser.TRANSACTION = 119;
SqlBaseParser.COMMIT = 120;
SqlBaseParser.ROLLBACK = 121;
SqlBaseParser.MACRO = 122;
SqlBaseParser.IGNORE = 123;
SqlBaseParser.BOTH = 124;
SqlBaseParser.LEADING = 125;
SqlBaseParser.TRAILING = 126;
SqlBaseParser.IF = 127;
SqlBaseParser.POSITION = 128;
SqlBaseParser.EXTRACT = 129;
SqlBaseParser.EQ = 130;
SqlBaseParser.NSEQ = 131;
SqlBaseParser.NEQ = 132;
SqlBaseParser.NEQJ = 133;
SqlBaseParser.LT = 134;
SqlBaseParser.LTE = 135;
SqlBaseParser.GT = 136;
SqlBaseParser.GTE = 137;
SqlBaseParser.PLUS = 138;
SqlBaseParser.MINUS = 139;
SqlBaseParser.ASTERISK = 140;
SqlBaseParser.SLASH = 141;
SqlBaseParser.PERCENT = 142;
SqlBaseParser.DIV = 143;
SqlBaseParser.TILDE = 144;
SqlBaseParser.AMPERSAND = 145;
SqlBaseParser.PIPE = 146;
SqlBaseParser.CONCAT_PIPE = 147;
SqlBaseParser.HAT = 148;
SqlBaseParser.PERCENTLIT = 149;
SqlBaseParser.BUCKET = 150;
SqlBaseParser.OUT = 151;
SqlBaseParser.OF = 152;
SqlBaseParser.SORT = 153;
SqlBaseParser.CLUSTER = 154;
SqlBaseParser.DISTRIBUTE = 155;
SqlBaseParser.OVERWRITE = 156;
SqlBaseParser.TRANSFORM = 157;
SqlBaseParser.REDUCE = 158;
SqlBaseParser.USING = 159;
SqlBaseParser.SERDE = 160;
SqlBaseParser.SERDEPROPERTIES = 161;
SqlBaseParser.RECORDREADER = 162;
SqlBaseParser.RECORDWRITER = 163;
SqlBaseParser.DELIMITED = 164;
SqlBaseParser.FIELDS = 165;
SqlBaseParser.TERMINATED = 166;
SqlBaseParser.COLLECTION = 167;
SqlBaseParser.ITEMS = 168;
SqlBaseParser.KEYS = 169;
SqlBaseParser.ESCAPED = 170;
SqlBaseParser.LINES = 171;
SqlBaseParser.SEPARATED = 172;
SqlBaseParser.SQLFUNCTION = 173;
SqlBaseParser.EXTENDED = 174;
SqlBaseParser.REFRESH = 175;
SqlBaseParser.CLEAR = 176;
SqlBaseParser.CACHE = 177;
SqlBaseParser.UNCACHE = 178;
SqlBaseParser.LAZY = 179;
SqlBaseParser.FORMATTED = 180;
SqlBaseParser.GLOBAL = 181;
SqlBaseParser.TEMPORARY = 182;
SqlBaseParser.OPTIONS = 183;
SqlBaseParser.UNSET = 184;
SqlBaseParser.TBLPROPERTIES = 185;
SqlBaseParser.DBPROPERTIES = 186;
SqlBaseParser.BUCKETS = 187;
SqlBaseParser.SKEWED = 188;
SqlBaseParser.STORED = 189;
SqlBaseParser.DIRECTORIES = 190;
SqlBaseParser.LOCATION = 191;
SqlBaseParser.EXCHANGE = 192;
SqlBaseParser.ARCHIVE = 193;
SqlBaseParser.UNARCHIVE = 194;
SqlBaseParser.FILEFORMAT = 195;
SqlBaseParser.TOUCH = 196;
SqlBaseParser.COMPACT = 197;
SqlBaseParser.CONCATENATE = 198;
SqlBaseParser.CHANGE = 199;
SqlBaseParser.CASCADE = 200;
SqlBaseParser.RESTRICT = 201;
SqlBaseParser.CLUSTERED = 202;
SqlBaseParser.SORTED = 203;
SqlBaseParser.PURGE = 204;
SqlBaseParser.INPUTFORMAT = 205;
SqlBaseParser.OUTPUTFORMAT = 206;
SqlBaseParser.DATABASE = 207;
SqlBaseParser.DATABASES = 208;
SqlBaseParser.DFS = 209;
SqlBaseParser.TRUNCATE = 210;
SqlBaseParser.ANALYZE = 211;
SqlBaseParser.COMPUTE = 212;
SqlBaseParser.LIST = 213;
SqlBaseParser.STATISTICS = 214;
SqlBaseParser.PARTITIONED = 215;
SqlBaseParser.EXTERNAL = 216;
SqlBaseParser.DEFINED = 217;
SqlBaseParser.REVOKE = 218;
SqlBaseParser.GRANT = 219;
SqlBaseParser.LOCK = 220;
SqlBaseParser.UNLOCK = 221;
SqlBaseParser.MSCK = 222;
SqlBaseParser.REPAIR = 223;
SqlBaseParser.RECOVER = 224;
SqlBaseParser.EXPORT = 225;
SqlBaseParser.IMPORT = 226;
SqlBaseParser.LOAD = 227;
SqlBaseParser.ROLE = 228;
SqlBaseParser.ROLES = 229;
SqlBaseParser.COMPACTIONS = 230;
SqlBaseParser.PRINCIPALS = 231;
SqlBaseParser.TRANSACTIONS = 232;
SqlBaseParser.INDEX = 233;
SqlBaseParser.INDEXES = 234;
SqlBaseParser.LOCKS = 235;
SqlBaseParser.OPTION = 236;
SqlBaseParser.ANTI = 237;
SqlBaseParser.LOCAL = 238;
SqlBaseParser.INPATH = 239;
SqlBaseParser.STRING = 240;
SqlBaseParser.BIGINT_LITERAL = 241;
SqlBaseParser.SMALLINT_LITERAL = 242;
SqlBaseParser.TINYINT_LITERAL = 243;
SqlBaseParser.INTEGER_VALUE = 244;
SqlBaseParser.DECIMAL_VALUE = 245;
SqlBaseParser.DOUBLE_LITERAL = 246;
SqlBaseParser.BIGDECIMAL_LITERAL = 247;
SqlBaseParser.IDENTIFIER = 248;
SqlBaseParser.BACKQUOTED_IDENTIFIER = 249;
SqlBaseParser.SIMPLE_COMMENT = 250;
SqlBaseParser.BRACKETED_EMPTY_COMMENT = 251;
SqlBaseParser.BRACKETED_COMMENT = 252;
SqlBaseParser.WS = 253;
SqlBaseParser.UNRECOGNIZED = 254;

SqlBaseParser.RULE_singleStatement = 0;
SqlBaseParser.RULE_singleExpression = 1;
SqlBaseParser.RULE_singleTableIdentifier = 2;
SqlBaseParser.RULE_singleFunctionIdentifier = 3;
SqlBaseParser.RULE_singleDataType = 4;
SqlBaseParser.RULE_singleTableSchema = 5;
SqlBaseParser.RULE_statements = 6;
SqlBaseParser.RULE_statement = 7;
SqlBaseParser.RULE_unsupportedHiveNativeCommands = 8;
SqlBaseParser.RULE_createTableHeader = 9;
SqlBaseParser.RULE_bucketSpec = 10;
SqlBaseParser.RULE_skewSpec = 11;
SqlBaseParser.RULE_locationSpec = 12;
SqlBaseParser.RULE_query = 13;
SqlBaseParser.RULE_insertInto = 14;
SqlBaseParser.RULE_partitionSpecLocation = 15;
SqlBaseParser.RULE_partitionSpec = 16;
SqlBaseParser.RULE_partitionVal = 17;
SqlBaseParser.RULE_describeFuncName = 18;
SqlBaseParser.RULE_describeColName = 19;
SqlBaseParser.RULE_ctes = 20;
SqlBaseParser.RULE_namedQuery = 21;
SqlBaseParser.RULE_tableProvider = 22;
SqlBaseParser.RULE_tablePropertyList = 23;
SqlBaseParser.RULE_tableProperty = 24;
SqlBaseParser.RULE_tablePropertyKey = 25;
SqlBaseParser.RULE_tablePropertyValue = 26;
SqlBaseParser.RULE_constantList = 27;
SqlBaseParser.RULE_nestedConstantList = 28;
SqlBaseParser.RULE_createFileFormat = 29;
SqlBaseParser.RULE_fileFormat = 30;
SqlBaseParser.RULE_storageHandler = 31;
SqlBaseParser.RULE_resource = 32;
SqlBaseParser.RULE_queryNoWith = 33;
SqlBaseParser.RULE_queryOrganization = 34;
SqlBaseParser.RULE_multiInsertQueryBody = 35;
SqlBaseParser.RULE_queryTerm = 36;
SqlBaseParser.RULE_queryPrimary = 37;
SqlBaseParser.RULE_sortItem = 38;
SqlBaseParser.RULE_querySpecification = 39;
SqlBaseParser.RULE_hint = 40;
SqlBaseParser.RULE_hintStatement = 41;
SqlBaseParser.RULE_fromClause = 42;
SqlBaseParser.RULE_aggregation = 43;
SqlBaseParser.RULE_groupingSet = 44;
SqlBaseParser.RULE_pivotClause = 45;
SqlBaseParser.RULE_pivotColumn = 46;
SqlBaseParser.RULE_pivotValue = 47;
SqlBaseParser.RULE_lateralView = 48;
SqlBaseParser.RULE_setQuantifier = 49;
SqlBaseParser.RULE_relation = 50;
SqlBaseParser.RULE_joinRelation = 51;
SqlBaseParser.RULE_joinType = 52;
SqlBaseParser.RULE_joinCriteria = 53;
SqlBaseParser.RULE_sample = 54;
SqlBaseParser.RULE_sampleMethod = 55;
SqlBaseParser.RULE_identifierList = 56;
SqlBaseParser.RULE_identifierSeq = 57;
SqlBaseParser.RULE_orderedIdentifierList = 58;
SqlBaseParser.RULE_orderedIdentifier = 59;
SqlBaseParser.RULE_identifierCommentList = 60;
SqlBaseParser.RULE_identifierComment = 61;
SqlBaseParser.RULE_relationPrimary = 62;
SqlBaseParser.RULE_inlineTable = 63;
SqlBaseParser.RULE_functionTable = 64;
SqlBaseParser.RULE_tableAlias = 65;
SqlBaseParser.RULE_rowFormat = 66;
SqlBaseParser.RULE_tableIdentifierWithFunc = 67;
SqlBaseParser.RULE_tableIdentifier = 68;
SqlBaseParser.RULE_functionIdentifier = 69;
SqlBaseParser.RULE_namedExpression = 70;
SqlBaseParser.RULE_namedExpressionSeq = 71;
SqlBaseParser.RULE_expression = 72;
SqlBaseParser.RULE_booleanExpression = 73;
SqlBaseParser.RULE_predicate = 74;
SqlBaseParser.RULE_valueExpression = 75;
SqlBaseParser.RULE_primaryExpression = 76;
SqlBaseParser.RULE_constant = 77;
SqlBaseParser.RULE_comparisonOperator = 78;
SqlBaseParser.RULE_arithmeticOperator = 79;
SqlBaseParser.RULE_predicateOperator = 80;
SqlBaseParser.RULE_booleanValue = 81;
SqlBaseParser.RULE_interval = 82;
SqlBaseParser.RULE_intervalField = 83;
SqlBaseParser.RULE_intervalValue = 84;
SqlBaseParser.RULE_colPosition = 85;
SqlBaseParser.RULE_dataType = 86;
SqlBaseParser.RULE_colTypeList = 87;
SqlBaseParser.RULE_colType = 88;
SqlBaseParser.RULE_complexColTypeList = 89;
SqlBaseParser.RULE_complexColType = 90;
SqlBaseParser.RULE_whenClause = 91;
SqlBaseParser.RULE_windows = 92;
SqlBaseParser.RULE_namedWindow = 93;
SqlBaseParser.RULE_windowSpec = 94;
SqlBaseParser.RULE_windowFrame = 95;
SqlBaseParser.RULE_frameBound = 96;
SqlBaseParser.RULE_qualifiedName = 97;
SqlBaseParser.RULE_identifier = 98;
SqlBaseParser.RULE_sqlFuncIdentifier = 99;
SqlBaseParser.RULE_strictIdentifier = 100;
SqlBaseParser.RULE_quotedIdentifier = 101;
SqlBaseParser.RULE_number = 102;
SqlBaseParser.RULE_nonReserved = 103;

function SingleStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_singleStatement;
    return this;
}

SingleStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleStatementContext.prototype.constructor = SingleStatementContext;

SingleStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

SingleStatementContext.prototype.EOF = function() {
    return this.getToken(SqlBaseParser.EOF, 0);
};

SingleStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitSingleStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.SingleStatementContext = SingleStatementContext;

SqlBaseParser.prototype.singleStatement = function() {

    var localctx = new SingleStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, SqlBaseParser.RULE_singleStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 208;
        this.statement();
        this.state = 209;
        this.match(SqlBaseParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SingleExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_singleExpression;
    return this;
}

SingleExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleExpressionContext.prototype.constructor = SingleExpressionContext;

SingleExpressionContext.prototype.namedExpression = function() {
    return this.getTypedRuleContext(NamedExpressionContext,0);
};

SingleExpressionContext.prototype.EOF = function() {
    return this.getToken(SqlBaseParser.EOF, 0);
};

SingleExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitSingleExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.SingleExpressionContext = SingleExpressionContext;

SqlBaseParser.prototype.singleExpression = function() {

    var localctx = new SingleExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, SqlBaseParser.RULE_singleExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 211;
        this.namedExpression();
        this.state = 212;
        this.match(SqlBaseParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SingleTableIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_singleTableIdentifier;
    return this;
}

SingleTableIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleTableIdentifierContext.prototype.constructor = SingleTableIdentifierContext;

SingleTableIdentifierContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

SingleTableIdentifierContext.prototype.EOF = function() {
    return this.getToken(SqlBaseParser.EOF, 0);
};

SingleTableIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitSingleTableIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.SingleTableIdentifierContext = SingleTableIdentifierContext;

SqlBaseParser.prototype.singleTableIdentifier = function() {

    var localctx = new SingleTableIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, SqlBaseParser.RULE_singleTableIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 214;
        this.tableIdentifier();
        this.state = 215;
        this.match(SqlBaseParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SingleFunctionIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_singleFunctionIdentifier;
    return this;
}

SingleFunctionIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleFunctionIdentifierContext.prototype.constructor = SingleFunctionIdentifierContext;

SingleFunctionIdentifierContext.prototype.functionIdentifier = function() {
    return this.getTypedRuleContext(FunctionIdentifierContext,0);
};

SingleFunctionIdentifierContext.prototype.EOF = function() {
    return this.getToken(SqlBaseParser.EOF, 0);
};

SingleFunctionIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitSingleFunctionIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.SingleFunctionIdentifierContext = SingleFunctionIdentifierContext;

SqlBaseParser.prototype.singleFunctionIdentifier = function() {

    var localctx = new SingleFunctionIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, SqlBaseParser.RULE_singleFunctionIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 217;
        this.functionIdentifier();
        this.state = 218;
        this.match(SqlBaseParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SingleDataTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_singleDataType;
    return this;
}

SingleDataTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleDataTypeContext.prototype.constructor = SingleDataTypeContext;

SingleDataTypeContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

SingleDataTypeContext.prototype.EOF = function() {
    return this.getToken(SqlBaseParser.EOF, 0);
};

SingleDataTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitSingleDataType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.SingleDataTypeContext = SingleDataTypeContext;

SqlBaseParser.prototype.singleDataType = function() {

    var localctx = new SingleDataTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, SqlBaseParser.RULE_singleDataType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 220;
        this.dataType();
        this.state = 221;
        this.match(SqlBaseParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SingleTableSchemaContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_singleTableSchema;
    return this;
}

SingleTableSchemaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleTableSchemaContext.prototype.constructor = SingleTableSchemaContext;

SingleTableSchemaContext.prototype.colTypeList = function() {
    return this.getTypedRuleContext(ColTypeListContext,0);
};

SingleTableSchemaContext.prototype.EOF = function() {
    return this.getToken(SqlBaseParser.EOF, 0);
};

SingleTableSchemaContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitSingleTableSchema(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.SingleTableSchemaContext = SingleTableSchemaContext;

SqlBaseParser.prototype.singleTableSchema = function() {

    var localctx = new SingleTableSchemaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, SqlBaseParser.RULE_singleTableSchema);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 223;
        this.colTypeList();
        this.state = 224;
        this.match(SqlBaseParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_statements;
    return this;
}

StatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementsContext.prototype.constructor = StatementsContext;

StatementsContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

StatementsContext.prototype.EOF = function() {
    return this.getToken(SqlBaseParser.EOF, 0);
};

StatementsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitStatements(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.StatementsContext = StatementsContext;

SqlBaseParser.prototype.statements = function() {

    var localctx = new StatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, SqlBaseParser.RULE_statements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 226;
        this.statement();
        this.state = 235;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,1,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 228; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 227;
                    this.match(SqlBaseParser.T__0);
                    this.state = 230; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===SqlBaseParser.T__0);
                this.state = 232;
                this.statement(); 
            }
            this.state = 237;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,1,this._ctx);
        }

        this.state = 239;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.T__0) {
            this.state = 238;
            this.match(SqlBaseParser.T__0);
        }

        this.state = 241;
        this.match(SqlBaseParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;


 
StatementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ExplainContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExplainContext.prototype = Object.create(StatementContext.prototype);
ExplainContext.prototype.constructor = ExplainContext;

SqlBaseParser.ExplainContext = ExplainContext;

ExplainContext.prototype.EXPLAIN = function() {
    return this.getToken(SqlBaseParser.EXPLAIN, 0);
};

ExplainContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ExplainContext.prototype.LOGICAL = function() {
    return this.getToken(SqlBaseParser.LOGICAL, 0);
};

ExplainContext.prototype.FORMATTED = function() {
    return this.getToken(SqlBaseParser.FORMATTED, 0);
};

ExplainContext.prototype.EXTENDED = function() {
    return this.getToken(SqlBaseParser.EXTENDED, 0);
};

ExplainContext.prototype.CODEGEN = function() {
    return this.getToken(SqlBaseParser.CODEGEN, 0);
};

ExplainContext.prototype.COST = function() {
    return this.getToken(SqlBaseParser.COST, 0);
};
ExplainContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitExplain(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DropDatabaseContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DropDatabaseContext.prototype = Object.create(StatementContext.prototype);
DropDatabaseContext.prototype.constructor = DropDatabaseContext;

SqlBaseParser.DropDatabaseContext = DropDatabaseContext;

DropDatabaseContext.prototype.DROP = function() {
    return this.getToken(SqlBaseParser.DROP, 0);
};

DropDatabaseContext.prototype.DATABASE = function() {
    return this.getToken(SqlBaseParser.DATABASE, 0);
};

DropDatabaseContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

DropDatabaseContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

DropDatabaseContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

DropDatabaseContext.prototype.RESTRICT = function() {
    return this.getToken(SqlBaseParser.RESTRICT, 0);
};

DropDatabaseContext.prototype.CASCADE = function() {
    return this.getToken(SqlBaseParser.CASCADE, 0);
};
DropDatabaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitDropDatabase(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ResetConfigurationContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ResetConfigurationContext.prototype = Object.create(StatementContext.prototype);
ResetConfigurationContext.prototype.constructor = ResetConfigurationContext;

SqlBaseParser.ResetConfigurationContext = ResetConfigurationContext;

ResetConfigurationContext.prototype.RESET = function() {
    return this.getToken(SqlBaseParser.RESET, 0);
};
ResetConfigurationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitResetConfiguration(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DescribeDatabaseContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DescribeDatabaseContext.prototype = Object.create(StatementContext.prototype);
DescribeDatabaseContext.prototype.constructor = DescribeDatabaseContext;

SqlBaseParser.DescribeDatabaseContext = DescribeDatabaseContext;

DescribeDatabaseContext.prototype.DATABASE = function() {
    return this.getToken(SqlBaseParser.DATABASE, 0);
};

DescribeDatabaseContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

DescribeDatabaseContext.prototype.DESC = function() {
    return this.getToken(SqlBaseParser.DESC, 0);
};

DescribeDatabaseContext.prototype.DESCRIBE = function() {
    return this.getToken(SqlBaseParser.DESCRIBE, 0);
};

DescribeDatabaseContext.prototype.EXTENDED = function() {
    return this.getToken(SqlBaseParser.EXTENDED, 0);
};
DescribeDatabaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitDescribeDatabase(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterViewQueryContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterViewQueryContext.prototype = Object.create(StatementContext.prototype);
AlterViewQueryContext.prototype.constructor = AlterViewQueryContext;

SqlBaseParser.AlterViewQueryContext = AlterViewQueryContext;

AlterViewQueryContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

AlterViewQueryContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};

AlterViewQueryContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

AlterViewQueryContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

AlterViewQueryContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};
AlterViewQueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitAlterViewQuery(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function UseContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.db = null; // IdentifierContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UseContext.prototype = Object.create(StatementContext.prototype);
UseContext.prototype.constructor = UseContext;

SqlBaseParser.UseContext = UseContext;

UseContext.prototype.USE = function() {
    return this.getToken(SqlBaseParser.USE, 0);
};

UseContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
UseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitUse(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CreateTempViewUsingContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateTempViewUsingContext.prototype = Object.create(StatementContext.prototype);
CreateTempViewUsingContext.prototype.constructor = CreateTempViewUsingContext;

SqlBaseParser.CreateTempViewUsingContext = CreateTempViewUsingContext;

CreateTempViewUsingContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

CreateTempViewUsingContext.prototype.TEMPORARY = function() {
    return this.getToken(SqlBaseParser.TEMPORARY, 0);
};

CreateTempViewUsingContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};

CreateTempViewUsingContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

CreateTempViewUsingContext.prototype.tableProvider = function() {
    return this.getTypedRuleContext(TableProviderContext,0);
};

CreateTempViewUsingContext.prototype.OR = function() {
    return this.getToken(SqlBaseParser.OR, 0);
};

CreateTempViewUsingContext.prototype.REPLACE = function() {
    return this.getToken(SqlBaseParser.REPLACE, 0);
};

CreateTempViewUsingContext.prototype.GLOBAL = function() {
    return this.getToken(SqlBaseParser.GLOBAL, 0);
};

CreateTempViewUsingContext.prototype.colTypeList = function() {
    return this.getTypedRuleContext(ColTypeListContext,0);
};

CreateTempViewUsingContext.prototype.OPTIONS = function() {
    return this.getToken(SqlBaseParser.OPTIONS, 0);
};

CreateTempViewUsingContext.prototype.tablePropertyList = function() {
    return this.getTypedRuleContext(TablePropertyListContext,0);
};
CreateTempViewUsingContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitCreateTempViewUsing(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RenameTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.from = null; // TableIdentifierContext;
    this.to = null; // TableIdentifierContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RenameTableContext.prototype = Object.create(StatementContext.prototype);
RenameTableContext.prototype.constructor = RenameTableContext;

SqlBaseParser.RenameTableContext = RenameTableContext;

RenameTableContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

RenameTableContext.prototype.RENAME = function() {
    return this.getToken(SqlBaseParser.RENAME, 0);
};

RenameTableContext.prototype.TO = function() {
    return this.getToken(SqlBaseParser.TO, 0);
};

RenameTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

RenameTableContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};

RenameTableContext.prototype.tableIdentifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableIdentifierContext);
    } else {
        return this.getTypedRuleContext(TableIdentifierContext,i);
    }
};
RenameTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitRenameTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FailNativeCommandContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FailNativeCommandContext.prototype = Object.create(StatementContext.prototype);
FailNativeCommandContext.prototype.constructor = FailNativeCommandContext;

SqlBaseParser.FailNativeCommandContext = FailNativeCommandContext;

FailNativeCommandContext.prototype.SET = function() {
    return this.getToken(SqlBaseParser.SET, 0);
};

FailNativeCommandContext.prototype.ROLE = function() {
    return this.getToken(SqlBaseParser.ROLE, 0);
};

FailNativeCommandContext.prototype.unsupportedHiveNativeCommands = function() {
    return this.getTypedRuleContext(UnsupportedHiveNativeCommandsContext,0);
};
FailNativeCommandContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitFailNativeCommand(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ClearCacheContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ClearCacheContext.prototype = Object.create(StatementContext.prototype);
ClearCacheContext.prototype.constructor = ClearCacheContext;

SqlBaseParser.ClearCacheContext = ClearCacheContext;

ClearCacheContext.prototype.CLEAR = function() {
    return this.getToken(SqlBaseParser.CLEAR, 0);
};

ClearCacheContext.prototype.CACHE = function() {
    return this.getToken(SqlBaseParser.CACHE, 0);
};
ClearCacheContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitClearCache(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShowTablesContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.db = null; // IdentifierContext;
    this.pattern = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowTablesContext.prototype = Object.create(StatementContext.prototype);
ShowTablesContext.prototype.constructor = ShowTablesContext;

SqlBaseParser.ShowTablesContext = ShowTablesContext;

ShowTablesContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowTablesContext.prototype.TABLES = function() {
    return this.getToken(SqlBaseParser.TABLES, 0);
};

ShowTablesContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

ShowTablesContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};

ShowTablesContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ShowTablesContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

ShowTablesContext.prototype.LIKE = function() {
    return this.getToken(SqlBaseParser.LIKE, 0);
};
ShowTablesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitShowTables(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RecoverPartitionsContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RecoverPartitionsContext.prototype = Object.create(StatementContext.prototype);
RecoverPartitionsContext.prototype.constructor = RecoverPartitionsContext;

SqlBaseParser.RecoverPartitionsContext = RecoverPartitionsContext;

RecoverPartitionsContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

RecoverPartitionsContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

RecoverPartitionsContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

RecoverPartitionsContext.prototype.RECOVER = function() {
    return this.getToken(SqlBaseParser.RECOVER, 0);
};

RecoverPartitionsContext.prototype.PARTITIONS = function() {
    return this.getToken(SqlBaseParser.PARTITIONS, 0);
};
RecoverPartitionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitRecoverPartitions(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RenameTablePartitionContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.from = null; // PartitionSpecContext;
    this.to = null; // PartitionSpecContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RenameTablePartitionContext.prototype = Object.create(StatementContext.prototype);
RenameTablePartitionContext.prototype.constructor = RenameTablePartitionContext;

SqlBaseParser.RenameTablePartitionContext = RenameTablePartitionContext;

RenameTablePartitionContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

RenameTablePartitionContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

RenameTablePartitionContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

RenameTablePartitionContext.prototype.RENAME = function() {
    return this.getToken(SqlBaseParser.RENAME, 0);
};

RenameTablePartitionContext.prototype.TO = function() {
    return this.getToken(SqlBaseParser.TO, 0);
};

RenameTablePartitionContext.prototype.partitionSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionSpecContext);
    } else {
        return this.getTypedRuleContext(PartitionSpecContext,i);
    }
};
RenameTablePartitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitRenameTablePartition(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RepairTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RepairTableContext.prototype = Object.create(StatementContext.prototype);
RepairTableContext.prototype.constructor = RepairTableContext;

SqlBaseParser.RepairTableContext = RepairTableContext;

RepairTableContext.prototype.MSCK = function() {
    return this.getToken(SqlBaseParser.MSCK, 0);
};

RepairTableContext.prototype.REPAIR = function() {
    return this.getToken(SqlBaseParser.REPAIR, 0);
};

RepairTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

RepairTableContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};
RepairTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitRepairTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RefreshResourceContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RefreshResourceContext.prototype = Object.create(StatementContext.prototype);
RefreshResourceContext.prototype.constructor = RefreshResourceContext;

SqlBaseParser.RefreshResourceContext = RefreshResourceContext;

RefreshResourceContext.prototype.REFRESH = function() {
    return this.getToken(SqlBaseParser.REFRESH, 0);
};

RefreshResourceContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};
RefreshResourceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitRefreshResource(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShowCreateTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowCreateTableContext.prototype = Object.create(StatementContext.prototype);
ShowCreateTableContext.prototype.constructor = ShowCreateTableContext;

SqlBaseParser.ShowCreateTableContext = ShowCreateTableContext;

ShowCreateTableContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowCreateTableContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

ShowCreateTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

ShowCreateTableContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};
ShowCreateTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitShowCreateTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShowColumnsContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.db = null; // IdentifierContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowColumnsContext.prototype = Object.create(StatementContext.prototype);
ShowColumnsContext.prototype.constructor = ShowColumnsContext;

SqlBaseParser.ShowColumnsContext = ShowColumnsContext;

ShowColumnsContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowColumnsContext.prototype.COLUMNS = function() {
    return this.getToken(SqlBaseParser.COLUMNS, 0);
};

ShowColumnsContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

ShowColumnsContext.prototype.FROM = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.FROM);
    } else {
        return this.getToken(SqlBaseParser.FROM, i);
    }
};


ShowColumnsContext.prototype.IN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.IN);
    } else {
        return this.getToken(SqlBaseParser.IN, i);
    }
};


ShowColumnsContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
ShowColumnsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitShowColumns(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AddTablePartitionContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AddTablePartitionContext.prototype = Object.create(StatementContext.prototype);
AddTablePartitionContext.prototype.constructor = AddTablePartitionContext;

SqlBaseParser.AddTablePartitionContext = AddTablePartitionContext;

AddTablePartitionContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

AddTablePartitionContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

AddTablePartitionContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

AddTablePartitionContext.prototype.ADD = function() {
    return this.getToken(SqlBaseParser.ADD, 0);
};

AddTablePartitionContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

AddTablePartitionContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

AddTablePartitionContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

AddTablePartitionContext.prototype.partitionSpecLocation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionSpecLocationContext);
    } else {
        return this.getTypedRuleContext(PartitionSpecLocationContext,i);
    }
};

AddTablePartitionContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};

AddTablePartitionContext.prototype.partitionSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionSpecContext);
    } else {
        return this.getTypedRuleContext(PartitionSpecContext,i);
    }
};
AddTablePartitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitAddTablePartition(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RefreshTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RefreshTableContext.prototype = Object.create(StatementContext.prototype);
RefreshTableContext.prototype.constructor = RefreshTableContext;

SqlBaseParser.RefreshTableContext = RefreshTableContext;

RefreshTableContext.prototype.REFRESH = function() {
    return this.getToken(SqlBaseParser.REFRESH, 0);
};

RefreshTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

RefreshTableContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};
RefreshTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitRefreshTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ManageResourceContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.op = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ManageResourceContext.prototype = Object.create(StatementContext.prototype);
ManageResourceContext.prototype.constructor = ManageResourceContext;

SqlBaseParser.ManageResourceContext = ManageResourceContext;

ManageResourceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ManageResourceContext.prototype.ADD = function() {
    return this.getToken(SqlBaseParser.ADD, 0);
};

ManageResourceContext.prototype.LIST = function() {
    return this.getToken(SqlBaseParser.LIST, 0);
};
ManageResourceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitManageResource(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CreateDatabaseContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.comment = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateDatabaseContext.prototype = Object.create(StatementContext.prototype);
CreateDatabaseContext.prototype.constructor = CreateDatabaseContext;

SqlBaseParser.CreateDatabaseContext = CreateDatabaseContext;

CreateDatabaseContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

CreateDatabaseContext.prototype.DATABASE = function() {
    return this.getToken(SqlBaseParser.DATABASE, 0);
};

CreateDatabaseContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

CreateDatabaseContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

CreateDatabaseContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

CreateDatabaseContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

CreateDatabaseContext.prototype.COMMENT = function() {
    return this.getToken(SqlBaseParser.COMMENT, 0);
};

CreateDatabaseContext.prototype.locationSpec = function() {
    return this.getTypedRuleContext(LocationSpecContext,0);
};

CreateDatabaseContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

CreateDatabaseContext.prototype.DBPROPERTIES = function() {
    return this.getToken(SqlBaseParser.DBPROPERTIES, 0);
};

CreateDatabaseContext.prototype.tablePropertyList = function() {
    return this.getTypedRuleContext(TablePropertyListContext,0);
};

CreateDatabaseContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};
CreateDatabaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitCreateDatabase(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AnalyzeContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AnalyzeContext.prototype = Object.create(StatementContext.prototype);
AnalyzeContext.prototype.constructor = AnalyzeContext;

SqlBaseParser.AnalyzeContext = AnalyzeContext;

AnalyzeContext.prototype.ANALYZE = function() {
    return this.getToken(SqlBaseParser.ANALYZE, 0);
};

AnalyzeContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

AnalyzeContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

AnalyzeContext.prototype.COMPUTE = function() {
    return this.getToken(SqlBaseParser.COMPUTE, 0);
};

AnalyzeContext.prototype.STATISTICS = function() {
    return this.getToken(SqlBaseParser.STATISTICS, 0);
};

AnalyzeContext.prototype.partitionSpec = function() {
    return this.getTypedRuleContext(PartitionSpecContext,0);
};

AnalyzeContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

AnalyzeContext.prototype.FOR = function() {
    return this.getToken(SqlBaseParser.FOR, 0);
};

AnalyzeContext.prototype.COLUMNS = function() {
    return this.getToken(SqlBaseParser.COLUMNS, 0);
};

AnalyzeContext.prototype.identifierSeq = function() {
    return this.getTypedRuleContext(IdentifierSeqContext,0);
};
AnalyzeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitAnalyze(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CreateHiveTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.columns = null; // ColTypeListContext;
    this.comment = null; // Token;
    this.partitionColumns = null; // ColTypeListContext;
    this.tableProps = null; // TablePropertyListContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateHiveTableContext.prototype = Object.create(StatementContext.prototype);
CreateHiveTableContext.prototype.constructor = CreateHiveTableContext;

SqlBaseParser.CreateHiveTableContext = CreateHiveTableContext;

CreateHiveTableContext.prototype.createTableHeader = function() {
    return this.getTypedRuleContext(CreateTableHeaderContext,0);
};

CreateHiveTableContext.prototype.bucketSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BucketSpecContext);
    } else {
        return this.getTypedRuleContext(BucketSpecContext,i);
    }
};

CreateHiveTableContext.prototype.skewSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SkewSpecContext);
    } else {
        return this.getTypedRuleContext(SkewSpecContext,i);
    }
};

CreateHiveTableContext.prototype.rowFormat = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RowFormatContext);
    } else {
        return this.getTypedRuleContext(RowFormatContext,i);
    }
};

CreateHiveTableContext.prototype.createFileFormat = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CreateFileFormatContext);
    } else {
        return this.getTypedRuleContext(CreateFileFormatContext,i);
    }
};

CreateHiveTableContext.prototype.locationSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LocationSpecContext);
    } else {
        return this.getTypedRuleContext(LocationSpecContext,i);
    }
};

CreateHiveTableContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

CreateHiveTableContext.prototype.colTypeList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColTypeListContext);
    } else {
        return this.getTypedRuleContext(ColTypeListContext,i);
    }
};

CreateHiveTableContext.prototype.COMMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.COMMENT);
    } else {
        return this.getToken(SqlBaseParser.COMMENT, i);
    }
};


CreateHiveTableContext.prototype.PARTITIONED = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.PARTITIONED);
    } else {
        return this.getToken(SqlBaseParser.PARTITIONED, i);
    }
};


CreateHiveTableContext.prototype.BY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.BY);
    } else {
        return this.getToken(SqlBaseParser.BY, i);
    }
};


CreateHiveTableContext.prototype.TBLPROPERTIES = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.TBLPROPERTIES);
    } else {
        return this.getToken(SqlBaseParser.TBLPROPERTIES, i);
    }
};


CreateHiveTableContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.STRING);
    } else {
        return this.getToken(SqlBaseParser.STRING, i);
    }
};


CreateHiveTableContext.prototype.tablePropertyList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TablePropertyListContext);
    } else {
        return this.getTypedRuleContext(TablePropertyListContext,i);
    }
};

CreateHiveTableContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};
CreateHiveTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitCreateHiveTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CreateFunctionContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.className = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateFunctionContext.prototype = Object.create(StatementContext.prototype);
CreateFunctionContext.prototype.constructor = CreateFunctionContext;

SqlBaseParser.CreateFunctionContext = CreateFunctionContext;

CreateFunctionContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

CreateFunctionContext.prototype.SQLFUNCTION = function() {
    return this.getToken(SqlBaseParser.SQLFUNCTION, 0);
};

CreateFunctionContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

CreateFunctionContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

CreateFunctionContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

CreateFunctionContext.prototype.OR = function() {
    return this.getToken(SqlBaseParser.OR, 0);
};

CreateFunctionContext.prototype.REPLACE = function() {
    return this.getToken(SqlBaseParser.REPLACE, 0);
};

CreateFunctionContext.prototype.TEMPORARY = function() {
    return this.getToken(SqlBaseParser.TEMPORARY, 0);
};

CreateFunctionContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

CreateFunctionContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

CreateFunctionContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

CreateFunctionContext.prototype.USING = function() {
    return this.getToken(SqlBaseParser.USING, 0);
};

CreateFunctionContext.prototype.resource = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ResourceContext);
    } else {
        return this.getTypedRuleContext(ResourceContext,i);
    }
};
CreateFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitCreateFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShowTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.db = null; // IdentifierContext;
    this.pattern = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowTableContext.prototype = Object.create(StatementContext.prototype);
ShowTableContext.prototype.constructor = ShowTableContext;

SqlBaseParser.ShowTableContext = ShowTableContext;

ShowTableContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

ShowTableContext.prototype.EXTENDED = function() {
    return this.getToken(SqlBaseParser.EXTENDED, 0);
};

ShowTableContext.prototype.LIKE = function() {
    return this.getToken(SqlBaseParser.LIKE, 0);
};

ShowTableContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

ShowTableContext.prototype.partitionSpec = function() {
    return this.getTypedRuleContext(PartitionSpecContext,0);
};

ShowTableContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

ShowTableContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};

ShowTableContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
ShowTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitShowTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SetDatabasePropertiesContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetDatabasePropertiesContext.prototype = Object.create(StatementContext.prototype);
SetDatabasePropertiesContext.prototype.constructor = SetDatabasePropertiesContext;

SqlBaseParser.SetDatabasePropertiesContext = SetDatabasePropertiesContext;

SetDatabasePropertiesContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

SetDatabasePropertiesContext.prototype.DATABASE = function() {
    return this.getToken(SqlBaseParser.DATABASE, 0);
};

SetDatabasePropertiesContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

SetDatabasePropertiesContext.prototype.SET = function() {
    return this.getToken(SqlBaseParser.SET, 0);
};

SetDatabasePropertiesContext.prototype.DBPROPERTIES = function() {
    return this.getToken(SqlBaseParser.DBPROPERTIES, 0);
};

SetDatabasePropertiesContext.prototype.tablePropertyList = function() {
    return this.getTypedRuleContext(TablePropertyListContext,0);
};
SetDatabasePropertiesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitSetDatabaseProperties(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CreateTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.options = null; // TablePropertyListContext;
    this.partitionColumnNames = null; // IdentifierListContext;
    this.comment = null; // Token;
    this.tableProps = null; // TablePropertyListContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateTableContext.prototype = Object.create(StatementContext.prototype);
CreateTableContext.prototype.constructor = CreateTableContext;

SqlBaseParser.CreateTableContext = CreateTableContext;

CreateTableContext.prototype.createTableHeader = function() {
    return this.getTypedRuleContext(CreateTableHeaderContext,0);
};

CreateTableContext.prototype.tableProvider = function() {
    return this.getTypedRuleContext(TableProviderContext,0);
};

CreateTableContext.prototype.colTypeList = function() {
    return this.getTypedRuleContext(ColTypeListContext,0);
};

CreateTableContext.prototype.bucketSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BucketSpecContext);
    } else {
        return this.getTypedRuleContext(BucketSpecContext,i);
    }
};

CreateTableContext.prototype.locationSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LocationSpecContext);
    } else {
        return this.getTypedRuleContext(LocationSpecContext,i);
    }
};

CreateTableContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

CreateTableContext.prototype.OPTIONS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.OPTIONS);
    } else {
        return this.getToken(SqlBaseParser.OPTIONS, i);
    }
};


CreateTableContext.prototype.PARTITIONED = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.PARTITIONED);
    } else {
        return this.getToken(SqlBaseParser.PARTITIONED, i);
    }
};


CreateTableContext.prototype.BY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.BY);
    } else {
        return this.getToken(SqlBaseParser.BY, i);
    }
};


CreateTableContext.prototype.COMMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.COMMENT);
    } else {
        return this.getToken(SqlBaseParser.COMMENT, i);
    }
};


CreateTableContext.prototype.TBLPROPERTIES = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.TBLPROPERTIES);
    } else {
        return this.getToken(SqlBaseParser.TBLPROPERTIES, i);
    }
};


CreateTableContext.prototype.tablePropertyList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TablePropertyListContext);
    } else {
        return this.getTypedRuleContext(TablePropertyListContext,i);
    }
};

CreateTableContext.prototype.identifierList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierListContext);
    } else {
        return this.getTypedRuleContext(IdentifierListContext,i);
    }
};

CreateTableContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.STRING);
    } else {
        return this.getToken(SqlBaseParser.STRING, i);
    }
};


CreateTableContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};
CreateTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitCreateTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DescribeTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.option = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DescribeTableContext.prototype = Object.create(StatementContext.prototype);
DescribeTableContext.prototype.constructor = DescribeTableContext;

SqlBaseParser.DescribeTableContext = DescribeTableContext;

DescribeTableContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

DescribeTableContext.prototype.DESC = function() {
    return this.getToken(SqlBaseParser.DESC, 0);
};

DescribeTableContext.prototype.DESCRIBE = function() {
    return this.getToken(SqlBaseParser.DESCRIBE, 0);
};

DescribeTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

DescribeTableContext.prototype.partitionSpec = function() {
    return this.getTypedRuleContext(PartitionSpecContext,0);
};

DescribeTableContext.prototype.describeColName = function() {
    return this.getTypedRuleContext(DescribeColNameContext,0);
};

DescribeTableContext.prototype.EXTENDED = function() {
    return this.getToken(SqlBaseParser.EXTENDED, 0);
};

DescribeTableContext.prototype.FORMATTED = function() {
    return this.getToken(SqlBaseParser.FORMATTED, 0);
};
DescribeTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitDescribeTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CreateTableLikeContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.target = null; // TableIdentifierContext;
    this.source = null; // TableIdentifierContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateTableLikeContext.prototype = Object.create(StatementContext.prototype);
CreateTableLikeContext.prototype.constructor = CreateTableLikeContext;

SqlBaseParser.CreateTableLikeContext = CreateTableLikeContext;

CreateTableLikeContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

CreateTableLikeContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

CreateTableLikeContext.prototype.LIKE = function() {
    return this.getToken(SqlBaseParser.LIKE, 0);
};

CreateTableLikeContext.prototype.tableIdentifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableIdentifierContext);
    } else {
        return this.getTypedRuleContext(TableIdentifierContext,i);
    }
};

CreateTableLikeContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

CreateTableLikeContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

CreateTableLikeContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

CreateTableLikeContext.prototype.locationSpec = function() {
    return this.getTypedRuleContext(LocationSpecContext,0);
};
CreateTableLikeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitCreateTableLike(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function UncacheTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UncacheTableContext.prototype = Object.create(StatementContext.prototype);
UncacheTableContext.prototype.constructor = UncacheTableContext;

SqlBaseParser.UncacheTableContext = UncacheTableContext;

UncacheTableContext.prototype.UNCACHE = function() {
    return this.getToken(SqlBaseParser.UNCACHE, 0);
};

UncacheTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

UncacheTableContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

UncacheTableContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

UncacheTableContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};
UncacheTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitUncacheTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DropFunctionContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DropFunctionContext.prototype = Object.create(StatementContext.prototype);
DropFunctionContext.prototype.constructor = DropFunctionContext;

SqlBaseParser.DropFunctionContext = DropFunctionContext;

DropFunctionContext.prototype.DROP = function() {
    return this.getToken(SqlBaseParser.DROP, 0);
};

DropFunctionContext.prototype.SQLFUNCTION = function() {
    return this.getToken(SqlBaseParser.SQLFUNCTION, 0);
};

DropFunctionContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

DropFunctionContext.prototype.TEMPORARY = function() {
    return this.getToken(SqlBaseParser.TEMPORARY, 0);
};

DropFunctionContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

DropFunctionContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};
DropFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitDropFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LoadDataContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.path = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LoadDataContext.prototype = Object.create(StatementContext.prototype);
LoadDataContext.prototype.constructor = LoadDataContext;

SqlBaseParser.LoadDataContext = LoadDataContext;

LoadDataContext.prototype.LOAD = function() {
    return this.getToken(SqlBaseParser.LOAD, 0);
};

LoadDataContext.prototype.DATA = function() {
    return this.getToken(SqlBaseParser.DATA, 0);
};

LoadDataContext.prototype.INPATH = function() {
    return this.getToken(SqlBaseParser.INPATH, 0);
};

LoadDataContext.prototype.INTO = function() {
    return this.getToken(SqlBaseParser.INTO, 0);
};

LoadDataContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

LoadDataContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

LoadDataContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

LoadDataContext.prototype.LOCAL = function() {
    return this.getToken(SqlBaseParser.LOCAL, 0);
};

LoadDataContext.prototype.OVERWRITE = function() {
    return this.getToken(SqlBaseParser.OVERWRITE, 0);
};

LoadDataContext.prototype.partitionSpec = function() {
    return this.getTypedRuleContext(PartitionSpecContext,0);
};
LoadDataContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitLoadData(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShowPartitionsContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowPartitionsContext.prototype = Object.create(StatementContext.prototype);
ShowPartitionsContext.prototype.constructor = ShowPartitionsContext;

SqlBaseParser.ShowPartitionsContext = ShowPartitionsContext;

ShowPartitionsContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowPartitionsContext.prototype.PARTITIONS = function() {
    return this.getToken(SqlBaseParser.PARTITIONS, 0);
};

ShowPartitionsContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

ShowPartitionsContext.prototype.partitionSpec = function() {
    return this.getTypedRuleContext(PartitionSpecContext,0);
};
ShowPartitionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitShowPartitions(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DescribeFunctionContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DescribeFunctionContext.prototype = Object.create(StatementContext.prototype);
DescribeFunctionContext.prototype.constructor = DescribeFunctionContext;

SqlBaseParser.DescribeFunctionContext = DescribeFunctionContext;

DescribeFunctionContext.prototype.SQLFUNCTION = function() {
    return this.getToken(SqlBaseParser.SQLFUNCTION, 0);
};

DescribeFunctionContext.prototype.describeFuncName = function() {
    return this.getTypedRuleContext(DescribeFuncNameContext,0);
};

DescribeFunctionContext.prototype.DESC = function() {
    return this.getToken(SqlBaseParser.DESC, 0);
};

DescribeFunctionContext.prototype.DESCRIBE = function() {
    return this.getToken(SqlBaseParser.DESCRIBE, 0);
};

DescribeFunctionContext.prototype.EXTENDED = function() {
    return this.getToken(SqlBaseParser.EXTENDED, 0);
};
DescribeFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitDescribeFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ChangeColumnContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ChangeColumnContext.prototype = Object.create(StatementContext.prototype);
ChangeColumnContext.prototype.constructor = ChangeColumnContext;

SqlBaseParser.ChangeColumnContext = ChangeColumnContext;

ChangeColumnContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

ChangeColumnContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

ChangeColumnContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

ChangeColumnContext.prototype.CHANGE = function() {
    return this.getToken(SqlBaseParser.CHANGE, 0);
};

ChangeColumnContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ChangeColumnContext.prototype.colType = function() {
    return this.getTypedRuleContext(ColTypeContext,0);
};

ChangeColumnContext.prototype.partitionSpec = function() {
    return this.getTypedRuleContext(PartitionSpecContext,0);
};

ChangeColumnContext.prototype.COLUMN = function() {
    return this.getToken(SqlBaseParser.COLUMN, 0);
};

ChangeColumnContext.prototype.colPosition = function() {
    return this.getTypedRuleContext(ColPositionContext,0);
};
ChangeColumnContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitChangeColumn(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function StatementDefaultContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StatementDefaultContext.prototype = Object.create(StatementContext.prototype);
StatementDefaultContext.prototype.constructor = StatementDefaultContext;

SqlBaseParser.StatementDefaultContext = StatementDefaultContext;

StatementDefaultContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};
StatementDefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitStatementDefault(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TruncateTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TruncateTableContext.prototype = Object.create(StatementContext.prototype);
TruncateTableContext.prototype.constructor = TruncateTableContext;

SqlBaseParser.TruncateTableContext = TruncateTableContext;

TruncateTableContext.prototype.TRUNCATE = function() {
    return this.getToken(SqlBaseParser.TRUNCATE, 0);
};

TruncateTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

TruncateTableContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

TruncateTableContext.prototype.partitionSpec = function() {
    return this.getTypedRuleContext(PartitionSpecContext,0);
};
TruncateTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitTruncateTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SetTableSerDeContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetTableSerDeContext.prototype = Object.create(StatementContext.prototype);
SetTableSerDeContext.prototype.constructor = SetTableSerDeContext;

SqlBaseParser.SetTableSerDeContext = SetTableSerDeContext;

SetTableSerDeContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

SetTableSerDeContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

SetTableSerDeContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

SetTableSerDeContext.prototype.SET = function() {
    return this.getToken(SqlBaseParser.SET, 0);
};

SetTableSerDeContext.prototype.SERDE = function() {
    return this.getToken(SqlBaseParser.SERDE, 0);
};

SetTableSerDeContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

SetTableSerDeContext.prototype.partitionSpec = function() {
    return this.getTypedRuleContext(PartitionSpecContext,0);
};

SetTableSerDeContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

SetTableSerDeContext.prototype.SERDEPROPERTIES = function() {
    return this.getToken(SqlBaseParser.SERDEPROPERTIES, 0);
};

SetTableSerDeContext.prototype.tablePropertyList = function() {
    return this.getTypedRuleContext(TablePropertyListContext,0);
};
SetTableSerDeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitSetTableSerDe(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CreateViewContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateViewContext.prototype = Object.create(StatementContext.prototype);
CreateViewContext.prototype.constructor = CreateViewContext;

SqlBaseParser.CreateViewContext = CreateViewContext;

CreateViewContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

CreateViewContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};

CreateViewContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

CreateViewContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

CreateViewContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

CreateViewContext.prototype.OR = function() {
    return this.getToken(SqlBaseParser.OR, 0);
};

CreateViewContext.prototype.REPLACE = function() {
    return this.getToken(SqlBaseParser.REPLACE, 0);
};

CreateViewContext.prototype.TEMPORARY = function() {
    return this.getToken(SqlBaseParser.TEMPORARY, 0);
};

CreateViewContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

CreateViewContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

CreateViewContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

CreateViewContext.prototype.identifierCommentList = function() {
    return this.getTypedRuleContext(IdentifierCommentListContext,0);
};

CreateViewContext.prototype.COMMENT = function() {
    return this.getToken(SqlBaseParser.COMMENT, 0);
};

CreateViewContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

CreateViewContext.prototype.PARTITIONED = function() {
    return this.getToken(SqlBaseParser.PARTITIONED, 0);
};

CreateViewContext.prototype.ON = function() {
    return this.getToken(SqlBaseParser.ON, 0);
};

CreateViewContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

CreateViewContext.prototype.TBLPROPERTIES = function() {
    return this.getToken(SqlBaseParser.TBLPROPERTIES, 0);
};

CreateViewContext.prototype.tablePropertyList = function() {
    return this.getTypedRuleContext(TablePropertyListContext,0);
};

CreateViewContext.prototype.GLOBAL = function() {
    return this.getToken(SqlBaseParser.GLOBAL, 0);
};
CreateViewContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitCreateView(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DropTablePartitionsContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DropTablePartitionsContext.prototype = Object.create(StatementContext.prototype);
DropTablePartitionsContext.prototype.constructor = DropTablePartitionsContext;

SqlBaseParser.DropTablePartitionsContext = DropTablePartitionsContext;

DropTablePartitionsContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

DropTablePartitionsContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

DropTablePartitionsContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

DropTablePartitionsContext.prototype.DROP = function() {
    return this.getToken(SqlBaseParser.DROP, 0);
};

DropTablePartitionsContext.prototype.partitionSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionSpecContext);
    } else {
        return this.getTypedRuleContext(PartitionSpecContext,i);
    }
};

DropTablePartitionsContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

DropTablePartitionsContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

DropTablePartitionsContext.prototype.PURGE = function() {
    return this.getToken(SqlBaseParser.PURGE, 0);
};

DropTablePartitionsContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};
DropTablePartitionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitDropTablePartitions(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SetConfigurationContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetConfigurationContext.prototype = Object.create(StatementContext.prototype);
SetConfigurationContext.prototype.constructor = SetConfigurationContext;

SqlBaseParser.SetConfigurationContext = SetConfigurationContext;

SetConfigurationContext.prototype.SET = function() {
    return this.getToken(SqlBaseParser.SET, 0);
};
SetConfigurationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitSetConfiguration(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DropTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DropTableContext.prototype = Object.create(StatementContext.prototype);
DropTableContext.prototype.constructor = DropTableContext;

SqlBaseParser.DropTableContext = DropTableContext;

DropTableContext.prototype.DROP = function() {
    return this.getToken(SqlBaseParser.DROP, 0);
};

DropTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

DropTableContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

DropTableContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

DropTableContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

DropTableContext.prototype.PURGE = function() {
    return this.getToken(SqlBaseParser.PURGE, 0);
};

DropTableContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};
DropTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitDropTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShowDatabasesContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.pattern = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowDatabasesContext.prototype = Object.create(StatementContext.prototype);
ShowDatabasesContext.prototype.constructor = ShowDatabasesContext;

SqlBaseParser.ShowDatabasesContext = ShowDatabasesContext;

ShowDatabasesContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowDatabasesContext.prototype.DATABASES = function() {
    return this.getToken(SqlBaseParser.DATABASES, 0);
};

ShowDatabasesContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

ShowDatabasesContext.prototype.LIKE = function() {
    return this.getToken(SqlBaseParser.LIKE, 0);
};
ShowDatabasesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitShowDatabases(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShowTblPropertiesContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.table = null; // TableIdentifierContext;
    this.key = null; // TablePropertyKeyContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowTblPropertiesContext.prototype = Object.create(StatementContext.prototype);
ShowTblPropertiesContext.prototype.constructor = ShowTblPropertiesContext;

SqlBaseParser.ShowTblPropertiesContext = ShowTblPropertiesContext;

ShowTblPropertiesContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowTblPropertiesContext.prototype.TBLPROPERTIES = function() {
    return this.getToken(SqlBaseParser.TBLPROPERTIES, 0);
};

ShowTblPropertiesContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

ShowTblPropertiesContext.prototype.tablePropertyKey = function() {
    return this.getTypedRuleContext(TablePropertyKeyContext,0);
};
ShowTblPropertiesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitShowTblProperties(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function UnsetTablePropertiesContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnsetTablePropertiesContext.prototype = Object.create(StatementContext.prototype);
UnsetTablePropertiesContext.prototype.constructor = UnsetTablePropertiesContext;

SqlBaseParser.UnsetTablePropertiesContext = UnsetTablePropertiesContext;

UnsetTablePropertiesContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

UnsetTablePropertiesContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

UnsetTablePropertiesContext.prototype.UNSET = function() {
    return this.getToken(SqlBaseParser.UNSET, 0);
};

UnsetTablePropertiesContext.prototype.TBLPROPERTIES = function() {
    return this.getToken(SqlBaseParser.TBLPROPERTIES, 0);
};

UnsetTablePropertiesContext.prototype.tablePropertyList = function() {
    return this.getTypedRuleContext(TablePropertyListContext,0);
};

UnsetTablePropertiesContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

UnsetTablePropertiesContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};

UnsetTablePropertiesContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

UnsetTablePropertiesContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};
UnsetTablePropertiesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitUnsetTableProperties(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SetTableLocationContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetTableLocationContext.prototype = Object.create(StatementContext.prototype);
SetTableLocationContext.prototype.constructor = SetTableLocationContext;

SqlBaseParser.SetTableLocationContext = SetTableLocationContext;

SetTableLocationContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

SetTableLocationContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

SetTableLocationContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

SetTableLocationContext.prototype.SET = function() {
    return this.getToken(SqlBaseParser.SET, 0);
};

SetTableLocationContext.prototype.locationSpec = function() {
    return this.getTypedRuleContext(LocationSpecContext,0);
};

SetTableLocationContext.prototype.partitionSpec = function() {
    return this.getTypedRuleContext(PartitionSpecContext,0);
};
SetTableLocationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitSetTableLocation(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShowFunctionsContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.pattern = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowFunctionsContext.prototype = Object.create(StatementContext.prototype);
ShowFunctionsContext.prototype.constructor = ShowFunctionsContext;

SqlBaseParser.ShowFunctionsContext = ShowFunctionsContext;

ShowFunctionsContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowFunctionsContext.prototype.FUNCTIONS = function() {
    return this.getToken(SqlBaseParser.FUNCTIONS, 0);
};

ShowFunctionsContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ShowFunctionsContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

ShowFunctionsContext.prototype.LIKE = function() {
    return this.getToken(SqlBaseParser.LIKE, 0);
};

ShowFunctionsContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};
ShowFunctionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitShowFunctions(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CacheTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CacheTableContext.prototype = Object.create(StatementContext.prototype);
CacheTableContext.prototype.constructor = CacheTableContext;

SqlBaseParser.CacheTableContext = CacheTableContext;

CacheTableContext.prototype.CACHE = function() {
    return this.getToken(SqlBaseParser.CACHE, 0);
};

CacheTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

CacheTableContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

CacheTableContext.prototype.LAZY = function() {
    return this.getToken(SqlBaseParser.LAZY, 0);
};

CacheTableContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

CacheTableContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};
CacheTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitCacheTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AddTableColumnsContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.columns = null; // ColTypeListContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AddTableColumnsContext.prototype = Object.create(StatementContext.prototype);
AddTableColumnsContext.prototype.constructor = AddTableColumnsContext;

SqlBaseParser.AddTableColumnsContext = AddTableColumnsContext;

AddTableColumnsContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

AddTableColumnsContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

AddTableColumnsContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

AddTableColumnsContext.prototype.ADD = function() {
    return this.getToken(SqlBaseParser.ADD, 0);
};

AddTableColumnsContext.prototype.COLUMNS = function() {
    return this.getToken(SqlBaseParser.COLUMNS, 0);
};

AddTableColumnsContext.prototype.colTypeList = function() {
    return this.getTypedRuleContext(ColTypeListContext,0);
};
AddTableColumnsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitAddTableColumns(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SetTablePropertiesContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetTablePropertiesContext.prototype = Object.create(StatementContext.prototype);
SetTablePropertiesContext.prototype.constructor = SetTablePropertiesContext;

SqlBaseParser.SetTablePropertiesContext = SetTablePropertiesContext;

SetTablePropertiesContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

SetTablePropertiesContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

SetTablePropertiesContext.prototype.SET = function() {
    return this.getToken(SqlBaseParser.SET, 0);
};

SetTablePropertiesContext.prototype.TBLPROPERTIES = function() {
    return this.getToken(SqlBaseParser.TBLPROPERTIES, 0);
};

SetTablePropertiesContext.prototype.tablePropertyList = function() {
    return this.getTypedRuleContext(TablePropertyListContext,0);
};

SetTablePropertiesContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

SetTablePropertiesContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};
SetTablePropertiesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitSetTableProperties(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlBaseParser.StatementContext = StatementContext;

SqlBaseParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, SqlBaseParser.RULE_statement);
    var _la = 0; // Token type
    try {
        this.state = 849;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
        switch(la_) {
        case 1:
            localctx = new StatementDefaultContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 243;
            this.query();
            break;

        case 2:
            localctx = new UseContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 244;
            this.match(SqlBaseParser.USE);
            this.state = 245;
            localctx.db = this.identifier();
            break;

        case 3:
            localctx = new CreateDatabaseContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 246;
            this.match(SqlBaseParser.CREATE);
            this.state = 247;
            this.match(SqlBaseParser.DATABASE);
            this.state = 251;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
            if(la_===1) {
                this.state = 248;
                this.match(SqlBaseParser.IF);
                this.state = 249;
                this.match(SqlBaseParser.NOT);
                this.state = 250;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 253;
            this.identifier();
            this.state = 256;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.COMMENT) {
                this.state = 254;
                this.match(SqlBaseParser.COMMENT);
                this.state = 255;
                localctx.comment = this.match(SqlBaseParser.STRING);
            }

            this.state = 259;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.LOCATION) {
                this.state = 258;
                this.locationSpec();
            }

            this.state = 264;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WITH) {
                this.state = 261;
                this.match(SqlBaseParser.WITH);
                this.state = 262;
                this.match(SqlBaseParser.DBPROPERTIES);
                this.state = 263;
                this.tablePropertyList();
            }

            break;

        case 4:
            localctx = new SetDatabasePropertiesContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 266;
            this.match(SqlBaseParser.ALTER);
            this.state = 267;
            this.match(SqlBaseParser.DATABASE);
            this.state = 268;
            this.identifier();
            this.state = 269;
            this.match(SqlBaseParser.SET);
            this.state = 270;
            this.match(SqlBaseParser.DBPROPERTIES);
            this.state = 271;
            this.tablePropertyList();
            break;

        case 5:
            localctx = new DropDatabaseContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 273;
            this.match(SqlBaseParser.DROP);
            this.state = 274;
            this.match(SqlBaseParser.DATABASE);
            this.state = 277;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
            if(la_===1) {
                this.state = 275;
                this.match(SqlBaseParser.IF);
                this.state = 276;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 279;
            this.identifier();
            this.state = 281;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.CASCADE || _la===SqlBaseParser.RESTRICT) {
                this.state = 280;
                _la = this._input.LA(1);
                if(!(_la===SqlBaseParser.CASCADE || _la===SqlBaseParser.RESTRICT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            break;

        case 6:
            localctx = new CreateTableContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 283;
            this.createTableHeader();
            this.state = 288;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.T__1) {
                this.state = 284;
                this.match(SqlBaseParser.T__1);
                this.state = 285;
                this.colTypeList();
                this.state = 286;
                this.match(SqlBaseParser.T__2);
            }

            this.state = 290;
            this.tableProvider();
            this.state = 304;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.COMMENT || ((((_la - 183)) & ~0x1f) == 0 && ((1 << (_la - 183)) & ((1 << (SqlBaseParser.OPTIONS - 183)) | (1 << (SqlBaseParser.TBLPROPERTIES - 183)) | (1 << (SqlBaseParser.LOCATION - 183)) | (1 << (SqlBaseParser.CLUSTERED - 183)))) !== 0) || _la===SqlBaseParser.PARTITIONED) {
                this.state = 302;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case SqlBaseParser.OPTIONS:
                    this.state = 291;
                    this.match(SqlBaseParser.OPTIONS);
                    this.state = 292;
                    localctx.options = this.tablePropertyList();
                    break;
                case SqlBaseParser.PARTITIONED:
                    this.state = 293;
                    this.match(SqlBaseParser.PARTITIONED);
                    this.state = 294;
                    this.match(SqlBaseParser.BY);
                    this.state = 295;
                    localctx.partitionColumnNames = this.identifierList();
                    break;
                case SqlBaseParser.CLUSTERED:
                    this.state = 296;
                    this.bucketSpec();
                    break;
                case SqlBaseParser.LOCATION:
                    this.state = 297;
                    this.locationSpec();
                    break;
                case SqlBaseParser.COMMENT:
                    this.state = 298;
                    this.match(SqlBaseParser.COMMENT);
                    this.state = 299;
                    localctx.comment = this.match(SqlBaseParser.STRING);
                    break;
                case SqlBaseParser.TBLPROPERTIES:
                    this.state = 300;
                    this.match(SqlBaseParser.TBLPROPERTIES);
                    this.state = 301;
                    localctx.tableProps = this.tablePropertyList();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 306;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 311;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.AS))) !== 0) || ((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (SqlBaseParser.WITH - 77)) | (1 << (SqlBaseParser.VALUES - 77)) | (1 << (SqlBaseParser.TABLE - 77)) | (1 << (SqlBaseParser.INSERT - 77)))) !== 0) || _la===SqlBaseParser.MAP || _la===SqlBaseParser.REDUCE) {
                this.state = 308;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.AS) {
                    this.state = 307;
                    this.match(SqlBaseParser.AS);
                }

                this.state = 310;
                this.query();
            }

            break;

        case 7:
            localctx = new CreateHiveTableContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 313;
            this.createTableHeader();
            this.state = 318;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
            if(la_===1) {
                this.state = 314;
                this.match(SqlBaseParser.T__1);
                this.state = 315;
                localctx.columns = this.colTypeList();
                this.state = 316;
                this.match(SqlBaseParser.T__2);

            }
            this.state = 337;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.ROW || _la===SqlBaseParser.COMMENT || ((((_la - 185)) & ~0x1f) == 0 && ((1 << (_la - 185)) & ((1 << (SqlBaseParser.TBLPROPERTIES - 185)) | (1 << (SqlBaseParser.SKEWED - 185)) | (1 << (SqlBaseParser.STORED - 185)) | (1 << (SqlBaseParser.LOCATION - 185)) | (1 << (SqlBaseParser.CLUSTERED - 185)) | (1 << (SqlBaseParser.PARTITIONED - 185)))) !== 0)) {
                this.state = 335;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case SqlBaseParser.COMMENT:
                    this.state = 320;
                    this.match(SqlBaseParser.COMMENT);
                    this.state = 321;
                    localctx.comment = this.match(SqlBaseParser.STRING);
                    break;
                case SqlBaseParser.PARTITIONED:
                    this.state = 322;
                    this.match(SqlBaseParser.PARTITIONED);
                    this.state = 323;
                    this.match(SqlBaseParser.BY);
                    this.state = 324;
                    this.match(SqlBaseParser.T__1);
                    this.state = 325;
                    localctx.partitionColumns = this.colTypeList();
                    this.state = 326;
                    this.match(SqlBaseParser.T__2);
                    break;
                case SqlBaseParser.CLUSTERED:
                    this.state = 328;
                    this.bucketSpec();
                    break;
                case SqlBaseParser.SKEWED:
                    this.state = 329;
                    this.skewSpec();
                    break;
                case SqlBaseParser.ROW:
                    this.state = 330;
                    this.rowFormat();
                    break;
                case SqlBaseParser.STORED:
                    this.state = 331;
                    this.createFileFormat();
                    break;
                case SqlBaseParser.LOCATION:
                    this.state = 332;
                    this.locationSpec();
                    break;
                case SqlBaseParser.TBLPROPERTIES:
                    this.state = 333;
                    this.match(SqlBaseParser.TBLPROPERTIES);
                    this.state = 334;
                    localctx.tableProps = this.tablePropertyList();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 339;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 344;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.AS))) !== 0) || ((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (SqlBaseParser.WITH - 77)) | (1 << (SqlBaseParser.VALUES - 77)) | (1 << (SqlBaseParser.TABLE - 77)) | (1 << (SqlBaseParser.INSERT - 77)))) !== 0) || _la===SqlBaseParser.MAP || _la===SqlBaseParser.REDUCE) {
                this.state = 341;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.AS) {
                    this.state = 340;
                    this.match(SqlBaseParser.AS);
                }

                this.state = 343;
                this.query();
            }

            break;

        case 8:
            localctx = new CreateTableLikeContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 346;
            this.match(SqlBaseParser.CREATE);
            this.state = 347;
            this.match(SqlBaseParser.TABLE);
            this.state = 351;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
            if(la_===1) {
                this.state = 348;
                this.match(SqlBaseParser.IF);
                this.state = 349;
                this.match(SqlBaseParser.NOT);
                this.state = 350;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 353;
            localctx.target = this.tableIdentifier();
            this.state = 354;
            this.match(SqlBaseParser.LIKE);
            this.state = 355;
            localctx.source = this.tableIdentifier();
            this.state = 357;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.LOCATION) {
                this.state = 356;
                this.locationSpec();
            }

            break;

        case 9:
            localctx = new AnalyzeContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 359;
            this.match(SqlBaseParser.ANALYZE);
            this.state = 360;
            this.match(SqlBaseParser.TABLE);
            this.state = 361;
            this.tableIdentifier();
            this.state = 363;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PARTITION) {
                this.state = 362;
                this.partitionSpec();
            }

            this.state = 365;
            this.match(SqlBaseParser.COMPUTE);
            this.state = 366;
            this.match(SqlBaseParser.STATISTICS);
            this.state = 371;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
            if(la_===1) {
                this.state = 367;
                this.identifier();

            } else if(la_===2) {
                this.state = 368;
                this.match(SqlBaseParser.FOR);
                this.state = 369;
                this.match(SqlBaseParser.COLUMNS);
                this.state = 370;
                this.identifierSeq();

            }
            break;

        case 10:
            localctx = new AddTableColumnsContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 373;
            this.match(SqlBaseParser.ALTER);
            this.state = 374;
            this.match(SqlBaseParser.TABLE);
            this.state = 375;
            this.tableIdentifier();
            this.state = 376;
            this.match(SqlBaseParser.ADD);
            this.state = 377;
            this.match(SqlBaseParser.COLUMNS);
            this.state = 378;
            this.match(SqlBaseParser.T__1);
            this.state = 379;
            localctx.columns = this.colTypeList();
            this.state = 380;
            this.match(SqlBaseParser.T__2);
            break;

        case 11:
            localctx = new RenameTableContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 382;
            this.match(SqlBaseParser.ALTER);
            this.state = 383;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.TABLE || _la===SqlBaseParser.VIEW)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 384;
            localctx.from = this.tableIdentifier();
            this.state = 385;
            this.match(SqlBaseParser.RENAME);
            this.state = 386;
            this.match(SqlBaseParser.TO);
            this.state = 387;
            localctx.to = this.tableIdentifier();
            break;

        case 12:
            localctx = new SetTablePropertiesContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 389;
            this.match(SqlBaseParser.ALTER);
            this.state = 390;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.TABLE || _la===SqlBaseParser.VIEW)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 391;
            this.tableIdentifier();
            this.state = 392;
            this.match(SqlBaseParser.SET);
            this.state = 393;
            this.match(SqlBaseParser.TBLPROPERTIES);
            this.state = 394;
            this.tablePropertyList();
            break;

        case 13:
            localctx = new UnsetTablePropertiesContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 396;
            this.match(SqlBaseParser.ALTER);
            this.state = 397;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.TABLE || _la===SqlBaseParser.VIEW)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 398;
            this.tableIdentifier();
            this.state = 399;
            this.match(SqlBaseParser.UNSET);
            this.state = 400;
            this.match(SqlBaseParser.TBLPROPERTIES);
            this.state = 403;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.IF) {
                this.state = 401;
                this.match(SqlBaseParser.IF);
                this.state = 402;
                this.match(SqlBaseParser.EXISTS);
            }

            this.state = 405;
            this.tablePropertyList();
            break;

        case 14:
            localctx = new ChangeColumnContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 407;
            this.match(SqlBaseParser.ALTER);
            this.state = 408;
            this.match(SqlBaseParser.TABLE);
            this.state = 409;
            this.tableIdentifier();
            this.state = 411;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PARTITION) {
                this.state = 410;
                this.partitionSpec();
            }

            this.state = 413;
            this.match(SqlBaseParser.CHANGE);
            this.state = 415;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
            if(la_===1) {
                this.state = 414;
                this.match(SqlBaseParser.COLUMN);

            }
            this.state = 417;
            this.identifier();
            this.state = 418;
            this.colType();
            this.state = 420;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.FIRST || _la===SqlBaseParser.AFTER) {
                this.state = 419;
                this.colPosition();
            }

            break;

        case 15:
            localctx = new SetTableSerDeContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 422;
            this.match(SqlBaseParser.ALTER);
            this.state = 423;
            this.match(SqlBaseParser.TABLE);
            this.state = 424;
            this.tableIdentifier();
            this.state = 426;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PARTITION) {
                this.state = 425;
                this.partitionSpec();
            }

            this.state = 428;
            this.match(SqlBaseParser.SET);
            this.state = 429;
            this.match(SqlBaseParser.SERDE);
            this.state = 430;
            this.match(SqlBaseParser.STRING);
            this.state = 434;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WITH) {
                this.state = 431;
                this.match(SqlBaseParser.WITH);
                this.state = 432;
                this.match(SqlBaseParser.SERDEPROPERTIES);
                this.state = 433;
                this.tablePropertyList();
            }

            break;

        case 16:
            localctx = new SetTableSerDeContext(this, localctx);
            this.enterOuterAlt(localctx, 16);
            this.state = 436;
            this.match(SqlBaseParser.ALTER);
            this.state = 437;
            this.match(SqlBaseParser.TABLE);
            this.state = 438;
            this.tableIdentifier();
            this.state = 440;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PARTITION) {
                this.state = 439;
                this.partitionSpec();
            }

            this.state = 442;
            this.match(SqlBaseParser.SET);
            this.state = 443;
            this.match(SqlBaseParser.SERDEPROPERTIES);
            this.state = 444;
            this.tablePropertyList();
            break;

        case 17:
            localctx = new AddTablePartitionContext(this, localctx);
            this.enterOuterAlt(localctx, 17);
            this.state = 446;
            this.match(SqlBaseParser.ALTER);
            this.state = 447;
            this.match(SqlBaseParser.TABLE);
            this.state = 448;
            this.tableIdentifier();
            this.state = 449;
            this.match(SqlBaseParser.ADD);
            this.state = 453;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.IF) {
                this.state = 450;
                this.match(SqlBaseParser.IF);
                this.state = 451;
                this.match(SqlBaseParser.NOT);
                this.state = 452;
                this.match(SqlBaseParser.EXISTS);
            }

            this.state = 456; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 455;
                this.partitionSpecLocation();
                this.state = 458; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SqlBaseParser.PARTITION);
            break;

        case 18:
            localctx = new AddTablePartitionContext(this, localctx);
            this.enterOuterAlt(localctx, 18);
            this.state = 460;
            this.match(SqlBaseParser.ALTER);
            this.state = 461;
            this.match(SqlBaseParser.VIEW);
            this.state = 462;
            this.tableIdentifier();
            this.state = 463;
            this.match(SqlBaseParser.ADD);
            this.state = 467;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.IF) {
                this.state = 464;
                this.match(SqlBaseParser.IF);
                this.state = 465;
                this.match(SqlBaseParser.NOT);
                this.state = 466;
                this.match(SqlBaseParser.EXISTS);
            }

            this.state = 470; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 469;
                this.partitionSpec();
                this.state = 472; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SqlBaseParser.PARTITION);
            break;

        case 19:
            localctx = new RenameTablePartitionContext(this, localctx);
            this.enterOuterAlt(localctx, 19);
            this.state = 474;
            this.match(SqlBaseParser.ALTER);
            this.state = 475;
            this.match(SqlBaseParser.TABLE);
            this.state = 476;
            this.tableIdentifier();
            this.state = 477;
            localctx.from = this.partitionSpec();
            this.state = 478;
            this.match(SqlBaseParser.RENAME);
            this.state = 479;
            this.match(SqlBaseParser.TO);
            this.state = 480;
            localctx.to = this.partitionSpec();
            break;

        case 20:
            localctx = new DropTablePartitionsContext(this, localctx);
            this.enterOuterAlt(localctx, 20);
            this.state = 482;
            this.match(SqlBaseParser.ALTER);
            this.state = 483;
            this.match(SqlBaseParser.TABLE);
            this.state = 484;
            this.tableIdentifier();
            this.state = 485;
            this.match(SqlBaseParser.DROP);
            this.state = 488;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.IF) {
                this.state = 486;
                this.match(SqlBaseParser.IF);
                this.state = 487;
                this.match(SqlBaseParser.EXISTS);
            }

            this.state = 490;
            this.partitionSpec();
            this.state = 495;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__3) {
                this.state = 491;
                this.match(SqlBaseParser.T__3);
                this.state = 492;
                this.partitionSpec();
                this.state = 497;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 499;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PURGE) {
                this.state = 498;
                this.match(SqlBaseParser.PURGE);
            }

            break;

        case 21:
            localctx = new DropTablePartitionsContext(this, localctx);
            this.enterOuterAlt(localctx, 21);
            this.state = 501;
            this.match(SqlBaseParser.ALTER);
            this.state = 502;
            this.match(SqlBaseParser.VIEW);
            this.state = 503;
            this.tableIdentifier();
            this.state = 504;
            this.match(SqlBaseParser.DROP);
            this.state = 507;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.IF) {
                this.state = 505;
                this.match(SqlBaseParser.IF);
                this.state = 506;
                this.match(SqlBaseParser.EXISTS);
            }

            this.state = 509;
            this.partitionSpec();
            this.state = 514;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__3) {
                this.state = 510;
                this.match(SqlBaseParser.T__3);
                this.state = 511;
                this.partitionSpec();
                this.state = 516;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 22:
            localctx = new SetTableLocationContext(this, localctx);
            this.enterOuterAlt(localctx, 22);
            this.state = 517;
            this.match(SqlBaseParser.ALTER);
            this.state = 518;
            this.match(SqlBaseParser.TABLE);
            this.state = 519;
            this.tableIdentifier();
            this.state = 521;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PARTITION) {
                this.state = 520;
                this.partitionSpec();
            }

            this.state = 523;
            this.match(SqlBaseParser.SET);
            this.state = 524;
            this.locationSpec();
            break;

        case 23:
            localctx = new RecoverPartitionsContext(this, localctx);
            this.enterOuterAlt(localctx, 23);
            this.state = 526;
            this.match(SqlBaseParser.ALTER);
            this.state = 527;
            this.match(SqlBaseParser.TABLE);
            this.state = 528;
            this.tableIdentifier();
            this.state = 529;
            this.match(SqlBaseParser.RECOVER);
            this.state = 530;
            this.match(SqlBaseParser.PARTITIONS);
            break;

        case 24:
            localctx = new DropTableContext(this, localctx);
            this.enterOuterAlt(localctx, 24);
            this.state = 532;
            this.match(SqlBaseParser.DROP);
            this.state = 533;
            this.match(SqlBaseParser.TABLE);
            this.state = 536;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
            if(la_===1) {
                this.state = 534;
                this.match(SqlBaseParser.IF);
                this.state = 535;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 538;
            this.tableIdentifier();
            this.state = 540;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PURGE) {
                this.state = 539;
                this.match(SqlBaseParser.PURGE);
            }

            break;

        case 25:
            localctx = new DropTableContext(this, localctx);
            this.enterOuterAlt(localctx, 25);
            this.state = 542;
            this.match(SqlBaseParser.DROP);
            this.state = 543;
            this.match(SqlBaseParser.VIEW);
            this.state = 546;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
            if(la_===1) {
                this.state = 544;
                this.match(SqlBaseParser.IF);
                this.state = 545;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 548;
            this.tableIdentifier();
            break;

        case 26:
            localctx = new CreateViewContext(this, localctx);
            this.enterOuterAlt(localctx, 26);
            this.state = 549;
            this.match(SqlBaseParser.CREATE);
            this.state = 552;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OR) {
                this.state = 550;
                this.match(SqlBaseParser.OR);
                this.state = 551;
                this.match(SqlBaseParser.REPLACE);
            }

            this.state = 558;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.GLOBAL || _la===SqlBaseParser.TEMPORARY) {
                this.state = 555;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.GLOBAL) {
                    this.state = 554;
                    this.match(SqlBaseParser.GLOBAL);
                }

                this.state = 557;
                this.match(SqlBaseParser.TEMPORARY);
            }

            this.state = 560;
            this.match(SqlBaseParser.VIEW);
            this.state = 564;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
            if(la_===1) {
                this.state = 561;
                this.match(SqlBaseParser.IF);
                this.state = 562;
                this.match(SqlBaseParser.NOT);
                this.state = 563;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 566;
            this.tableIdentifier();
            this.state = 568;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.T__1) {
                this.state = 567;
                this.identifierCommentList();
            }

            this.state = 572;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.COMMENT) {
                this.state = 570;
                this.match(SqlBaseParser.COMMENT);
                this.state = 571;
                this.match(SqlBaseParser.STRING);
            }

            this.state = 577;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PARTITIONED) {
                this.state = 574;
                this.match(SqlBaseParser.PARTITIONED);
                this.state = 575;
                this.match(SqlBaseParser.ON);
                this.state = 576;
                this.identifierList();
            }

            this.state = 581;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.TBLPROPERTIES) {
                this.state = 579;
                this.match(SqlBaseParser.TBLPROPERTIES);
                this.state = 580;
                this.tablePropertyList();
            }

            this.state = 583;
            this.match(SqlBaseParser.AS);
            this.state = 584;
            this.query();
            break;

        case 27:
            localctx = new CreateTempViewUsingContext(this, localctx);
            this.enterOuterAlt(localctx, 27);
            this.state = 586;
            this.match(SqlBaseParser.CREATE);
            this.state = 589;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OR) {
                this.state = 587;
                this.match(SqlBaseParser.OR);
                this.state = 588;
                this.match(SqlBaseParser.REPLACE);
            }

            this.state = 592;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.GLOBAL) {
                this.state = 591;
                this.match(SqlBaseParser.GLOBAL);
            }

            this.state = 594;
            this.match(SqlBaseParser.TEMPORARY);
            this.state = 595;
            this.match(SqlBaseParser.VIEW);
            this.state = 596;
            this.tableIdentifier();
            this.state = 601;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.T__1) {
                this.state = 597;
                this.match(SqlBaseParser.T__1);
                this.state = 598;
                this.colTypeList();
                this.state = 599;
                this.match(SqlBaseParser.T__2);
            }

            this.state = 603;
            this.tableProvider();
            this.state = 606;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OPTIONS) {
                this.state = 604;
                this.match(SqlBaseParser.OPTIONS);
                this.state = 605;
                this.tablePropertyList();
            }

            break;

        case 28:
            localctx = new AlterViewQueryContext(this, localctx);
            this.enterOuterAlt(localctx, 28);
            this.state = 608;
            this.match(SqlBaseParser.ALTER);
            this.state = 609;
            this.match(SqlBaseParser.VIEW);
            this.state = 610;
            this.tableIdentifier();
            this.state = 612;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.AS) {
                this.state = 611;
                this.match(SqlBaseParser.AS);
            }

            this.state = 614;
            this.query();
            break;

        case 29:
            localctx = new CreateFunctionContext(this, localctx);
            this.enterOuterAlt(localctx, 29);
            this.state = 616;
            this.match(SqlBaseParser.CREATE);
            this.state = 619;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OR) {
                this.state = 617;
                this.match(SqlBaseParser.OR);
                this.state = 618;
                this.match(SqlBaseParser.REPLACE);
            }

            this.state = 622;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.TEMPORARY) {
                this.state = 621;
                this.match(SqlBaseParser.TEMPORARY);
            }

            this.state = 624;
            this.match(SqlBaseParser.SQLFUNCTION);
            this.state = 628;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
            if(la_===1) {
                this.state = 625;
                this.match(SqlBaseParser.IF);
                this.state = 626;
                this.match(SqlBaseParser.NOT);
                this.state = 627;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 630;
            this.qualifiedName();
            this.state = 631;
            this.match(SqlBaseParser.AS);
            this.state = 632;
            localctx.className = this.match(SqlBaseParser.STRING);
            this.state = 642;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.USING) {
                this.state = 633;
                this.match(SqlBaseParser.USING);
                this.state = 634;
                this.resource();
                this.state = 639;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__3) {
                    this.state = 635;
                    this.match(SqlBaseParser.T__3);
                    this.state = 636;
                    this.resource();
                    this.state = 641;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            break;

        case 30:
            localctx = new DropFunctionContext(this, localctx);
            this.enterOuterAlt(localctx, 30);
            this.state = 644;
            this.match(SqlBaseParser.DROP);
            this.state = 646;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.TEMPORARY) {
                this.state = 645;
                this.match(SqlBaseParser.TEMPORARY);
            }

            this.state = 648;
            this.match(SqlBaseParser.SQLFUNCTION);
            this.state = 651;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
            if(la_===1) {
                this.state = 649;
                this.match(SqlBaseParser.IF);
                this.state = 650;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 653;
            this.qualifiedName();
            break;

        case 31:
            localctx = new ExplainContext(this, localctx);
            this.enterOuterAlt(localctx, 31);
            this.state = 654;
            this.match(SqlBaseParser.EXPLAIN);
            this.state = 656;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (SqlBaseParser.LOGICAL - 90)) | (1 << (SqlBaseParser.CODEGEN - 90)) | (1 << (SqlBaseParser.COST - 90)))) !== 0) || _la===SqlBaseParser.EXTENDED || _la===SqlBaseParser.FORMATTED) {
                this.state = 655;
                _la = this._input.LA(1);
                if(!(((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (SqlBaseParser.LOGICAL - 90)) | (1 << (SqlBaseParser.CODEGEN - 90)) | (1 << (SqlBaseParser.COST - 90)))) !== 0) || _la===SqlBaseParser.EXTENDED || _la===SqlBaseParser.FORMATTED)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 658;
            this.statement();
            break;

        case 32:
            localctx = new ShowTablesContext(this, localctx);
            this.enterOuterAlt(localctx, 32);
            this.state = 659;
            this.match(SqlBaseParser.SHOW);
            this.state = 660;
            this.match(SqlBaseParser.TABLES);
            this.state = 663;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN) {
                this.state = 661;
                _la = this._input.LA(1);
                if(!(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 662;
                localctx.db = this.identifier();
            }

            this.state = 669;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.LIKE || _la===SqlBaseParser.STRING) {
                this.state = 666;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.LIKE) {
                    this.state = 665;
                    this.match(SqlBaseParser.LIKE);
                }

                this.state = 668;
                localctx.pattern = this.match(SqlBaseParser.STRING);
            }

            break;

        case 33:
            localctx = new ShowTableContext(this, localctx);
            this.enterOuterAlt(localctx, 33);
            this.state = 671;
            this.match(SqlBaseParser.SHOW);
            this.state = 672;
            this.match(SqlBaseParser.TABLE);
            this.state = 673;
            this.match(SqlBaseParser.EXTENDED);
            this.state = 676;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN) {
                this.state = 674;
                _la = this._input.LA(1);
                if(!(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 675;
                localctx.db = this.identifier();
            }

            this.state = 678;
            this.match(SqlBaseParser.LIKE);
            this.state = 679;
            localctx.pattern = this.match(SqlBaseParser.STRING);
            this.state = 681;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PARTITION) {
                this.state = 680;
                this.partitionSpec();
            }

            break;

        case 34:
            localctx = new ShowDatabasesContext(this, localctx);
            this.enterOuterAlt(localctx, 34);
            this.state = 683;
            this.match(SqlBaseParser.SHOW);
            this.state = 684;
            this.match(SqlBaseParser.DATABASES);
            this.state = 689;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.LIKE || _la===SqlBaseParser.STRING) {
                this.state = 686;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.LIKE) {
                    this.state = 685;
                    this.match(SqlBaseParser.LIKE);
                }

                this.state = 688;
                localctx.pattern = this.match(SqlBaseParser.STRING);
            }

            break;

        case 35:
            localctx = new ShowTblPropertiesContext(this, localctx);
            this.enterOuterAlt(localctx, 35);
            this.state = 691;
            this.match(SqlBaseParser.SHOW);
            this.state = 692;
            this.match(SqlBaseParser.TBLPROPERTIES);
            this.state = 693;
            localctx.table = this.tableIdentifier();
            this.state = 698;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.T__1) {
                this.state = 694;
                this.match(SqlBaseParser.T__1);
                this.state = 695;
                localctx.key = this.tablePropertyKey();
                this.state = 696;
                this.match(SqlBaseParser.T__2);
            }

            break;

        case 36:
            localctx = new ShowColumnsContext(this, localctx);
            this.enterOuterAlt(localctx, 36);
            this.state = 700;
            this.match(SqlBaseParser.SHOW);
            this.state = 701;
            this.match(SqlBaseParser.COLUMNS);
            this.state = 702;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 703;
            this.tableIdentifier();
            this.state = 706;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN) {
                this.state = 704;
                _la = this._input.LA(1);
                if(!(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 705;
                localctx.db = this.identifier();
            }

            break;

        case 37:
            localctx = new ShowPartitionsContext(this, localctx);
            this.enterOuterAlt(localctx, 37);
            this.state = 708;
            this.match(SqlBaseParser.SHOW);
            this.state = 709;
            this.match(SqlBaseParser.PARTITIONS);
            this.state = 710;
            this.tableIdentifier();
            this.state = 712;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PARTITION) {
                this.state = 711;
                this.partitionSpec();
            }

            break;

        case 38:
            localctx = new ShowFunctionsContext(this, localctx);
            this.enterOuterAlt(localctx, 38);
            this.state = 714;
            this.match(SqlBaseParser.SHOW);
            this.state = 716;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
            if(la_===1) {
                this.state = 715;
                this.identifier();

            }
            this.state = 718;
            this.match(SqlBaseParser.FUNCTIONS);
            this.state = 726;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.NOT - 32)) | (1 << (SqlBaseParser.NO - 32)) | (1 << (SqlBaseParser.EXISTS - 32)) | (1 << (SqlBaseParser.BETWEEN - 32)) | (1 << (SqlBaseParser.LIKE - 32)) | (1 << (SqlBaseParser.RLIKE - 32)) | (1 << (SqlBaseParser.IS - 32)) | (1 << (SqlBaseParser.NULL - 32)) | (1 << (SqlBaseParser.TRUE - 32)) | (1 << (SqlBaseParser.FALSE - 32)) | (1 << (SqlBaseParser.NULLS - 32)) | (1 << (SqlBaseParser.ASC - 32)) | (1 << (SqlBaseParser.DESC - 32)) | (1 << (SqlBaseParser.FOR - 32)) | (1 << (SqlBaseParser.INTERVAL - 32)) | (1 << (SqlBaseParser.CASE - 32)) | (1 << (SqlBaseParser.WHEN - 32)) | (1 << (SqlBaseParser.THEN - 32)) | (1 << (SqlBaseParser.ELSE - 32)) | (1 << (SqlBaseParser.END - 32)) | (1 << (SqlBaseParser.JOIN - 32)) | (1 << (SqlBaseParser.CROSS - 32)) | (1 << (SqlBaseParser.OUTER - 32)) | (1 << (SqlBaseParser.INNER - 32)) | (1 << (SqlBaseParser.LEFT - 32)) | (1 << (SqlBaseParser.SEMI - 32)) | (1 << (SqlBaseParser.RIGHT - 32)) | (1 << (SqlBaseParser.FULL - 32)) | (1 << (SqlBaseParser.NATURAL - 32)) | (1 << (SqlBaseParser.ON - 32)) | (1 << (SqlBaseParser.PIVOT - 32)) | (1 << (SqlBaseParser.LATERAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlBaseParser.WINDOW - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.DIRECTORY - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlBaseParser.COLUMNS - 96)) | (1 << (SqlBaseParser.COLUMN - 96)) | (1 << (SqlBaseParser.USE - 96)) | (1 << (SqlBaseParser.PARTITIONS - 96)) | (1 << (SqlBaseParser.FUNCTIONS - 96)) | (1 << (SqlBaseParser.DROP - 96)) | (1 << (SqlBaseParser.UNION - 96)) | (1 << (SqlBaseParser.EXCEPT - 96)) | (1 << (SqlBaseParser.SETMINUS - 96)) | (1 << (SqlBaseParser.INTERSECT - 96)) | (1 << (SqlBaseParser.TO - 96)) | (1 << (SqlBaseParser.TABLESAMPLE - 96)) | (1 << (SqlBaseParser.STRATIFY - 96)) | (1 << (SqlBaseParser.ALTER - 96)) | (1 << (SqlBaseParser.RENAME - 96)) | (1 << (SqlBaseParser.ARRAY - 96)) | (1 << (SqlBaseParser.MAP - 96)) | (1 << (SqlBaseParser.STRUCT - 96)) | (1 << (SqlBaseParser.COMMENT - 96)) | (1 << (SqlBaseParser.SET - 96)) | (1 << (SqlBaseParser.RESET - 96)) | (1 << (SqlBaseParser.DATA - 96)) | (1 << (SqlBaseParser.START - 96)) | (1 << (SqlBaseParser.TRANSACTION - 96)) | (1 << (SqlBaseParser.COMMIT - 96)) | (1 << (SqlBaseParser.ROLLBACK - 96)) | (1 << (SqlBaseParser.MACRO - 96)) | (1 << (SqlBaseParser.IGNORE - 96)) | (1 << (SqlBaseParser.BOTH - 96)) | (1 << (SqlBaseParser.LEADING - 96)) | (1 << (SqlBaseParser.TRAILING - 96)) | (1 << (SqlBaseParser.IF - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.EXTRACT - 128)) | (1 << (SqlBaseParser.DIV - 128)) | (1 << (SqlBaseParser.PERCENTLIT - 128)) | (1 << (SqlBaseParser.BUCKET - 128)) | (1 << (SqlBaseParser.OUT - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.SORT - 128)) | (1 << (SqlBaseParser.CLUSTER - 128)) | (1 << (SqlBaseParser.DISTRIBUTE - 128)) | (1 << (SqlBaseParser.OVERWRITE - 128)) | (1 << (SqlBaseParser.TRANSFORM - 128)) | (1 << (SqlBaseParser.REDUCE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlBaseParser.SERDE - 160)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 160)) | (1 << (SqlBaseParser.RECORDREADER - 160)) | (1 << (SqlBaseParser.RECORDWRITER - 160)) | (1 << (SqlBaseParser.DELIMITED - 160)) | (1 << (SqlBaseParser.FIELDS - 160)) | (1 << (SqlBaseParser.TERMINATED - 160)) | (1 << (SqlBaseParser.COLLECTION - 160)) | (1 << (SqlBaseParser.ITEMS - 160)) | (1 << (SqlBaseParser.KEYS - 160)) | (1 << (SqlBaseParser.ESCAPED - 160)) | (1 << (SqlBaseParser.LINES - 160)) | (1 << (SqlBaseParser.SEPARATED - 160)) | (1 << (SqlBaseParser.SQLFUNCTION - 160)) | (1 << (SqlBaseParser.EXTENDED - 160)) | (1 << (SqlBaseParser.REFRESH - 160)) | (1 << (SqlBaseParser.CLEAR - 160)) | (1 << (SqlBaseParser.CACHE - 160)) | (1 << (SqlBaseParser.UNCACHE - 160)) | (1 << (SqlBaseParser.LAZY - 160)) | (1 << (SqlBaseParser.FORMATTED - 160)) | (1 << (SqlBaseParser.GLOBAL - 160)) | (1 << (SqlBaseParser.TEMPORARY - 160)) | (1 << (SqlBaseParser.OPTIONS - 160)) | (1 << (SqlBaseParser.UNSET - 160)) | (1 << (SqlBaseParser.TBLPROPERTIES - 160)) | (1 << (SqlBaseParser.DBPROPERTIES - 160)) | (1 << (SqlBaseParser.BUCKETS - 160)) | (1 << (SqlBaseParser.SKEWED - 160)) | (1 << (SqlBaseParser.STORED - 160)) | (1 << (SqlBaseParser.DIRECTORIES - 160)) | (1 << (SqlBaseParser.LOCATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (SqlBaseParser.EXCHANGE - 192)) | (1 << (SqlBaseParser.ARCHIVE - 192)) | (1 << (SqlBaseParser.UNARCHIVE - 192)) | (1 << (SqlBaseParser.FILEFORMAT - 192)) | (1 << (SqlBaseParser.TOUCH - 192)) | (1 << (SqlBaseParser.COMPACT - 192)) | (1 << (SqlBaseParser.CONCATENATE - 192)) | (1 << (SqlBaseParser.CHANGE - 192)) | (1 << (SqlBaseParser.CASCADE - 192)) | (1 << (SqlBaseParser.RESTRICT - 192)) | (1 << (SqlBaseParser.CLUSTERED - 192)) | (1 << (SqlBaseParser.SORTED - 192)) | (1 << (SqlBaseParser.PURGE - 192)) | (1 << (SqlBaseParser.INPUTFORMAT - 192)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 192)) | (1 << (SqlBaseParser.DATABASE - 192)) | (1 << (SqlBaseParser.DATABASES - 192)) | (1 << (SqlBaseParser.DFS - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.ANALYZE - 192)) | (1 << (SqlBaseParser.COMPUTE - 192)) | (1 << (SqlBaseParser.LIST - 192)) | (1 << (SqlBaseParser.STATISTICS - 192)) | (1 << (SqlBaseParser.PARTITIONED - 192)) | (1 << (SqlBaseParser.EXTERNAL - 192)) | (1 << (SqlBaseParser.DEFINED - 192)) | (1 << (SqlBaseParser.REVOKE - 192)) | (1 << (SqlBaseParser.GRANT - 192)) | (1 << (SqlBaseParser.LOCK - 192)) | (1 << (SqlBaseParser.UNLOCK - 192)) | (1 << (SqlBaseParser.MSCK - 192)) | (1 << (SqlBaseParser.REPAIR - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (SqlBaseParser.RECOVER - 224)) | (1 << (SqlBaseParser.EXPORT - 224)) | (1 << (SqlBaseParser.IMPORT - 224)) | (1 << (SqlBaseParser.LOAD - 224)) | (1 << (SqlBaseParser.ROLE - 224)) | (1 << (SqlBaseParser.ROLES - 224)) | (1 << (SqlBaseParser.COMPACTIONS - 224)) | (1 << (SqlBaseParser.PRINCIPALS - 224)) | (1 << (SqlBaseParser.TRANSACTIONS - 224)) | (1 << (SqlBaseParser.INDEX - 224)) | (1 << (SqlBaseParser.INDEXES - 224)) | (1 << (SqlBaseParser.LOCKS - 224)) | (1 << (SqlBaseParser.OPTION - 224)) | (1 << (SqlBaseParser.ANTI - 224)) | (1 << (SqlBaseParser.LOCAL - 224)) | (1 << (SqlBaseParser.INPATH - 224)) | (1 << (SqlBaseParser.STRING - 224)) | (1 << (SqlBaseParser.IDENTIFIER - 224)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 224)))) !== 0)) {
                this.state = 720;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
                if(la_===1) {
                    this.state = 719;
                    this.match(SqlBaseParser.LIKE);

                }
                this.state = 724;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case SqlBaseParser.SELECT:
                case SqlBaseParser.FROM:
                case SqlBaseParser.ADD:
                case SqlBaseParser.AS:
                case SqlBaseParser.ALL:
                case SqlBaseParser.ANY:
                case SqlBaseParser.DISTINCT:
                case SqlBaseParser.WHERE:
                case SqlBaseParser.GROUP:
                case SqlBaseParser.BY:
                case SqlBaseParser.GROUPING:
                case SqlBaseParser.SETS:
                case SqlBaseParser.CUBE:
                case SqlBaseParser.ROLLUP:
                case SqlBaseParser.ORDER:
                case SqlBaseParser.HAVING:
                case SqlBaseParser.LIMIT:
                case SqlBaseParser.AT:
                case SqlBaseParser.OR:
                case SqlBaseParser.AND:
                case SqlBaseParser.IN:
                case SqlBaseParser.NOT:
                case SqlBaseParser.NO:
                case SqlBaseParser.EXISTS:
                case SqlBaseParser.BETWEEN:
                case SqlBaseParser.LIKE:
                case SqlBaseParser.RLIKE:
                case SqlBaseParser.IS:
                case SqlBaseParser.NULL:
                case SqlBaseParser.TRUE:
                case SqlBaseParser.FALSE:
                case SqlBaseParser.NULLS:
                case SqlBaseParser.ASC:
                case SqlBaseParser.DESC:
                case SqlBaseParser.FOR:
                case SqlBaseParser.INTERVAL:
                case SqlBaseParser.CASE:
                case SqlBaseParser.WHEN:
                case SqlBaseParser.THEN:
                case SqlBaseParser.ELSE:
                case SqlBaseParser.END:
                case SqlBaseParser.JOIN:
                case SqlBaseParser.CROSS:
                case SqlBaseParser.OUTER:
                case SqlBaseParser.INNER:
                case SqlBaseParser.LEFT:
                case SqlBaseParser.SEMI:
                case SqlBaseParser.RIGHT:
                case SqlBaseParser.FULL:
                case SqlBaseParser.NATURAL:
                case SqlBaseParser.ON:
                case SqlBaseParser.PIVOT:
                case SqlBaseParser.LATERAL:
                case SqlBaseParser.WINDOW:
                case SqlBaseParser.OVER:
                case SqlBaseParser.PARTITION:
                case SqlBaseParser.RANGE:
                case SqlBaseParser.ROWS:
                case SqlBaseParser.UNBOUNDED:
                case SqlBaseParser.PRECEDING:
                case SqlBaseParser.FOLLOWING:
                case SqlBaseParser.CURRENT:
                case SqlBaseParser.FIRST:
                case SqlBaseParser.AFTER:
                case SqlBaseParser.LAST:
                case SqlBaseParser.ROW:
                case SqlBaseParser.WITH:
                case SqlBaseParser.VALUES:
                case SqlBaseParser.CREATE:
                case SqlBaseParser.TABLE:
                case SqlBaseParser.DIRECTORY:
                case SqlBaseParser.VIEW:
                case SqlBaseParser.REPLACE:
                case SqlBaseParser.INSERT:
                case SqlBaseParser.DELETE:
                case SqlBaseParser.INTO:
                case SqlBaseParser.DESCRIBE:
                case SqlBaseParser.EXPLAIN:
                case SqlBaseParser.FORMAT:
                case SqlBaseParser.LOGICAL:
                case SqlBaseParser.CODEGEN:
                case SqlBaseParser.COST:
                case SqlBaseParser.CAST:
                case SqlBaseParser.SHOW:
                case SqlBaseParser.TABLES:
                case SqlBaseParser.COLUMNS:
                case SqlBaseParser.COLUMN:
                case SqlBaseParser.USE:
                case SqlBaseParser.PARTITIONS:
                case SqlBaseParser.FUNCTIONS:
                case SqlBaseParser.DROP:
                case SqlBaseParser.UNION:
                case SqlBaseParser.EXCEPT:
                case SqlBaseParser.SETMINUS:
                case SqlBaseParser.INTERSECT:
                case SqlBaseParser.TO:
                case SqlBaseParser.TABLESAMPLE:
                case SqlBaseParser.STRATIFY:
                case SqlBaseParser.ALTER:
                case SqlBaseParser.RENAME:
                case SqlBaseParser.ARRAY:
                case SqlBaseParser.MAP:
                case SqlBaseParser.STRUCT:
                case SqlBaseParser.COMMENT:
                case SqlBaseParser.SET:
                case SqlBaseParser.RESET:
                case SqlBaseParser.DATA:
                case SqlBaseParser.START:
                case SqlBaseParser.TRANSACTION:
                case SqlBaseParser.COMMIT:
                case SqlBaseParser.ROLLBACK:
                case SqlBaseParser.MACRO:
                case SqlBaseParser.IGNORE:
                case SqlBaseParser.BOTH:
                case SqlBaseParser.LEADING:
                case SqlBaseParser.TRAILING:
                case SqlBaseParser.IF:
                case SqlBaseParser.POSITION:
                case SqlBaseParser.EXTRACT:
                case SqlBaseParser.DIV:
                case SqlBaseParser.PERCENTLIT:
                case SqlBaseParser.BUCKET:
                case SqlBaseParser.OUT:
                case SqlBaseParser.OF:
                case SqlBaseParser.SORT:
                case SqlBaseParser.CLUSTER:
                case SqlBaseParser.DISTRIBUTE:
                case SqlBaseParser.OVERWRITE:
                case SqlBaseParser.TRANSFORM:
                case SqlBaseParser.REDUCE:
                case SqlBaseParser.SERDE:
                case SqlBaseParser.SERDEPROPERTIES:
                case SqlBaseParser.RECORDREADER:
                case SqlBaseParser.RECORDWRITER:
                case SqlBaseParser.DELIMITED:
                case SqlBaseParser.FIELDS:
                case SqlBaseParser.TERMINATED:
                case SqlBaseParser.COLLECTION:
                case SqlBaseParser.ITEMS:
                case SqlBaseParser.KEYS:
                case SqlBaseParser.ESCAPED:
                case SqlBaseParser.LINES:
                case SqlBaseParser.SEPARATED:
                case SqlBaseParser.SQLFUNCTION:
                case SqlBaseParser.EXTENDED:
                case SqlBaseParser.REFRESH:
                case SqlBaseParser.CLEAR:
                case SqlBaseParser.CACHE:
                case SqlBaseParser.UNCACHE:
                case SqlBaseParser.LAZY:
                case SqlBaseParser.FORMATTED:
                case SqlBaseParser.GLOBAL:
                case SqlBaseParser.TEMPORARY:
                case SqlBaseParser.OPTIONS:
                case SqlBaseParser.UNSET:
                case SqlBaseParser.TBLPROPERTIES:
                case SqlBaseParser.DBPROPERTIES:
                case SqlBaseParser.BUCKETS:
                case SqlBaseParser.SKEWED:
                case SqlBaseParser.STORED:
                case SqlBaseParser.DIRECTORIES:
                case SqlBaseParser.LOCATION:
                case SqlBaseParser.EXCHANGE:
                case SqlBaseParser.ARCHIVE:
                case SqlBaseParser.UNARCHIVE:
                case SqlBaseParser.FILEFORMAT:
                case SqlBaseParser.TOUCH:
                case SqlBaseParser.COMPACT:
                case SqlBaseParser.CONCATENATE:
                case SqlBaseParser.CHANGE:
                case SqlBaseParser.CASCADE:
                case SqlBaseParser.RESTRICT:
                case SqlBaseParser.CLUSTERED:
                case SqlBaseParser.SORTED:
                case SqlBaseParser.PURGE:
                case SqlBaseParser.INPUTFORMAT:
                case SqlBaseParser.OUTPUTFORMAT:
                case SqlBaseParser.DATABASE:
                case SqlBaseParser.DATABASES:
                case SqlBaseParser.DFS:
                case SqlBaseParser.TRUNCATE:
                case SqlBaseParser.ANALYZE:
                case SqlBaseParser.COMPUTE:
                case SqlBaseParser.LIST:
                case SqlBaseParser.STATISTICS:
                case SqlBaseParser.PARTITIONED:
                case SqlBaseParser.EXTERNAL:
                case SqlBaseParser.DEFINED:
                case SqlBaseParser.REVOKE:
                case SqlBaseParser.GRANT:
                case SqlBaseParser.LOCK:
                case SqlBaseParser.UNLOCK:
                case SqlBaseParser.MSCK:
                case SqlBaseParser.REPAIR:
                case SqlBaseParser.RECOVER:
                case SqlBaseParser.EXPORT:
                case SqlBaseParser.IMPORT:
                case SqlBaseParser.LOAD:
                case SqlBaseParser.ROLE:
                case SqlBaseParser.ROLES:
                case SqlBaseParser.COMPACTIONS:
                case SqlBaseParser.PRINCIPALS:
                case SqlBaseParser.TRANSACTIONS:
                case SqlBaseParser.INDEX:
                case SqlBaseParser.INDEXES:
                case SqlBaseParser.LOCKS:
                case SqlBaseParser.OPTION:
                case SqlBaseParser.ANTI:
                case SqlBaseParser.LOCAL:
                case SqlBaseParser.INPATH:
                case SqlBaseParser.IDENTIFIER:
                case SqlBaseParser.BACKQUOTED_IDENTIFIER:
                    this.state = 722;
                    this.qualifiedName();
                    break;
                case SqlBaseParser.STRING:
                    this.state = 723;
                    localctx.pattern = this.match(SqlBaseParser.STRING);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
            }

            break;

        case 39:
            localctx = new ShowCreateTableContext(this, localctx);
            this.enterOuterAlt(localctx, 39);
            this.state = 728;
            this.match(SqlBaseParser.SHOW);
            this.state = 729;
            this.match(SqlBaseParser.CREATE);
            this.state = 730;
            this.match(SqlBaseParser.TABLE);
            this.state = 731;
            this.tableIdentifier();
            break;

        case 40:
            localctx = new DescribeFunctionContext(this, localctx);
            this.enterOuterAlt(localctx, 40);
            this.state = 732;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.DESC || _la===SqlBaseParser.DESCRIBE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 733;
            this.match(SqlBaseParser.SQLFUNCTION);
            this.state = 735;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
            if(la_===1) {
                this.state = 734;
                this.match(SqlBaseParser.EXTENDED);

            }
            this.state = 737;
            this.describeFuncName();
            break;

        case 41:
            localctx = new DescribeDatabaseContext(this, localctx);
            this.enterOuterAlt(localctx, 41);
            this.state = 738;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.DESC || _la===SqlBaseParser.DESCRIBE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 739;
            this.match(SqlBaseParser.DATABASE);
            this.state = 741;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
            if(la_===1) {
                this.state = 740;
                this.match(SqlBaseParser.EXTENDED);

            }
            this.state = 743;
            this.identifier();
            break;

        case 42:
            localctx = new DescribeTableContext(this, localctx);
            this.enterOuterAlt(localctx, 42);
            this.state = 744;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.DESC || _la===SqlBaseParser.DESCRIBE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 746;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
            if(la_===1) {
                this.state = 745;
                this.match(SqlBaseParser.TABLE);

            }
            this.state = 749;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
            if(la_===1) {
                this.state = 748;
                localctx.option = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===SqlBaseParser.EXTENDED || _la===SqlBaseParser.FORMATTED)) {
                    localctx.option = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 751;
            this.tableIdentifier();
            this.state = 753;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
            if(la_===1) {
                this.state = 752;
                this.partitionSpec();

            }
            this.state = 756;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.NOT - 32)) | (1 << (SqlBaseParser.NO - 32)) | (1 << (SqlBaseParser.EXISTS - 32)) | (1 << (SqlBaseParser.BETWEEN - 32)) | (1 << (SqlBaseParser.LIKE - 32)) | (1 << (SqlBaseParser.RLIKE - 32)) | (1 << (SqlBaseParser.IS - 32)) | (1 << (SqlBaseParser.NULL - 32)) | (1 << (SqlBaseParser.TRUE - 32)) | (1 << (SqlBaseParser.FALSE - 32)) | (1 << (SqlBaseParser.NULLS - 32)) | (1 << (SqlBaseParser.ASC - 32)) | (1 << (SqlBaseParser.DESC - 32)) | (1 << (SqlBaseParser.FOR - 32)) | (1 << (SqlBaseParser.INTERVAL - 32)) | (1 << (SqlBaseParser.CASE - 32)) | (1 << (SqlBaseParser.WHEN - 32)) | (1 << (SqlBaseParser.THEN - 32)) | (1 << (SqlBaseParser.ELSE - 32)) | (1 << (SqlBaseParser.END - 32)) | (1 << (SqlBaseParser.JOIN - 32)) | (1 << (SqlBaseParser.CROSS - 32)) | (1 << (SqlBaseParser.OUTER - 32)) | (1 << (SqlBaseParser.INNER - 32)) | (1 << (SqlBaseParser.LEFT - 32)) | (1 << (SqlBaseParser.SEMI - 32)) | (1 << (SqlBaseParser.RIGHT - 32)) | (1 << (SqlBaseParser.FULL - 32)) | (1 << (SqlBaseParser.NATURAL - 32)) | (1 << (SqlBaseParser.ON - 32)) | (1 << (SqlBaseParser.PIVOT - 32)) | (1 << (SqlBaseParser.LATERAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlBaseParser.WINDOW - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.DIRECTORY - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlBaseParser.COLUMNS - 96)) | (1 << (SqlBaseParser.COLUMN - 96)) | (1 << (SqlBaseParser.USE - 96)) | (1 << (SqlBaseParser.PARTITIONS - 96)) | (1 << (SqlBaseParser.FUNCTIONS - 96)) | (1 << (SqlBaseParser.DROP - 96)) | (1 << (SqlBaseParser.UNION - 96)) | (1 << (SqlBaseParser.EXCEPT - 96)) | (1 << (SqlBaseParser.SETMINUS - 96)) | (1 << (SqlBaseParser.INTERSECT - 96)) | (1 << (SqlBaseParser.TO - 96)) | (1 << (SqlBaseParser.TABLESAMPLE - 96)) | (1 << (SqlBaseParser.STRATIFY - 96)) | (1 << (SqlBaseParser.ALTER - 96)) | (1 << (SqlBaseParser.RENAME - 96)) | (1 << (SqlBaseParser.ARRAY - 96)) | (1 << (SqlBaseParser.MAP - 96)) | (1 << (SqlBaseParser.STRUCT - 96)) | (1 << (SqlBaseParser.COMMENT - 96)) | (1 << (SqlBaseParser.SET - 96)) | (1 << (SqlBaseParser.RESET - 96)) | (1 << (SqlBaseParser.DATA - 96)) | (1 << (SqlBaseParser.START - 96)) | (1 << (SqlBaseParser.TRANSACTION - 96)) | (1 << (SqlBaseParser.COMMIT - 96)) | (1 << (SqlBaseParser.ROLLBACK - 96)) | (1 << (SqlBaseParser.MACRO - 96)) | (1 << (SqlBaseParser.IGNORE - 96)) | (1 << (SqlBaseParser.BOTH - 96)) | (1 << (SqlBaseParser.LEADING - 96)) | (1 << (SqlBaseParser.TRAILING - 96)) | (1 << (SqlBaseParser.IF - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.EXTRACT - 128)) | (1 << (SqlBaseParser.DIV - 128)) | (1 << (SqlBaseParser.PERCENTLIT - 128)) | (1 << (SqlBaseParser.BUCKET - 128)) | (1 << (SqlBaseParser.OUT - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.SORT - 128)) | (1 << (SqlBaseParser.CLUSTER - 128)) | (1 << (SqlBaseParser.DISTRIBUTE - 128)) | (1 << (SqlBaseParser.OVERWRITE - 128)) | (1 << (SqlBaseParser.TRANSFORM - 128)) | (1 << (SqlBaseParser.REDUCE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlBaseParser.SERDE - 160)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 160)) | (1 << (SqlBaseParser.RECORDREADER - 160)) | (1 << (SqlBaseParser.RECORDWRITER - 160)) | (1 << (SqlBaseParser.DELIMITED - 160)) | (1 << (SqlBaseParser.FIELDS - 160)) | (1 << (SqlBaseParser.TERMINATED - 160)) | (1 << (SqlBaseParser.COLLECTION - 160)) | (1 << (SqlBaseParser.ITEMS - 160)) | (1 << (SqlBaseParser.KEYS - 160)) | (1 << (SqlBaseParser.ESCAPED - 160)) | (1 << (SqlBaseParser.LINES - 160)) | (1 << (SqlBaseParser.SEPARATED - 160)) | (1 << (SqlBaseParser.SQLFUNCTION - 160)) | (1 << (SqlBaseParser.EXTENDED - 160)) | (1 << (SqlBaseParser.REFRESH - 160)) | (1 << (SqlBaseParser.CLEAR - 160)) | (1 << (SqlBaseParser.CACHE - 160)) | (1 << (SqlBaseParser.UNCACHE - 160)) | (1 << (SqlBaseParser.LAZY - 160)) | (1 << (SqlBaseParser.FORMATTED - 160)) | (1 << (SqlBaseParser.GLOBAL - 160)) | (1 << (SqlBaseParser.TEMPORARY - 160)) | (1 << (SqlBaseParser.OPTIONS - 160)) | (1 << (SqlBaseParser.UNSET - 160)) | (1 << (SqlBaseParser.TBLPROPERTIES - 160)) | (1 << (SqlBaseParser.DBPROPERTIES - 160)) | (1 << (SqlBaseParser.BUCKETS - 160)) | (1 << (SqlBaseParser.SKEWED - 160)) | (1 << (SqlBaseParser.STORED - 160)) | (1 << (SqlBaseParser.DIRECTORIES - 160)) | (1 << (SqlBaseParser.LOCATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (SqlBaseParser.EXCHANGE - 192)) | (1 << (SqlBaseParser.ARCHIVE - 192)) | (1 << (SqlBaseParser.UNARCHIVE - 192)) | (1 << (SqlBaseParser.FILEFORMAT - 192)) | (1 << (SqlBaseParser.TOUCH - 192)) | (1 << (SqlBaseParser.COMPACT - 192)) | (1 << (SqlBaseParser.CONCATENATE - 192)) | (1 << (SqlBaseParser.CHANGE - 192)) | (1 << (SqlBaseParser.CASCADE - 192)) | (1 << (SqlBaseParser.RESTRICT - 192)) | (1 << (SqlBaseParser.CLUSTERED - 192)) | (1 << (SqlBaseParser.SORTED - 192)) | (1 << (SqlBaseParser.PURGE - 192)) | (1 << (SqlBaseParser.INPUTFORMAT - 192)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 192)) | (1 << (SqlBaseParser.DATABASE - 192)) | (1 << (SqlBaseParser.DATABASES - 192)) | (1 << (SqlBaseParser.DFS - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.ANALYZE - 192)) | (1 << (SqlBaseParser.COMPUTE - 192)) | (1 << (SqlBaseParser.LIST - 192)) | (1 << (SqlBaseParser.STATISTICS - 192)) | (1 << (SqlBaseParser.PARTITIONED - 192)) | (1 << (SqlBaseParser.EXTERNAL - 192)) | (1 << (SqlBaseParser.DEFINED - 192)) | (1 << (SqlBaseParser.REVOKE - 192)) | (1 << (SqlBaseParser.GRANT - 192)) | (1 << (SqlBaseParser.LOCK - 192)) | (1 << (SqlBaseParser.UNLOCK - 192)) | (1 << (SqlBaseParser.MSCK - 192)) | (1 << (SqlBaseParser.REPAIR - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (SqlBaseParser.RECOVER - 224)) | (1 << (SqlBaseParser.EXPORT - 224)) | (1 << (SqlBaseParser.IMPORT - 224)) | (1 << (SqlBaseParser.LOAD - 224)) | (1 << (SqlBaseParser.ROLE - 224)) | (1 << (SqlBaseParser.ROLES - 224)) | (1 << (SqlBaseParser.COMPACTIONS - 224)) | (1 << (SqlBaseParser.PRINCIPALS - 224)) | (1 << (SqlBaseParser.TRANSACTIONS - 224)) | (1 << (SqlBaseParser.INDEX - 224)) | (1 << (SqlBaseParser.INDEXES - 224)) | (1 << (SqlBaseParser.LOCKS - 224)) | (1 << (SqlBaseParser.OPTION - 224)) | (1 << (SqlBaseParser.ANTI - 224)) | (1 << (SqlBaseParser.LOCAL - 224)) | (1 << (SqlBaseParser.INPATH - 224)) | (1 << (SqlBaseParser.IDENTIFIER - 224)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 224)))) !== 0)) {
                this.state = 755;
                this.describeColName();
            }

            break;

        case 43:
            localctx = new RefreshTableContext(this, localctx);
            this.enterOuterAlt(localctx, 43);
            this.state = 758;
            this.match(SqlBaseParser.REFRESH);
            this.state = 759;
            this.match(SqlBaseParser.TABLE);
            this.state = 760;
            this.tableIdentifier();
            break;

        case 44:
            localctx = new RefreshResourceContext(this, localctx);
            this.enterOuterAlt(localctx, 44);
            this.state = 761;
            this.match(SqlBaseParser.REFRESH);
            this.state = 769;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
            switch(la_) {
            case 1:
                this.state = 762;
                this.match(SqlBaseParser.STRING);
                break;

            case 2:
                this.state = 766;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,84,this._ctx)
                while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1+1) {
                        this.state = 763;
                        this.matchWildcard(); 
                    }
                    this.state = 768;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,84,this._ctx);
                }

                break;

            }
            break;

        case 45:
            localctx = new CacheTableContext(this, localctx);
            this.enterOuterAlt(localctx, 45);
            this.state = 771;
            this.match(SqlBaseParser.CACHE);
            this.state = 773;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.LAZY) {
                this.state = 772;
                this.match(SqlBaseParser.LAZY);
            }

            this.state = 775;
            this.match(SqlBaseParser.TABLE);
            this.state = 776;
            this.tableIdentifier();
            this.state = 781;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.AS))) !== 0) || ((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (SqlBaseParser.WITH - 77)) | (1 << (SqlBaseParser.VALUES - 77)) | (1 << (SqlBaseParser.TABLE - 77)) | (1 << (SqlBaseParser.INSERT - 77)))) !== 0) || _la===SqlBaseParser.MAP || _la===SqlBaseParser.REDUCE) {
                this.state = 778;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.AS) {
                    this.state = 777;
                    this.match(SqlBaseParser.AS);
                }

                this.state = 780;
                this.query();
            }

            break;

        case 46:
            localctx = new UncacheTableContext(this, localctx);
            this.enterOuterAlt(localctx, 46);
            this.state = 783;
            this.match(SqlBaseParser.UNCACHE);
            this.state = 784;
            this.match(SqlBaseParser.TABLE);
            this.state = 787;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
            if(la_===1) {
                this.state = 785;
                this.match(SqlBaseParser.IF);
                this.state = 786;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 789;
            this.tableIdentifier();
            break;

        case 47:
            localctx = new ClearCacheContext(this, localctx);
            this.enterOuterAlt(localctx, 47);
            this.state = 790;
            this.match(SqlBaseParser.CLEAR);
            this.state = 791;
            this.match(SqlBaseParser.CACHE);
            break;

        case 48:
            localctx = new LoadDataContext(this, localctx);
            this.enterOuterAlt(localctx, 48);
            this.state = 792;
            this.match(SqlBaseParser.LOAD);
            this.state = 793;
            this.match(SqlBaseParser.DATA);
            this.state = 795;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.LOCAL) {
                this.state = 794;
                this.match(SqlBaseParser.LOCAL);
            }

            this.state = 797;
            this.match(SqlBaseParser.INPATH);
            this.state = 798;
            localctx.path = this.match(SqlBaseParser.STRING);
            this.state = 800;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OVERWRITE) {
                this.state = 799;
                this.match(SqlBaseParser.OVERWRITE);
            }

            this.state = 802;
            this.match(SqlBaseParser.INTO);
            this.state = 803;
            this.match(SqlBaseParser.TABLE);
            this.state = 804;
            this.tableIdentifier();
            this.state = 806;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PARTITION) {
                this.state = 805;
                this.partitionSpec();
            }

            break;

        case 49:
            localctx = new TruncateTableContext(this, localctx);
            this.enterOuterAlt(localctx, 49);
            this.state = 808;
            this.match(SqlBaseParser.TRUNCATE);
            this.state = 809;
            this.match(SqlBaseParser.TABLE);
            this.state = 810;
            this.tableIdentifier();
            this.state = 812;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PARTITION) {
                this.state = 811;
                this.partitionSpec();
            }

            break;

        case 50:
            localctx = new RepairTableContext(this, localctx);
            this.enterOuterAlt(localctx, 50);
            this.state = 814;
            this.match(SqlBaseParser.MSCK);
            this.state = 815;
            this.match(SqlBaseParser.REPAIR);
            this.state = 816;
            this.match(SqlBaseParser.TABLE);
            this.state = 817;
            this.tableIdentifier();
            break;

        case 51:
            localctx = new ManageResourceContext(this, localctx);
            this.enterOuterAlt(localctx, 51);
            this.state = 818;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.ADD || _la===SqlBaseParser.LIST)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 819;
            this.identifier();
            this.state = 823;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,94,this._ctx)
            while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1+1) {
                    this.state = 820;
                    this.matchWildcard(); 
                }
                this.state = 825;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,94,this._ctx);
            }

            break;

        case 52:
            localctx = new FailNativeCommandContext(this, localctx);
            this.enterOuterAlt(localctx, 52);
            this.state = 826;
            this.match(SqlBaseParser.SET);
            this.state = 827;
            this.match(SqlBaseParser.ROLE);
            this.state = 831;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,95,this._ctx)
            while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1+1) {
                    this.state = 828;
                    this.matchWildcard(); 
                }
                this.state = 833;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,95,this._ctx);
            }

            break;

        case 53:
            localctx = new SetConfigurationContext(this, localctx);
            this.enterOuterAlt(localctx, 53);
            this.state = 834;
            this.match(SqlBaseParser.SET);
            this.state = 838;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,96,this._ctx)
            while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1+1) {
                    this.state = 835;
                    this.matchWildcard(); 
                }
                this.state = 840;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,96,this._ctx);
            }

            break;

        case 54:
            localctx = new ResetConfigurationContext(this, localctx);
            this.enterOuterAlt(localctx, 54);
            this.state = 841;
            this.match(SqlBaseParser.RESET);
            break;

        case 55:
            localctx = new FailNativeCommandContext(this, localctx);
            this.enterOuterAlt(localctx, 55);
            this.state = 842;
            this.unsupportedHiveNativeCommands();
            this.state = 846;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,97,this._ctx)
            while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1+1) {
                    this.state = 843;
                    this.matchWildcard(); 
                }
                this.state = 848;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,97,this._ctx);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnsupportedHiveNativeCommandsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_unsupportedHiveNativeCommands;
    this.kw1 = null; // Token
    this.kw2 = null; // Token
    this.kw3 = null; // Token
    this.kw4 = null; // Token
    this.kw5 = null; // Token
    this.kw6 = null; // Token
    return this;
}

UnsupportedHiveNativeCommandsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnsupportedHiveNativeCommandsContext.prototype.constructor = UnsupportedHiveNativeCommandsContext;

UnsupportedHiveNativeCommandsContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.ROLE = function() {
    return this.getToken(SqlBaseParser.ROLE, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.DROP = function() {
    return this.getToken(SqlBaseParser.DROP, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.GRANT = function() {
    return this.getToken(SqlBaseParser.GRANT, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.REVOKE = function() {
    return this.getToken(SqlBaseParser.REVOKE, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.PRINCIPALS = function() {
    return this.getToken(SqlBaseParser.PRINCIPALS, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.ROLES = function() {
    return this.getToken(SqlBaseParser.ROLES, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.CURRENT = function() {
    return this.getToken(SqlBaseParser.CURRENT, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.EXPORT = function() {
    return this.getToken(SqlBaseParser.EXPORT, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.IMPORT = function() {
    return this.getToken(SqlBaseParser.IMPORT, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.COMPACTIONS = function() {
    return this.getToken(SqlBaseParser.COMPACTIONS, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.TRANSACTIONS = function() {
    return this.getToken(SqlBaseParser.TRANSACTIONS, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.INDEXES = function() {
    return this.getToken(SqlBaseParser.INDEXES, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.LOCKS = function() {
    return this.getToken(SqlBaseParser.LOCKS, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.INDEX = function() {
    return this.getToken(SqlBaseParser.INDEX, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.LOCK = function() {
    return this.getToken(SqlBaseParser.LOCK, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.DATABASE = function() {
    return this.getToken(SqlBaseParser.DATABASE, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.UNLOCK = function() {
    return this.getToken(SqlBaseParser.UNLOCK, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.TEMPORARY = function() {
    return this.getToken(SqlBaseParser.TEMPORARY, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.MACRO = function() {
    return this.getToken(SqlBaseParser.MACRO, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

UnsupportedHiveNativeCommandsContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.CLUSTERED = function() {
    return this.getToken(SqlBaseParser.CLUSTERED, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.BY = function() {
    return this.getToken(SqlBaseParser.BY, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.SORTED = function() {
    return this.getToken(SqlBaseParser.SORTED, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.SKEWED = function() {
    return this.getToken(SqlBaseParser.SKEWED, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.STORED = function() {
    return this.getToken(SqlBaseParser.STORED, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.DIRECTORIES = function() {
    return this.getToken(SqlBaseParser.DIRECTORIES, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.SET = function() {
    return this.getToken(SqlBaseParser.SET, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.LOCATION = function() {
    return this.getToken(SqlBaseParser.LOCATION, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.EXCHANGE = function() {
    return this.getToken(SqlBaseParser.EXCHANGE, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.PARTITION = function() {
    return this.getToken(SqlBaseParser.PARTITION, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.ARCHIVE = function() {
    return this.getToken(SqlBaseParser.ARCHIVE, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.UNARCHIVE = function() {
    return this.getToken(SqlBaseParser.UNARCHIVE, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.TOUCH = function() {
    return this.getToken(SqlBaseParser.TOUCH, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.COMPACT = function() {
    return this.getToken(SqlBaseParser.COMPACT, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.partitionSpec = function() {
    return this.getTypedRuleContext(PartitionSpecContext,0);
};

UnsupportedHiveNativeCommandsContext.prototype.CONCATENATE = function() {
    return this.getToken(SqlBaseParser.CONCATENATE, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.FILEFORMAT = function() {
    return this.getToken(SqlBaseParser.FILEFORMAT, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.REPLACE = function() {
    return this.getToken(SqlBaseParser.REPLACE, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.COLUMNS = function() {
    return this.getToken(SqlBaseParser.COLUMNS, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.START = function() {
    return this.getToken(SqlBaseParser.START, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.TRANSACTION = function() {
    return this.getToken(SqlBaseParser.TRANSACTION, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.COMMIT = function() {
    return this.getToken(SqlBaseParser.COMMIT, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.ROLLBACK = function() {
    return this.getToken(SqlBaseParser.ROLLBACK, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.DFS = function() {
    return this.getToken(SqlBaseParser.DFS, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.DELETE = function() {
    return this.getToken(SqlBaseParser.DELETE, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

UnsupportedHiveNativeCommandsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitUnsupportedHiveNativeCommands(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.UnsupportedHiveNativeCommandsContext = UnsupportedHiveNativeCommandsContext;

SqlBaseParser.prototype.unsupportedHiveNativeCommands = function() {

    var localctx = new UnsupportedHiveNativeCommandsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, SqlBaseParser.RULE_unsupportedHiveNativeCommands);
    var _la = 0; // Token type
    try {
        this.state = 1021;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 851;
            localctx.kw1 = this.match(SqlBaseParser.CREATE);
            this.state = 852;
            localctx.kw2 = this.match(SqlBaseParser.ROLE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 853;
            localctx.kw1 = this.match(SqlBaseParser.DROP);
            this.state = 854;
            localctx.kw2 = this.match(SqlBaseParser.ROLE);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 855;
            localctx.kw1 = this.match(SqlBaseParser.GRANT);
            this.state = 857;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
            if(la_===1) {
                this.state = 856;
                localctx.kw2 = this.match(SqlBaseParser.ROLE);

            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 859;
            localctx.kw1 = this.match(SqlBaseParser.REVOKE);
            this.state = 861;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
            if(la_===1) {
                this.state = 860;
                localctx.kw2 = this.match(SqlBaseParser.ROLE);

            }
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 863;
            localctx.kw1 = this.match(SqlBaseParser.SHOW);
            this.state = 864;
            localctx.kw2 = this.match(SqlBaseParser.GRANT);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 865;
            localctx.kw1 = this.match(SqlBaseParser.SHOW);
            this.state = 866;
            localctx.kw2 = this.match(SqlBaseParser.ROLE);
            this.state = 868;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
            if(la_===1) {
                this.state = 867;
                localctx.kw3 = this.match(SqlBaseParser.GRANT);

            }
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 870;
            localctx.kw1 = this.match(SqlBaseParser.SHOW);
            this.state = 871;
            localctx.kw2 = this.match(SqlBaseParser.PRINCIPALS);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 872;
            localctx.kw1 = this.match(SqlBaseParser.SHOW);
            this.state = 873;
            localctx.kw2 = this.match(SqlBaseParser.ROLES);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 874;
            localctx.kw1 = this.match(SqlBaseParser.SHOW);
            this.state = 875;
            localctx.kw2 = this.match(SqlBaseParser.CURRENT);
            this.state = 876;
            localctx.kw3 = this.match(SqlBaseParser.ROLES);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 877;
            localctx.kw1 = this.match(SqlBaseParser.EXPORT);
            this.state = 878;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 879;
            localctx.kw1 = this.match(SqlBaseParser.IMPORT);
            this.state = 880;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 881;
            localctx.kw1 = this.match(SqlBaseParser.SHOW);
            this.state = 882;
            localctx.kw2 = this.match(SqlBaseParser.COMPACTIONS);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 883;
            localctx.kw1 = this.match(SqlBaseParser.SHOW);
            this.state = 884;
            localctx.kw2 = this.match(SqlBaseParser.CREATE);
            this.state = 885;
            localctx.kw3 = this.match(SqlBaseParser.TABLE);
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 886;
            localctx.kw1 = this.match(SqlBaseParser.SHOW);
            this.state = 887;
            localctx.kw2 = this.match(SqlBaseParser.TRANSACTIONS);
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 888;
            localctx.kw1 = this.match(SqlBaseParser.SHOW);
            this.state = 889;
            localctx.kw2 = this.match(SqlBaseParser.INDEXES);
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 890;
            localctx.kw1 = this.match(SqlBaseParser.SHOW);
            this.state = 891;
            localctx.kw2 = this.match(SqlBaseParser.LOCKS);
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 892;
            localctx.kw1 = this.match(SqlBaseParser.CREATE);
            this.state = 893;
            localctx.kw2 = this.match(SqlBaseParser.INDEX);
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 894;
            localctx.kw1 = this.match(SqlBaseParser.DROP);
            this.state = 895;
            localctx.kw2 = this.match(SqlBaseParser.INDEX);
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 896;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 897;
            localctx.kw2 = this.match(SqlBaseParser.INDEX);
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 898;
            localctx.kw1 = this.match(SqlBaseParser.LOCK);
            this.state = 899;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            break;

        case 21:
            this.enterOuterAlt(localctx, 21);
            this.state = 900;
            localctx.kw1 = this.match(SqlBaseParser.LOCK);
            this.state = 901;
            localctx.kw2 = this.match(SqlBaseParser.DATABASE);
            break;

        case 22:
            this.enterOuterAlt(localctx, 22);
            this.state = 902;
            localctx.kw1 = this.match(SqlBaseParser.UNLOCK);
            this.state = 903;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            break;

        case 23:
            this.enterOuterAlt(localctx, 23);
            this.state = 904;
            localctx.kw1 = this.match(SqlBaseParser.UNLOCK);
            this.state = 905;
            localctx.kw2 = this.match(SqlBaseParser.DATABASE);
            break;

        case 24:
            this.enterOuterAlt(localctx, 24);
            this.state = 906;
            localctx.kw1 = this.match(SqlBaseParser.CREATE);
            this.state = 907;
            localctx.kw2 = this.match(SqlBaseParser.TEMPORARY);
            this.state = 908;
            localctx.kw3 = this.match(SqlBaseParser.MACRO);
            break;

        case 25:
            this.enterOuterAlt(localctx, 25);
            this.state = 909;
            localctx.kw1 = this.match(SqlBaseParser.DROP);
            this.state = 910;
            localctx.kw2 = this.match(SqlBaseParser.TEMPORARY);
            this.state = 911;
            localctx.kw3 = this.match(SqlBaseParser.MACRO);
            break;

        case 26:
            this.enterOuterAlt(localctx, 26);
            this.state = 912;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 913;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 914;
            this.tableIdentifier();
            this.state = 915;
            localctx.kw3 = this.match(SqlBaseParser.NOT);
            this.state = 916;
            localctx.kw4 = this.match(SqlBaseParser.CLUSTERED);
            break;

        case 27:
            this.enterOuterAlt(localctx, 27);
            this.state = 918;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 919;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 920;
            this.tableIdentifier();
            this.state = 921;
            localctx.kw3 = this.match(SqlBaseParser.CLUSTERED);
            this.state = 922;
            localctx.kw4 = this.match(SqlBaseParser.BY);
            break;

        case 28:
            this.enterOuterAlt(localctx, 28);
            this.state = 924;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 925;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 926;
            this.tableIdentifier();
            this.state = 927;
            localctx.kw3 = this.match(SqlBaseParser.NOT);
            this.state = 928;
            localctx.kw4 = this.match(SqlBaseParser.SORTED);
            break;

        case 29:
            this.enterOuterAlt(localctx, 29);
            this.state = 930;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 931;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 932;
            this.tableIdentifier();
            this.state = 933;
            localctx.kw3 = this.match(SqlBaseParser.SKEWED);
            this.state = 934;
            localctx.kw4 = this.match(SqlBaseParser.BY);
            break;

        case 30:
            this.enterOuterAlt(localctx, 30);
            this.state = 936;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 937;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 938;
            this.tableIdentifier();
            this.state = 939;
            localctx.kw3 = this.match(SqlBaseParser.NOT);
            this.state = 940;
            localctx.kw4 = this.match(SqlBaseParser.SKEWED);
            break;

        case 31:
            this.enterOuterAlt(localctx, 31);
            this.state = 942;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 943;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 944;
            this.tableIdentifier();
            this.state = 945;
            localctx.kw3 = this.match(SqlBaseParser.NOT);
            this.state = 946;
            localctx.kw4 = this.match(SqlBaseParser.STORED);
            this.state = 947;
            localctx.kw5 = this.match(SqlBaseParser.AS);
            this.state = 948;
            localctx.kw6 = this.match(SqlBaseParser.DIRECTORIES);
            break;

        case 32:
            this.enterOuterAlt(localctx, 32);
            this.state = 950;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 951;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 952;
            this.tableIdentifier();
            this.state = 953;
            localctx.kw3 = this.match(SqlBaseParser.SET);
            this.state = 954;
            localctx.kw4 = this.match(SqlBaseParser.SKEWED);
            this.state = 955;
            localctx.kw5 = this.match(SqlBaseParser.LOCATION);
            break;

        case 33:
            this.enterOuterAlt(localctx, 33);
            this.state = 957;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 958;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 959;
            this.tableIdentifier();
            this.state = 960;
            localctx.kw3 = this.match(SqlBaseParser.EXCHANGE);
            this.state = 961;
            localctx.kw4 = this.match(SqlBaseParser.PARTITION);
            break;

        case 34:
            this.enterOuterAlt(localctx, 34);
            this.state = 963;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 964;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 965;
            this.tableIdentifier();
            this.state = 966;
            localctx.kw3 = this.match(SqlBaseParser.ARCHIVE);
            this.state = 967;
            localctx.kw4 = this.match(SqlBaseParser.PARTITION);
            break;

        case 35:
            this.enterOuterAlt(localctx, 35);
            this.state = 969;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 970;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 971;
            this.tableIdentifier();
            this.state = 972;
            localctx.kw3 = this.match(SqlBaseParser.UNARCHIVE);
            this.state = 973;
            localctx.kw4 = this.match(SqlBaseParser.PARTITION);
            break;

        case 36:
            this.enterOuterAlt(localctx, 36);
            this.state = 975;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 976;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 977;
            this.tableIdentifier();
            this.state = 978;
            localctx.kw3 = this.match(SqlBaseParser.TOUCH);
            break;

        case 37:
            this.enterOuterAlt(localctx, 37);
            this.state = 980;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 981;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 982;
            this.tableIdentifier();
            this.state = 984;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PARTITION) {
                this.state = 983;
                this.partitionSpec();
            }

            this.state = 986;
            localctx.kw3 = this.match(SqlBaseParser.COMPACT);
            break;

        case 38:
            this.enterOuterAlt(localctx, 38);
            this.state = 988;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 989;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 990;
            this.tableIdentifier();
            this.state = 992;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PARTITION) {
                this.state = 991;
                this.partitionSpec();
            }

            this.state = 994;
            localctx.kw3 = this.match(SqlBaseParser.CONCATENATE);
            break;

        case 39:
            this.enterOuterAlt(localctx, 39);
            this.state = 996;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 997;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 998;
            this.tableIdentifier();
            this.state = 1000;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PARTITION) {
                this.state = 999;
                this.partitionSpec();
            }

            this.state = 1002;
            localctx.kw3 = this.match(SqlBaseParser.SET);
            this.state = 1003;
            localctx.kw4 = this.match(SqlBaseParser.FILEFORMAT);
            break;

        case 40:
            this.enterOuterAlt(localctx, 40);
            this.state = 1005;
            localctx.kw1 = this.match(SqlBaseParser.ALTER);
            this.state = 1006;
            localctx.kw2 = this.match(SqlBaseParser.TABLE);
            this.state = 1007;
            this.tableIdentifier();
            this.state = 1009;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PARTITION) {
                this.state = 1008;
                this.partitionSpec();
            }

            this.state = 1011;
            localctx.kw3 = this.match(SqlBaseParser.REPLACE);
            this.state = 1012;
            localctx.kw4 = this.match(SqlBaseParser.COLUMNS);
            break;

        case 41:
            this.enterOuterAlt(localctx, 41);
            this.state = 1014;
            localctx.kw1 = this.match(SqlBaseParser.START);
            this.state = 1015;
            localctx.kw2 = this.match(SqlBaseParser.TRANSACTION);
            break;

        case 42:
            this.enterOuterAlt(localctx, 42);
            this.state = 1016;
            localctx.kw1 = this.match(SqlBaseParser.COMMIT);
            break;

        case 43:
            this.enterOuterAlt(localctx, 43);
            this.state = 1017;
            localctx.kw1 = this.match(SqlBaseParser.ROLLBACK);
            break;

        case 44:
            this.enterOuterAlt(localctx, 44);
            this.state = 1018;
            localctx.kw1 = this.match(SqlBaseParser.DFS);
            break;

        case 45:
            this.enterOuterAlt(localctx, 45);
            this.state = 1019;
            localctx.kw1 = this.match(SqlBaseParser.DELETE);
            this.state = 1020;
            localctx.kw2 = this.match(SqlBaseParser.FROM);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateTableHeaderContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_createTableHeader;
    return this;
}

CreateTableHeaderContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateTableHeaderContext.prototype.constructor = CreateTableHeaderContext;

CreateTableHeaderContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

CreateTableHeaderContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

CreateTableHeaderContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

CreateTableHeaderContext.prototype.TEMPORARY = function() {
    return this.getToken(SqlBaseParser.TEMPORARY, 0);
};

CreateTableHeaderContext.prototype.EXTERNAL = function() {
    return this.getToken(SqlBaseParser.EXTERNAL, 0);
};

CreateTableHeaderContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

CreateTableHeaderContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

CreateTableHeaderContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

CreateTableHeaderContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitCreateTableHeader(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.CreateTableHeaderContext = CreateTableHeaderContext;

SqlBaseParser.prototype.createTableHeader = function() {

    var localctx = new CreateTableHeaderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, SqlBaseParser.RULE_createTableHeader);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1023;
        this.match(SqlBaseParser.CREATE);
        this.state = 1025;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.TEMPORARY) {
            this.state = 1024;
            this.match(SqlBaseParser.TEMPORARY);
        }

        this.state = 1028;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.EXTERNAL) {
            this.state = 1027;
            this.match(SqlBaseParser.EXTERNAL);
        }

        this.state = 1030;
        this.match(SqlBaseParser.TABLE);
        this.state = 1034;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
        if(la_===1) {
            this.state = 1031;
            this.match(SqlBaseParser.IF);
            this.state = 1032;
            this.match(SqlBaseParser.NOT);
            this.state = 1033;
            this.match(SqlBaseParser.EXISTS);

        }
        this.state = 1036;
        this.tableIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BucketSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_bucketSpec;
    return this;
}

BucketSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BucketSpecContext.prototype.constructor = BucketSpecContext;

BucketSpecContext.prototype.CLUSTERED = function() {
    return this.getToken(SqlBaseParser.CLUSTERED, 0);
};

BucketSpecContext.prototype.BY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.BY);
    } else {
        return this.getToken(SqlBaseParser.BY, i);
    }
};


BucketSpecContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

BucketSpecContext.prototype.INTO = function() {
    return this.getToken(SqlBaseParser.INTO, 0);
};

BucketSpecContext.prototype.INTEGER_VALUE = function() {
    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
};

BucketSpecContext.prototype.BUCKETS = function() {
    return this.getToken(SqlBaseParser.BUCKETS, 0);
};

BucketSpecContext.prototype.SORTED = function() {
    return this.getToken(SqlBaseParser.SORTED, 0);
};

BucketSpecContext.prototype.orderedIdentifierList = function() {
    return this.getTypedRuleContext(OrderedIdentifierListContext,0);
};

BucketSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitBucketSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.BucketSpecContext = BucketSpecContext;

SqlBaseParser.prototype.bucketSpec = function() {

    var localctx = new BucketSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, SqlBaseParser.RULE_bucketSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1038;
        this.match(SqlBaseParser.CLUSTERED);
        this.state = 1039;
        this.match(SqlBaseParser.BY);
        this.state = 1040;
        this.identifierList();
        this.state = 1044;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.SORTED) {
            this.state = 1041;
            this.match(SqlBaseParser.SORTED);
            this.state = 1042;
            this.match(SqlBaseParser.BY);
            this.state = 1043;
            this.orderedIdentifierList();
        }

        this.state = 1046;
        this.match(SqlBaseParser.INTO);
        this.state = 1047;
        this.match(SqlBaseParser.INTEGER_VALUE);
        this.state = 1048;
        this.match(SqlBaseParser.BUCKETS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SkewSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_skewSpec;
    return this;
}

SkewSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SkewSpecContext.prototype.constructor = SkewSpecContext;

SkewSpecContext.prototype.SKEWED = function() {
    return this.getToken(SqlBaseParser.SKEWED, 0);
};

SkewSpecContext.prototype.BY = function() {
    return this.getToken(SqlBaseParser.BY, 0);
};

SkewSpecContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

SkewSpecContext.prototype.ON = function() {
    return this.getToken(SqlBaseParser.ON, 0);
};

SkewSpecContext.prototype.constantList = function() {
    return this.getTypedRuleContext(ConstantListContext,0);
};

SkewSpecContext.prototype.nestedConstantList = function() {
    return this.getTypedRuleContext(NestedConstantListContext,0);
};

SkewSpecContext.prototype.STORED = function() {
    return this.getToken(SqlBaseParser.STORED, 0);
};

SkewSpecContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

SkewSpecContext.prototype.DIRECTORIES = function() {
    return this.getToken(SqlBaseParser.DIRECTORIES, 0);
};

SkewSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitSkewSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.SkewSpecContext = SkewSpecContext;

SqlBaseParser.prototype.skewSpec = function() {

    var localctx = new SkewSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, SqlBaseParser.RULE_skewSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1050;
        this.match(SqlBaseParser.SKEWED);
        this.state = 1051;
        this.match(SqlBaseParser.BY);
        this.state = 1052;
        this.identifierList();
        this.state = 1053;
        this.match(SqlBaseParser.ON);
        this.state = 1056;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1054;
            this.constantList();
            break;

        case 2:
            this.state = 1055;
            this.nestedConstantList();
            break;

        }
        this.state = 1061;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
        if(la_===1) {
            this.state = 1058;
            this.match(SqlBaseParser.STORED);
            this.state = 1059;
            this.match(SqlBaseParser.AS);
            this.state = 1060;
            this.match(SqlBaseParser.DIRECTORIES);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocationSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_locationSpec;
    return this;
}

LocationSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocationSpecContext.prototype.constructor = LocationSpecContext;

LocationSpecContext.prototype.LOCATION = function() {
    return this.getToken(SqlBaseParser.LOCATION, 0);
};

LocationSpecContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

LocationSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitLocationSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.LocationSpecContext = LocationSpecContext;

SqlBaseParser.prototype.locationSpec = function() {

    var localctx = new LocationSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, SqlBaseParser.RULE_locationSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1063;
        this.match(SqlBaseParser.LOCATION);
        this.state = 1064;
        this.match(SqlBaseParser.STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_query;
    return this;
}

QueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryContext.prototype.constructor = QueryContext;

QueryContext.prototype.queryNoWith = function() {
    return this.getTypedRuleContext(QueryNoWithContext,0);
};

QueryContext.prototype.ctes = function() {
    return this.getTypedRuleContext(CtesContext,0);
};

QueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitQuery(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.QueryContext = QueryContext;

SqlBaseParser.prototype.query = function() {

    var localctx = new QueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, SqlBaseParser.RULE_query);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1067;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.WITH) {
            this.state = 1066;
            this.ctes();
        }

        this.state = 1069;
        this.queryNoWith();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InsertIntoContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_insertInto;
    return this;
}

InsertIntoContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertIntoContext.prototype.constructor = InsertIntoContext;


 
InsertIntoContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function InsertOverwriteHiveDirContext(parser, ctx) {
	InsertIntoContext.call(this, parser);
    this.path = null; // Token;
    InsertIntoContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InsertOverwriteHiveDirContext.prototype = Object.create(InsertIntoContext.prototype);
InsertOverwriteHiveDirContext.prototype.constructor = InsertOverwriteHiveDirContext;

SqlBaseParser.InsertOverwriteHiveDirContext = InsertOverwriteHiveDirContext;

InsertOverwriteHiveDirContext.prototype.INSERT = function() {
    return this.getToken(SqlBaseParser.INSERT, 0);
};

InsertOverwriteHiveDirContext.prototype.OVERWRITE = function() {
    return this.getToken(SqlBaseParser.OVERWRITE, 0);
};

InsertOverwriteHiveDirContext.prototype.DIRECTORY = function() {
    return this.getToken(SqlBaseParser.DIRECTORY, 0);
};

InsertOverwriteHiveDirContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

InsertOverwriteHiveDirContext.prototype.LOCAL = function() {
    return this.getToken(SqlBaseParser.LOCAL, 0);
};

InsertOverwriteHiveDirContext.prototype.rowFormat = function() {
    return this.getTypedRuleContext(RowFormatContext,0);
};

InsertOverwriteHiveDirContext.prototype.createFileFormat = function() {
    return this.getTypedRuleContext(CreateFileFormatContext,0);
};
InsertOverwriteHiveDirContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitInsertOverwriteHiveDir(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function InsertOverwriteDirContext(parser, ctx) {
	InsertIntoContext.call(this, parser);
    this.path = null; // Token;
    this.options = null; // TablePropertyListContext;
    InsertIntoContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InsertOverwriteDirContext.prototype = Object.create(InsertIntoContext.prototype);
InsertOverwriteDirContext.prototype.constructor = InsertOverwriteDirContext;

SqlBaseParser.InsertOverwriteDirContext = InsertOverwriteDirContext;

InsertOverwriteDirContext.prototype.INSERT = function() {
    return this.getToken(SqlBaseParser.INSERT, 0);
};

InsertOverwriteDirContext.prototype.OVERWRITE = function() {
    return this.getToken(SqlBaseParser.OVERWRITE, 0);
};

InsertOverwriteDirContext.prototype.DIRECTORY = function() {
    return this.getToken(SqlBaseParser.DIRECTORY, 0);
};

InsertOverwriteDirContext.prototype.tableProvider = function() {
    return this.getTypedRuleContext(TableProviderContext,0);
};

InsertOverwriteDirContext.prototype.LOCAL = function() {
    return this.getToken(SqlBaseParser.LOCAL, 0);
};

InsertOverwriteDirContext.prototype.OPTIONS = function() {
    return this.getToken(SqlBaseParser.OPTIONS, 0);
};

InsertOverwriteDirContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

InsertOverwriteDirContext.prototype.tablePropertyList = function() {
    return this.getTypedRuleContext(TablePropertyListContext,0);
};
InsertOverwriteDirContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitInsertOverwriteDir(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function InsertOverwriteTableContext(parser, ctx) {
	InsertIntoContext.call(this, parser);
    InsertIntoContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InsertOverwriteTableContext.prototype = Object.create(InsertIntoContext.prototype);
InsertOverwriteTableContext.prototype.constructor = InsertOverwriteTableContext;

SqlBaseParser.InsertOverwriteTableContext = InsertOverwriteTableContext;

InsertOverwriteTableContext.prototype.INSERT = function() {
    return this.getToken(SqlBaseParser.INSERT, 0);
};

InsertOverwriteTableContext.prototype.OVERWRITE = function() {
    return this.getToken(SqlBaseParser.OVERWRITE, 0);
};

InsertOverwriteTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

InsertOverwriteTableContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

InsertOverwriteTableContext.prototype.partitionSpec = function() {
    return this.getTypedRuleContext(PartitionSpecContext,0);
};

InsertOverwriteTableContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

InsertOverwriteTableContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

InsertOverwriteTableContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};
InsertOverwriteTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitInsertOverwriteTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function InsertIntoTableContext(parser, ctx) {
	InsertIntoContext.call(this, parser);
    InsertIntoContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InsertIntoTableContext.prototype = Object.create(InsertIntoContext.prototype);
InsertIntoTableContext.prototype.constructor = InsertIntoTableContext;

SqlBaseParser.InsertIntoTableContext = InsertIntoTableContext;

InsertIntoTableContext.prototype.INSERT = function() {
    return this.getToken(SqlBaseParser.INSERT, 0);
};

InsertIntoTableContext.prototype.INTO = function() {
    return this.getToken(SqlBaseParser.INTO, 0);
};

InsertIntoTableContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

InsertIntoTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

InsertIntoTableContext.prototype.partitionSpec = function() {
    return this.getTypedRuleContext(PartitionSpecContext,0);
};
InsertIntoTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitInsertIntoTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlBaseParser.InsertIntoContext = InsertIntoContext;

SqlBaseParser.prototype.insertInto = function() {

    var localctx = new InsertIntoContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, SqlBaseParser.RULE_insertInto);
    var _la = 0; // Token type
    try {
        this.state = 1119;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
        switch(la_) {
        case 1:
            localctx = new InsertOverwriteTableContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1071;
            this.match(SqlBaseParser.INSERT);
            this.state = 1072;
            this.match(SqlBaseParser.OVERWRITE);
            this.state = 1073;
            this.match(SqlBaseParser.TABLE);
            this.state = 1074;
            this.tableIdentifier();
            this.state = 1081;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PARTITION) {
                this.state = 1075;
                this.partitionSpec();
                this.state = 1079;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.IF) {
                    this.state = 1076;
                    this.match(SqlBaseParser.IF);
                    this.state = 1077;
                    this.match(SqlBaseParser.NOT);
                    this.state = 1078;
                    this.match(SqlBaseParser.EXISTS);
                }

            }

            break;

        case 2:
            localctx = new InsertIntoTableContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1083;
            this.match(SqlBaseParser.INSERT);
            this.state = 1084;
            this.match(SqlBaseParser.INTO);
            this.state = 1086;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
            if(la_===1) {
                this.state = 1085;
                this.match(SqlBaseParser.TABLE);

            }
            this.state = 1088;
            this.tableIdentifier();
            this.state = 1090;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PARTITION) {
                this.state = 1089;
                this.partitionSpec();
            }

            break;

        case 3:
            localctx = new InsertOverwriteHiveDirContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1092;
            this.match(SqlBaseParser.INSERT);
            this.state = 1093;
            this.match(SqlBaseParser.OVERWRITE);
            this.state = 1095;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.LOCAL) {
                this.state = 1094;
                this.match(SqlBaseParser.LOCAL);
            }

            this.state = 1097;
            this.match(SqlBaseParser.DIRECTORY);
            this.state = 1098;
            localctx.path = this.match(SqlBaseParser.STRING);
            this.state = 1100;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.ROW) {
                this.state = 1099;
                this.rowFormat();
            }

            this.state = 1103;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.STORED) {
                this.state = 1102;
                this.createFileFormat();
            }

            break;

        case 4:
            localctx = new InsertOverwriteDirContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1105;
            this.match(SqlBaseParser.INSERT);
            this.state = 1106;
            this.match(SqlBaseParser.OVERWRITE);
            this.state = 1108;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.LOCAL) {
                this.state = 1107;
                this.match(SqlBaseParser.LOCAL);
            }

            this.state = 1110;
            this.match(SqlBaseParser.DIRECTORY);
            this.state = 1112;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.STRING) {
                this.state = 1111;
                localctx.path = this.match(SqlBaseParser.STRING);
            }

            this.state = 1114;
            this.tableProvider();
            this.state = 1117;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OPTIONS) {
                this.state = 1115;
                this.match(SqlBaseParser.OPTIONS);
                this.state = 1116;
                localctx.options = this.tablePropertyList();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PartitionSpecLocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_partitionSpecLocation;
    return this;
}

PartitionSpecLocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionSpecLocationContext.prototype.constructor = PartitionSpecLocationContext;

PartitionSpecLocationContext.prototype.partitionSpec = function() {
    return this.getTypedRuleContext(PartitionSpecContext,0);
};

PartitionSpecLocationContext.prototype.locationSpec = function() {
    return this.getTypedRuleContext(LocationSpecContext,0);
};

PartitionSpecLocationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitPartitionSpecLocation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.PartitionSpecLocationContext = PartitionSpecLocationContext;

SqlBaseParser.prototype.partitionSpecLocation = function() {

    var localctx = new PartitionSpecLocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, SqlBaseParser.RULE_partitionSpecLocation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1121;
        this.partitionSpec();
        this.state = 1123;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.LOCATION) {
            this.state = 1122;
            this.locationSpec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PartitionSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_partitionSpec;
    return this;
}

PartitionSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionSpecContext.prototype.constructor = PartitionSpecContext;

PartitionSpecContext.prototype.PARTITION = function() {
    return this.getToken(SqlBaseParser.PARTITION, 0);
};

PartitionSpecContext.prototype.partitionVal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionValContext);
    } else {
        return this.getTypedRuleContext(PartitionValContext,i);
    }
};

PartitionSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitPartitionSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.PartitionSpecContext = PartitionSpecContext;

SqlBaseParser.prototype.partitionSpec = function() {

    var localctx = new PartitionSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, SqlBaseParser.RULE_partitionSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1125;
        this.match(SqlBaseParser.PARTITION);
        this.state = 1126;
        this.match(SqlBaseParser.T__1);
        this.state = 1127;
        this.partitionVal();
        this.state = 1132;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__3) {
            this.state = 1128;
            this.match(SqlBaseParser.T__3);
            this.state = 1129;
            this.partitionVal();
            this.state = 1134;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1135;
        this.match(SqlBaseParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PartitionValContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_partitionVal;
    return this;
}

PartitionValContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionValContext.prototype.constructor = PartitionValContext;

PartitionValContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PartitionValContext.prototype.EQ = function() {
    return this.getToken(SqlBaseParser.EQ, 0);
};

PartitionValContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

PartitionValContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitPartitionVal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.PartitionValContext = PartitionValContext;

SqlBaseParser.prototype.partitionVal = function() {

    var localctx = new PartitionValContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, SqlBaseParser.RULE_partitionVal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1137;
        this.identifier();
        this.state = 1140;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.EQ) {
            this.state = 1138;
            this.match(SqlBaseParser.EQ);
            this.state = 1139;
            this.constant();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DescribeFuncNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_describeFuncName;
    return this;
}

DescribeFuncNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DescribeFuncNameContext.prototype.constructor = DescribeFuncNameContext;

DescribeFuncNameContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

DescribeFuncNameContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

DescribeFuncNameContext.prototype.comparisonOperator = function() {
    return this.getTypedRuleContext(ComparisonOperatorContext,0);
};

DescribeFuncNameContext.prototype.arithmeticOperator = function() {
    return this.getTypedRuleContext(ArithmeticOperatorContext,0);
};

DescribeFuncNameContext.prototype.predicateOperator = function() {
    return this.getTypedRuleContext(PredicateOperatorContext,0);
};

DescribeFuncNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitDescribeFuncName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.DescribeFuncNameContext = DescribeFuncNameContext;

SqlBaseParser.prototype.describeFuncName = function() {

    var localctx = new DescribeFuncNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, SqlBaseParser.RULE_describeFuncName);
    try {
        this.state = 1147;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1142;
            this.qualifiedName();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1143;
            this.match(SqlBaseParser.STRING);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1144;
            this.comparisonOperator();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1145;
            this.arithmeticOperator();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1146;
            this.predicateOperator();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DescribeColNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_describeColName;
    this._identifier = null; // IdentifierContext
    this.nameParts = []; // of IdentifierContexts
    return this;
}

DescribeColNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DescribeColNameContext.prototype.constructor = DescribeColNameContext;

DescribeColNameContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

DescribeColNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitDescribeColName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.DescribeColNameContext = DescribeColNameContext;

SqlBaseParser.prototype.describeColName = function() {

    var localctx = new DescribeColNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, SqlBaseParser.RULE_describeColName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1149;
        localctx._identifier = this.identifier();
        localctx.nameParts.push(localctx._identifier);
        this.state = 1154;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__4) {
            this.state = 1150;
            this.match(SqlBaseParser.T__4);
            this.state = 1151;
            localctx._identifier = this.identifier();
            localctx.nameParts.push(localctx._identifier);
            this.state = 1156;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CtesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_ctes;
    return this;
}

CtesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CtesContext.prototype.constructor = CtesContext;

CtesContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

CtesContext.prototype.namedQuery = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedQueryContext);
    } else {
        return this.getTypedRuleContext(NamedQueryContext,i);
    }
};

CtesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitCtes(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.CtesContext = CtesContext;

SqlBaseParser.prototype.ctes = function() {

    var localctx = new CtesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, SqlBaseParser.RULE_ctes);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1157;
        this.match(SqlBaseParser.WITH);
        this.state = 1158;
        this.namedQuery();
        this.state = 1163;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__3) {
            this.state = 1159;
            this.match(SqlBaseParser.T__3);
            this.state = 1160;
            this.namedQuery();
            this.state = 1165;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamedQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_namedQuery;
    this.name = null; // IdentifierContext
    return this;
}

NamedQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedQueryContext.prototype.constructor = NamedQueryContext;

NamedQueryContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

NamedQueryContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

NamedQueryContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

NamedQueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitNamedQuery(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.NamedQueryContext = NamedQueryContext;

SqlBaseParser.prototype.namedQuery = function() {

    var localctx = new NamedQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, SqlBaseParser.RULE_namedQuery);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1166;
        localctx.name = this.identifier();
        this.state = 1168;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.AS) {
            this.state = 1167;
            this.match(SqlBaseParser.AS);
        }

        this.state = 1170;
        this.match(SqlBaseParser.T__1);
        this.state = 1171;
        this.query();
        this.state = 1172;
        this.match(SqlBaseParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TableProviderContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_tableProvider;
    return this;
}

TableProviderContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableProviderContext.prototype.constructor = TableProviderContext;

TableProviderContext.prototype.USING = function() {
    return this.getToken(SqlBaseParser.USING, 0);
};

TableProviderContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

TableProviderContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitTableProvider(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.TableProviderContext = TableProviderContext;

SqlBaseParser.prototype.tableProvider = function() {

    var localctx = new TableProviderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, SqlBaseParser.RULE_tableProvider);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1174;
        this.match(SqlBaseParser.USING);
        this.state = 1175;
        this.qualifiedName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TablePropertyListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_tablePropertyList;
    return this;
}

TablePropertyListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePropertyListContext.prototype.constructor = TablePropertyListContext;

TablePropertyListContext.prototype.tableProperty = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TablePropertyContext);
    } else {
        return this.getTypedRuleContext(TablePropertyContext,i);
    }
};

TablePropertyListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitTablePropertyList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.TablePropertyListContext = TablePropertyListContext;

SqlBaseParser.prototype.tablePropertyList = function() {

    var localctx = new TablePropertyListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, SqlBaseParser.RULE_tablePropertyList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1177;
        this.match(SqlBaseParser.T__1);
        this.state = 1178;
        this.tableProperty();
        this.state = 1183;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__3) {
            this.state = 1179;
            this.match(SqlBaseParser.T__3);
            this.state = 1180;
            this.tableProperty();
            this.state = 1185;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1186;
        this.match(SqlBaseParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TablePropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_tableProperty;
    this.key = null; // TablePropertyKeyContext
    this.value = null; // TablePropertyValueContext
    return this;
}

TablePropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePropertyContext.prototype.constructor = TablePropertyContext;

TablePropertyContext.prototype.tablePropertyKey = function() {
    return this.getTypedRuleContext(TablePropertyKeyContext,0);
};

TablePropertyContext.prototype.tablePropertyValue = function() {
    return this.getTypedRuleContext(TablePropertyValueContext,0);
};

TablePropertyContext.prototype.EQ = function() {
    return this.getToken(SqlBaseParser.EQ, 0);
};

TablePropertyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitTableProperty(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.TablePropertyContext = TablePropertyContext;

SqlBaseParser.prototype.tableProperty = function() {

    var localctx = new TablePropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, SqlBaseParser.RULE_tableProperty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1188;
        localctx.key = this.tablePropertyKey();
        this.state = 1193;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.TRUE || _la===SqlBaseParser.FALSE || _la===SqlBaseParser.EQ || ((((_la - 240)) & ~0x1f) == 0 && ((1 << (_la - 240)) & ((1 << (SqlBaseParser.STRING - 240)) | (1 << (SqlBaseParser.INTEGER_VALUE - 240)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 240)))) !== 0)) {
            this.state = 1190;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.EQ) {
                this.state = 1189;
                this.match(SqlBaseParser.EQ);
            }

            this.state = 1192;
            localctx.value = this.tablePropertyValue();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TablePropertyKeyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_tablePropertyKey;
    return this;
}

TablePropertyKeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePropertyKeyContext.prototype.constructor = TablePropertyKeyContext;

TablePropertyKeyContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

TablePropertyKeyContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

TablePropertyKeyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitTablePropertyKey(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.TablePropertyKeyContext = TablePropertyKeyContext;

SqlBaseParser.prototype.tablePropertyKey = function() {

    var localctx = new TablePropertyKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, SqlBaseParser.RULE_tablePropertyKey);
    var _la = 0; // Token type
    try {
        this.state = 1204;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.SELECT:
        case SqlBaseParser.FROM:
        case SqlBaseParser.ADD:
        case SqlBaseParser.AS:
        case SqlBaseParser.ALL:
        case SqlBaseParser.ANY:
        case SqlBaseParser.DISTINCT:
        case SqlBaseParser.WHERE:
        case SqlBaseParser.GROUP:
        case SqlBaseParser.BY:
        case SqlBaseParser.GROUPING:
        case SqlBaseParser.SETS:
        case SqlBaseParser.CUBE:
        case SqlBaseParser.ROLLUP:
        case SqlBaseParser.ORDER:
        case SqlBaseParser.HAVING:
        case SqlBaseParser.LIMIT:
        case SqlBaseParser.AT:
        case SqlBaseParser.OR:
        case SqlBaseParser.AND:
        case SqlBaseParser.IN:
        case SqlBaseParser.NOT:
        case SqlBaseParser.NO:
        case SqlBaseParser.EXISTS:
        case SqlBaseParser.BETWEEN:
        case SqlBaseParser.LIKE:
        case SqlBaseParser.RLIKE:
        case SqlBaseParser.IS:
        case SqlBaseParser.NULL:
        case SqlBaseParser.TRUE:
        case SqlBaseParser.FALSE:
        case SqlBaseParser.NULLS:
        case SqlBaseParser.ASC:
        case SqlBaseParser.DESC:
        case SqlBaseParser.FOR:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.CASE:
        case SqlBaseParser.WHEN:
        case SqlBaseParser.THEN:
        case SqlBaseParser.ELSE:
        case SqlBaseParser.END:
        case SqlBaseParser.JOIN:
        case SqlBaseParser.CROSS:
        case SqlBaseParser.OUTER:
        case SqlBaseParser.INNER:
        case SqlBaseParser.LEFT:
        case SqlBaseParser.SEMI:
        case SqlBaseParser.RIGHT:
        case SqlBaseParser.FULL:
        case SqlBaseParser.NATURAL:
        case SqlBaseParser.ON:
        case SqlBaseParser.PIVOT:
        case SqlBaseParser.LATERAL:
        case SqlBaseParser.WINDOW:
        case SqlBaseParser.OVER:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.RANGE:
        case SqlBaseParser.ROWS:
        case SqlBaseParser.UNBOUNDED:
        case SqlBaseParser.PRECEDING:
        case SqlBaseParser.FOLLOWING:
        case SqlBaseParser.CURRENT:
        case SqlBaseParser.FIRST:
        case SqlBaseParser.AFTER:
        case SqlBaseParser.LAST:
        case SqlBaseParser.ROW:
        case SqlBaseParser.WITH:
        case SqlBaseParser.VALUES:
        case SqlBaseParser.CREATE:
        case SqlBaseParser.TABLE:
        case SqlBaseParser.DIRECTORY:
        case SqlBaseParser.VIEW:
        case SqlBaseParser.REPLACE:
        case SqlBaseParser.INSERT:
        case SqlBaseParser.DELETE:
        case SqlBaseParser.INTO:
        case SqlBaseParser.DESCRIBE:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.FORMAT:
        case SqlBaseParser.LOGICAL:
        case SqlBaseParser.CODEGEN:
        case SqlBaseParser.COST:
        case SqlBaseParser.CAST:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.USE:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.DROP:
        case SqlBaseParser.UNION:
        case SqlBaseParser.EXCEPT:
        case SqlBaseParser.SETMINUS:
        case SqlBaseParser.INTERSECT:
        case SqlBaseParser.TO:
        case SqlBaseParser.TABLESAMPLE:
        case SqlBaseParser.STRATIFY:
        case SqlBaseParser.ALTER:
        case SqlBaseParser.RENAME:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.MAP:
        case SqlBaseParser.STRUCT:
        case SqlBaseParser.COMMENT:
        case SqlBaseParser.SET:
        case SqlBaseParser.RESET:
        case SqlBaseParser.DATA:
        case SqlBaseParser.START:
        case SqlBaseParser.TRANSACTION:
        case SqlBaseParser.COMMIT:
        case SqlBaseParser.ROLLBACK:
        case SqlBaseParser.MACRO:
        case SqlBaseParser.IGNORE:
        case SqlBaseParser.BOTH:
        case SqlBaseParser.LEADING:
        case SqlBaseParser.TRAILING:
        case SqlBaseParser.IF:
        case SqlBaseParser.POSITION:
        case SqlBaseParser.EXTRACT:
        case SqlBaseParser.DIV:
        case SqlBaseParser.PERCENTLIT:
        case SqlBaseParser.BUCKET:
        case SqlBaseParser.OUT:
        case SqlBaseParser.OF:
        case SqlBaseParser.SORT:
        case SqlBaseParser.CLUSTER:
        case SqlBaseParser.DISTRIBUTE:
        case SqlBaseParser.OVERWRITE:
        case SqlBaseParser.TRANSFORM:
        case SqlBaseParser.REDUCE:
        case SqlBaseParser.SERDE:
        case SqlBaseParser.SERDEPROPERTIES:
        case SqlBaseParser.RECORDREADER:
        case SqlBaseParser.RECORDWRITER:
        case SqlBaseParser.DELIMITED:
        case SqlBaseParser.FIELDS:
        case SqlBaseParser.TERMINATED:
        case SqlBaseParser.COLLECTION:
        case SqlBaseParser.ITEMS:
        case SqlBaseParser.KEYS:
        case SqlBaseParser.ESCAPED:
        case SqlBaseParser.LINES:
        case SqlBaseParser.SEPARATED:
        case SqlBaseParser.SQLFUNCTION:
        case SqlBaseParser.EXTENDED:
        case SqlBaseParser.REFRESH:
        case SqlBaseParser.CLEAR:
        case SqlBaseParser.CACHE:
        case SqlBaseParser.UNCACHE:
        case SqlBaseParser.LAZY:
        case SqlBaseParser.FORMATTED:
        case SqlBaseParser.GLOBAL:
        case SqlBaseParser.TEMPORARY:
        case SqlBaseParser.OPTIONS:
        case SqlBaseParser.UNSET:
        case SqlBaseParser.TBLPROPERTIES:
        case SqlBaseParser.DBPROPERTIES:
        case SqlBaseParser.BUCKETS:
        case SqlBaseParser.SKEWED:
        case SqlBaseParser.STORED:
        case SqlBaseParser.DIRECTORIES:
        case SqlBaseParser.LOCATION:
        case SqlBaseParser.EXCHANGE:
        case SqlBaseParser.ARCHIVE:
        case SqlBaseParser.UNARCHIVE:
        case SqlBaseParser.FILEFORMAT:
        case SqlBaseParser.TOUCH:
        case SqlBaseParser.COMPACT:
        case SqlBaseParser.CONCATENATE:
        case SqlBaseParser.CHANGE:
        case SqlBaseParser.CASCADE:
        case SqlBaseParser.RESTRICT:
        case SqlBaseParser.CLUSTERED:
        case SqlBaseParser.SORTED:
        case SqlBaseParser.PURGE:
        case SqlBaseParser.INPUTFORMAT:
        case SqlBaseParser.OUTPUTFORMAT:
        case SqlBaseParser.DATABASE:
        case SqlBaseParser.DATABASES:
        case SqlBaseParser.DFS:
        case SqlBaseParser.TRUNCATE:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.COMPUTE:
        case SqlBaseParser.LIST:
        case SqlBaseParser.STATISTICS:
        case SqlBaseParser.PARTITIONED:
        case SqlBaseParser.EXTERNAL:
        case SqlBaseParser.DEFINED:
        case SqlBaseParser.REVOKE:
        case SqlBaseParser.GRANT:
        case SqlBaseParser.LOCK:
        case SqlBaseParser.UNLOCK:
        case SqlBaseParser.MSCK:
        case SqlBaseParser.REPAIR:
        case SqlBaseParser.RECOVER:
        case SqlBaseParser.EXPORT:
        case SqlBaseParser.IMPORT:
        case SqlBaseParser.LOAD:
        case SqlBaseParser.ROLE:
        case SqlBaseParser.ROLES:
        case SqlBaseParser.COMPACTIONS:
        case SqlBaseParser.PRINCIPALS:
        case SqlBaseParser.TRANSACTIONS:
        case SqlBaseParser.INDEX:
        case SqlBaseParser.INDEXES:
        case SqlBaseParser.LOCKS:
        case SqlBaseParser.OPTION:
        case SqlBaseParser.ANTI:
        case SqlBaseParser.LOCAL:
        case SqlBaseParser.INPATH:
        case SqlBaseParser.IDENTIFIER:
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1195;
            this.identifier();
            this.state = 1200;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__4) {
                this.state = 1196;
                this.match(SqlBaseParser.T__4);
                this.state = 1197;
                this.identifier();
                this.state = 1202;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case SqlBaseParser.STRING:
            this.enterOuterAlt(localctx, 2);
            this.state = 1203;
            this.match(SqlBaseParser.STRING);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TablePropertyValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_tablePropertyValue;
    return this;
}

TablePropertyValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePropertyValueContext.prototype.constructor = TablePropertyValueContext;

TablePropertyValueContext.prototype.INTEGER_VALUE = function() {
    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
};

TablePropertyValueContext.prototype.DECIMAL_VALUE = function() {
    return this.getToken(SqlBaseParser.DECIMAL_VALUE, 0);
};

TablePropertyValueContext.prototype.booleanValue = function() {
    return this.getTypedRuleContext(BooleanValueContext,0);
};

TablePropertyValueContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

TablePropertyValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitTablePropertyValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.TablePropertyValueContext = TablePropertyValueContext;

SqlBaseParser.prototype.tablePropertyValue = function() {

    var localctx = new TablePropertyValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, SqlBaseParser.RULE_tablePropertyValue);
    try {
        this.state = 1210;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.INTEGER_VALUE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1206;
            this.match(SqlBaseParser.INTEGER_VALUE);
            break;
        case SqlBaseParser.DECIMAL_VALUE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1207;
            this.match(SqlBaseParser.DECIMAL_VALUE);
            break;
        case SqlBaseParser.TRUE:
        case SqlBaseParser.FALSE:
            this.enterOuterAlt(localctx, 3);
            this.state = 1208;
            this.booleanValue();
            break;
        case SqlBaseParser.STRING:
            this.enterOuterAlt(localctx, 4);
            this.state = 1209;
            this.match(SqlBaseParser.STRING);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_constantList;
    return this;
}

ConstantListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantListContext.prototype.constructor = ConstantListContext;

ConstantListContext.prototype.constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantContext);
    } else {
        return this.getTypedRuleContext(ConstantContext,i);
    }
};

ConstantListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitConstantList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.ConstantListContext = ConstantListContext;

SqlBaseParser.prototype.constantList = function() {

    var localctx = new ConstantListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, SqlBaseParser.RULE_constantList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1212;
        this.match(SqlBaseParser.T__1);
        this.state = 1213;
        this.constant();
        this.state = 1218;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__3) {
            this.state = 1214;
            this.match(SqlBaseParser.T__3);
            this.state = 1215;
            this.constant();
            this.state = 1220;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1221;
        this.match(SqlBaseParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NestedConstantListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_nestedConstantList;
    return this;
}

NestedConstantListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NestedConstantListContext.prototype.constructor = NestedConstantListContext;

NestedConstantListContext.prototype.constantList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantListContext);
    } else {
        return this.getTypedRuleContext(ConstantListContext,i);
    }
};

NestedConstantListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitNestedConstantList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.NestedConstantListContext = NestedConstantListContext;

SqlBaseParser.prototype.nestedConstantList = function() {

    var localctx = new NestedConstantListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, SqlBaseParser.RULE_nestedConstantList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1223;
        this.match(SqlBaseParser.T__1);
        this.state = 1224;
        this.constantList();
        this.state = 1229;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__3) {
            this.state = 1225;
            this.match(SqlBaseParser.T__3);
            this.state = 1226;
            this.constantList();
            this.state = 1231;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1232;
        this.match(SqlBaseParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateFileFormatContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_createFileFormat;
    return this;
}

CreateFileFormatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateFileFormatContext.prototype.constructor = CreateFileFormatContext;

CreateFileFormatContext.prototype.STORED = function() {
    return this.getToken(SqlBaseParser.STORED, 0);
};

CreateFileFormatContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

CreateFileFormatContext.prototype.fileFormat = function() {
    return this.getTypedRuleContext(FileFormatContext,0);
};

CreateFileFormatContext.prototype.BY = function() {
    return this.getToken(SqlBaseParser.BY, 0);
};

CreateFileFormatContext.prototype.storageHandler = function() {
    return this.getTypedRuleContext(StorageHandlerContext,0);
};

CreateFileFormatContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitCreateFileFormat(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.CreateFileFormatContext = CreateFileFormatContext;

SqlBaseParser.prototype.createFileFormat = function() {

    var localctx = new CreateFileFormatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, SqlBaseParser.RULE_createFileFormat);
    try {
        this.state = 1240;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,140,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1234;
            this.match(SqlBaseParser.STORED);
            this.state = 1235;
            this.match(SqlBaseParser.AS);
            this.state = 1236;
            this.fileFormat();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1237;
            this.match(SqlBaseParser.STORED);
            this.state = 1238;
            this.match(SqlBaseParser.BY);
            this.state = 1239;
            this.storageHandler();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FileFormatContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_fileFormat;
    return this;
}

FileFormatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FileFormatContext.prototype.constructor = FileFormatContext;


 
FileFormatContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function TableFileFormatContext(parser, ctx) {
	FileFormatContext.call(this, parser);
    this.inFmt = null; // Token;
    this.outFmt = null; // Token;
    FileFormatContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableFileFormatContext.prototype = Object.create(FileFormatContext.prototype);
TableFileFormatContext.prototype.constructor = TableFileFormatContext;

SqlBaseParser.TableFileFormatContext = TableFileFormatContext;

TableFileFormatContext.prototype.INPUTFORMAT = function() {
    return this.getToken(SqlBaseParser.INPUTFORMAT, 0);
};

TableFileFormatContext.prototype.OUTPUTFORMAT = function() {
    return this.getToken(SqlBaseParser.OUTPUTFORMAT, 0);
};

TableFileFormatContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.STRING);
    } else {
        return this.getToken(SqlBaseParser.STRING, i);
    }
};

TableFileFormatContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitTableFileFormat(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function GenericFileFormatContext(parser, ctx) {
	FileFormatContext.call(this, parser);
    FileFormatContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GenericFileFormatContext.prototype = Object.create(FileFormatContext.prototype);
GenericFileFormatContext.prototype.constructor = GenericFileFormatContext;

SqlBaseParser.GenericFileFormatContext = GenericFileFormatContext;

GenericFileFormatContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
GenericFileFormatContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitGenericFileFormat(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlBaseParser.FileFormatContext = FileFormatContext;

SqlBaseParser.prototype.fileFormat = function() {

    var localctx = new FileFormatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, SqlBaseParser.RULE_fileFormat);
    try {
        this.state = 1247;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
        switch(la_) {
        case 1:
            localctx = new TableFileFormatContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1242;
            this.match(SqlBaseParser.INPUTFORMAT);
            this.state = 1243;
            localctx.inFmt = this.match(SqlBaseParser.STRING);
            this.state = 1244;
            this.match(SqlBaseParser.OUTPUTFORMAT);
            this.state = 1245;
            localctx.outFmt = this.match(SqlBaseParser.STRING);
            break;

        case 2:
            localctx = new GenericFileFormatContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1246;
            this.identifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StorageHandlerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_storageHandler;
    return this;
}

StorageHandlerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StorageHandlerContext.prototype.constructor = StorageHandlerContext;

StorageHandlerContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

StorageHandlerContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

StorageHandlerContext.prototype.SERDEPROPERTIES = function() {
    return this.getToken(SqlBaseParser.SERDEPROPERTIES, 0);
};

StorageHandlerContext.prototype.tablePropertyList = function() {
    return this.getTypedRuleContext(TablePropertyListContext,0);
};

StorageHandlerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitStorageHandler(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.StorageHandlerContext = StorageHandlerContext;

SqlBaseParser.prototype.storageHandler = function() {

    var localctx = new StorageHandlerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, SqlBaseParser.RULE_storageHandler);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1249;
        this.match(SqlBaseParser.STRING);
        this.state = 1253;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,142,this._ctx);
        if(la_===1) {
            this.state = 1250;
            this.match(SqlBaseParser.WITH);
            this.state = 1251;
            this.match(SqlBaseParser.SERDEPROPERTIES);
            this.state = 1252;
            this.tablePropertyList();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ResourceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_resource;
    return this;
}

ResourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourceContext.prototype.constructor = ResourceContext;

ResourceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ResourceContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

ResourceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitResource(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.ResourceContext = ResourceContext;

SqlBaseParser.prototype.resource = function() {

    var localctx = new ResourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, SqlBaseParser.RULE_resource);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1255;
        this.identifier();
        this.state = 1256;
        this.match(SqlBaseParser.STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QueryNoWithContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_queryNoWith;
    return this;
}

QueryNoWithContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryNoWithContext.prototype.constructor = QueryNoWithContext;


 
QueryNoWithContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SingleInsertQueryContext(parser, ctx) {
	QueryNoWithContext.call(this, parser);
    QueryNoWithContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SingleInsertQueryContext.prototype = Object.create(QueryNoWithContext.prototype);
SingleInsertQueryContext.prototype.constructor = SingleInsertQueryContext;

SqlBaseParser.SingleInsertQueryContext = SingleInsertQueryContext;

SingleInsertQueryContext.prototype.queryTerm = function() {
    return this.getTypedRuleContext(QueryTermContext,0);
};

SingleInsertQueryContext.prototype.queryOrganization = function() {
    return this.getTypedRuleContext(QueryOrganizationContext,0);
};

SingleInsertQueryContext.prototype.insertInto = function() {
    return this.getTypedRuleContext(InsertIntoContext,0);
};
SingleInsertQueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitSingleInsertQuery(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MultiInsertQueryContext(parser, ctx) {
	QueryNoWithContext.call(this, parser);
    QueryNoWithContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MultiInsertQueryContext.prototype = Object.create(QueryNoWithContext.prototype);
MultiInsertQueryContext.prototype.constructor = MultiInsertQueryContext;

SqlBaseParser.MultiInsertQueryContext = MultiInsertQueryContext;

MultiInsertQueryContext.prototype.fromClause = function() {
    return this.getTypedRuleContext(FromClauseContext,0);
};

MultiInsertQueryContext.prototype.multiInsertQueryBody = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MultiInsertQueryBodyContext);
    } else {
        return this.getTypedRuleContext(MultiInsertQueryBodyContext,i);
    }
};
MultiInsertQueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitMultiInsertQuery(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlBaseParser.QueryNoWithContext = QueryNoWithContext;

SqlBaseParser.prototype.queryNoWith = function() {

    var localctx = new QueryNoWithContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, SqlBaseParser.RULE_queryNoWith);
    var _la = 0; // Token type
    try {
        this.state = 1270;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SingleInsertQueryContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1259;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.INSERT) {
                this.state = 1258;
                this.insertInto();
            }

            this.state = 1261;
            this.queryTerm(0);
            this.state = 1262;
            this.queryOrganization();
            break;

        case 2:
            localctx = new MultiInsertQueryContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1264;
            this.fromClause();
            this.state = 1266; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1265;
                this.multiInsertQueryBody();
                this.state = 1268; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SqlBaseParser.SELECT || _la===SqlBaseParser.FROM || _la===SqlBaseParser.INSERT || _la===SqlBaseParser.MAP || _la===SqlBaseParser.REDUCE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QueryOrganizationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_queryOrganization;
    this._sortItem = null; // SortItemContext
    this.order = []; // of SortItemContexts
    this._expression = null; // ExpressionContext
    this.clusterBy = []; // of ExpressionContexts
    this.distributeBy = []; // of ExpressionContexts
    this.sort = []; // of SortItemContexts
    this.limit = null; // ExpressionContext
    return this;
}

QueryOrganizationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryOrganizationContext.prototype.constructor = QueryOrganizationContext;

QueryOrganizationContext.prototype.ORDER = function() {
    return this.getToken(SqlBaseParser.ORDER, 0);
};

QueryOrganizationContext.prototype.BY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.BY);
    } else {
        return this.getToken(SqlBaseParser.BY, i);
    }
};


QueryOrganizationContext.prototype.CLUSTER = function() {
    return this.getToken(SqlBaseParser.CLUSTER, 0);
};

QueryOrganizationContext.prototype.DISTRIBUTE = function() {
    return this.getToken(SqlBaseParser.DISTRIBUTE, 0);
};

QueryOrganizationContext.prototype.SORT = function() {
    return this.getToken(SqlBaseParser.SORT, 0);
};

QueryOrganizationContext.prototype.windows = function() {
    return this.getTypedRuleContext(WindowsContext,0);
};

QueryOrganizationContext.prototype.LIMIT = function() {
    return this.getToken(SqlBaseParser.LIMIT, 0);
};

QueryOrganizationContext.prototype.sortItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SortItemContext);
    } else {
        return this.getTypedRuleContext(SortItemContext,i);
    }
};

QueryOrganizationContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

QueryOrganizationContext.prototype.ALL = function() {
    return this.getToken(SqlBaseParser.ALL, 0);
};

QueryOrganizationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitQueryOrganization(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.QueryOrganizationContext = QueryOrganizationContext;

SqlBaseParser.prototype.queryOrganization = function() {

    var localctx = new QueryOrganizationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, SqlBaseParser.RULE_queryOrganization);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1282;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.ORDER) {
            this.state = 1272;
            this.match(SqlBaseParser.ORDER);
            this.state = 1273;
            this.match(SqlBaseParser.BY);
            this.state = 1274;
            localctx._sortItem = this.sortItem();
            localctx.order.push(localctx._sortItem);
            this.state = 1279;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__3) {
                this.state = 1275;
                this.match(SqlBaseParser.T__3);
                this.state = 1276;
                localctx._sortItem = this.sortItem();
                localctx.order.push(localctx._sortItem);
                this.state = 1281;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1294;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.CLUSTER) {
            this.state = 1284;
            this.match(SqlBaseParser.CLUSTER);
            this.state = 1285;
            this.match(SqlBaseParser.BY);
            this.state = 1286;
            localctx._expression = this.expression();
            localctx.clusterBy.push(localctx._expression);
            this.state = 1291;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__3) {
                this.state = 1287;
                this.match(SqlBaseParser.T__3);
                this.state = 1288;
                localctx._expression = this.expression();
                localctx.clusterBy.push(localctx._expression);
                this.state = 1293;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1306;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.DISTRIBUTE) {
            this.state = 1296;
            this.match(SqlBaseParser.DISTRIBUTE);
            this.state = 1297;
            this.match(SqlBaseParser.BY);
            this.state = 1298;
            localctx._expression = this.expression();
            localctx.distributeBy.push(localctx._expression);
            this.state = 1303;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__3) {
                this.state = 1299;
                this.match(SqlBaseParser.T__3);
                this.state = 1300;
                localctx._expression = this.expression();
                localctx.distributeBy.push(localctx._expression);
                this.state = 1305;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1318;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.SORT) {
            this.state = 1308;
            this.match(SqlBaseParser.SORT);
            this.state = 1309;
            this.match(SqlBaseParser.BY);
            this.state = 1310;
            localctx._sortItem = this.sortItem();
            localctx.sort.push(localctx._sortItem);
            this.state = 1315;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__3) {
                this.state = 1311;
                this.match(SqlBaseParser.T__3);
                this.state = 1312;
                localctx._sortItem = this.sortItem();
                localctx.sort.push(localctx._sortItem);
                this.state = 1317;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1321;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.WINDOW) {
            this.state = 1320;
            this.windows();
        }

        this.state = 1328;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.LIMIT) {
            this.state = 1323;
            this.match(SqlBaseParser.LIMIT);
            this.state = 1326;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1324;
                this.match(SqlBaseParser.ALL);
                break;

            case 2:
                this.state = 1325;
                localctx.limit = this.expression();
                break;

            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MultiInsertQueryBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_multiInsertQueryBody;
    return this;
}

MultiInsertQueryBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiInsertQueryBodyContext.prototype.constructor = MultiInsertQueryBodyContext;

MultiInsertQueryBodyContext.prototype.querySpecification = function() {
    return this.getTypedRuleContext(QuerySpecificationContext,0);
};

MultiInsertQueryBodyContext.prototype.queryOrganization = function() {
    return this.getTypedRuleContext(QueryOrganizationContext,0);
};

MultiInsertQueryBodyContext.prototype.insertInto = function() {
    return this.getTypedRuleContext(InsertIntoContext,0);
};

MultiInsertQueryBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitMultiInsertQueryBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.MultiInsertQueryBodyContext = MultiInsertQueryBodyContext;

SqlBaseParser.prototype.multiInsertQueryBody = function() {

    var localctx = new MultiInsertQueryBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, SqlBaseParser.RULE_multiInsertQueryBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1331;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.INSERT) {
            this.state = 1330;
            this.insertInto();
        }

        this.state = 1333;
        this.querySpecification();
        this.state = 1334;
        this.queryOrganization();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QueryTermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_queryTerm;
    return this;
}

QueryTermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryTermContext.prototype.constructor = QueryTermContext;


 
QueryTermContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function QueryTermDefaultContext(parser, ctx) {
	QueryTermContext.call(this, parser);
    QueryTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QueryTermDefaultContext.prototype = Object.create(QueryTermContext.prototype);
QueryTermDefaultContext.prototype.constructor = QueryTermDefaultContext;

SqlBaseParser.QueryTermDefaultContext = QueryTermDefaultContext;

QueryTermDefaultContext.prototype.queryPrimary = function() {
    return this.getTypedRuleContext(QueryPrimaryContext,0);
};
QueryTermDefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitQueryTermDefault(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SetOperationContext(parser, ctx) {
	QueryTermContext.call(this, parser);
    this.left = null; // QueryTermContext;
    this.operator = null; // Token;
    this.right = null; // QueryTermContext;
    QueryTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetOperationContext.prototype = Object.create(QueryTermContext.prototype);
SetOperationContext.prototype.constructor = SetOperationContext;

SqlBaseParser.SetOperationContext = SetOperationContext;

SetOperationContext.prototype.queryTerm = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QueryTermContext);
    } else {
        return this.getTypedRuleContext(QueryTermContext,i);
    }
};

SetOperationContext.prototype.INTERSECT = function() {
    return this.getToken(SqlBaseParser.INTERSECT, 0);
};

SetOperationContext.prototype.UNION = function() {
    return this.getToken(SqlBaseParser.UNION, 0);
};

SetOperationContext.prototype.EXCEPT = function() {
    return this.getToken(SqlBaseParser.EXCEPT, 0);
};

SetOperationContext.prototype.SETMINUS = function() {
    return this.getToken(SqlBaseParser.SETMINUS, 0);
};

SetOperationContext.prototype.setQuantifier = function() {
    return this.getTypedRuleContext(SetQuantifierContext,0);
};
SetOperationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitSetOperation(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlBaseParser.prototype.queryTerm = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new QueryTermContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 72;
    this.enterRecursionRule(localctx, 72, SqlBaseParser.RULE_queryTerm, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new QueryTermDefaultContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1337;
        this.queryPrimary();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1347;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,159,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new SetOperationContext(this, new QueryTermContext(this, _parentctx, _parentState));
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_queryTerm);
                this.state = 1339;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1340;
                localctx.operator = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (SqlBaseParser.UNION - 102)) | (1 << (SqlBaseParser.EXCEPT - 102)) | (1 << (SqlBaseParser.SETMINUS - 102)) | (1 << (SqlBaseParser.INTERSECT - 102)))) !== 0))) {
                    localctx.operator = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1342;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.ALL || _la===SqlBaseParser.DISTINCT) {
                    this.state = 1341;
                    this.setQuantifier();
                }

                this.state = 1344;
                localctx.right = this.queryTerm(2); 
            }
            this.state = 1349;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,159,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function QueryPrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_queryPrimary;
    return this;
}

QueryPrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryPrimaryContext.prototype.constructor = QueryPrimaryContext;


 
QueryPrimaryContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SubqueryContext(parser, ctx) {
	QueryPrimaryContext.call(this, parser);
    QueryPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubqueryContext.prototype = Object.create(QueryPrimaryContext.prototype);
SubqueryContext.prototype.constructor = SubqueryContext;

SqlBaseParser.SubqueryContext = SubqueryContext;

SubqueryContext.prototype.queryNoWith = function() {
    return this.getTypedRuleContext(QueryNoWithContext,0);
};
SubqueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitSubquery(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function QueryPrimaryDefaultContext(parser, ctx) {
	QueryPrimaryContext.call(this, parser);
    QueryPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QueryPrimaryDefaultContext.prototype = Object.create(QueryPrimaryContext.prototype);
QueryPrimaryDefaultContext.prototype.constructor = QueryPrimaryDefaultContext;

SqlBaseParser.QueryPrimaryDefaultContext = QueryPrimaryDefaultContext;

QueryPrimaryDefaultContext.prototype.querySpecification = function() {
    return this.getTypedRuleContext(QuerySpecificationContext,0);
};
QueryPrimaryDefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitQueryPrimaryDefault(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function InlineTableDefault1Context(parser, ctx) {
	QueryPrimaryContext.call(this, parser);
    QueryPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InlineTableDefault1Context.prototype = Object.create(QueryPrimaryContext.prototype);
InlineTableDefault1Context.prototype.constructor = InlineTableDefault1Context;

SqlBaseParser.InlineTableDefault1Context = InlineTableDefault1Context;

InlineTableDefault1Context.prototype.inlineTable = function() {
    return this.getTypedRuleContext(InlineTableContext,0);
};
InlineTableDefault1Context.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitInlineTableDefault1(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableContext(parser, ctx) {
	QueryPrimaryContext.call(this, parser);
    QueryPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableContext.prototype = Object.create(QueryPrimaryContext.prototype);
TableContext.prototype.constructor = TableContext;

SqlBaseParser.TableContext = TableContext;

TableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

TableContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};
TableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlBaseParser.QueryPrimaryContext = QueryPrimaryContext;

SqlBaseParser.prototype.queryPrimary = function() {

    var localctx = new QueryPrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, SqlBaseParser.RULE_queryPrimary);
    try {
        this.state = 1358;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.SELECT:
        case SqlBaseParser.FROM:
        case SqlBaseParser.MAP:
        case SqlBaseParser.REDUCE:
            localctx = new QueryPrimaryDefaultContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1350;
            this.querySpecification();
            break;
        case SqlBaseParser.TABLE:
            localctx = new TableContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1351;
            this.match(SqlBaseParser.TABLE);
            this.state = 1352;
            this.tableIdentifier();
            break;
        case SqlBaseParser.VALUES:
            localctx = new InlineTableDefault1Context(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1353;
            this.inlineTable();
            break;
        case SqlBaseParser.T__1:
            localctx = new SubqueryContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1354;
            this.match(SqlBaseParser.T__1);
            this.state = 1355;
            this.queryNoWith();
            this.state = 1356;
            this.match(SqlBaseParser.T__2);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SortItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_sortItem;
    this.ordering = null; // Token
    this.nullOrder = null; // Token
    return this;
}

SortItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SortItemContext.prototype.constructor = SortItemContext;

SortItemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SortItemContext.prototype.NULLS = function() {
    return this.getToken(SqlBaseParser.NULLS, 0);
};

SortItemContext.prototype.ASC = function() {
    return this.getToken(SqlBaseParser.ASC, 0);
};

SortItemContext.prototype.DESC = function() {
    return this.getToken(SqlBaseParser.DESC, 0);
};

SortItemContext.prototype.LAST = function() {
    return this.getToken(SqlBaseParser.LAST, 0);
};

SortItemContext.prototype.FIRST = function() {
    return this.getToken(SqlBaseParser.FIRST, 0);
};

SortItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitSortItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.SortItemContext = SortItemContext;

SqlBaseParser.prototype.sortItem = function() {

    var localctx = new SortItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, SqlBaseParser.RULE_sortItem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1360;
        this.expression();
        this.state = 1362;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.ASC || _la===SqlBaseParser.DESC) {
            this.state = 1361;
            localctx.ordering = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.ASC || _la===SqlBaseParser.DESC)) {
                localctx.ordering = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 1366;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.NULLS) {
            this.state = 1364;
            this.match(SqlBaseParser.NULLS);
            this.state = 1365;
            localctx.nullOrder = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.FIRST || _la===SqlBaseParser.LAST)) {
                localctx.nullOrder = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QuerySpecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_querySpecification;
    this.kind = null; // Token
    this.inRowFormat = null; // RowFormatContext
    this.recordWriter = null; // Token
    this.script = null; // Token
    this.outRowFormat = null; // RowFormatContext
    this.recordReader = null; // Token
    this.where = null; // BooleanExpressionContext
    this._hint = null; // HintContext
    this.hints = []; // of HintContexts
    this.having = null; // BooleanExpressionContext
    return this;
}

QuerySpecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuerySpecificationContext.prototype.constructor = QuerySpecificationContext;

QuerySpecificationContext.prototype.USING = function() {
    return this.getToken(SqlBaseParser.USING, 0);
};

QuerySpecificationContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.STRING);
    } else {
        return this.getToken(SqlBaseParser.STRING, i);
    }
};


QuerySpecificationContext.prototype.RECORDWRITER = function() {
    return this.getToken(SqlBaseParser.RECORDWRITER, 0);
};

QuerySpecificationContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

QuerySpecificationContext.prototype.RECORDREADER = function() {
    return this.getToken(SqlBaseParser.RECORDREADER, 0);
};

QuerySpecificationContext.prototype.fromClause = function() {
    return this.getTypedRuleContext(FromClauseContext,0);
};

QuerySpecificationContext.prototype.WHERE = function() {
    return this.getToken(SqlBaseParser.WHERE, 0);
};

QuerySpecificationContext.prototype.SELECT = function() {
    return this.getToken(SqlBaseParser.SELECT, 0);
};

QuerySpecificationContext.prototype.namedExpressionSeq = function() {
    return this.getTypedRuleContext(NamedExpressionSeqContext,0);
};

QuerySpecificationContext.prototype.rowFormat = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RowFormatContext);
    } else {
        return this.getTypedRuleContext(RowFormatContext,i);
    }
};

QuerySpecificationContext.prototype.booleanExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BooleanExpressionContext);
    } else {
        return this.getTypedRuleContext(BooleanExpressionContext,i);
    }
};

QuerySpecificationContext.prototype.TRANSFORM = function() {
    return this.getToken(SqlBaseParser.TRANSFORM, 0);
};

QuerySpecificationContext.prototype.MAP = function() {
    return this.getToken(SqlBaseParser.MAP, 0);
};

QuerySpecificationContext.prototype.REDUCE = function() {
    return this.getToken(SqlBaseParser.REDUCE, 0);
};

QuerySpecificationContext.prototype.identifierSeq = function() {
    return this.getTypedRuleContext(IdentifierSeqContext,0);
};

QuerySpecificationContext.prototype.colTypeList = function() {
    return this.getTypedRuleContext(ColTypeListContext,0);
};

QuerySpecificationContext.prototype.lateralView = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LateralViewContext);
    } else {
        return this.getTypedRuleContext(LateralViewContext,i);
    }
};

QuerySpecificationContext.prototype.aggregation = function() {
    return this.getTypedRuleContext(AggregationContext,0);
};

QuerySpecificationContext.prototype.HAVING = function() {
    return this.getToken(SqlBaseParser.HAVING, 0);
};

QuerySpecificationContext.prototype.windows = function() {
    return this.getTypedRuleContext(WindowsContext,0);
};

QuerySpecificationContext.prototype.setQuantifier = function() {
    return this.getTypedRuleContext(SetQuantifierContext,0);
};

QuerySpecificationContext.prototype.hint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HintContext);
    } else {
        return this.getTypedRuleContext(HintContext,i);
    }
};

QuerySpecificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitQuerySpecification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.QuerySpecificationContext = QuerySpecificationContext;

SqlBaseParser.prototype.querySpecification = function() {

    var localctx = new QuerySpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, SqlBaseParser.RULE_querySpecification);
    var _la = 0; // Token type
    try {
        this.state = 1461;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,184,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1378;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SqlBaseParser.SELECT:
                this.state = 1368;
                this.match(SqlBaseParser.SELECT);
                this.state = 1369;
                localctx.kind = this.match(SqlBaseParser.TRANSFORM);
                this.state = 1370;
                this.match(SqlBaseParser.T__1);
                this.state = 1371;
                this.namedExpressionSeq();
                this.state = 1372;
                this.match(SqlBaseParser.T__2);
                break;
            case SqlBaseParser.MAP:
                this.state = 1374;
                localctx.kind = this.match(SqlBaseParser.MAP);
                this.state = 1375;
                this.namedExpressionSeq();
                break;
            case SqlBaseParser.REDUCE:
                this.state = 1376;
                localctx.kind = this.match(SqlBaseParser.REDUCE);
                this.state = 1377;
                this.namedExpressionSeq();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1381;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.ROW) {
                this.state = 1380;
                localctx.inRowFormat = this.rowFormat();
            }

            this.state = 1385;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.RECORDWRITER) {
                this.state = 1383;
                this.match(SqlBaseParser.RECORDWRITER);
                this.state = 1384;
                localctx.recordWriter = this.match(SqlBaseParser.STRING);
            }

            this.state = 1387;
            this.match(SqlBaseParser.USING);
            this.state = 1388;
            localctx.script = this.match(SqlBaseParser.STRING);
            this.state = 1401;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,168,this._ctx);
            if(la_===1) {
                this.state = 1389;
                this.match(SqlBaseParser.AS);
                this.state = 1399;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,167,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1390;
                    this.identifierSeq();
                    break;

                case 2:
                    this.state = 1391;
                    this.colTypeList();
                    break;

                case 3:
                    this.state = 1392;
                    this.match(SqlBaseParser.T__1);
                    this.state = 1395;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,166,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 1393;
                        this.identifierSeq();
                        break;

                    case 2:
                        this.state = 1394;
                        this.colTypeList();
                        break;

                    }
                    this.state = 1397;
                    this.match(SqlBaseParser.T__2);
                    break;

                }

            }
            this.state = 1404;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
            if(la_===1) {
                this.state = 1403;
                localctx.outRowFormat = this.rowFormat();

            }
            this.state = 1408;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
            if(la_===1) {
                this.state = 1406;
                this.match(SqlBaseParser.RECORDREADER);
                this.state = 1407;
                localctx.recordReader = this.match(SqlBaseParser.STRING);

            }
            this.state = 1411;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,171,this._ctx);
            if(la_===1) {
                this.state = 1410;
                this.fromClause();

            }
            this.state = 1415;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,172,this._ctx);
            if(la_===1) {
                this.state = 1413;
                this.match(SqlBaseParser.WHERE);
                this.state = 1414;
                localctx.where = this.booleanExpression(0);

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1439;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SqlBaseParser.SELECT:
                this.state = 1417;
                localctx.kind = this.match(SqlBaseParser.SELECT);
                this.state = 1421;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__5) {
                    this.state = 1418;
                    localctx._hint = this.hint();
                    localctx.hints.push(localctx._hint);
                    this.state = 1423;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1425;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
                if(la_===1) {
                    this.state = 1424;
                    this.setQuantifier();

                }
                this.state = 1427;
                this.namedExpressionSeq();
                this.state = 1429;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,175,this._ctx);
                if(la_===1) {
                    this.state = 1428;
                    this.fromClause();

                }
                break;
            case SqlBaseParser.FROM:
                this.state = 1431;
                this.fromClause();
                this.state = 1437;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,177,this._ctx);
                if(la_===1) {
                    this.state = 1432;
                    localctx.kind = this.match(SqlBaseParser.SELECT);
                    this.state = 1434;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,176,this._ctx);
                    if(la_===1) {
                        this.state = 1433;
                        this.setQuantifier();

                    }
                    this.state = 1436;
                    this.namedExpressionSeq();

                }
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1444;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,179,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1441;
                    this.lateralView(); 
                }
                this.state = 1446;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,179,this._ctx);
            }

            this.state = 1449;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,180,this._ctx);
            if(la_===1) {
                this.state = 1447;
                this.match(SqlBaseParser.WHERE);
                this.state = 1448;
                localctx.where = this.booleanExpression(0);

            }
            this.state = 1452;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,181,this._ctx);
            if(la_===1) {
                this.state = 1451;
                this.aggregation();

            }
            this.state = 1456;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
            if(la_===1) {
                this.state = 1454;
                this.match(SqlBaseParser.HAVING);
                this.state = 1455;
                localctx.having = this.booleanExpression(0);

            }
            this.state = 1459;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,183,this._ctx);
            if(la_===1) {
                this.state = 1458;
                this.windows();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_hint;
    this._hintStatement = null; // HintStatementContext
    this.hintStatements = []; // of HintStatementContexts
    return this;
}

HintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HintContext.prototype.constructor = HintContext;

HintContext.prototype.hintStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HintStatementContext);
    } else {
        return this.getTypedRuleContext(HintStatementContext,i);
    }
};

HintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitHint(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.HintContext = HintContext;

SqlBaseParser.prototype.hint = function() {

    var localctx = new HintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, SqlBaseParser.RULE_hint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1463;
        this.match(SqlBaseParser.T__5);
        this.state = 1464;
        localctx._hintStatement = this.hintStatement();
        localctx.hintStatements.push(localctx._hintStatement);
        this.state = 1471;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__3) | (1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.NOT - 32)) | (1 << (SqlBaseParser.NO - 32)) | (1 << (SqlBaseParser.EXISTS - 32)) | (1 << (SqlBaseParser.BETWEEN - 32)) | (1 << (SqlBaseParser.LIKE - 32)) | (1 << (SqlBaseParser.RLIKE - 32)) | (1 << (SqlBaseParser.IS - 32)) | (1 << (SqlBaseParser.NULL - 32)) | (1 << (SqlBaseParser.TRUE - 32)) | (1 << (SqlBaseParser.FALSE - 32)) | (1 << (SqlBaseParser.NULLS - 32)) | (1 << (SqlBaseParser.ASC - 32)) | (1 << (SqlBaseParser.DESC - 32)) | (1 << (SqlBaseParser.FOR - 32)) | (1 << (SqlBaseParser.INTERVAL - 32)) | (1 << (SqlBaseParser.CASE - 32)) | (1 << (SqlBaseParser.WHEN - 32)) | (1 << (SqlBaseParser.THEN - 32)) | (1 << (SqlBaseParser.ELSE - 32)) | (1 << (SqlBaseParser.END - 32)) | (1 << (SqlBaseParser.JOIN - 32)) | (1 << (SqlBaseParser.CROSS - 32)) | (1 << (SqlBaseParser.OUTER - 32)) | (1 << (SqlBaseParser.INNER - 32)) | (1 << (SqlBaseParser.LEFT - 32)) | (1 << (SqlBaseParser.SEMI - 32)) | (1 << (SqlBaseParser.RIGHT - 32)) | (1 << (SqlBaseParser.FULL - 32)) | (1 << (SqlBaseParser.NATURAL - 32)) | (1 << (SqlBaseParser.ON - 32)) | (1 << (SqlBaseParser.PIVOT - 32)) | (1 << (SqlBaseParser.LATERAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlBaseParser.WINDOW - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.DIRECTORY - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlBaseParser.COLUMNS - 96)) | (1 << (SqlBaseParser.COLUMN - 96)) | (1 << (SqlBaseParser.USE - 96)) | (1 << (SqlBaseParser.PARTITIONS - 96)) | (1 << (SqlBaseParser.FUNCTIONS - 96)) | (1 << (SqlBaseParser.DROP - 96)) | (1 << (SqlBaseParser.UNION - 96)) | (1 << (SqlBaseParser.EXCEPT - 96)) | (1 << (SqlBaseParser.SETMINUS - 96)) | (1 << (SqlBaseParser.INTERSECT - 96)) | (1 << (SqlBaseParser.TO - 96)) | (1 << (SqlBaseParser.TABLESAMPLE - 96)) | (1 << (SqlBaseParser.STRATIFY - 96)) | (1 << (SqlBaseParser.ALTER - 96)) | (1 << (SqlBaseParser.RENAME - 96)) | (1 << (SqlBaseParser.ARRAY - 96)) | (1 << (SqlBaseParser.MAP - 96)) | (1 << (SqlBaseParser.STRUCT - 96)) | (1 << (SqlBaseParser.COMMENT - 96)) | (1 << (SqlBaseParser.SET - 96)) | (1 << (SqlBaseParser.RESET - 96)) | (1 << (SqlBaseParser.DATA - 96)) | (1 << (SqlBaseParser.START - 96)) | (1 << (SqlBaseParser.TRANSACTION - 96)) | (1 << (SqlBaseParser.COMMIT - 96)) | (1 << (SqlBaseParser.ROLLBACK - 96)) | (1 << (SqlBaseParser.MACRO - 96)) | (1 << (SqlBaseParser.IGNORE - 96)) | (1 << (SqlBaseParser.BOTH - 96)) | (1 << (SqlBaseParser.LEADING - 96)) | (1 << (SqlBaseParser.TRAILING - 96)) | (1 << (SqlBaseParser.IF - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.EXTRACT - 128)) | (1 << (SqlBaseParser.DIV - 128)) | (1 << (SqlBaseParser.PERCENTLIT - 128)) | (1 << (SqlBaseParser.BUCKET - 128)) | (1 << (SqlBaseParser.OUT - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.SORT - 128)) | (1 << (SqlBaseParser.CLUSTER - 128)) | (1 << (SqlBaseParser.DISTRIBUTE - 128)) | (1 << (SqlBaseParser.OVERWRITE - 128)) | (1 << (SqlBaseParser.TRANSFORM - 128)) | (1 << (SqlBaseParser.REDUCE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlBaseParser.SERDE - 160)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 160)) | (1 << (SqlBaseParser.RECORDREADER - 160)) | (1 << (SqlBaseParser.RECORDWRITER - 160)) | (1 << (SqlBaseParser.DELIMITED - 160)) | (1 << (SqlBaseParser.FIELDS - 160)) | (1 << (SqlBaseParser.TERMINATED - 160)) | (1 << (SqlBaseParser.COLLECTION - 160)) | (1 << (SqlBaseParser.ITEMS - 160)) | (1 << (SqlBaseParser.KEYS - 160)) | (1 << (SqlBaseParser.ESCAPED - 160)) | (1 << (SqlBaseParser.LINES - 160)) | (1 << (SqlBaseParser.SEPARATED - 160)) | (1 << (SqlBaseParser.SQLFUNCTION - 160)) | (1 << (SqlBaseParser.EXTENDED - 160)) | (1 << (SqlBaseParser.REFRESH - 160)) | (1 << (SqlBaseParser.CLEAR - 160)) | (1 << (SqlBaseParser.CACHE - 160)) | (1 << (SqlBaseParser.UNCACHE - 160)) | (1 << (SqlBaseParser.LAZY - 160)) | (1 << (SqlBaseParser.FORMATTED - 160)) | (1 << (SqlBaseParser.GLOBAL - 160)) | (1 << (SqlBaseParser.TEMPORARY - 160)) | (1 << (SqlBaseParser.OPTIONS - 160)) | (1 << (SqlBaseParser.UNSET - 160)) | (1 << (SqlBaseParser.TBLPROPERTIES - 160)) | (1 << (SqlBaseParser.DBPROPERTIES - 160)) | (1 << (SqlBaseParser.BUCKETS - 160)) | (1 << (SqlBaseParser.SKEWED - 160)) | (1 << (SqlBaseParser.STORED - 160)) | (1 << (SqlBaseParser.DIRECTORIES - 160)) | (1 << (SqlBaseParser.LOCATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (SqlBaseParser.EXCHANGE - 192)) | (1 << (SqlBaseParser.ARCHIVE - 192)) | (1 << (SqlBaseParser.UNARCHIVE - 192)) | (1 << (SqlBaseParser.FILEFORMAT - 192)) | (1 << (SqlBaseParser.TOUCH - 192)) | (1 << (SqlBaseParser.COMPACT - 192)) | (1 << (SqlBaseParser.CONCATENATE - 192)) | (1 << (SqlBaseParser.CHANGE - 192)) | (1 << (SqlBaseParser.CASCADE - 192)) | (1 << (SqlBaseParser.RESTRICT - 192)) | (1 << (SqlBaseParser.CLUSTERED - 192)) | (1 << (SqlBaseParser.SORTED - 192)) | (1 << (SqlBaseParser.PURGE - 192)) | (1 << (SqlBaseParser.INPUTFORMAT - 192)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 192)) | (1 << (SqlBaseParser.DATABASE - 192)) | (1 << (SqlBaseParser.DATABASES - 192)) | (1 << (SqlBaseParser.DFS - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.ANALYZE - 192)) | (1 << (SqlBaseParser.COMPUTE - 192)) | (1 << (SqlBaseParser.LIST - 192)) | (1 << (SqlBaseParser.STATISTICS - 192)) | (1 << (SqlBaseParser.PARTITIONED - 192)) | (1 << (SqlBaseParser.EXTERNAL - 192)) | (1 << (SqlBaseParser.DEFINED - 192)) | (1 << (SqlBaseParser.REVOKE - 192)) | (1 << (SqlBaseParser.GRANT - 192)) | (1 << (SqlBaseParser.LOCK - 192)) | (1 << (SqlBaseParser.UNLOCK - 192)) | (1 << (SqlBaseParser.MSCK - 192)) | (1 << (SqlBaseParser.REPAIR - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (SqlBaseParser.RECOVER - 224)) | (1 << (SqlBaseParser.EXPORT - 224)) | (1 << (SqlBaseParser.IMPORT - 224)) | (1 << (SqlBaseParser.LOAD - 224)) | (1 << (SqlBaseParser.ROLE - 224)) | (1 << (SqlBaseParser.ROLES - 224)) | (1 << (SqlBaseParser.COMPACTIONS - 224)) | (1 << (SqlBaseParser.PRINCIPALS - 224)) | (1 << (SqlBaseParser.TRANSACTIONS - 224)) | (1 << (SqlBaseParser.INDEX - 224)) | (1 << (SqlBaseParser.INDEXES - 224)) | (1 << (SqlBaseParser.LOCKS - 224)) | (1 << (SqlBaseParser.OPTION - 224)) | (1 << (SqlBaseParser.ANTI - 224)) | (1 << (SqlBaseParser.LOCAL - 224)) | (1 << (SqlBaseParser.INPATH - 224)) | (1 << (SqlBaseParser.IDENTIFIER - 224)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 224)))) !== 0)) {
            this.state = 1466;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.T__3) {
                this.state = 1465;
                this.match(SqlBaseParser.T__3);
            }

            this.state = 1468;
            localctx._hintStatement = this.hintStatement();
            localctx.hintStatements.push(localctx._hintStatement);
            this.state = 1473;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1474;
        this.match(SqlBaseParser.T__6);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HintStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_hintStatement;
    this.hintName = null; // IdentifierContext
    this._primaryExpression = null; // PrimaryExpressionContext
    this.parameters = []; // of PrimaryExpressionContexts
    return this;
}

HintStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HintStatementContext.prototype.constructor = HintStatementContext;

HintStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

HintStatementContext.prototype.primaryExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PrimaryExpressionContext);
    } else {
        return this.getTypedRuleContext(PrimaryExpressionContext,i);
    }
};

HintStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitHintStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.HintStatementContext = HintStatementContext;

SqlBaseParser.prototype.hintStatement = function() {

    var localctx = new HintStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, SqlBaseParser.RULE_hintStatement);
    var _la = 0; // Token type
    try {
        this.state = 1489;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,188,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1476;
            localctx.hintName = this.identifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1477;
            localctx.hintName = this.identifier();
            this.state = 1478;
            this.match(SqlBaseParser.T__1);
            this.state = 1479;
            localctx._primaryExpression = this.primaryExpression(0);
            localctx.parameters.push(localctx._primaryExpression);
            this.state = 1484;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__3) {
                this.state = 1480;
                this.match(SqlBaseParser.T__3);
                this.state = 1481;
                localctx._primaryExpression = this.primaryExpression(0);
                localctx.parameters.push(localctx._primaryExpression);
                this.state = 1486;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1487;
            this.match(SqlBaseParser.T__2);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FromClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_fromClause;
    return this;
}

FromClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromClauseContext.prototype.constructor = FromClauseContext;

FromClauseContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

FromClauseContext.prototype.relation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RelationContext);
    } else {
        return this.getTypedRuleContext(RelationContext,i);
    }
};

FromClauseContext.prototype.lateralView = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LateralViewContext);
    } else {
        return this.getTypedRuleContext(LateralViewContext,i);
    }
};

FromClauseContext.prototype.pivotClause = function() {
    return this.getTypedRuleContext(PivotClauseContext,0);
};

FromClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitFromClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.FromClauseContext = FromClauseContext;

SqlBaseParser.prototype.fromClause = function() {

    var localctx = new FromClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, SqlBaseParser.RULE_fromClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1491;
        this.match(SqlBaseParser.FROM);
        this.state = 1492;
        this.relation();
        this.state = 1497;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,189,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1493;
                this.match(SqlBaseParser.T__3);
                this.state = 1494;
                this.relation(); 
            }
            this.state = 1499;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,189,this._ctx);
        }

        this.state = 1503;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,190,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1500;
                this.lateralView(); 
            }
            this.state = 1505;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,190,this._ctx);
        }

        this.state = 1507;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,191,this._ctx);
        if(la_===1) {
            this.state = 1506;
            this.pivotClause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AggregationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_aggregation;
    this._expression = null; // ExpressionContext
    this.groupingExpressions = []; // of ExpressionContexts
    this.kind = null; // Token
    return this;
}

AggregationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AggregationContext.prototype.constructor = AggregationContext;

AggregationContext.prototype.GROUP = function() {
    return this.getToken(SqlBaseParser.GROUP, 0);
};

AggregationContext.prototype.BY = function() {
    return this.getToken(SqlBaseParser.BY, 0);
};

AggregationContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

AggregationContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

AggregationContext.prototype.SETS = function() {
    return this.getToken(SqlBaseParser.SETS, 0);
};

AggregationContext.prototype.groupingSet = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GroupingSetContext);
    } else {
        return this.getTypedRuleContext(GroupingSetContext,i);
    }
};

AggregationContext.prototype.ROLLUP = function() {
    return this.getToken(SqlBaseParser.ROLLUP, 0);
};

AggregationContext.prototype.CUBE = function() {
    return this.getToken(SqlBaseParser.CUBE, 0);
};

AggregationContext.prototype.GROUPING = function() {
    return this.getToken(SqlBaseParser.GROUPING, 0);
};

AggregationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitAggregation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.AggregationContext = AggregationContext;

SqlBaseParser.prototype.aggregation = function() {

    var localctx = new AggregationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, SqlBaseParser.RULE_aggregation);
    var _la = 0; // Token type
    try {
        this.state = 1553;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,196,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1509;
            this.match(SqlBaseParser.GROUP);
            this.state = 1510;
            this.match(SqlBaseParser.BY);
            this.state = 1511;
            localctx._expression = this.expression();
            localctx.groupingExpressions.push(localctx._expression);
            this.state = 1516;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,192,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1512;
                    this.match(SqlBaseParser.T__3);
                    this.state = 1513;
                    localctx._expression = this.expression();
                    localctx.groupingExpressions.push(localctx._expression); 
                }
                this.state = 1518;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,192,this._ctx);
            }

            this.state = 1536;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
            if(la_===1) {
                this.state = 1519;
                this.match(SqlBaseParser.WITH);
                this.state = 1520;
                localctx.kind = this.match(SqlBaseParser.ROLLUP);

            } else if(la_===2) {
                this.state = 1521;
                this.match(SqlBaseParser.WITH);
                this.state = 1522;
                localctx.kind = this.match(SqlBaseParser.CUBE);

            } else if(la_===3) {
                this.state = 1523;
                localctx.kind = this.match(SqlBaseParser.GROUPING);
                this.state = 1524;
                this.match(SqlBaseParser.SETS);
                this.state = 1525;
                this.match(SqlBaseParser.T__1);
                this.state = 1526;
                this.groupingSet();
                this.state = 1531;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__3) {
                    this.state = 1527;
                    this.match(SqlBaseParser.T__3);
                    this.state = 1528;
                    this.groupingSet();
                    this.state = 1533;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1534;
                this.match(SqlBaseParser.T__2);

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1538;
            this.match(SqlBaseParser.GROUP);
            this.state = 1539;
            this.match(SqlBaseParser.BY);
            this.state = 1540;
            localctx.kind = this.match(SqlBaseParser.GROUPING);
            this.state = 1541;
            this.match(SqlBaseParser.SETS);
            this.state = 1542;
            this.match(SqlBaseParser.T__1);
            this.state = 1543;
            this.groupingSet();
            this.state = 1548;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__3) {
                this.state = 1544;
                this.match(SqlBaseParser.T__3);
                this.state = 1545;
                this.groupingSet();
                this.state = 1550;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1551;
            this.match(SqlBaseParser.T__2);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupingSetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_groupingSet;
    return this;
}

GroupingSetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupingSetContext.prototype.constructor = GroupingSetContext;

GroupingSetContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

GroupingSetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitGroupingSet(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.GroupingSetContext = GroupingSetContext;

SqlBaseParser.prototype.groupingSet = function() {

    var localctx = new GroupingSetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, SqlBaseParser.RULE_groupingSet);
    var _la = 0; // Token type
    try {
        this.state = 1568;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,199,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1555;
            this.match(SqlBaseParser.T__1);
            this.state = 1564;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.NOT - 32)) | (1 << (SqlBaseParser.NO - 32)) | (1 << (SqlBaseParser.EXISTS - 32)) | (1 << (SqlBaseParser.BETWEEN - 32)) | (1 << (SqlBaseParser.LIKE - 32)) | (1 << (SqlBaseParser.RLIKE - 32)) | (1 << (SqlBaseParser.IS - 32)) | (1 << (SqlBaseParser.NULL - 32)) | (1 << (SqlBaseParser.TRUE - 32)) | (1 << (SqlBaseParser.FALSE - 32)) | (1 << (SqlBaseParser.NULLS - 32)) | (1 << (SqlBaseParser.ASC - 32)) | (1 << (SqlBaseParser.DESC - 32)) | (1 << (SqlBaseParser.FOR - 32)) | (1 << (SqlBaseParser.INTERVAL - 32)) | (1 << (SqlBaseParser.CASE - 32)) | (1 << (SqlBaseParser.WHEN - 32)) | (1 << (SqlBaseParser.THEN - 32)) | (1 << (SqlBaseParser.ELSE - 32)) | (1 << (SqlBaseParser.END - 32)) | (1 << (SqlBaseParser.JOIN - 32)) | (1 << (SqlBaseParser.CROSS - 32)) | (1 << (SqlBaseParser.OUTER - 32)) | (1 << (SqlBaseParser.INNER - 32)) | (1 << (SqlBaseParser.LEFT - 32)) | (1 << (SqlBaseParser.SEMI - 32)) | (1 << (SqlBaseParser.RIGHT - 32)) | (1 << (SqlBaseParser.FULL - 32)) | (1 << (SqlBaseParser.NATURAL - 32)) | (1 << (SqlBaseParser.ON - 32)) | (1 << (SqlBaseParser.PIVOT - 32)) | (1 << (SqlBaseParser.LATERAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlBaseParser.WINDOW - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.DIRECTORY - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlBaseParser.COLUMNS - 96)) | (1 << (SqlBaseParser.COLUMN - 96)) | (1 << (SqlBaseParser.USE - 96)) | (1 << (SqlBaseParser.PARTITIONS - 96)) | (1 << (SqlBaseParser.FUNCTIONS - 96)) | (1 << (SqlBaseParser.DROP - 96)) | (1 << (SqlBaseParser.UNION - 96)) | (1 << (SqlBaseParser.EXCEPT - 96)) | (1 << (SqlBaseParser.SETMINUS - 96)) | (1 << (SqlBaseParser.INTERSECT - 96)) | (1 << (SqlBaseParser.TO - 96)) | (1 << (SqlBaseParser.TABLESAMPLE - 96)) | (1 << (SqlBaseParser.STRATIFY - 96)) | (1 << (SqlBaseParser.ALTER - 96)) | (1 << (SqlBaseParser.RENAME - 96)) | (1 << (SqlBaseParser.ARRAY - 96)) | (1 << (SqlBaseParser.MAP - 96)) | (1 << (SqlBaseParser.STRUCT - 96)) | (1 << (SqlBaseParser.COMMENT - 96)) | (1 << (SqlBaseParser.SET - 96)) | (1 << (SqlBaseParser.RESET - 96)) | (1 << (SqlBaseParser.DATA - 96)) | (1 << (SqlBaseParser.START - 96)) | (1 << (SqlBaseParser.TRANSACTION - 96)) | (1 << (SqlBaseParser.COMMIT - 96)) | (1 << (SqlBaseParser.ROLLBACK - 96)) | (1 << (SqlBaseParser.MACRO - 96)) | (1 << (SqlBaseParser.IGNORE - 96)) | (1 << (SqlBaseParser.BOTH - 96)) | (1 << (SqlBaseParser.LEADING - 96)) | (1 << (SqlBaseParser.TRAILING - 96)) | (1 << (SqlBaseParser.IF - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.EXTRACT - 128)) | (1 << (SqlBaseParser.PLUS - 128)) | (1 << (SqlBaseParser.MINUS - 128)) | (1 << (SqlBaseParser.ASTERISK - 128)) | (1 << (SqlBaseParser.DIV - 128)) | (1 << (SqlBaseParser.TILDE - 128)) | (1 << (SqlBaseParser.PERCENTLIT - 128)) | (1 << (SqlBaseParser.BUCKET - 128)) | (1 << (SqlBaseParser.OUT - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.SORT - 128)) | (1 << (SqlBaseParser.CLUSTER - 128)) | (1 << (SqlBaseParser.DISTRIBUTE - 128)) | (1 << (SqlBaseParser.OVERWRITE - 128)) | (1 << (SqlBaseParser.TRANSFORM - 128)) | (1 << (SqlBaseParser.REDUCE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlBaseParser.SERDE - 160)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 160)) | (1 << (SqlBaseParser.RECORDREADER - 160)) | (1 << (SqlBaseParser.RECORDWRITER - 160)) | (1 << (SqlBaseParser.DELIMITED - 160)) | (1 << (SqlBaseParser.FIELDS - 160)) | (1 << (SqlBaseParser.TERMINATED - 160)) | (1 << (SqlBaseParser.COLLECTION - 160)) | (1 << (SqlBaseParser.ITEMS - 160)) | (1 << (SqlBaseParser.KEYS - 160)) | (1 << (SqlBaseParser.ESCAPED - 160)) | (1 << (SqlBaseParser.LINES - 160)) | (1 << (SqlBaseParser.SEPARATED - 160)) | (1 << (SqlBaseParser.SQLFUNCTION - 160)) | (1 << (SqlBaseParser.EXTENDED - 160)) | (1 << (SqlBaseParser.REFRESH - 160)) | (1 << (SqlBaseParser.CLEAR - 160)) | (1 << (SqlBaseParser.CACHE - 160)) | (1 << (SqlBaseParser.UNCACHE - 160)) | (1 << (SqlBaseParser.LAZY - 160)) | (1 << (SqlBaseParser.FORMATTED - 160)) | (1 << (SqlBaseParser.GLOBAL - 160)) | (1 << (SqlBaseParser.TEMPORARY - 160)) | (1 << (SqlBaseParser.OPTIONS - 160)) | (1 << (SqlBaseParser.UNSET - 160)) | (1 << (SqlBaseParser.TBLPROPERTIES - 160)) | (1 << (SqlBaseParser.DBPROPERTIES - 160)) | (1 << (SqlBaseParser.BUCKETS - 160)) | (1 << (SqlBaseParser.SKEWED - 160)) | (1 << (SqlBaseParser.STORED - 160)) | (1 << (SqlBaseParser.DIRECTORIES - 160)) | (1 << (SqlBaseParser.LOCATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (SqlBaseParser.EXCHANGE - 192)) | (1 << (SqlBaseParser.ARCHIVE - 192)) | (1 << (SqlBaseParser.UNARCHIVE - 192)) | (1 << (SqlBaseParser.FILEFORMAT - 192)) | (1 << (SqlBaseParser.TOUCH - 192)) | (1 << (SqlBaseParser.COMPACT - 192)) | (1 << (SqlBaseParser.CONCATENATE - 192)) | (1 << (SqlBaseParser.CHANGE - 192)) | (1 << (SqlBaseParser.CASCADE - 192)) | (1 << (SqlBaseParser.RESTRICT - 192)) | (1 << (SqlBaseParser.CLUSTERED - 192)) | (1 << (SqlBaseParser.SORTED - 192)) | (1 << (SqlBaseParser.PURGE - 192)) | (1 << (SqlBaseParser.INPUTFORMAT - 192)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 192)) | (1 << (SqlBaseParser.DATABASE - 192)) | (1 << (SqlBaseParser.DATABASES - 192)) | (1 << (SqlBaseParser.DFS - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.ANALYZE - 192)) | (1 << (SqlBaseParser.COMPUTE - 192)) | (1 << (SqlBaseParser.LIST - 192)) | (1 << (SqlBaseParser.STATISTICS - 192)) | (1 << (SqlBaseParser.PARTITIONED - 192)) | (1 << (SqlBaseParser.EXTERNAL - 192)) | (1 << (SqlBaseParser.DEFINED - 192)) | (1 << (SqlBaseParser.REVOKE - 192)) | (1 << (SqlBaseParser.GRANT - 192)) | (1 << (SqlBaseParser.LOCK - 192)) | (1 << (SqlBaseParser.UNLOCK - 192)) | (1 << (SqlBaseParser.MSCK - 192)) | (1 << (SqlBaseParser.REPAIR - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (SqlBaseParser.RECOVER - 224)) | (1 << (SqlBaseParser.EXPORT - 224)) | (1 << (SqlBaseParser.IMPORT - 224)) | (1 << (SqlBaseParser.LOAD - 224)) | (1 << (SqlBaseParser.ROLE - 224)) | (1 << (SqlBaseParser.ROLES - 224)) | (1 << (SqlBaseParser.COMPACTIONS - 224)) | (1 << (SqlBaseParser.PRINCIPALS - 224)) | (1 << (SqlBaseParser.TRANSACTIONS - 224)) | (1 << (SqlBaseParser.INDEX - 224)) | (1 << (SqlBaseParser.INDEXES - 224)) | (1 << (SqlBaseParser.LOCKS - 224)) | (1 << (SqlBaseParser.OPTION - 224)) | (1 << (SqlBaseParser.ANTI - 224)) | (1 << (SqlBaseParser.LOCAL - 224)) | (1 << (SqlBaseParser.INPATH - 224)) | (1 << (SqlBaseParser.STRING - 224)) | (1 << (SqlBaseParser.BIGINT_LITERAL - 224)) | (1 << (SqlBaseParser.SMALLINT_LITERAL - 224)) | (1 << (SqlBaseParser.TINYINT_LITERAL - 224)) | (1 << (SqlBaseParser.INTEGER_VALUE - 224)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 224)) | (1 << (SqlBaseParser.DOUBLE_LITERAL - 224)) | (1 << (SqlBaseParser.BIGDECIMAL_LITERAL - 224)) | (1 << (SqlBaseParser.IDENTIFIER - 224)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 224)))) !== 0)) {
                this.state = 1556;
                this.expression();
                this.state = 1561;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__3) {
                    this.state = 1557;
                    this.match(SqlBaseParser.T__3);
                    this.state = 1558;
                    this.expression();
                    this.state = 1563;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 1566;
            this.match(SqlBaseParser.T__2);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1567;
            this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PivotClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_pivotClause;
    this.aggregates = null; // NamedExpressionSeqContext
    this._pivotValue = null; // PivotValueContext
    this.pivotValues = []; // of PivotValueContexts
    return this;
}

PivotClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PivotClauseContext.prototype.constructor = PivotClauseContext;

PivotClauseContext.prototype.PIVOT = function() {
    return this.getToken(SqlBaseParser.PIVOT, 0);
};

PivotClauseContext.prototype.FOR = function() {
    return this.getToken(SqlBaseParser.FOR, 0);
};

PivotClauseContext.prototype.pivotColumn = function() {
    return this.getTypedRuleContext(PivotColumnContext,0);
};

PivotClauseContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};

PivotClauseContext.prototype.namedExpressionSeq = function() {
    return this.getTypedRuleContext(NamedExpressionSeqContext,0);
};

PivotClauseContext.prototype.pivotValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PivotValueContext);
    } else {
        return this.getTypedRuleContext(PivotValueContext,i);
    }
};

PivotClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitPivotClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.PivotClauseContext = PivotClauseContext;

SqlBaseParser.prototype.pivotClause = function() {

    var localctx = new PivotClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, SqlBaseParser.RULE_pivotClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1570;
        this.match(SqlBaseParser.PIVOT);
        this.state = 1571;
        this.match(SqlBaseParser.T__1);
        this.state = 1572;
        localctx.aggregates = this.namedExpressionSeq();
        this.state = 1573;
        this.match(SqlBaseParser.FOR);
        this.state = 1574;
        this.pivotColumn();
        this.state = 1575;
        this.match(SqlBaseParser.IN);
        this.state = 1576;
        this.match(SqlBaseParser.T__1);
        this.state = 1577;
        localctx._pivotValue = this.pivotValue();
        localctx.pivotValues.push(localctx._pivotValue);
        this.state = 1582;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__3) {
            this.state = 1578;
            this.match(SqlBaseParser.T__3);
            this.state = 1579;
            localctx._pivotValue = this.pivotValue();
            localctx.pivotValues.push(localctx._pivotValue);
            this.state = 1584;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1585;
        this.match(SqlBaseParser.T__2);
        this.state = 1586;
        this.match(SqlBaseParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PivotColumnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_pivotColumn;
    this._identifier = null; // IdentifierContext
    this.identifiers = []; // of IdentifierContexts
    return this;
}

PivotColumnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PivotColumnContext.prototype.constructor = PivotColumnContext;

PivotColumnContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

PivotColumnContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitPivotColumn(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.PivotColumnContext = PivotColumnContext;

SqlBaseParser.prototype.pivotColumn = function() {

    var localctx = new PivotColumnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, SqlBaseParser.RULE_pivotColumn);
    var _la = 0; // Token type
    try {
        this.state = 1600;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.SELECT:
        case SqlBaseParser.FROM:
        case SqlBaseParser.ADD:
        case SqlBaseParser.AS:
        case SqlBaseParser.ALL:
        case SqlBaseParser.ANY:
        case SqlBaseParser.DISTINCT:
        case SqlBaseParser.WHERE:
        case SqlBaseParser.GROUP:
        case SqlBaseParser.BY:
        case SqlBaseParser.GROUPING:
        case SqlBaseParser.SETS:
        case SqlBaseParser.CUBE:
        case SqlBaseParser.ROLLUP:
        case SqlBaseParser.ORDER:
        case SqlBaseParser.HAVING:
        case SqlBaseParser.LIMIT:
        case SqlBaseParser.AT:
        case SqlBaseParser.OR:
        case SqlBaseParser.AND:
        case SqlBaseParser.IN:
        case SqlBaseParser.NOT:
        case SqlBaseParser.NO:
        case SqlBaseParser.EXISTS:
        case SqlBaseParser.BETWEEN:
        case SqlBaseParser.LIKE:
        case SqlBaseParser.RLIKE:
        case SqlBaseParser.IS:
        case SqlBaseParser.NULL:
        case SqlBaseParser.TRUE:
        case SqlBaseParser.FALSE:
        case SqlBaseParser.NULLS:
        case SqlBaseParser.ASC:
        case SqlBaseParser.DESC:
        case SqlBaseParser.FOR:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.CASE:
        case SqlBaseParser.WHEN:
        case SqlBaseParser.THEN:
        case SqlBaseParser.ELSE:
        case SqlBaseParser.END:
        case SqlBaseParser.JOIN:
        case SqlBaseParser.CROSS:
        case SqlBaseParser.OUTER:
        case SqlBaseParser.INNER:
        case SqlBaseParser.LEFT:
        case SqlBaseParser.SEMI:
        case SqlBaseParser.RIGHT:
        case SqlBaseParser.FULL:
        case SqlBaseParser.NATURAL:
        case SqlBaseParser.ON:
        case SqlBaseParser.PIVOT:
        case SqlBaseParser.LATERAL:
        case SqlBaseParser.WINDOW:
        case SqlBaseParser.OVER:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.RANGE:
        case SqlBaseParser.ROWS:
        case SqlBaseParser.UNBOUNDED:
        case SqlBaseParser.PRECEDING:
        case SqlBaseParser.FOLLOWING:
        case SqlBaseParser.CURRENT:
        case SqlBaseParser.FIRST:
        case SqlBaseParser.AFTER:
        case SqlBaseParser.LAST:
        case SqlBaseParser.ROW:
        case SqlBaseParser.WITH:
        case SqlBaseParser.VALUES:
        case SqlBaseParser.CREATE:
        case SqlBaseParser.TABLE:
        case SqlBaseParser.DIRECTORY:
        case SqlBaseParser.VIEW:
        case SqlBaseParser.REPLACE:
        case SqlBaseParser.INSERT:
        case SqlBaseParser.DELETE:
        case SqlBaseParser.INTO:
        case SqlBaseParser.DESCRIBE:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.FORMAT:
        case SqlBaseParser.LOGICAL:
        case SqlBaseParser.CODEGEN:
        case SqlBaseParser.COST:
        case SqlBaseParser.CAST:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.USE:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.DROP:
        case SqlBaseParser.UNION:
        case SqlBaseParser.EXCEPT:
        case SqlBaseParser.SETMINUS:
        case SqlBaseParser.INTERSECT:
        case SqlBaseParser.TO:
        case SqlBaseParser.TABLESAMPLE:
        case SqlBaseParser.STRATIFY:
        case SqlBaseParser.ALTER:
        case SqlBaseParser.RENAME:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.MAP:
        case SqlBaseParser.STRUCT:
        case SqlBaseParser.COMMENT:
        case SqlBaseParser.SET:
        case SqlBaseParser.RESET:
        case SqlBaseParser.DATA:
        case SqlBaseParser.START:
        case SqlBaseParser.TRANSACTION:
        case SqlBaseParser.COMMIT:
        case SqlBaseParser.ROLLBACK:
        case SqlBaseParser.MACRO:
        case SqlBaseParser.IGNORE:
        case SqlBaseParser.BOTH:
        case SqlBaseParser.LEADING:
        case SqlBaseParser.TRAILING:
        case SqlBaseParser.IF:
        case SqlBaseParser.POSITION:
        case SqlBaseParser.EXTRACT:
        case SqlBaseParser.DIV:
        case SqlBaseParser.PERCENTLIT:
        case SqlBaseParser.BUCKET:
        case SqlBaseParser.OUT:
        case SqlBaseParser.OF:
        case SqlBaseParser.SORT:
        case SqlBaseParser.CLUSTER:
        case SqlBaseParser.DISTRIBUTE:
        case SqlBaseParser.OVERWRITE:
        case SqlBaseParser.TRANSFORM:
        case SqlBaseParser.REDUCE:
        case SqlBaseParser.SERDE:
        case SqlBaseParser.SERDEPROPERTIES:
        case SqlBaseParser.RECORDREADER:
        case SqlBaseParser.RECORDWRITER:
        case SqlBaseParser.DELIMITED:
        case SqlBaseParser.FIELDS:
        case SqlBaseParser.TERMINATED:
        case SqlBaseParser.COLLECTION:
        case SqlBaseParser.ITEMS:
        case SqlBaseParser.KEYS:
        case SqlBaseParser.ESCAPED:
        case SqlBaseParser.LINES:
        case SqlBaseParser.SEPARATED:
        case SqlBaseParser.SQLFUNCTION:
        case SqlBaseParser.EXTENDED:
        case SqlBaseParser.REFRESH:
        case SqlBaseParser.CLEAR:
        case SqlBaseParser.CACHE:
        case SqlBaseParser.UNCACHE:
        case SqlBaseParser.LAZY:
        case SqlBaseParser.FORMATTED:
        case SqlBaseParser.GLOBAL:
        case SqlBaseParser.TEMPORARY:
        case SqlBaseParser.OPTIONS:
        case SqlBaseParser.UNSET:
        case SqlBaseParser.TBLPROPERTIES:
        case SqlBaseParser.DBPROPERTIES:
        case SqlBaseParser.BUCKETS:
        case SqlBaseParser.SKEWED:
        case SqlBaseParser.STORED:
        case SqlBaseParser.DIRECTORIES:
        case SqlBaseParser.LOCATION:
        case SqlBaseParser.EXCHANGE:
        case SqlBaseParser.ARCHIVE:
        case SqlBaseParser.UNARCHIVE:
        case SqlBaseParser.FILEFORMAT:
        case SqlBaseParser.TOUCH:
        case SqlBaseParser.COMPACT:
        case SqlBaseParser.CONCATENATE:
        case SqlBaseParser.CHANGE:
        case SqlBaseParser.CASCADE:
        case SqlBaseParser.RESTRICT:
        case SqlBaseParser.CLUSTERED:
        case SqlBaseParser.SORTED:
        case SqlBaseParser.PURGE:
        case SqlBaseParser.INPUTFORMAT:
        case SqlBaseParser.OUTPUTFORMAT:
        case SqlBaseParser.DATABASE:
        case SqlBaseParser.DATABASES:
        case SqlBaseParser.DFS:
        case SqlBaseParser.TRUNCATE:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.COMPUTE:
        case SqlBaseParser.LIST:
        case SqlBaseParser.STATISTICS:
        case SqlBaseParser.PARTITIONED:
        case SqlBaseParser.EXTERNAL:
        case SqlBaseParser.DEFINED:
        case SqlBaseParser.REVOKE:
        case SqlBaseParser.GRANT:
        case SqlBaseParser.LOCK:
        case SqlBaseParser.UNLOCK:
        case SqlBaseParser.MSCK:
        case SqlBaseParser.REPAIR:
        case SqlBaseParser.RECOVER:
        case SqlBaseParser.EXPORT:
        case SqlBaseParser.IMPORT:
        case SqlBaseParser.LOAD:
        case SqlBaseParser.ROLE:
        case SqlBaseParser.ROLES:
        case SqlBaseParser.COMPACTIONS:
        case SqlBaseParser.PRINCIPALS:
        case SqlBaseParser.TRANSACTIONS:
        case SqlBaseParser.INDEX:
        case SqlBaseParser.INDEXES:
        case SqlBaseParser.LOCKS:
        case SqlBaseParser.OPTION:
        case SqlBaseParser.ANTI:
        case SqlBaseParser.LOCAL:
        case SqlBaseParser.INPATH:
        case SqlBaseParser.IDENTIFIER:
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1588;
            localctx._identifier = this.identifier();
            localctx.identifiers.push(localctx._identifier);
            break;
        case SqlBaseParser.T__1:
            this.enterOuterAlt(localctx, 2);
            this.state = 1589;
            this.match(SqlBaseParser.T__1);
            this.state = 1590;
            localctx._identifier = this.identifier();
            localctx.identifiers.push(localctx._identifier);
            this.state = 1595;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__3) {
                this.state = 1591;
                this.match(SqlBaseParser.T__3);
                this.state = 1592;
                localctx._identifier = this.identifier();
                localctx.identifiers.push(localctx._identifier);
                this.state = 1597;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1598;
            this.match(SqlBaseParser.T__2);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PivotValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_pivotValue;
    return this;
}

PivotValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PivotValueContext.prototype.constructor = PivotValueContext;

PivotValueContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PivotValueContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PivotValueContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

PivotValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitPivotValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.PivotValueContext = PivotValueContext;

SqlBaseParser.prototype.pivotValue = function() {

    var localctx = new PivotValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, SqlBaseParser.RULE_pivotValue);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1602;
        this.expression();
        this.state = 1607;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.NOT - 32)) | (1 << (SqlBaseParser.NO - 32)) | (1 << (SqlBaseParser.EXISTS - 32)) | (1 << (SqlBaseParser.BETWEEN - 32)) | (1 << (SqlBaseParser.LIKE - 32)) | (1 << (SqlBaseParser.RLIKE - 32)) | (1 << (SqlBaseParser.IS - 32)) | (1 << (SqlBaseParser.NULL - 32)) | (1 << (SqlBaseParser.TRUE - 32)) | (1 << (SqlBaseParser.FALSE - 32)) | (1 << (SqlBaseParser.NULLS - 32)) | (1 << (SqlBaseParser.ASC - 32)) | (1 << (SqlBaseParser.DESC - 32)) | (1 << (SqlBaseParser.FOR - 32)) | (1 << (SqlBaseParser.INTERVAL - 32)) | (1 << (SqlBaseParser.CASE - 32)) | (1 << (SqlBaseParser.WHEN - 32)) | (1 << (SqlBaseParser.THEN - 32)) | (1 << (SqlBaseParser.ELSE - 32)) | (1 << (SqlBaseParser.END - 32)) | (1 << (SqlBaseParser.JOIN - 32)) | (1 << (SqlBaseParser.CROSS - 32)) | (1 << (SqlBaseParser.OUTER - 32)) | (1 << (SqlBaseParser.INNER - 32)) | (1 << (SqlBaseParser.LEFT - 32)) | (1 << (SqlBaseParser.SEMI - 32)) | (1 << (SqlBaseParser.RIGHT - 32)) | (1 << (SqlBaseParser.FULL - 32)) | (1 << (SqlBaseParser.NATURAL - 32)) | (1 << (SqlBaseParser.ON - 32)) | (1 << (SqlBaseParser.PIVOT - 32)) | (1 << (SqlBaseParser.LATERAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlBaseParser.WINDOW - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.DIRECTORY - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlBaseParser.COLUMNS - 96)) | (1 << (SqlBaseParser.COLUMN - 96)) | (1 << (SqlBaseParser.USE - 96)) | (1 << (SqlBaseParser.PARTITIONS - 96)) | (1 << (SqlBaseParser.FUNCTIONS - 96)) | (1 << (SqlBaseParser.DROP - 96)) | (1 << (SqlBaseParser.UNION - 96)) | (1 << (SqlBaseParser.EXCEPT - 96)) | (1 << (SqlBaseParser.SETMINUS - 96)) | (1 << (SqlBaseParser.INTERSECT - 96)) | (1 << (SqlBaseParser.TO - 96)) | (1 << (SqlBaseParser.TABLESAMPLE - 96)) | (1 << (SqlBaseParser.STRATIFY - 96)) | (1 << (SqlBaseParser.ALTER - 96)) | (1 << (SqlBaseParser.RENAME - 96)) | (1 << (SqlBaseParser.ARRAY - 96)) | (1 << (SqlBaseParser.MAP - 96)) | (1 << (SqlBaseParser.STRUCT - 96)) | (1 << (SqlBaseParser.COMMENT - 96)) | (1 << (SqlBaseParser.SET - 96)) | (1 << (SqlBaseParser.RESET - 96)) | (1 << (SqlBaseParser.DATA - 96)) | (1 << (SqlBaseParser.START - 96)) | (1 << (SqlBaseParser.TRANSACTION - 96)) | (1 << (SqlBaseParser.COMMIT - 96)) | (1 << (SqlBaseParser.ROLLBACK - 96)) | (1 << (SqlBaseParser.MACRO - 96)) | (1 << (SqlBaseParser.IGNORE - 96)) | (1 << (SqlBaseParser.BOTH - 96)) | (1 << (SqlBaseParser.LEADING - 96)) | (1 << (SqlBaseParser.TRAILING - 96)) | (1 << (SqlBaseParser.IF - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.EXTRACT - 128)) | (1 << (SqlBaseParser.DIV - 128)) | (1 << (SqlBaseParser.PERCENTLIT - 128)) | (1 << (SqlBaseParser.BUCKET - 128)) | (1 << (SqlBaseParser.OUT - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.SORT - 128)) | (1 << (SqlBaseParser.CLUSTER - 128)) | (1 << (SqlBaseParser.DISTRIBUTE - 128)) | (1 << (SqlBaseParser.OVERWRITE - 128)) | (1 << (SqlBaseParser.TRANSFORM - 128)) | (1 << (SqlBaseParser.REDUCE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlBaseParser.SERDE - 160)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 160)) | (1 << (SqlBaseParser.RECORDREADER - 160)) | (1 << (SqlBaseParser.RECORDWRITER - 160)) | (1 << (SqlBaseParser.DELIMITED - 160)) | (1 << (SqlBaseParser.FIELDS - 160)) | (1 << (SqlBaseParser.TERMINATED - 160)) | (1 << (SqlBaseParser.COLLECTION - 160)) | (1 << (SqlBaseParser.ITEMS - 160)) | (1 << (SqlBaseParser.KEYS - 160)) | (1 << (SqlBaseParser.ESCAPED - 160)) | (1 << (SqlBaseParser.LINES - 160)) | (1 << (SqlBaseParser.SEPARATED - 160)) | (1 << (SqlBaseParser.SQLFUNCTION - 160)) | (1 << (SqlBaseParser.EXTENDED - 160)) | (1 << (SqlBaseParser.REFRESH - 160)) | (1 << (SqlBaseParser.CLEAR - 160)) | (1 << (SqlBaseParser.CACHE - 160)) | (1 << (SqlBaseParser.UNCACHE - 160)) | (1 << (SqlBaseParser.LAZY - 160)) | (1 << (SqlBaseParser.FORMATTED - 160)) | (1 << (SqlBaseParser.GLOBAL - 160)) | (1 << (SqlBaseParser.TEMPORARY - 160)) | (1 << (SqlBaseParser.OPTIONS - 160)) | (1 << (SqlBaseParser.UNSET - 160)) | (1 << (SqlBaseParser.TBLPROPERTIES - 160)) | (1 << (SqlBaseParser.DBPROPERTIES - 160)) | (1 << (SqlBaseParser.BUCKETS - 160)) | (1 << (SqlBaseParser.SKEWED - 160)) | (1 << (SqlBaseParser.STORED - 160)) | (1 << (SqlBaseParser.DIRECTORIES - 160)) | (1 << (SqlBaseParser.LOCATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (SqlBaseParser.EXCHANGE - 192)) | (1 << (SqlBaseParser.ARCHIVE - 192)) | (1 << (SqlBaseParser.UNARCHIVE - 192)) | (1 << (SqlBaseParser.FILEFORMAT - 192)) | (1 << (SqlBaseParser.TOUCH - 192)) | (1 << (SqlBaseParser.COMPACT - 192)) | (1 << (SqlBaseParser.CONCATENATE - 192)) | (1 << (SqlBaseParser.CHANGE - 192)) | (1 << (SqlBaseParser.CASCADE - 192)) | (1 << (SqlBaseParser.RESTRICT - 192)) | (1 << (SqlBaseParser.CLUSTERED - 192)) | (1 << (SqlBaseParser.SORTED - 192)) | (1 << (SqlBaseParser.PURGE - 192)) | (1 << (SqlBaseParser.INPUTFORMAT - 192)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 192)) | (1 << (SqlBaseParser.DATABASE - 192)) | (1 << (SqlBaseParser.DATABASES - 192)) | (1 << (SqlBaseParser.DFS - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.ANALYZE - 192)) | (1 << (SqlBaseParser.COMPUTE - 192)) | (1 << (SqlBaseParser.LIST - 192)) | (1 << (SqlBaseParser.STATISTICS - 192)) | (1 << (SqlBaseParser.PARTITIONED - 192)) | (1 << (SqlBaseParser.EXTERNAL - 192)) | (1 << (SqlBaseParser.DEFINED - 192)) | (1 << (SqlBaseParser.REVOKE - 192)) | (1 << (SqlBaseParser.GRANT - 192)) | (1 << (SqlBaseParser.LOCK - 192)) | (1 << (SqlBaseParser.UNLOCK - 192)) | (1 << (SqlBaseParser.MSCK - 192)) | (1 << (SqlBaseParser.REPAIR - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (SqlBaseParser.RECOVER - 224)) | (1 << (SqlBaseParser.EXPORT - 224)) | (1 << (SqlBaseParser.IMPORT - 224)) | (1 << (SqlBaseParser.LOAD - 224)) | (1 << (SqlBaseParser.ROLE - 224)) | (1 << (SqlBaseParser.ROLES - 224)) | (1 << (SqlBaseParser.COMPACTIONS - 224)) | (1 << (SqlBaseParser.PRINCIPALS - 224)) | (1 << (SqlBaseParser.TRANSACTIONS - 224)) | (1 << (SqlBaseParser.INDEX - 224)) | (1 << (SqlBaseParser.INDEXES - 224)) | (1 << (SqlBaseParser.LOCKS - 224)) | (1 << (SqlBaseParser.OPTION - 224)) | (1 << (SqlBaseParser.ANTI - 224)) | (1 << (SqlBaseParser.LOCAL - 224)) | (1 << (SqlBaseParser.INPATH - 224)) | (1 << (SqlBaseParser.IDENTIFIER - 224)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 224)))) !== 0)) {
            this.state = 1604;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,203,this._ctx);
            if(la_===1) {
                this.state = 1603;
                this.match(SqlBaseParser.AS);

            }
            this.state = 1606;
            this.identifier();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LateralViewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_lateralView;
    this.tblName = null; // IdentifierContext
    this._identifier = null; // IdentifierContext
    this.colName = []; // of IdentifierContexts
    return this;
}

LateralViewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LateralViewContext.prototype.constructor = LateralViewContext;

LateralViewContext.prototype.LATERAL = function() {
    return this.getToken(SqlBaseParser.LATERAL, 0);
};

LateralViewContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};

LateralViewContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

LateralViewContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

LateralViewContext.prototype.OUTER = function() {
    return this.getToken(SqlBaseParser.OUTER, 0);
};

LateralViewContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

LateralViewContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

LateralViewContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitLateralView(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.LateralViewContext = LateralViewContext;

SqlBaseParser.prototype.lateralView = function() {

    var localctx = new LateralViewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, SqlBaseParser.RULE_lateralView);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1609;
        this.match(SqlBaseParser.LATERAL);
        this.state = 1610;
        this.match(SqlBaseParser.VIEW);
        this.state = 1612;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,205,this._ctx);
        if(la_===1) {
            this.state = 1611;
            this.match(SqlBaseParser.OUTER);

        }
        this.state = 1614;
        this.qualifiedName();
        this.state = 1615;
        this.match(SqlBaseParser.T__1);
        this.state = 1624;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.NOT - 32)) | (1 << (SqlBaseParser.NO - 32)) | (1 << (SqlBaseParser.EXISTS - 32)) | (1 << (SqlBaseParser.BETWEEN - 32)) | (1 << (SqlBaseParser.LIKE - 32)) | (1 << (SqlBaseParser.RLIKE - 32)) | (1 << (SqlBaseParser.IS - 32)) | (1 << (SqlBaseParser.NULL - 32)) | (1 << (SqlBaseParser.TRUE - 32)) | (1 << (SqlBaseParser.FALSE - 32)) | (1 << (SqlBaseParser.NULLS - 32)) | (1 << (SqlBaseParser.ASC - 32)) | (1 << (SqlBaseParser.DESC - 32)) | (1 << (SqlBaseParser.FOR - 32)) | (1 << (SqlBaseParser.INTERVAL - 32)) | (1 << (SqlBaseParser.CASE - 32)) | (1 << (SqlBaseParser.WHEN - 32)) | (1 << (SqlBaseParser.THEN - 32)) | (1 << (SqlBaseParser.ELSE - 32)) | (1 << (SqlBaseParser.END - 32)) | (1 << (SqlBaseParser.JOIN - 32)) | (1 << (SqlBaseParser.CROSS - 32)) | (1 << (SqlBaseParser.OUTER - 32)) | (1 << (SqlBaseParser.INNER - 32)) | (1 << (SqlBaseParser.LEFT - 32)) | (1 << (SqlBaseParser.SEMI - 32)) | (1 << (SqlBaseParser.RIGHT - 32)) | (1 << (SqlBaseParser.FULL - 32)) | (1 << (SqlBaseParser.NATURAL - 32)) | (1 << (SqlBaseParser.ON - 32)) | (1 << (SqlBaseParser.PIVOT - 32)) | (1 << (SqlBaseParser.LATERAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlBaseParser.WINDOW - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.DIRECTORY - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlBaseParser.COLUMNS - 96)) | (1 << (SqlBaseParser.COLUMN - 96)) | (1 << (SqlBaseParser.USE - 96)) | (1 << (SqlBaseParser.PARTITIONS - 96)) | (1 << (SqlBaseParser.FUNCTIONS - 96)) | (1 << (SqlBaseParser.DROP - 96)) | (1 << (SqlBaseParser.UNION - 96)) | (1 << (SqlBaseParser.EXCEPT - 96)) | (1 << (SqlBaseParser.SETMINUS - 96)) | (1 << (SqlBaseParser.INTERSECT - 96)) | (1 << (SqlBaseParser.TO - 96)) | (1 << (SqlBaseParser.TABLESAMPLE - 96)) | (1 << (SqlBaseParser.STRATIFY - 96)) | (1 << (SqlBaseParser.ALTER - 96)) | (1 << (SqlBaseParser.RENAME - 96)) | (1 << (SqlBaseParser.ARRAY - 96)) | (1 << (SqlBaseParser.MAP - 96)) | (1 << (SqlBaseParser.STRUCT - 96)) | (1 << (SqlBaseParser.COMMENT - 96)) | (1 << (SqlBaseParser.SET - 96)) | (1 << (SqlBaseParser.RESET - 96)) | (1 << (SqlBaseParser.DATA - 96)) | (1 << (SqlBaseParser.START - 96)) | (1 << (SqlBaseParser.TRANSACTION - 96)) | (1 << (SqlBaseParser.COMMIT - 96)) | (1 << (SqlBaseParser.ROLLBACK - 96)) | (1 << (SqlBaseParser.MACRO - 96)) | (1 << (SqlBaseParser.IGNORE - 96)) | (1 << (SqlBaseParser.BOTH - 96)) | (1 << (SqlBaseParser.LEADING - 96)) | (1 << (SqlBaseParser.TRAILING - 96)) | (1 << (SqlBaseParser.IF - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.EXTRACT - 128)) | (1 << (SqlBaseParser.PLUS - 128)) | (1 << (SqlBaseParser.MINUS - 128)) | (1 << (SqlBaseParser.ASTERISK - 128)) | (1 << (SqlBaseParser.DIV - 128)) | (1 << (SqlBaseParser.TILDE - 128)) | (1 << (SqlBaseParser.PERCENTLIT - 128)) | (1 << (SqlBaseParser.BUCKET - 128)) | (1 << (SqlBaseParser.OUT - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.SORT - 128)) | (1 << (SqlBaseParser.CLUSTER - 128)) | (1 << (SqlBaseParser.DISTRIBUTE - 128)) | (1 << (SqlBaseParser.OVERWRITE - 128)) | (1 << (SqlBaseParser.TRANSFORM - 128)) | (1 << (SqlBaseParser.REDUCE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlBaseParser.SERDE - 160)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 160)) | (1 << (SqlBaseParser.RECORDREADER - 160)) | (1 << (SqlBaseParser.RECORDWRITER - 160)) | (1 << (SqlBaseParser.DELIMITED - 160)) | (1 << (SqlBaseParser.FIELDS - 160)) | (1 << (SqlBaseParser.TERMINATED - 160)) | (1 << (SqlBaseParser.COLLECTION - 160)) | (1 << (SqlBaseParser.ITEMS - 160)) | (1 << (SqlBaseParser.KEYS - 160)) | (1 << (SqlBaseParser.ESCAPED - 160)) | (1 << (SqlBaseParser.LINES - 160)) | (1 << (SqlBaseParser.SEPARATED - 160)) | (1 << (SqlBaseParser.SQLFUNCTION - 160)) | (1 << (SqlBaseParser.EXTENDED - 160)) | (1 << (SqlBaseParser.REFRESH - 160)) | (1 << (SqlBaseParser.CLEAR - 160)) | (1 << (SqlBaseParser.CACHE - 160)) | (1 << (SqlBaseParser.UNCACHE - 160)) | (1 << (SqlBaseParser.LAZY - 160)) | (1 << (SqlBaseParser.FORMATTED - 160)) | (1 << (SqlBaseParser.GLOBAL - 160)) | (1 << (SqlBaseParser.TEMPORARY - 160)) | (1 << (SqlBaseParser.OPTIONS - 160)) | (1 << (SqlBaseParser.UNSET - 160)) | (1 << (SqlBaseParser.TBLPROPERTIES - 160)) | (1 << (SqlBaseParser.DBPROPERTIES - 160)) | (1 << (SqlBaseParser.BUCKETS - 160)) | (1 << (SqlBaseParser.SKEWED - 160)) | (1 << (SqlBaseParser.STORED - 160)) | (1 << (SqlBaseParser.DIRECTORIES - 160)) | (1 << (SqlBaseParser.LOCATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (SqlBaseParser.EXCHANGE - 192)) | (1 << (SqlBaseParser.ARCHIVE - 192)) | (1 << (SqlBaseParser.UNARCHIVE - 192)) | (1 << (SqlBaseParser.FILEFORMAT - 192)) | (1 << (SqlBaseParser.TOUCH - 192)) | (1 << (SqlBaseParser.COMPACT - 192)) | (1 << (SqlBaseParser.CONCATENATE - 192)) | (1 << (SqlBaseParser.CHANGE - 192)) | (1 << (SqlBaseParser.CASCADE - 192)) | (1 << (SqlBaseParser.RESTRICT - 192)) | (1 << (SqlBaseParser.CLUSTERED - 192)) | (1 << (SqlBaseParser.SORTED - 192)) | (1 << (SqlBaseParser.PURGE - 192)) | (1 << (SqlBaseParser.INPUTFORMAT - 192)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 192)) | (1 << (SqlBaseParser.DATABASE - 192)) | (1 << (SqlBaseParser.DATABASES - 192)) | (1 << (SqlBaseParser.DFS - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.ANALYZE - 192)) | (1 << (SqlBaseParser.COMPUTE - 192)) | (1 << (SqlBaseParser.LIST - 192)) | (1 << (SqlBaseParser.STATISTICS - 192)) | (1 << (SqlBaseParser.PARTITIONED - 192)) | (1 << (SqlBaseParser.EXTERNAL - 192)) | (1 << (SqlBaseParser.DEFINED - 192)) | (1 << (SqlBaseParser.REVOKE - 192)) | (1 << (SqlBaseParser.GRANT - 192)) | (1 << (SqlBaseParser.LOCK - 192)) | (1 << (SqlBaseParser.UNLOCK - 192)) | (1 << (SqlBaseParser.MSCK - 192)) | (1 << (SqlBaseParser.REPAIR - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (SqlBaseParser.RECOVER - 224)) | (1 << (SqlBaseParser.EXPORT - 224)) | (1 << (SqlBaseParser.IMPORT - 224)) | (1 << (SqlBaseParser.LOAD - 224)) | (1 << (SqlBaseParser.ROLE - 224)) | (1 << (SqlBaseParser.ROLES - 224)) | (1 << (SqlBaseParser.COMPACTIONS - 224)) | (1 << (SqlBaseParser.PRINCIPALS - 224)) | (1 << (SqlBaseParser.TRANSACTIONS - 224)) | (1 << (SqlBaseParser.INDEX - 224)) | (1 << (SqlBaseParser.INDEXES - 224)) | (1 << (SqlBaseParser.LOCKS - 224)) | (1 << (SqlBaseParser.OPTION - 224)) | (1 << (SqlBaseParser.ANTI - 224)) | (1 << (SqlBaseParser.LOCAL - 224)) | (1 << (SqlBaseParser.INPATH - 224)) | (1 << (SqlBaseParser.STRING - 224)) | (1 << (SqlBaseParser.BIGINT_LITERAL - 224)) | (1 << (SqlBaseParser.SMALLINT_LITERAL - 224)) | (1 << (SqlBaseParser.TINYINT_LITERAL - 224)) | (1 << (SqlBaseParser.INTEGER_VALUE - 224)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 224)) | (1 << (SqlBaseParser.DOUBLE_LITERAL - 224)) | (1 << (SqlBaseParser.BIGDECIMAL_LITERAL - 224)) | (1 << (SqlBaseParser.IDENTIFIER - 224)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 224)))) !== 0)) {
            this.state = 1616;
            this.expression();
            this.state = 1621;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__3) {
                this.state = 1617;
                this.match(SqlBaseParser.T__3);
                this.state = 1618;
                this.expression();
                this.state = 1623;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1626;
        this.match(SqlBaseParser.T__2);
        this.state = 1627;
        localctx.tblName = this.identifier();
        this.state = 1639;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,210,this._ctx);
        if(la_===1) {
            this.state = 1629;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,208,this._ctx);
            if(la_===1) {
                this.state = 1628;
                this.match(SqlBaseParser.AS);

            }
            this.state = 1631;
            localctx._identifier = this.identifier();
            localctx.colName.push(localctx._identifier);
            this.state = 1636;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,209,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1632;
                    this.match(SqlBaseParser.T__3);
                    this.state = 1633;
                    localctx._identifier = this.identifier();
                    localctx.colName.push(localctx._identifier); 
                }
                this.state = 1638;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,209,this._ctx);
            }


        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SetQuantifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_setQuantifier;
    return this;
}

SetQuantifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetQuantifierContext.prototype.constructor = SetQuantifierContext;

SetQuantifierContext.prototype.DISTINCT = function() {
    return this.getToken(SqlBaseParser.DISTINCT, 0);
};

SetQuantifierContext.prototype.ALL = function() {
    return this.getToken(SqlBaseParser.ALL, 0);
};

SetQuantifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitSetQuantifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.SetQuantifierContext = SetQuantifierContext;

SqlBaseParser.prototype.setQuantifier = function() {

    var localctx = new SetQuantifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, SqlBaseParser.RULE_setQuantifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1641;
        _la = this._input.LA(1);
        if(!(_la===SqlBaseParser.ALL || _la===SqlBaseParser.DISTINCT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_relation;
    return this;
}

RelationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationContext.prototype.constructor = RelationContext;

RelationContext.prototype.relationPrimary = function() {
    return this.getTypedRuleContext(RelationPrimaryContext,0);
};

RelationContext.prototype.joinRelation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JoinRelationContext);
    } else {
        return this.getTypedRuleContext(JoinRelationContext,i);
    }
};

RelationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitRelation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.RelationContext = RelationContext;

SqlBaseParser.prototype.relation = function() {

    var localctx = new RelationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, SqlBaseParser.RULE_relation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1643;
        this.relationPrimary();
        this.state = 1647;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,211,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1644;
                this.joinRelation(); 
            }
            this.state = 1649;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,211,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function JoinRelationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_joinRelation;
    this.right = null; // RelationPrimaryContext
    return this;
}

JoinRelationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinRelationContext.prototype.constructor = JoinRelationContext;

JoinRelationContext.prototype.JOIN = function() {
    return this.getToken(SqlBaseParser.JOIN, 0);
};

JoinRelationContext.prototype.relationPrimary = function() {
    return this.getTypedRuleContext(RelationPrimaryContext,0);
};

JoinRelationContext.prototype.joinType = function() {
    return this.getTypedRuleContext(JoinTypeContext,0);
};

JoinRelationContext.prototype.joinCriteria = function() {
    return this.getTypedRuleContext(JoinCriteriaContext,0);
};

JoinRelationContext.prototype.NATURAL = function() {
    return this.getToken(SqlBaseParser.NATURAL, 0);
};

JoinRelationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitJoinRelation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.JoinRelationContext = JoinRelationContext;

SqlBaseParser.prototype.joinRelation = function() {

    var localctx = new JoinRelationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, SqlBaseParser.RULE_joinRelation);
    try {
        this.state = 1661;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.JOIN:
        case SqlBaseParser.CROSS:
        case SqlBaseParser.INNER:
        case SqlBaseParser.LEFT:
        case SqlBaseParser.RIGHT:
        case SqlBaseParser.FULL:
        case SqlBaseParser.ANTI:
            this.enterOuterAlt(localctx, 1);
            this.state = 1650;
            this.joinType();
            this.state = 1651;
            this.match(SqlBaseParser.JOIN);
            this.state = 1652;
            localctx.right = this.relationPrimary();
            this.state = 1654;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,212,this._ctx);
            if(la_===1) {
                this.state = 1653;
                this.joinCriteria();

            }
            break;
        case SqlBaseParser.NATURAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1656;
            this.match(SqlBaseParser.NATURAL);
            this.state = 1657;
            this.joinType();
            this.state = 1658;
            this.match(SqlBaseParser.JOIN);
            this.state = 1659;
            localctx.right = this.relationPrimary();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function JoinTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_joinType;
    return this;
}

JoinTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinTypeContext.prototype.constructor = JoinTypeContext;

JoinTypeContext.prototype.INNER = function() {
    return this.getToken(SqlBaseParser.INNER, 0);
};

JoinTypeContext.prototype.CROSS = function() {
    return this.getToken(SqlBaseParser.CROSS, 0);
};

JoinTypeContext.prototype.LEFT = function() {
    return this.getToken(SqlBaseParser.LEFT, 0);
};

JoinTypeContext.prototype.OUTER = function() {
    return this.getToken(SqlBaseParser.OUTER, 0);
};

JoinTypeContext.prototype.SEMI = function() {
    return this.getToken(SqlBaseParser.SEMI, 0);
};

JoinTypeContext.prototype.RIGHT = function() {
    return this.getToken(SqlBaseParser.RIGHT, 0);
};

JoinTypeContext.prototype.FULL = function() {
    return this.getToken(SqlBaseParser.FULL, 0);
};

JoinTypeContext.prototype.ANTI = function() {
    return this.getToken(SqlBaseParser.ANTI, 0);
};

JoinTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitJoinType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.JoinTypeContext = JoinTypeContext;

SqlBaseParser.prototype.joinType = function() {

    var localctx = new JoinTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, SqlBaseParser.RULE_joinType);
    var _la = 0; // Token type
    try {
        this.state = 1685;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,219,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1664;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.INNER) {
                this.state = 1663;
                this.match(SqlBaseParser.INNER);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1666;
            this.match(SqlBaseParser.CROSS);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1667;
            this.match(SqlBaseParser.LEFT);
            this.state = 1669;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OUTER) {
                this.state = 1668;
                this.match(SqlBaseParser.OUTER);
            }

            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1671;
            this.match(SqlBaseParser.LEFT);
            this.state = 1672;
            this.match(SqlBaseParser.SEMI);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1673;
            this.match(SqlBaseParser.RIGHT);
            this.state = 1675;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OUTER) {
                this.state = 1674;
                this.match(SqlBaseParser.OUTER);
            }

            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1677;
            this.match(SqlBaseParser.FULL);
            this.state = 1679;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OUTER) {
                this.state = 1678;
                this.match(SqlBaseParser.OUTER);
            }

            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1682;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.LEFT) {
                this.state = 1681;
                this.match(SqlBaseParser.LEFT);
            }

            this.state = 1684;
            this.match(SqlBaseParser.ANTI);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function JoinCriteriaContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_joinCriteria;
    return this;
}

JoinCriteriaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinCriteriaContext.prototype.constructor = JoinCriteriaContext;

JoinCriteriaContext.prototype.ON = function() {
    return this.getToken(SqlBaseParser.ON, 0);
};

JoinCriteriaContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};

JoinCriteriaContext.prototype.USING = function() {
    return this.getToken(SqlBaseParser.USING, 0);
};

JoinCriteriaContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

JoinCriteriaContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitJoinCriteria(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.JoinCriteriaContext = JoinCriteriaContext;

SqlBaseParser.prototype.joinCriteria = function() {

    var localctx = new JoinCriteriaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, SqlBaseParser.RULE_joinCriteria);
    var _la = 0; // Token type
    try {
        this.state = 1701;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.ON:
            this.enterOuterAlt(localctx, 1);
            this.state = 1687;
            this.match(SqlBaseParser.ON);
            this.state = 1688;
            this.booleanExpression(0);
            break;
        case SqlBaseParser.USING:
            this.enterOuterAlt(localctx, 2);
            this.state = 1689;
            this.match(SqlBaseParser.USING);
            this.state = 1690;
            this.match(SqlBaseParser.T__1);
            this.state = 1691;
            this.identifier();
            this.state = 1696;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__3) {
                this.state = 1692;
                this.match(SqlBaseParser.T__3);
                this.state = 1693;
                this.identifier();
                this.state = 1698;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1699;
            this.match(SqlBaseParser.T__2);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SampleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_sample;
    return this;
}

SampleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SampleContext.prototype.constructor = SampleContext;

SampleContext.prototype.TABLESAMPLE = function() {
    return this.getToken(SqlBaseParser.TABLESAMPLE, 0);
};

SampleContext.prototype.sampleMethod = function() {
    return this.getTypedRuleContext(SampleMethodContext,0);
};

SampleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitSample(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.SampleContext = SampleContext;

SqlBaseParser.prototype.sample = function() {

    var localctx = new SampleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, SqlBaseParser.RULE_sample);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1703;
        this.match(SqlBaseParser.TABLESAMPLE);
        this.state = 1704;
        this.match(SqlBaseParser.T__1);
        this.state = 1706;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.NOT - 32)) | (1 << (SqlBaseParser.NO - 32)) | (1 << (SqlBaseParser.EXISTS - 32)) | (1 << (SqlBaseParser.BETWEEN - 32)) | (1 << (SqlBaseParser.LIKE - 32)) | (1 << (SqlBaseParser.RLIKE - 32)) | (1 << (SqlBaseParser.IS - 32)) | (1 << (SqlBaseParser.NULL - 32)) | (1 << (SqlBaseParser.TRUE - 32)) | (1 << (SqlBaseParser.FALSE - 32)) | (1 << (SqlBaseParser.NULLS - 32)) | (1 << (SqlBaseParser.ASC - 32)) | (1 << (SqlBaseParser.DESC - 32)) | (1 << (SqlBaseParser.FOR - 32)) | (1 << (SqlBaseParser.INTERVAL - 32)) | (1 << (SqlBaseParser.CASE - 32)) | (1 << (SqlBaseParser.WHEN - 32)) | (1 << (SqlBaseParser.THEN - 32)) | (1 << (SqlBaseParser.ELSE - 32)) | (1 << (SqlBaseParser.END - 32)) | (1 << (SqlBaseParser.JOIN - 32)) | (1 << (SqlBaseParser.CROSS - 32)) | (1 << (SqlBaseParser.OUTER - 32)) | (1 << (SqlBaseParser.INNER - 32)) | (1 << (SqlBaseParser.LEFT - 32)) | (1 << (SqlBaseParser.SEMI - 32)) | (1 << (SqlBaseParser.RIGHT - 32)) | (1 << (SqlBaseParser.FULL - 32)) | (1 << (SqlBaseParser.NATURAL - 32)) | (1 << (SqlBaseParser.ON - 32)) | (1 << (SqlBaseParser.PIVOT - 32)) | (1 << (SqlBaseParser.LATERAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlBaseParser.WINDOW - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.DIRECTORY - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlBaseParser.COLUMNS - 96)) | (1 << (SqlBaseParser.COLUMN - 96)) | (1 << (SqlBaseParser.USE - 96)) | (1 << (SqlBaseParser.PARTITIONS - 96)) | (1 << (SqlBaseParser.FUNCTIONS - 96)) | (1 << (SqlBaseParser.DROP - 96)) | (1 << (SqlBaseParser.UNION - 96)) | (1 << (SqlBaseParser.EXCEPT - 96)) | (1 << (SqlBaseParser.SETMINUS - 96)) | (1 << (SqlBaseParser.INTERSECT - 96)) | (1 << (SqlBaseParser.TO - 96)) | (1 << (SqlBaseParser.TABLESAMPLE - 96)) | (1 << (SqlBaseParser.STRATIFY - 96)) | (1 << (SqlBaseParser.ALTER - 96)) | (1 << (SqlBaseParser.RENAME - 96)) | (1 << (SqlBaseParser.ARRAY - 96)) | (1 << (SqlBaseParser.MAP - 96)) | (1 << (SqlBaseParser.STRUCT - 96)) | (1 << (SqlBaseParser.COMMENT - 96)) | (1 << (SqlBaseParser.SET - 96)) | (1 << (SqlBaseParser.RESET - 96)) | (1 << (SqlBaseParser.DATA - 96)) | (1 << (SqlBaseParser.START - 96)) | (1 << (SqlBaseParser.TRANSACTION - 96)) | (1 << (SqlBaseParser.COMMIT - 96)) | (1 << (SqlBaseParser.ROLLBACK - 96)) | (1 << (SqlBaseParser.MACRO - 96)) | (1 << (SqlBaseParser.IGNORE - 96)) | (1 << (SqlBaseParser.BOTH - 96)) | (1 << (SqlBaseParser.LEADING - 96)) | (1 << (SqlBaseParser.TRAILING - 96)) | (1 << (SqlBaseParser.IF - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.EXTRACT - 128)) | (1 << (SqlBaseParser.PLUS - 128)) | (1 << (SqlBaseParser.MINUS - 128)) | (1 << (SqlBaseParser.ASTERISK - 128)) | (1 << (SqlBaseParser.DIV - 128)) | (1 << (SqlBaseParser.TILDE - 128)) | (1 << (SqlBaseParser.PERCENTLIT - 128)) | (1 << (SqlBaseParser.BUCKET - 128)) | (1 << (SqlBaseParser.OUT - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.SORT - 128)) | (1 << (SqlBaseParser.CLUSTER - 128)) | (1 << (SqlBaseParser.DISTRIBUTE - 128)) | (1 << (SqlBaseParser.OVERWRITE - 128)) | (1 << (SqlBaseParser.TRANSFORM - 128)) | (1 << (SqlBaseParser.REDUCE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlBaseParser.SERDE - 160)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 160)) | (1 << (SqlBaseParser.RECORDREADER - 160)) | (1 << (SqlBaseParser.RECORDWRITER - 160)) | (1 << (SqlBaseParser.DELIMITED - 160)) | (1 << (SqlBaseParser.FIELDS - 160)) | (1 << (SqlBaseParser.TERMINATED - 160)) | (1 << (SqlBaseParser.COLLECTION - 160)) | (1 << (SqlBaseParser.ITEMS - 160)) | (1 << (SqlBaseParser.KEYS - 160)) | (1 << (SqlBaseParser.ESCAPED - 160)) | (1 << (SqlBaseParser.LINES - 160)) | (1 << (SqlBaseParser.SEPARATED - 160)) | (1 << (SqlBaseParser.SQLFUNCTION - 160)) | (1 << (SqlBaseParser.EXTENDED - 160)) | (1 << (SqlBaseParser.REFRESH - 160)) | (1 << (SqlBaseParser.CLEAR - 160)) | (1 << (SqlBaseParser.CACHE - 160)) | (1 << (SqlBaseParser.UNCACHE - 160)) | (1 << (SqlBaseParser.LAZY - 160)) | (1 << (SqlBaseParser.FORMATTED - 160)) | (1 << (SqlBaseParser.GLOBAL - 160)) | (1 << (SqlBaseParser.TEMPORARY - 160)) | (1 << (SqlBaseParser.OPTIONS - 160)) | (1 << (SqlBaseParser.UNSET - 160)) | (1 << (SqlBaseParser.TBLPROPERTIES - 160)) | (1 << (SqlBaseParser.DBPROPERTIES - 160)) | (1 << (SqlBaseParser.BUCKETS - 160)) | (1 << (SqlBaseParser.SKEWED - 160)) | (1 << (SqlBaseParser.STORED - 160)) | (1 << (SqlBaseParser.DIRECTORIES - 160)) | (1 << (SqlBaseParser.LOCATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (SqlBaseParser.EXCHANGE - 192)) | (1 << (SqlBaseParser.ARCHIVE - 192)) | (1 << (SqlBaseParser.UNARCHIVE - 192)) | (1 << (SqlBaseParser.FILEFORMAT - 192)) | (1 << (SqlBaseParser.TOUCH - 192)) | (1 << (SqlBaseParser.COMPACT - 192)) | (1 << (SqlBaseParser.CONCATENATE - 192)) | (1 << (SqlBaseParser.CHANGE - 192)) | (1 << (SqlBaseParser.CASCADE - 192)) | (1 << (SqlBaseParser.RESTRICT - 192)) | (1 << (SqlBaseParser.CLUSTERED - 192)) | (1 << (SqlBaseParser.SORTED - 192)) | (1 << (SqlBaseParser.PURGE - 192)) | (1 << (SqlBaseParser.INPUTFORMAT - 192)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 192)) | (1 << (SqlBaseParser.DATABASE - 192)) | (1 << (SqlBaseParser.DATABASES - 192)) | (1 << (SqlBaseParser.DFS - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.ANALYZE - 192)) | (1 << (SqlBaseParser.COMPUTE - 192)) | (1 << (SqlBaseParser.LIST - 192)) | (1 << (SqlBaseParser.STATISTICS - 192)) | (1 << (SqlBaseParser.PARTITIONED - 192)) | (1 << (SqlBaseParser.EXTERNAL - 192)) | (1 << (SqlBaseParser.DEFINED - 192)) | (1 << (SqlBaseParser.REVOKE - 192)) | (1 << (SqlBaseParser.GRANT - 192)) | (1 << (SqlBaseParser.LOCK - 192)) | (1 << (SqlBaseParser.UNLOCK - 192)) | (1 << (SqlBaseParser.MSCK - 192)) | (1 << (SqlBaseParser.REPAIR - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (SqlBaseParser.RECOVER - 224)) | (1 << (SqlBaseParser.EXPORT - 224)) | (1 << (SqlBaseParser.IMPORT - 224)) | (1 << (SqlBaseParser.LOAD - 224)) | (1 << (SqlBaseParser.ROLE - 224)) | (1 << (SqlBaseParser.ROLES - 224)) | (1 << (SqlBaseParser.COMPACTIONS - 224)) | (1 << (SqlBaseParser.PRINCIPALS - 224)) | (1 << (SqlBaseParser.TRANSACTIONS - 224)) | (1 << (SqlBaseParser.INDEX - 224)) | (1 << (SqlBaseParser.INDEXES - 224)) | (1 << (SqlBaseParser.LOCKS - 224)) | (1 << (SqlBaseParser.OPTION - 224)) | (1 << (SqlBaseParser.ANTI - 224)) | (1 << (SqlBaseParser.LOCAL - 224)) | (1 << (SqlBaseParser.INPATH - 224)) | (1 << (SqlBaseParser.STRING - 224)) | (1 << (SqlBaseParser.BIGINT_LITERAL - 224)) | (1 << (SqlBaseParser.SMALLINT_LITERAL - 224)) | (1 << (SqlBaseParser.TINYINT_LITERAL - 224)) | (1 << (SqlBaseParser.INTEGER_VALUE - 224)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 224)) | (1 << (SqlBaseParser.DOUBLE_LITERAL - 224)) | (1 << (SqlBaseParser.BIGDECIMAL_LITERAL - 224)) | (1 << (SqlBaseParser.IDENTIFIER - 224)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 224)))) !== 0)) {
            this.state = 1705;
            this.sampleMethod();
        }

        this.state = 1708;
        this.match(SqlBaseParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SampleMethodContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_sampleMethod;
    return this;
}

SampleMethodContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SampleMethodContext.prototype.constructor = SampleMethodContext;


 
SampleMethodContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SampleByRowsContext(parser, ctx) {
	SampleMethodContext.call(this, parser);
    SampleMethodContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SampleByRowsContext.prototype = Object.create(SampleMethodContext.prototype);
SampleByRowsContext.prototype.constructor = SampleByRowsContext;

SqlBaseParser.SampleByRowsContext = SampleByRowsContext;

SampleByRowsContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SampleByRowsContext.prototype.ROWS = function() {
    return this.getToken(SqlBaseParser.ROWS, 0);
};
SampleByRowsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitSampleByRows(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SampleByPercentileContext(parser, ctx) {
	SampleMethodContext.call(this, parser);
    this.negativeSign = null; // Token;
    this.percentage = null; // Token;
    SampleMethodContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SampleByPercentileContext.prototype = Object.create(SampleMethodContext.prototype);
SampleByPercentileContext.prototype.constructor = SampleByPercentileContext;

SqlBaseParser.SampleByPercentileContext = SampleByPercentileContext;

SampleByPercentileContext.prototype.PERCENTLIT = function() {
    return this.getToken(SqlBaseParser.PERCENTLIT, 0);
};

SampleByPercentileContext.prototype.INTEGER_VALUE = function() {
    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
};

SampleByPercentileContext.prototype.DECIMAL_VALUE = function() {
    return this.getToken(SqlBaseParser.DECIMAL_VALUE, 0);
};

SampleByPercentileContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};
SampleByPercentileContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitSampleByPercentile(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SampleByBucketContext(parser, ctx) {
	SampleMethodContext.call(this, parser);
    this.sampleType = null; // Token;
    this.numerator = null; // Token;
    this.denominator = null; // Token;
    SampleMethodContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SampleByBucketContext.prototype = Object.create(SampleMethodContext.prototype);
SampleByBucketContext.prototype.constructor = SampleByBucketContext;

SqlBaseParser.SampleByBucketContext = SampleByBucketContext;

SampleByBucketContext.prototype.OUT = function() {
    return this.getToken(SqlBaseParser.OUT, 0);
};

SampleByBucketContext.prototype.OF = function() {
    return this.getToken(SqlBaseParser.OF, 0);
};

SampleByBucketContext.prototype.BUCKET = function() {
    return this.getToken(SqlBaseParser.BUCKET, 0);
};

SampleByBucketContext.prototype.INTEGER_VALUE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.INTEGER_VALUE);
    } else {
        return this.getToken(SqlBaseParser.INTEGER_VALUE, i);
    }
};


SampleByBucketContext.prototype.ON = function() {
    return this.getToken(SqlBaseParser.ON, 0);
};

SampleByBucketContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

SampleByBucketContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};
SampleByBucketContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitSampleByBucket(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SampleByBytesContext(parser, ctx) {
	SampleMethodContext.call(this, parser);
    this.bytes = null; // ExpressionContext;
    SampleMethodContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SampleByBytesContext.prototype = Object.create(SampleMethodContext.prototype);
SampleByBytesContext.prototype.constructor = SampleByBytesContext;

SqlBaseParser.SampleByBytesContext = SampleByBytesContext;

SampleByBytesContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SampleByBytesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitSampleByBytes(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlBaseParser.SampleMethodContext = SampleMethodContext;

SqlBaseParser.prototype.sampleMethod = function() {

    var localctx = new SampleMethodContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, SqlBaseParser.RULE_sampleMethod);
    var _la = 0; // Token type
    try {
        this.state = 1734;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,226,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SampleByPercentileContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1711;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.MINUS) {
                this.state = 1710;
                localctx.negativeSign = this.match(SqlBaseParser.MINUS);
            }

            this.state = 1713;
            localctx.percentage = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.INTEGER_VALUE || _la===SqlBaseParser.DECIMAL_VALUE)) {
                localctx.percentage = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1714;
            this.match(SqlBaseParser.PERCENTLIT);
            break;

        case 2:
            localctx = new SampleByRowsContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1715;
            this.expression();
            this.state = 1716;
            this.match(SqlBaseParser.ROWS);
            break;

        case 3:
            localctx = new SampleByBucketContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1718;
            localctx.sampleType = this.match(SqlBaseParser.BUCKET);
            this.state = 1719;
            localctx.numerator = this.match(SqlBaseParser.INTEGER_VALUE);
            this.state = 1720;
            this.match(SqlBaseParser.OUT);
            this.state = 1721;
            this.match(SqlBaseParser.OF);
            this.state = 1722;
            localctx.denominator = this.match(SqlBaseParser.INTEGER_VALUE);
            this.state = 1731;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.ON) {
                this.state = 1723;
                this.match(SqlBaseParser.ON);
                this.state = 1729;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,224,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1724;
                    this.identifier();
                    break;

                case 2:
                    this.state = 1725;
                    this.qualifiedName();
                    this.state = 1726;
                    this.match(SqlBaseParser.T__1);
                    this.state = 1727;
                    this.match(SqlBaseParser.T__2);
                    break;

                }
            }

            break;

        case 4:
            localctx = new SampleByBytesContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1733;
            localctx.bytes = this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_identifierList;
    return this;
}

IdentifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierListContext.prototype.constructor = IdentifierListContext;

IdentifierListContext.prototype.identifierSeq = function() {
    return this.getTypedRuleContext(IdentifierSeqContext,0);
};

IdentifierListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitIdentifierList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.IdentifierListContext = IdentifierListContext;

SqlBaseParser.prototype.identifierList = function() {

    var localctx = new IdentifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, SqlBaseParser.RULE_identifierList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1736;
        this.match(SqlBaseParser.T__1);
        this.state = 1737;
        this.identifierSeq();
        this.state = 1738;
        this.match(SqlBaseParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierSeqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_identifierSeq;
    return this;
}

IdentifierSeqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierSeqContext.prototype.constructor = IdentifierSeqContext;

IdentifierSeqContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

IdentifierSeqContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitIdentifierSeq(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.IdentifierSeqContext = IdentifierSeqContext;

SqlBaseParser.prototype.identifierSeq = function() {

    var localctx = new IdentifierSeqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, SqlBaseParser.RULE_identifierSeq);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1740;
        this.identifier();
        this.state = 1745;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,227,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1741;
                this.match(SqlBaseParser.T__3);
                this.state = 1742;
                this.identifier(); 
            }
            this.state = 1747;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,227,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrderedIdentifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_orderedIdentifierList;
    return this;
}

OrderedIdentifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderedIdentifierListContext.prototype.constructor = OrderedIdentifierListContext;

OrderedIdentifierListContext.prototype.orderedIdentifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OrderedIdentifierContext);
    } else {
        return this.getTypedRuleContext(OrderedIdentifierContext,i);
    }
};

OrderedIdentifierListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitOrderedIdentifierList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.OrderedIdentifierListContext = OrderedIdentifierListContext;

SqlBaseParser.prototype.orderedIdentifierList = function() {

    var localctx = new OrderedIdentifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, SqlBaseParser.RULE_orderedIdentifierList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1748;
        this.match(SqlBaseParser.T__1);
        this.state = 1749;
        this.orderedIdentifier();
        this.state = 1754;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__3) {
            this.state = 1750;
            this.match(SqlBaseParser.T__3);
            this.state = 1751;
            this.orderedIdentifier();
            this.state = 1756;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1757;
        this.match(SqlBaseParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrderedIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_orderedIdentifier;
    this.ordering = null; // Token
    return this;
}

OrderedIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderedIdentifierContext.prototype.constructor = OrderedIdentifierContext;

OrderedIdentifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

OrderedIdentifierContext.prototype.ASC = function() {
    return this.getToken(SqlBaseParser.ASC, 0);
};

OrderedIdentifierContext.prototype.DESC = function() {
    return this.getToken(SqlBaseParser.DESC, 0);
};

OrderedIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitOrderedIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.OrderedIdentifierContext = OrderedIdentifierContext;

SqlBaseParser.prototype.orderedIdentifier = function() {

    var localctx = new OrderedIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, SqlBaseParser.RULE_orderedIdentifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1759;
        this.identifier();
        this.state = 1761;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.ASC || _la===SqlBaseParser.DESC) {
            this.state = 1760;
            localctx.ordering = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.ASC || _la===SqlBaseParser.DESC)) {
                localctx.ordering = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierCommentListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_identifierCommentList;
    return this;
}

IdentifierCommentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierCommentListContext.prototype.constructor = IdentifierCommentListContext;

IdentifierCommentListContext.prototype.identifierComment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierCommentContext);
    } else {
        return this.getTypedRuleContext(IdentifierCommentContext,i);
    }
};

IdentifierCommentListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitIdentifierCommentList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.IdentifierCommentListContext = IdentifierCommentListContext;

SqlBaseParser.prototype.identifierCommentList = function() {

    var localctx = new IdentifierCommentListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, SqlBaseParser.RULE_identifierCommentList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1763;
        this.match(SqlBaseParser.T__1);
        this.state = 1764;
        this.identifierComment();
        this.state = 1769;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__3) {
            this.state = 1765;
            this.match(SqlBaseParser.T__3);
            this.state = 1766;
            this.identifierComment();
            this.state = 1771;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1772;
        this.match(SqlBaseParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierCommentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_identifierComment;
    return this;
}

IdentifierCommentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierCommentContext.prototype.constructor = IdentifierCommentContext;

IdentifierCommentContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

IdentifierCommentContext.prototype.COMMENT = function() {
    return this.getToken(SqlBaseParser.COMMENT, 0);
};

IdentifierCommentContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

IdentifierCommentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitIdentifierComment(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.IdentifierCommentContext = IdentifierCommentContext;

SqlBaseParser.prototype.identifierComment = function() {

    var localctx = new IdentifierCommentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, SqlBaseParser.RULE_identifierComment);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1774;
        this.identifier();
        this.state = 1777;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.COMMENT) {
            this.state = 1775;
            this.match(SqlBaseParser.COMMENT);
            this.state = 1776;
            this.match(SqlBaseParser.STRING);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationPrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_relationPrimary;
    return this;
}

RelationPrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationPrimaryContext.prototype.constructor = RelationPrimaryContext;


 
RelationPrimaryContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function TableValuedFunctionContext(parser, ctx) {
	RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableValuedFunctionContext.prototype = Object.create(RelationPrimaryContext.prototype);
TableValuedFunctionContext.prototype.constructor = TableValuedFunctionContext;

SqlBaseParser.TableValuedFunctionContext = TableValuedFunctionContext;

TableValuedFunctionContext.prototype.functionTable = function() {
    return this.getTypedRuleContext(FunctionTableContext,0);
};
TableValuedFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitTableValuedFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function InlineTableDefault2Context(parser, ctx) {
	RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InlineTableDefault2Context.prototype = Object.create(RelationPrimaryContext.prototype);
InlineTableDefault2Context.prototype.constructor = InlineTableDefault2Context;

SqlBaseParser.InlineTableDefault2Context = InlineTableDefault2Context;

InlineTableDefault2Context.prototype.inlineTable = function() {
    return this.getTypedRuleContext(InlineTableContext,0);
};
InlineTableDefault2Context.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitInlineTableDefault2(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AliasedRelationContext(parser, ctx) {
	RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AliasedRelationContext.prototype = Object.create(RelationPrimaryContext.prototype);
AliasedRelationContext.prototype.constructor = AliasedRelationContext;

SqlBaseParser.AliasedRelationContext = AliasedRelationContext;

AliasedRelationContext.prototype.relation = function() {
    return this.getTypedRuleContext(RelationContext,0);
};

AliasedRelationContext.prototype.tableAlias = function() {
    return this.getTypedRuleContext(TableAliasContext,0);
};

AliasedRelationContext.prototype.sample = function() {
    return this.getTypedRuleContext(SampleContext,0);
};
AliasedRelationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitAliasedRelation(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AliasedQueryContext(parser, ctx) {
	RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AliasedQueryContext.prototype = Object.create(RelationPrimaryContext.prototype);
AliasedQueryContext.prototype.constructor = AliasedQueryContext;

SqlBaseParser.AliasedQueryContext = AliasedQueryContext;

AliasedQueryContext.prototype.queryNoWith = function() {
    return this.getTypedRuleContext(QueryNoWithContext,0);
};

AliasedQueryContext.prototype.tableAlias = function() {
    return this.getTypedRuleContext(TableAliasContext,0);
};

AliasedQueryContext.prototype.sample = function() {
    return this.getTypedRuleContext(SampleContext,0);
};
AliasedQueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitAliasedQuery(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableNameContext(parser, ctx) {
	RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableNameContext.prototype = Object.create(RelationPrimaryContext.prototype);
TableNameContext.prototype.constructor = TableNameContext;

SqlBaseParser.TableNameContext = TableNameContext;

TableNameContext.prototype.tableIdentifierWithFunc = function() {
    return this.getTypedRuleContext(TableIdentifierWithFuncContext,0);
};

TableNameContext.prototype.tableAlias = function() {
    return this.getTypedRuleContext(TableAliasContext,0);
};

TableNameContext.prototype.sample = function() {
    return this.getTypedRuleContext(SampleContext,0);
};
TableNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitTableName(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlBaseParser.RelationPrimaryContext = RelationPrimaryContext;

SqlBaseParser.prototype.relationPrimary = function() {

    var localctx = new RelationPrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, SqlBaseParser.RULE_relationPrimary);
    try {
        this.state = 1803;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,235,this._ctx);
        switch(la_) {
        case 1:
            localctx = new TableNameContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1779;
            this.tableIdentifierWithFunc();
            this.state = 1781;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,232,this._ctx);
            if(la_===1) {
                this.state = 1780;
                this.sample();

            }
            this.state = 1783;
            this.tableAlias();
            break;

        case 2:
            localctx = new AliasedQueryContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1785;
            this.match(SqlBaseParser.T__1);
            this.state = 1786;
            this.queryNoWith();
            this.state = 1787;
            this.match(SqlBaseParser.T__2);
            this.state = 1789;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,233,this._ctx);
            if(la_===1) {
                this.state = 1788;
                this.sample();

            }
            this.state = 1791;
            this.tableAlias();
            break;

        case 3:
            localctx = new AliasedRelationContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1793;
            this.match(SqlBaseParser.T__1);
            this.state = 1794;
            this.relation();
            this.state = 1795;
            this.match(SqlBaseParser.T__2);
            this.state = 1797;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,234,this._ctx);
            if(la_===1) {
                this.state = 1796;
                this.sample();

            }
            this.state = 1799;
            this.tableAlias();
            break;

        case 4:
            localctx = new InlineTableDefault2Context(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1801;
            this.inlineTable();
            break;

        case 5:
            localctx = new TableValuedFunctionContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1802;
            this.functionTable();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InlineTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_inlineTable;
    return this;
}

InlineTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InlineTableContext.prototype.constructor = InlineTableContext;

InlineTableContext.prototype.VALUES = function() {
    return this.getToken(SqlBaseParser.VALUES, 0);
};

InlineTableContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

InlineTableContext.prototype.tableAlias = function() {
    return this.getTypedRuleContext(TableAliasContext,0);
};

InlineTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitInlineTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.InlineTableContext = InlineTableContext;

SqlBaseParser.prototype.inlineTable = function() {

    var localctx = new InlineTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, SqlBaseParser.RULE_inlineTable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1805;
        this.match(SqlBaseParser.VALUES);
        this.state = 1806;
        this.expression();
        this.state = 1811;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,236,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1807;
                this.match(SqlBaseParser.T__3);
                this.state = 1808;
                this.expression(); 
            }
            this.state = 1813;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,236,this._ctx);
        }

        this.state = 1814;
        this.tableAlias();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_functionTable;
    return this;
}

FunctionTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionTableContext.prototype.constructor = FunctionTableContext;

FunctionTableContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

FunctionTableContext.prototype.tableAlias = function() {
    return this.getTypedRuleContext(TableAliasContext,0);
};

FunctionTableContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

FunctionTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitFunctionTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.FunctionTableContext = FunctionTableContext;

SqlBaseParser.prototype.functionTable = function() {

    var localctx = new FunctionTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, SqlBaseParser.RULE_functionTable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1816;
        this.identifier();
        this.state = 1817;
        this.match(SqlBaseParser.T__1);
        this.state = 1826;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.NOT - 32)) | (1 << (SqlBaseParser.NO - 32)) | (1 << (SqlBaseParser.EXISTS - 32)) | (1 << (SqlBaseParser.BETWEEN - 32)) | (1 << (SqlBaseParser.LIKE - 32)) | (1 << (SqlBaseParser.RLIKE - 32)) | (1 << (SqlBaseParser.IS - 32)) | (1 << (SqlBaseParser.NULL - 32)) | (1 << (SqlBaseParser.TRUE - 32)) | (1 << (SqlBaseParser.FALSE - 32)) | (1 << (SqlBaseParser.NULLS - 32)) | (1 << (SqlBaseParser.ASC - 32)) | (1 << (SqlBaseParser.DESC - 32)) | (1 << (SqlBaseParser.FOR - 32)) | (1 << (SqlBaseParser.INTERVAL - 32)) | (1 << (SqlBaseParser.CASE - 32)) | (1 << (SqlBaseParser.WHEN - 32)) | (1 << (SqlBaseParser.THEN - 32)) | (1 << (SqlBaseParser.ELSE - 32)) | (1 << (SqlBaseParser.END - 32)) | (1 << (SqlBaseParser.JOIN - 32)) | (1 << (SqlBaseParser.CROSS - 32)) | (1 << (SqlBaseParser.OUTER - 32)) | (1 << (SqlBaseParser.INNER - 32)) | (1 << (SqlBaseParser.LEFT - 32)) | (1 << (SqlBaseParser.SEMI - 32)) | (1 << (SqlBaseParser.RIGHT - 32)) | (1 << (SqlBaseParser.FULL - 32)) | (1 << (SqlBaseParser.NATURAL - 32)) | (1 << (SqlBaseParser.ON - 32)) | (1 << (SqlBaseParser.PIVOT - 32)) | (1 << (SqlBaseParser.LATERAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlBaseParser.WINDOW - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.DIRECTORY - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlBaseParser.COLUMNS - 96)) | (1 << (SqlBaseParser.COLUMN - 96)) | (1 << (SqlBaseParser.USE - 96)) | (1 << (SqlBaseParser.PARTITIONS - 96)) | (1 << (SqlBaseParser.FUNCTIONS - 96)) | (1 << (SqlBaseParser.DROP - 96)) | (1 << (SqlBaseParser.UNION - 96)) | (1 << (SqlBaseParser.EXCEPT - 96)) | (1 << (SqlBaseParser.SETMINUS - 96)) | (1 << (SqlBaseParser.INTERSECT - 96)) | (1 << (SqlBaseParser.TO - 96)) | (1 << (SqlBaseParser.TABLESAMPLE - 96)) | (1 << (SqlBaseParser.STRATIFY - 96)) | (1 << (SqlBaseParser.ALTER - 96)) | (1 << (SqlBaseParser.RENAME - 96)) | (1 << (SqlBaseParser.ARRAY - 96)) | (1 << (SqlBaseParser.MAP - 96)) | (1 << (SqlBaseParser.STRUCT - 96)) | (1 << (SqlBaseParser.COMMENT - 96)) | (1 << (SqlBaseParser.SET - 96)) | (1 << (SqlBaseParser.RESET - 96)) | (1 << (SqlBaseParser.DATA - 96)) | (1 << (SqlBaseParser.START - 96)) | (1 << (SqlBaseParser.TRANSACTION - 96)) | (1 << (SqlBaseParser.COMMIT - 96)) | (1 << (SqlBaseParser.ROLLBACK - 96)) | (1 << (SqlBaseParser.MACRO - 96)) | (1 << (SqlBaseParser.IGNORE - 96)) | (1 << (SqlBaseParser.BOTH - 96)) | (1 << (SqlBaseParser.LEADING - 96)) | (1 << (SqlBaseParser.TRAILING - 96)) | (1 << (SqlBaseParser.IF - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.EXTRACT - 128)) | (1 << (SqlBaseParser.PLUS - 128)) | (1 << (SqlBaseParser.MINUS - 128)) | (1 << (SqlBaseParser.ASTERISK - 128)) | (1 << (SqlBaseParser.DIV - 128)) | (1 << (SqlBaseParser.TILDE - 128)) | (1 << (SqlBaseParser.PERCENTLIT - 128)) | (1 << (SqlBaseParser.BUCKET - 128)) | (1 << (SqlBaseParser.OUT - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.SORT - 128)) | (1 << (SqlBaseParser.CLUSTER - 128)) | (1 << (SqlBaseParser.DISTRIBUTE - 128)) | (1 << (SqlBaseParser.OVERWRITE - 128)) | (1 << (SqlBaseParser.TRANSFORM - 128)) | (1 << (SqlBaseParser.REDUCE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlBaseParser.SERDE - 160)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 160)) | (1 << (SqlBaseParser.RECORDREADER - 160)) | (1 << (SqlBaseParser.RECORDWRITER - 160)) | (1 << (SqlBaseParser.DELIMITED - 160)) | (1 << (SqlBaseParser.FIELDS - 160)) | (1 << (SqlBaseParser.TERMINATED - 160)) | (1 << (SqlBaseParser.COLLECTION - 160)) | (1 << (SqlBaseParser.ITEMS - 160)) | (1 << (SqlBaseParser.KEYS - 160)) | (1 << (SqlBaseParser.ESCAPED - 160)) | (1 << (SqlBaseParser.LINES - 160)) | (1 << (SqlBaseParser.SEPARATED - 160)) | (1 << (SqlBaseParser.SQLFUNCTION - 160)) | (1 << (SqlBaseParser.EXTENDED - 160)) | (1 << (SqlBaseParser.REFRESH - 160)) | (1 << (SqlBaseParser.CLEAR - 160)) | (1 << (SqlBaseParser.CACHE - 160)) | (1 << (SqlBaseParser.UNCACHE - 160)) | (1 << (SqlBaseParser.LAZY - 160)) | (1 << (SqlBaseParser.FORMATTED - 160)) | (1 << (SqlBaseParser.GLOBAL - 160)) | (1 << (SqlBaseParser.TEMPORARY - 160)) | (1 << (SqlBaseParser.OPTIONS - 160)) | (1 << (SqlBaseParser.UNSET - 160)) | (1 << (SqlBaseParser.TBLPROPERTIES - 160)) | (1 << (SqlBaseParser.DBPROPERTIES - 160)) | (1 << (SqlBaseParser.BUCKETS - 160)) | (1 << (SqlBaseParser.SKEWED - 160)) | (1 << (SqlBaseParser.STORED - 160)) | (1 << (SqlBaseParser.DIRECTORIES - 160)) | (1 << (SqlBaseParser.LOCATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (SqlBaseParser.EXCHANGE - 192)) | (1 << (SqlBaseParser.ARCHIVE - 192)) | (1 << (SqlBaseParser.UNARCHIVE - 192)) | (1 << (SqlBaseParser.FILEFORMAT - 192)) | (1 << (SqlBaseParser.TOUCH - 192)) | (1 << (SqlBaseParser.COMPACT - 192)) | (1 << (SqlBaseParser.CONCATENATE - 192)) | (1 << (SqlBaseParser.CHANGE - 192)) | (1 << (SqlBaseParser.CASCADE - 192)) | (1 << (SqlBaseParser.RESTRICT - 192)) | (1 << (SqlBaseParser.CLUSTERED - 192)) | (1 << (SqlBaseParser.SORTED - 192)) | (1 << (SqlBaseParser.PURGE - 192)) | (1 << (SqlBaseParser.INPUTFORMAT - 192)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 192)) | (1 << (SqlBaseParser.DATABASE - 192)) | (1 << (SqlBaseParser.DATABASES - 192)) | (1 << (SqlBaseParser.DFS - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.ANALYZE - 192)) | (1 << (SqlBaseParser.COMPUTE - 192)) | (1 << (SqlBaseParser.LIST - 192)) | (1 << (SqlBaseParser.STATISTICS - 192)) | (1 << (SqlBaseParser.PARTITIONED - 192)) | (1 << (SqlBaseParser.EXTERNAL - 192)) | (1 << (SqlBaseParser.DEFINED - 192)) | (1 << (SqlBaseParser.REVOKE - 192)) | (1 << (SqlBaseParser.GRANT - 192)) | (1 << (SqlBaseParser.LOCK - 192)) | (1 << (SqlBaseParser.UNLOCK - 192)) | (1 << (SqlBaseParser.MSCK - 192)) | (1 << (SqlBaseParser.REPAIR - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (SqlBaseParser.RECOVER - 224)) | (1 << (SqlBaseParser.EXPORT - 224)) | (1 << (SqlBaseParser.IMPORT - 224)) | (1 << (SqlBaseParser.LOAD - 224)) | (1 << (SqlBaseParser.ROLE - 224)) | (1 << (SqlBaseParser.ROLES - 224)) | (1 << (SqlBaseParser.COMPACTIONS - 224)) | (1 << (SqlBaseParser.PRINCIPALS - 224)) | (1 << (SqlBaseParser.TRANSACTIONS - 224)) | (1 << (SqlBaseParser.INDEX - 224)) | (1 << (SqlBaseParser.INDEXES - 224)) | (1 << (SqlBaseParser.LOCKS - 224)) | (1 << (SqlBaseParser.OPTION - 224)) | (1 << (SqlBaseParser.ANTI - 224)) | (1 << (SqlBaseParser.LOCAL - 224)) | (1 << (SqlBaseParser.INPATH - 224)) | (1 << (SqlBaseParser.STRING - 224)) | (1 << (SqlBaseParser.BIGINT_LITERAL - 224)) | (1 << (SqlBaseParser.SMALLINT_LITERAL - 224)) | (1 << (SqlBaseParser.TINYINT_LITERAL - 224)) | (1 << (SqlBaseParser.INTEGER_VALUE - 224)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 224)) | (1 << (SqlBaseParser.DOUBLE_LITERAL - 224)) | (1 << (SqlBaseParser.BIGDECIMAL_LITERAL - 224)) | (1 << (SqlBaseParser.IDENTIFIER - 224)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 224)))) !== 0)) {
            this.state = 1818;
            this.expression();
            this.state = 1823;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__3) {
                this.state = 1819;
                this.match(SqlBaseParser.T__3);
                this.state = 1820;
                this.expression();
                this.state = 1825;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1828;
        this.match(SqlBaseParser.T__2);
        this.state = 1829;
        this.tableAlias();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TableAliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_tableAlias;
    return this;
}

TableAliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableAliasContext.prototype.constructor = TableAliasContext;

TableAliasContext.prototype.strictIdentifier = function() {
    return this.getTypedRuleContext(StrictIdentifierContext,0);
};

TableAliasContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

TableAliasContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

TableAliasContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitTableAlias(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.TableAliasContext = TableAliasContext;

SqlBaseParser.prototype.tableAlias = function() {

    var localctx = new TableAliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, SqlBaseParser.RULE_tableAlias);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1838;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,241,this._ctx);
        if(la_===1) {
            this.state = 1832;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,239,this._ctx);
            if(la_===1) {
                this.state = 1831;
                this.match(SqlBaseParser.AS);

            }
            this.state = 1834;
            this.strictIdentifier();
            this.state = 1836;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,240,this._ctx);
            if(la_===1) {
                this.state = 1835;
                this.identifierList();

            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RowFormatContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_rowFormat;
    return this;
}

RowFormatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RowFormatContext.prototype.constructor = RowFormatContext;


 
RowFormatContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function RowFormatSerdeContext(parser, ctx) {
	RowFormatContext.call(this, parser);
    this.name = null; // Token;
    this.props = null; // TablePropertyListContext;
    RowFormatContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RowFormatSerdeContext.prototype = Object.create(RowFormatContext.prototype);
RowFormatSerdeContext.prototype.constructor = RowFormatSerdeContext;

SqlBaseParser.RowFormatSerdeContext = RowFormatSerdeContext;

RowFormatSerdeContext.prototype.ROW = function() {
    return this.getToken(SqlBaseParser.ROW, 0);
};

RowFormatSerdeContext.prototype.FORMAT = function() {
    return this.getToken(SqlBaseParser.FORMAT, 0);
};

RowFormatSerdeContext.prototype.SERDE = function() {
    return this.getToken(SqlBaseParser.SERDE, 0);
};

RowFormatSerdeContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

RowFormatSerdeContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

RowFormatSerdeContext.prototype.SERDEPROPERTIES = function() {
    return this.getToken(SqlBaseParser.SERDEPROPERTIES, 0);
};

RowFormatSerdeContext.prototype.tablePropertyList = function() {
    return this.getTypedRuleContext(TablePropertyListContext,0);
};
RowFormatSerdeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitRowFormatSerde(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RowFormatDelimitedContext(parser, ctx) {
	RowFormatContext.call(this, parser);
    this.fieldsTerminatedBy = null; // Token;
    this.escapedBy = null; // Token;
    this.collectionItemsTerminatedBy = null; // Token;
    this.keysTerminatedBy = null; // Token;
    this.linesSeparatedBy = null; // Token;
    this.nullDefinedAs = null; // Token;
    RowFormatContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RowFormatDelimitedContext.prototype = Object.create(RowFormatContext.prototype);
RowFormatDelimitedContext.prototype.constructor = RowFormatDelimitedContext;

SqlBaseParser.RowFormatDelimitedContext = RowFormatDelimitedContext;

RowFormatDelimitedContext.prototype.ROW = function() {
    return this.getToken(SqlBaseParser.ROW, 0);
};

RowFormatDelimitedContext.prototype.FORMAT = function() {
    return this.getToken(SqlBaseParser.FORMAT, 0);
};

RowFormatDelimitedContext.prototype.DELIMITED = function() {
    return this.getToken(SqlBaseParser.DELIMITED, 0);
};

RowFormatDelimitedContext.prototype.FIELDS = function() {
    return this.getToken(SqlBaseParser.FIELDS, 0);
};

RowFormatDelimitedContext.prototype.TERMINATED = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.TERMINATED);
    } else {
        return this.getToken(SqlBaseParser.TERMINATED, i);
    }
};


RowFormatDelimitedContext.prototype.BY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.BY);
    } else {
        return this.getToken(SqlBaseParser.BY, i);
    }
};


RowFormatDelimitedContext.prototype.COLLECTION = function() {
    return this.getToken(SqlBaseParser.COLLECTION, 0);
};

RowFormatDelimitedContext.prototype.ITEMS = function() {
    return this.getToken(SqlBaseParser.ITEMS, 0);
};

RowFormatDelimitedContext.prototype.MAP = function() {
    return this.getToken(SqlBaseParser.MAP, 0);
};

RowFormatDelimitedContext.prototype.KEYS = function() {
    return this.getToken(SqlBaseParser.KEYS, 0);
};

RowFormatDelimitedContext.prototype.LINES = function() {
    return this.getToken(SqlBaseParser.LINES, 0);
};

RowFormatDelimitedContext.prototype.NULL = function() {
    return this.getToken(SqlBaseParser.NULL, 0);
};

RowFormatDelimitedContext.prototype.DEFINED = function() {
    return this.getToken(SqlBaseParser.DEFINED, 0);
};

RowFormatDelimitedContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

RowFormatDelimitedContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.STRING);
    } else {
        return this.getToken(SqlBaseParser.STRING, i);
    }
};


RowFormatDelimitedContext.prototype.ESCAPED = function() {
    return this.getToken(SqlBaseParser.ESCAPED, 0);
};
RowFormatDelimitedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitRowFormatDelimited(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlBaseParser.RowFormatContext = RowFormatContext;

SqlBaseParser.prototype.rowFormat = function() {

    var localctx = new RowFormatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, SqlBaseParser.RULE_rowFormat);
    try {
        this.state = 1889;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,249,this._ctx);
        switch(la_) {
        case 1:
            localctx = new RowFormatSerdeContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1840;
            this.match(SqlBaseParser.ROW);
            this.state = 1841;
            this.match(SqlBaseParser.FORMAT);
            this.state = 1842;
            this.match(SqlBaseParser.SERDE);
            this.state = 1843;
            localctx.name = this.match(SqlBaseParser.STRING);
            this.state = 1847;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,242,this._ctx);
            if(la_===1) {
                this.state = 1844;
                this.match(SqlBaseParser.WITH);
                this.state = 1845;
                this.match(SqlBaseParser.SERDEPROPERTIES);
                this.state = 1846;
                localctx.props = this.tablePropertyList();

            }
            break;

        case 2:
            localctx = new RowFormatDelimitedContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1849;
            this.match(SqlBaseParser.ROW);
            this.state = 1850;
            this.match(SqlBaseParser.FORMAT);
            this.state = 1851;
            this.match(SqlBaseParser.DELIMITED);
            this.state = 1861;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,244,this._ctx);
            if(la_===1) {
                this.state = 1852;
                this.match(SqlBaseParser.FIELDS);
                this.state = 1853;
                this.match(SqlBaseParser.TERMINATED);
                this.state = 1854;
                this.match(SqlBaseParser.BY);
                this.state = 1855;
                localctx.fieldsTerminatedBy = this.match(SqlBaseParser.STRING);
                this.state = 1859;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,243,this._ctx);
                if(la_===1) {
                    this.state = 1856;
                    this.match(SqlBaseParser.ESCAPED);
                    this.state = 1857;
                    this.match(SqlBaseParser.BY);
                    this.state = 1858;
                    localctx.escapedBy = this.match(SqlBaseParser.STRING);

                }

            }
            this.state = 1868;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,245,this._ctx);
            if(la_===1) {
                this.state = 1863;
                this.match(SqlBaseParser.COLLECTION);
                this.state = 1864;
                this.match(SqlBaseParser.ITEMS);
                this.state = 1865;
                this.match(SqlBaseParser.TERMINATED);
                this.state = 1866;
                this.match(SqlBaseParser.BY);
                this.state = 1867;
                localctx.collectionItemsTerminatedBy = this.match(SqlBaseParser.STRING);

            }
            this.state = 1875;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,246,this._ctx);
            if(la_===1) {
                this.state = 1870;
                this.match(SqlBaseParser.MAP);
                this.state = 1871;
                this.match(SqlBaseParser.KEYS);
                this.state = 1872;
                this.match(SqlBaseParser.TERMINATED);
                this.state = 1873;
                this.match(SqlBaseParser.BY);
                this.state = 1874;
                localctx.keysTerminatedBy = this.match(SqlBaseParser.STRING);

            }
            this.state = 1881;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,247,this._ctx);
            if(la_===1) {
                this.state = 1877;
                this.match(SqlBaseParser.LINES);
                this.state = 1878;
                this.match(SqlBaseParser.TERMINATED);
                this.state = 1879;
                this.match(SqlBaseParser.BY);
                this.state = 1880;
                localctx.linesSeparatedBy = this.match(SqlBaseParser.STRING);

            }
            this.state = 1887;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,248,this._ctx);
            if(la_===1) {
                this.state = 1883;
                this.match(SqlBaseParser.NULL);
                this.state = 1884;
                this.match(SqlBaseParser.DEFINED);
                this.state = 1885;
                this.match(SqlBaseParser.AS);
                this.state = 1886;
                localctx.nullDefinedAs = this.match(SqlBaseParser.STRING);

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TableIdentifierWithFuncContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_tableIdentifierWithFunc;
    return this;
}

TableIdentifierWithFuncContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableIdentifierWithFuncContext.prototype.constructor = TableIdentifierWithFuncContext;

TableIdentifierWithFuncContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

TableIdentifierWithFuncContext.prototype.sqlFuncIdentifier = function() {
    return this.getTypedRuleContext(SqlFuncIdentifierContext,0);
};

TableIdentifierWithFuncContext.prototype.tableIdentifierWithFunc = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableIdentifierWithFuncContext);
    } else {
        return this.getTypedRuleContext(TableIdentifierWithFuncContext,i);
    }
};

TableIdentifierWithFuncContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitTableIdentifierWithFunc(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.TableIdentifierWithFuncContext = TableIdentifierWithFuncContext;

SqlBaseParser.prototype.tableIdentifierWithFunc = function() {

    var localctx = new TableIdentifierWithFuncContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, SqlBaseParser.RULE_tableIdentifierWithFunc);
    var _la = 0; // Token type
    try {
        this.state = 1904;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,251,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1891;
            this.tableIdentifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1892;
            this.sqlFuncIdentifier();
            this.state = 1893;
            this.match(SqlBaseParser.T__1);
            this.state = 1894;
            this.tableIdentifierWithFunc();
            this.state = 1899;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__3) {
                this.state = 1895;
                this.match(SqlBaseParser.T__3);
                this.state = 1896;
                this.tableIdentifierWithFunc();
                this.state = 1901;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1902;
            this.match(SqlBaseParser.T__2);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TableIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_tableIdentifier;
    this.db = null; // IdentifierContext
    this.table = null; // IdentifierContext
    return this;
}

TableIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableIdentifierContext.prototype.constructor = TableIdentifierContext;

TableIdentifierContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

TableIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitTableIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.TableIdentifierContext = TableIdentifierContext;

SqlBaseParser.prototype.tableIdentifier = function() {

    var localctx = new TableIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, SqlBaseParser.RULE_tableIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1909;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,252,this._ctx);
        if(la_===1) {
            this.state = 1906;
            localctx.db = this.identifier();
            this.state = 1907;
            this.match(SqlBaseParser.T__4);

        }
        this.state = 1911;
        localctx.table = this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_functionIdentifier;
    this.db = null; // IdentifierContext
    this.sqlfunction = null; // IdentifierContext
    return this;
}

FunctionIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionIdentifierContext.prototype.constructor = FunctionIdentifierContext;

FunctionIdentifierContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

FunctionIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitFunctionIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.FunctionIdentifierContext = FunctionIdentifierContext;

SqlBaseParser.prototype.functionIdentifier = function() {

    var localctx = new FunctionIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, SqlBaseParser.RULE_functionIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1916;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,253,this._ctx);
        if(la_===1) {
            this.state = 1913;
            localctx.db = this.identifier();
            this.state = 1914;
            this.match(SqlBaseParser.T__4);

        }
        this.state = 1918;
        localctx.sqlfunction = this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamedExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_namedExpression;
    return this;
}

NamedExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedExpressionContext.prototype.constructor = NamedExpressionContext;

NamedExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

NamedExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

NamedExpressionContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

NamedExpressionContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

NamedExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitNamedExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.NamedExpressionContext = NamedExpressionContext;

SqlBaseParser.prototype.namedExpression = function() {

    var localctx = new NamedExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, SqlBaseParser.RULE_namedExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1920;
        this.expression();
        this.state = 1928;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,256,this._ctx);
        if(la_===1) {
            this.state = 1922;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,254,this._ctx);
            if(la_===1) {
                this.state = 1921;
                this.match(SqlBaseParser.AS);

            }
            this.state = 1926;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SqlBaseParser.SELECT:
            case SqlBaseParser.FROM:
            case SqlBaseParser.ADD:
            case SqlBaseParser.AS:
            case SqlBaseParser.ALL:
            case SqlBaseParser.ANY:
            case SqlBaseParser.DISTINCT:
            case SqlBaseParser.WHERE:
            case SqlBaseParser.GROUP:
            case SqlBaseParser.BY:
            case SqlBaseParser.GROUPING:
            case SqlBaseParser.SETS:
            case SqlBaseParser.CUBE:
            case SqlBaseParser.ROLLUP:
            case SqlBaseParser.ORDER:
            case SqlBaseParser.HAVING:
            case SqlBaseParser.LIMIT:
            case SqlBaseParser.AT:
            case SqlBaseParser.OR:
            case SqlBaseParser.AND:
            case SqlBaseParser.IN:
            case SqlBaseParser.NOT:
            case SqlBaseParser.NO:
            case SqlBaseParser.EXISTS:
            case SqlBaseParser.BETWEEN:
            case SqlBaseParser.LIKE:
            case SqlBaseParser.RLIKE:
            case SqlBaseParser.IS:
            case SqlBaseParser.NULL:
            case SqlBaseParser.TRUE:
            case SqlBaseParser.FALSE:
            case SqlBaseParser.NULLS:
            case SqlBaseParser.ASC:
            case SqlBaseParser.DESC:
            case SqlBaseParser.FOR:
            case SqlBaseParser.INTERVAL:
            case SqlBaseParser.CASE:
            case SqlBaseParser.WHEN:
            case SqlBaseParser.THEN:
            case SqlBaseParser.ELSE:
            case SqlBaseParser.END:
            case SqlBaseParser.JOIN:
            case SqlBaseParser.CROSS:
            case SqlBaseParser.OUTER:
            case SqlBaseParser.INNER:
            case SqlBaseParser.LEFT:
            case SqlBaseParser.SEMI:
            case SqlBaseParser.RIGHT:
            case SqlBaseParser.FULL:
            case SqlBaseParser.NATURAL:
            case SqlBaseParser.ON:
            case SqlBaseParser.PIVOT:
            case SqlBaseParser.LATERAL:
            case SqlBaseParser.WINDOW:
            case SqlBaseParser.OVER:
            case SqlBaseParser.PARTITION:
            case SqlBaseParser.RANGE:
            case SqlBaseParser.ROWS:
            case SqlBaseParser.UNBOUNDED:
            case SqlBaseParser.PRECEDING:
            case SqlBaseParser.FOLLOWING:
            case SqlBaseParser.CURRENT:
            case SqlBaseParser.FIRST:
            case SqlBaseParser.AFTER:
            case SqlBaseParser.LAST:
            case SqlBaseParser.ROW:
            case SqlBaseParser.WITH:
            case SqlBaseParser.VALUES:
            case SqlBaseParser.CREATE:
            case SqlBaseParser.TABLE:
            case SqlBaseParser.DIRECTORY:
            case SqlBaseParser.VIEW:
            case SqlBaseParser.REPLACE:
            case SqlBaseParser.INSERT:
            case SqlBaseParser.DELETE:
            case SqlBaseParser.INTO:
            case SqlBaseParser.DESCRIBE:
            case SqlBaseParser.EXPLAIN:
            case SqlBaseParser.FORMAT:
            case SqlBaseParser.LOGICAL:
            case SqlBaseParser.CODEGEN:
            case SqlBaseParser.COST:
            case SqlBaseParser.CAST:
            case SqlBaseParser.SHOW:
            case SqlBaseParser.TABLES:
            case SqlBaseParser.COLUMNS:
            case SqlBaseParser.COLUMN:
            case SqlBaseParser.USE:
            case SqlBaseParser.PARTITIONS:
            case SqlBaseParser.FUNCTIONS:
            case SqlBaseParser.DROP:
            case SqlBaseParser.UNION:
            case SqlBaseParser.EXCEPT:
            case SqlBaseParser.SETMINUS:
            case SqlBaseParser.INTERSECT:
            case SqlBaseParser.TO:
            case SqlBaseParser.TABLESAMPLE:
            case SqlBaseParser.STRATIFY:
            case SqlBaseParser.ALTER:
            case SqlBaseParser.RENAME:
            case SqlBaseParser.ARRAY:
            case SqlBaseParser.MAP:
            case SqlBaseParser.STRUCT:
            case SqlBaseParser.COMMENT:
            case SqlBaseParser.SET:
            case SqlBaseParser.RESET:
            case SqlBaseParser.DATA:
            case SqlBaseParser.START:
            case SqlBaseParser.TRANSACTION:
            case SqlBaseParser.COMMIT:
            case SqlBaseParser.ROLLBACK:
            case SqlBaseParser.MACRO:
            case SqlBaseParser.IGNORE:
            case SqlBaseParser.BOTH:
            case SqlBaseParser.LEADING:
            case SqlBaseParser.TRAILING:
            case SqlBaseParser.IF:
            case SqlBaseParser.POSITION:
            case SqlBaseParser.EXTRACT:
            case SqlBaseParser.DIV:
            case SqlBaseParser.PERCENTLIT:
            case SqlBaseParser.BUCKET:
            case SqlBaseParser.OUT:
            case SqlBaseParser.OF:
            case SqlBaseParser.SORT:
            case SqlBaseParser.CLUSTER:
            case SqlBaseParser.DISTRIBUTE:
            case SqlBaseParser.OVERWRITE:
            case SqlBaseParser.TRANSFORM:
            case SqlBaseParser.REDUCE:
            case SqlBaseParser.SERDE:
            case SqlBaseParser.SERDEPROPERTIES:
            case SqlBaseParser.RECORDREADER:
            case SqlBaseParser.RECORDWRITER:
            case SqlBaseParser.DELIMITED:
            case SqlBaseParser.FIELDS:
            case SqlBaseParser.TERMINATED:
            case SqlBaseParser.COLLECTION:
            case SqlBaseParser.ITEMS:
            case SqlBaseParser.KEYS:
            case SqlBaseParser.ESCAPED:
            case SqlBaseParser.LINES:
            case SqlBaseParser.SEPARATED:
            case SqlBaseParser.SQLFUNCTION:
            case SqlBaseParser.EXTENDED:
            case SqlBaseParser.REFRESH:
            case SqlBaseParser.CLEAR:
            case SqlBaseParser.CACHE:
            case SqlBaseParser.UNCACHE:
            case SqlBaseParser.LAZY:
            case SqlBaseParser.FORMATTED:
            case SqlBaseParser.GLOBAL:
            case SqlBaseParser.TEMPORARY:
            case SqlBaseParser.OPTIONS:
            case SqlBaseParser.UNSET:
            case SqlBaseParser.TBLPROPERTIES:
            case SqlBaseParser.DBPROPERTIES:
            case SqlBaseParser.BUCKETS:
            case SqlBaseParser.SKEWED:
            case SqlBaseParser.STORED:
            case SqlBaseParser.DIRECTORIES:
            case SqlBaseParser.LOCATION:
            case SqlBaseParser.EXCHANGE:
            case SqlBaseParser.ARCHIVE:
            case SqlBaseParser.UNARCHIVE:
            case SqlBaseParser.FILEFORMAT:
            case SqlBaseParser.TOUCH:
            case SqlBaseParser.COMPACT:
            case SqlBaseParser.CONCATENATE:
            case SqlBaseParser.CHANGE:
            case SqlBaseParser.CASCADE:
            case SqlBaseParser.RESTRICT:
            case SqlBaseParser.CLUSTERED:
            case SqlBaseParser.SORTED:
            case SqlBaseParser.PURGE:
            case SqlBaseParser.INPUTFORMAT:
            case SqlBaseParser.OUTPUTFORMAT:
            case SqlBaseParser.DATABASE:
            case SqlBaseParser.DATABASES:
            case SqlBaseParser.DFS:
            case SqlBaseParser.TRUNCATE:
            case SqlBaseParser.ANALYZE:
            case SqlBaseParser.COMPUTE:
            case SqlBaseParser.LIST:
            case SqlBaseParser.STATISTICS:
            case SqlBaseParser.PARTITIONED:
            case SqlBaseParser.EXTERNAL:
            case SqlBaseParser.DEFINED:
            case SqlBaseParser.REVOKE:
            case SqlBaseParser.GRANT:
            case SqlBaseParser.LOCK:
            case SqlBaseParser.UNLOCK:
            case SqlBaseParser.MSCK:
            case SqlBaseParser.REPAIR:
            case SqlBaseParser.RECOVER:
            case SqlBaseParser.EXPORT:
            case SqlBaseParser.IMPORT:
            case SqlBaseParser.LOAD:
            case SqlBaseParser.ROLE:
            case SqlBaseParser.ROLES:
            case SqlBaseParser.COMPACTIONS:
            case SqlBaseParser.PRINCIPALS:
            case SqlBaseParser.TRANSACTIONS:
            case SqlBaseParser.INDEX:
            case SqlBaseParser.INDEXES:
            case SqlBaseParser.LOCKS:
            case SqlBaseParser.OPTION:
            case SqlBaseParser.ANTI:
            case SqlBaseParser.LOCAL:
            case SqlBaseParser.INPATH:
            case SqlBaseParser.IDENTIFIER:
            case SqlBaseParser.BACKQUOTED_IDENTIFIER:
                this.state = 1924;
                this.identifier();
                break;
            case SqlBaseParser.T__1:
                this.state = 1925;
                this.identifierList();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamedExpressionSeqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_namedExpressionSeq;
    return this;
}

NamedExpressionSeqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedExpressionSeqContext.prototype.constructor = NamedExpressionSeqContext;

NamedExpressionSeqContext.prototype.namedExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedExpressionContext);
    } else {
        return this.getTypedRuleContext(NamedExpressionContext,i);
    }
};

NamedExpressionSeqContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitNamedExpressionSeq(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.NamedExpressionSeqContext = NamedExpressionSeqContext;

SqlBaseParser.prototype.namedExpressionSeq = function() {

    var localctx = new NamedExpressionSeqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, SqlBaseParser.RULE_namedExpressionSeq);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1930;
        this.namedExpression();
        this.state = 1935;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,257,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1931;
                this.match(SqlBaseParser.T__3);
                this.state = 1932;
                this.namedExpression(); 
            }
            this.state = 1937;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,257,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};

ExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.ExpressionContext = ExpressionContext;

SqlBaseParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, SqlBaseParser.RULE_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1938;
        this.booleanExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BooleanExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_booleanExpression;
    return this;
}

BooleanExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanExpressionContext.prototype.constructor = BooleanExpressionContext;


 
BooleanExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function LogicalNotContext(parser, ctx) {
	BooleanExpressionContext.call(this, parser);
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalNotContext.prototype = Object.create(BooleanExpressionContext.prototype);
LogicalNotContext.prototype.constructor = LogicalNotContext;

SqlBaseParser.LogicalNotContext = LogicalNotContext;

LogicalNotContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

LogicalNotContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};
LogicalNotContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitLogicalNot(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PredicatedContext(parser, ctx) {
	BooleanExpressionContext.call(this, parser);
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PredicatedContext.prototype = Object.create(BooleanExpressionContext.prototype);
PredicatedContext.prototype.constructor = PredicatedContext;

SqlBaseParser.PredicatedContext = PredicatedContext;

PredicatedContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

PredicatedContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};
PredicatedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitPredicated(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ExistsContext(parser, ctx) {
	BooleanExpressionContext.call(this, parser);
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExistsContext.prototype = Object.create(BooleanExpressionContext.prototype);
ExistsContext.prototype.constructor = ExistsContext;

SqlBaseParser.ExistsContext = ExistsContext;

ExistsContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

ExistsContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};
ExistsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitExists(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LogicalBinaryContext(parser, ctx) {
	BooleanExpressionContext.call(this, parser);
    this.left = null; // BooleanExpressionContext;
    this.operator = null; // Token;
    this.right = null; // BooleanExpressionContext;
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalBinaryContext.prototype = Object.create(BooleanExpressionContext.prototype);
LogicalBinaryContext.prototype.constructor = LogicalBinaryContext;

SqlBaseParser.LogicalBinaryContext = LogicalBinaryContext;

LogicalBinaryContext.prototype.booleanExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BooleanExpressionContext);
    } else {
        return this.getTypedRuleContext(BooleanExpressionContext,i);
    }
};

LogicalBinaryContext.prototype.AND = function() {
    return this.getToken(SqlBaseParser.AND, 0);
};

LogicalBinaryContext.prototype.OR = function() {
    return this.getToken(SqlBaseParser.OR, 0);
};
LogicalBinaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitLogicalBinary(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlBaseParser.prototype.booleanExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new BooleanExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 146;
    this.enterRecursionRule(localctx, 146, SqlBaseParser.RULE_booleanExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1952;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,259,this._ctx);
        switch(la_) {
        case 1:
            localctx = new LogicalNotContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 1941;
            this.match(SqlBaseParser.NOT);
            this.state = 1942;
            this.booleanExpression(5);
            break;

        case 2:
            localctx = new ExistsContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1943;
            this.match(SqlBaseParser.EXISTS);
            this.state = 1944;
            this.match(SqlBaseParser.T__1);
            this.state = 1945;
            this.query();
            this.state = 1946;
            this.match(SqlBaseParser.T__2);
            break;

        case 3:
            localctx = new PredicatedContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1948;
            this.valueExpression(0);
            this.state = 1950;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,258,this._ctx);
            if(la_===1) {
                this.state = 1949;
                this.predicate();

            }
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1962;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,261,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1960;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,260,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new LogicalBinaryContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_booleanExpression);
                    this.state = 1954;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 1955;
                    localctx.operator = this.match(SqlBaseParser.AND);
                    this.state = 1956;
                    localctx.right = this.booleanExpression(3);
                    break;

                case 2:
                    localctx = new LogicalBinaryContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_booleanExpression);
                    this.state = 1957;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 1958;
                    localctx.operator = this.match(SqlBaseParser.OR);
                    this.state = 1959;
                    localctx.right = this.booleanExpression(2);
                    break;

                } 
            }
            this.state = 1964;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,261,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function PredicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_predicate;
    this.kind = null; // Token
    this.lower = null; // ValueExpressionContext
    this.upper = null; // ValueExpressionContext
    this.pattern = null; // ValueExpressionContext
    this.right = null; // ValueExpressionContext
    return this;
}

PredicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicateContext.prototype.constructor = PredicateContext;

PredicateContext.prototype.AND = function() {
    return this.getToken(SqlBaseParser.AND, 0);
};

PredicateContext.prototype.BETWEEN = function() {
    return this.getToken(SqlBaseParser.BETWEEN, 0);
};

PredicateContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

PredicateContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

PredicateContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

PredicateContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};

PredicateContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

PredicateContext.prototype.RLIKE = function() {
    return this.getToken(SqlBaseParser.RLIKE, 0);
};

PredicateContext.prototype.LIKE = function() {
    return this.getToken(SqlBaseParser.LIKE, 0);
};

PredicateContext.prototype.IS = function() {
    return this.getToken(SqlBaseParser.IS, 0);
};

PredicateContext.prototype.NULL = function() {
    return this.getToken(SqlBaseParser.NULL, 0);
};

PredicateContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

PredicateContext.prototype.DISTINCT = function() {
    return this.getToken(SqlBaseParser.DISTINCT, 0);
};

PredicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitPredicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.PredicateContext = PredicateContext;

SqlBaseParser.prototype.predicate = function() {

    var localctx = new PredicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, SqlBaseParser.RULE_predicate);
    var _la = 0; // Token type
    try {
        this.state = 2013;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,269,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1966;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 1965;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 1968;
            localctx.kind = this.match(SqlBaseParser.BETWEEN);
            this.state = 1969;
            localctx.lower = this.valueExpression(0);
            this.state = 1970;
            this.match(SqlBaseParser.AND);
            this.state = 1971;
            localctx.upper = this.valueExpression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1974;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 1973;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 1976;
            localctx.kind = this.match(SqlBaseParser.IN);
            this.state = 1977;
            this.match(SqlBaseParser.T__1);
            this.state = 1978;
            this.expression();
            this.state = 1983;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__3) {
                this.state = 1979;
                this.match(SqlBaseParser.T__3);
                this.state = 1980;
                this.expression();
                this.state = 1985;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1986;
            this.match(SqlBaseParser.T__2);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1989;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 1988;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 1991;
            localctx.kind = this.match(SqlBaseParser.IN);
            this.state = 1992;
            this.match(SqlBaseParser.T__1);
            this.state = 1993;
            this.query();
            this.state = 1994;
            this.match(SqlBaseParser.T__2);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1997;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 1996;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 1999;
            localctx.kind = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.LIKE || _la===SqlBaseParser.RLIKE)) {
                localctx.kind = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2000;
            localctx.pattern = this.valueExpression(0);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2001;
            this.match(SqlBaseParser.IS);
            this.state = 2003;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 2002;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 2005;
            localctx.kind = this.match(SqlBaseParser.NULL);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2006;
            this.match(SqlBaseParser.IS);
            this.state = 2008;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 2007;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 2010;
            localctx.kind = this.match(SqlBaseParser.DISTINCT);
            this.state = 2011;
            this.match(SqlBaseParser.FROM);
            this.state = 2012;
            localctx.right = this.valueExpression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ValueExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_valueExpression;
    return this;
}

ValueExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueExpressionContext.prototype.constructor = ValueExpressionContext;


 
ValueExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ValueExpressionDefaultContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ValueExpressionDefaultContext.prototype = Object.create(ValueExpressionContext.prototype);
ValueExpressionDefaultContext.prototype.constructor = ValueExpressionDefaultContext;

SqlBaseParser.ValueExpressionDefaultContext = ValueExpressionDefaultContext;

ValueExpressionDefaultContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};
ValueExpressionDefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitValueExpressionDefault(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ComparisonContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    this.left = null; // ValueExpressionContext;
    this.right = null; // ValueExpressionContext;
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ComparisonContext.prototype = Object.create(ValueExpressionContext.prototype);
ComparisonContext.prototype.constructor = ComparisonContext;

SqlBaseParser.ComparisonContext = ComparisonContext;

ComparisonContext.prototype.comparisonOperator = function() {
    return this.getTypedRuleContext(ComparisonOperatorContext,0);
};

ComparisonContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};
ComparisonContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitComparison(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ArithmeticBinaryContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    this.left = null; // ValueExpressionContext;
    this.operator = null; // Token;
    this.right = null; // ValueExpressionContext;
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArithmeticBinaryContext.prototype = Object.create(ValueExpressionContext.prototype);
ArithmeticBinaryContext.prototype.constructor = ArithmeticBinaryContext;

SqlBaseParser.ArithmeticBinaryContext = ArithmeticBinaryContext;

ArithmeticBinaryContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

ArithmeticBinaryContext.prototype.ASTERISK = function() {
    return this.getToken(SqlBaseParser.ASTERISK, 0);
};

ArithmeticBinaryContext.prototype.SLASH = function() {
    return this.getToken(SqlBaseParser.SLASH, 0);
};

ArithmeticBinaryContext.prototype.PERCENT = function() {
    return this.getToken(SqlBaseParser.PERCENT, 0);
};

ArithmeticBinaryContext.prototype.DIV = function() {
    return this.getToken(SqlBaseParser.DIV, 0);
};

ArithmeticBinaryContext.prototype.PLUS = function() {
    return this.getToken(SqlBaseParser.PLUS, 0);
};

ArithmeticBinaryContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};

ArithmeticBinaryContext.prototype.CONCAT_PIPE = function() {
    return this.getToken(SqlBaseParser.CONCAT_PIPE, 0);
};

ArithmeticBinaryContext.prototype.AMPERSAND = function() {
    return this.getToken(SqlBaseParser.AMPERSAND, 0);
};

ArithmeticBinaryContext.prototype.HAT = function() {
    return this.getToken(SqlBaseParser.HAT, 0);
};

ArithmeticBinaryContext.prototype.PIPE = function() {
    return this.getToken(SqlBaseParser.PIPE, 0);
};
ArithmeticBinaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitArithmeticBinary(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ArithmeticUnaryContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    this.operator = null; // Token;
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArithmeticUnaryContext.prototype = Object.create(ValueExpressionContext.prototype);
ArithmeticUnaryContext.prototype.constructor = ArithmeticUnaryContext;

SqlBaseParser.ArithmeticUnaryContext = ArithmeticUnaryContext;

ArithmeticUnaryContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

ArithmeticUnaryContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};

ArithmeticUnaryContext.prototype.PLUS = function() {
    return this.getToken(SqlBaseParser.PLUS, 0);
};

ArithmeticUnaryContext.prototype.TILDE = function() {
    return this.getToken(SqlBaseParser.TILDE, 0);
};
ArithmeticUnaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitArithmeticUnary(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlBaseParser.prototype.valueExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ValueExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 150;
    this.enterRecursionRule(localctx, 150, SqlBaseParser.RULE_valueExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2019;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,270,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ValueExpressionDefaultContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 2016;
            this.primaryExpression(0);
            break;

        case 2:
            localctx = new ArithmeticUnaryContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2017;
            localctx.operator = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (SqlBaseParser.PLUS - 138)) | (1 << (SqlBaseParser.MINUS - 138)) | (1 << (SqlBaseParser.TILDE - 138)))) !== 0))) {
                localctx.operator = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2018;
            this.valueExpression(7);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 2042;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,272,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 2040;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,271,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 2021;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 2022;
                    localctx.operator = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (SqlBaseParser.ASTERISK - 140)) | (1 << (SqlBaseParser.SLASH - 140)) | (1 << (SqlBaseParser.PERCENT - 140)) | (1 << (SqlBaseParser.DIV - 140)))) !== 0))) {
                        localctx.operator = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2023;
                    localctx.right = this.valueExpression(7);
                    break;

                case 2:
                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 2024;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 2025;
                    localctx.operator = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (SqlBaseParser.PLUS - 138)) | (1 << (SqlBaseParser.MINUS - 138)) | (1 << (SqlBaseParser.CONCAT_PIPE - 138)))) !== 0))) {
                        localctx.operator = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2026;
                    localctx.right = this.valueExpression(6);
                    break;

                case 3:
                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 2027;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 2028;
                    localctx.operator = this.match(SqlBaseParser.AMPERSAND);
                    this.state = 2029;
                    localctx.right = this.valueExpression(5);
                    break;

                case 4:
                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 2030;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 2031;
                    localctx.operator = this.match(SqlBaseParser.HAT);
                    this.state = 2032;
                    localctx.right = this.valueExpression(4);
                    break;

                case 5:
                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 2033;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 2034;
                    localctx.operator = this.match(SqlBaseParser.PIPE);
                    this.state = 2035;
                    localctx.right = this.valueExpression(3);
                    break;

                case 6:
                    localctx = new ComparisonContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 2036;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 2037;
                    this.comparisonOperator();
                    this.state = 2038;
                    localctx.right = this.valueExpression(2);
                    break;

                } 
            }
            this.state = 2044;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,272,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function PrimaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_primaryExpression;
    return this;
}

PrimaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;


 
PrimaryExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function StructContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this._namedExpression = null; // NamedExpressionContext;
    this.argument = []; // of NamedExpressionContexts;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StructContext.prototype = Object.create(PrimaryExpressionContext.prototype);
StructContext.prototype.constructor = StructContext;

SqlBaseParser.StructContext = StructContext;

StructContext.prototype.STRUCT = function() {
    return this.getToken(SqlBaseParser.STRUCT, 0);
};

StructContext.prototype.namedExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedExpressionContext);
    } else {
        return this.getTypedRuleContext(NamedExpressionContext,i);
    }
};
StructContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitStruct(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DereferenceContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.base = null; // PrimaryExpressionContext;
    this.fieldName = null; // IdentifierContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DereferenceContext.prototype = Object.create(PrimaryExpressionContext.prototype);
DereferenceContext.prototype.constructor = DereferenceContext;

SqlBaseParser.DereferenceContext = DereferenceContext;

DereferenceContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

DereferenceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
DereferenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitDereference(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleCaseContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.value = null; // ExpressionContext;
    this.elseExpression = null; // ExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleCaseContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SimpleCaseContext.prototype.constructor = SimpleCaseContext;

SqlBaseParser.SimpleCaseContext = SimpleCaseContext;

SimpleCaseContext.prototype.CASE = function() {
    return this.getToken(SqlBaseParser.CASE, 0);
};

SimpleCaseContext.prototype.END = function() {
    return this.getToken(SqlBaseParser.END, 0);
};

SimpleCaseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SimpleCaseContext.prototype.whenClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WhenClauseContext);
    } else {
        return this.getTypedRuleContext(WhenClauseContext,i);
    }
};

SimpleCaseContext.prototype.ELSE = function() {
    return this.getToken(SqlBaseParser.ELSE, 0);
};
SimpleCaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitSimpleCase(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnReferenceContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnReferenceContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ColumnReferenceContext.prototype.constructor = ColumnReferenceContext;

SqlBaseParser.ColumnReferenceContext = ColumnReferenceContext;

ColumnReferenceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
ColumnReferenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitColumnReference(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RowConstructorContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RowConstructorContext.prototype = Object.create(PrimaryExpressionContext.prototype);
RowConstructorContext.prototype.constructor = RowConstructorContext;

SqlBaseParser.RowConstructorContext = RowConstructorContext;

RowConstructorContext.prototype.namedExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedExpressionContext);
    } else {
        return this.getTypedRuleContext(NamedExpressionContext,i);
    }
};
RowConstructorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitRowConstructor(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LastContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LastContext.prototype = Object.create(PrimaryExpressionContext.prototype);
LastContext.prototype.constructor = LastContext;

SqlBaseParser.LastContext = LastContext;

LastContext.prototype.LAST = function() {
    return this.getToken(SqlBaseParser.LAST, 0);
};

LastContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

LastContext.prototype.IGNORE = function() {
    return this.getToken(SqlBaseParser.IGNORE, 0);
};

LastContext.prototype.NULLS = function() {
    return this.getToken(SqlBaseParser.NULLS, 0);
};
LastContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitLast(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function StarContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StarContext.prototype = Object.create(PrimaryExpressionContext.prototype);
StarContext.prototype.constructor = StarContext;

SqlBaseParser.StarContext = StarContext;

StarContext.prototype.ASTERISK = function() {
    return this.getToken(SqlBaseParser.ASTERISK, 0);
};

StarContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};
StarContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitStar(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SubscriptContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.value = null; // PrimaryExpressionContext;
    this.index = null; // ValueExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubscriptContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SubscriptContext.prototype.constructor = SubscriptContext;

SqlBaseParser.SubscriptContext = SubscriptContext;

SubscriptContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

SubscriptContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};
SubscriptContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitSubscript(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SubqueryExpressionContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubqueryExpressionContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SubqueryExpressionContext.prototype.constructor = SubqueryExpressionContext;

SqlBaseParser.SubqueryExpressionContext = SubqueryExpressionContext;

SubqueryExpressionContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};
SubqueryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitSubqueryExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CastContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CastContext.prototype = Object.create(PrimaryExpressionContext.prototype);
CastContext.prototype.constructor = CastContext;

SqlBaseParser.CastContext = CastContext;

CastContext.prototype.CAST = function() {
    return this.getToken(SqlBaseParser.CAST, 0);
};

CastContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

CastContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

CastContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};
CastContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitCast(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ConstantDefaultContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConstantDefaultContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ConstantDefaultContext.prototype.constructor = ConstantDefaultContext;

SqlBaseParser.ConstantDefaultContext = ConstantDefaultContext;

ConstantDefaultContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};
ConstantDefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitConstantDefault(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ParenthesizedExpressionContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenthesizedExpressionContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ParenthesizedExpressionContext.prototype.constructor = ParenthesizedExpressionContext;

SqlBaseParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

ParenthesizedExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ParenthesizedExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitParenthesizedExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ExtractContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.field = null; // IdentifierContext;
    this.source = null; // ValueExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExtractContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ExtractContext.prototype.constructor = ExtractContext;

SqlBaseParser.ExtractContext = ExtractContext;

ExtractContext.prototype.EXTRACT = function() {
    return this.getToken(SqlBaseParser.EXTRACT, 0);
};

ExtractContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

ExtractContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ExtractContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};
ExtractContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitExtract(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FunctionCallContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this._expression = null; // ExpressionContext;
    this.argument = []; // of ExpressionContexts;
    this.trimOption = null; // Token;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FunctionCallContext.prototype = Object.create(PrimaryExpressionContext.prototype);
FunctionCallContext.prototype.constructor = FunctionCallContext;

SqlBaseParser.FunctionCallContext = FunctionCallContext;

FunctionCallContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

FunctionCallContext.prototype.OVER = function() {
    return this.getToken(SqlBaseParser.OVER, 0);
};

FunctionCallContext.prototype.windowSpec = function() {
    return this.getTypedRuleContext(WindowSpecContext,0);
};

FunctionCallContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

FunctionCallContext.prototype.setQuantifier = function() {
    return this.getTypedRuleContext(SetQuantifierContext,0);
};

FunctionCallContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

FunctionCallContext.prototype.BOTH = function() {
    return this.getToken(SqlBaseParser.BOTH, 0);
};

FunctionCallContext.prototype.LEADING = function() {
    return this.getToken(SqlBaseParser.LEADING, 0);
};

FunctionCallContext.prototype.TRAILING = function() {
    return this.getToken(SqlBaseParser.TRAILING, 0);
};
FunctionCallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitFunctionCall(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SearchedCaseContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.elseExpression = null; // ExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SearchedCaseContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SearchedCaseContext.prototype.constructor = SearchedCaseContext;

SqlBaseParser.SearchedCaseContext = SearchedCaseContext;

SearchedCaseContext.prototype.CASE = function() {
    return this.getToken(SqlBaseParser.CASE, 0);
};

SearchedCaseContext.prototype.END = function() {
    return this.getToken(SqlBaseParser.END, 0);
};

SearchedCaseContext.prototype.whenClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WhenClauseContext);
    } else {
        return this.getTypedRuleContext(WhenClauseContext,i);
    }
};

SearchedCaseContext.prototype.ELSE = function() {
    return this.getToken(SqlBaseParser.ELSE, 0);
};

SearchedCaseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SearchedCaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitSearchedCase(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PositionContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.substr = null; // ValueExpressionContext;
    this.str = null; // ValueExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PositionContext.prototype = Object.create(PrimaryExpressionContext.prototype);
PositionContext.prototype.constructor = PositionContext;

SqlBaseParser.PositionContext = PositionContext;

PositionContext.prototype.POSITION = function() {
    return this.getToken(SqlBaseParser.POSITION, 0);
};

PositionContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};

PositionContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};
PositionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitPosition(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FirstContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FirstContext.prototype = Object.create(PrimaryExpressionContext.prototype);
FirstContext.prototype.constructor = FirstContext;

SqlBaseParser.FirstContext = FirstContext;

FirstContext.prototype.FIRST = function() {
    return this.getToken(SqlBaseParser.FIRST, 0);
};

FirstContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

FirstContext.prototype.IGNORE = function() {
    return this.getToken(SqlBaseParser.IGNORE, 0);
};

FirstContext.prototype.NULLS = function() {
    return this.getToken(SqlBaseParser.NULLS, 0);
};
FirstContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitFirst(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlBaseParser.prototype.primaryExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new PrimaryExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 152;
    this.enterRecursionRule(localctx, 152, SqlBaseParser.RULE_primaryExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2176;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,286,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SearchedCaseContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 2046;
            this.match(SqlBaseParser.CASE);
            this.state = 2048; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2047;
                this.whenClause();
                this.state = 2050; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SqlBaseParser.WHEN);
            this.state = 2054;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.ELSE) {
                this.state = 2052;
                this.match(SqlBaseParser.ELSE);
                this.state = 2053;
                localctx.elseExpression = this.expression();
            }

            this.state = 2056;
            this.match(SqlBaseParser.END);
            break;

        case 2:
            localctx = new SimpleCaseContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2058;
            this.match(SqlBaseParser.CASE);
            this.state = 2059;
            localctx.value = this.expression();
            this.state = 2061; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2060;
                this.whenClause();
                this.state = 2063; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SqlBaseParser.WHEN);
            this.state = 2067;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.ELSE) {
                this.state = 2065;
                this.match(SqlBaseParser.ELSE);
                this.state = 2066;
                localctx.elseExpression = this.expression();
            }

            this.state = 2069;
            this.match(SqlBaseParser.END);
            break;

        case 3:
            localctx = new CastContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2071;
            this.match(SqlBaseParser.CAST);
            this.state = 2072;
            this.match(SqlBaseParser.T__1);
            this.state = 2073;
            this.expression();
            this.state = 2074;
            this.match(SqlBaseParser.AS);
            this.state = 2075;
            this.dataType();
            this.state = 2076;
            this.match(SqlBaseParser.T__2);
            break;

        case 4:
            localctx = new StructContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2078;
            this.match(SqlBaseParser.STRUCT);
            this.state = 2079;
            this.match(SqlBaseParser.T__1);
            this.state = 2088;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.NOT - 32)) | (1 << (SqlBaseParser.NO - 32)) | (1 << (SqlBaseParser.EXISTS - 32)) | (1 << (SqlBaseParser.BETWEEN - 32)) | (1 << (SqlBaseParser.LIKE - 32)) | (1 << (SqlBaseParser.RLIKE - 32)) | (1 << (SqlBaseParser.IS - 32)) | (1 << (SqlBaseParser.NULL - 32)) | (1 << (SqlBaseParser.TRUE - 32)) | (1 << (SqlBaseParser.FALSE - 32)) | (1 << (SqlBaseParser.NULLS - 32)) | (1 << (SqlBaseParser.ASC - 32)) | (1 << (SqlBaseParser.DESC - 32)) | (1 << (SqlBaseParser.FOR - 32)) | (1 << (SqlBaseParser.INTERVAL - 32)) | (1 << (SqlBaseParser.CASE - 32)) | (1 << (SqlBaseParser.WHEN - 32)) | (1 << (SqlBaseParser.THEN - 32)) | (1 << (SqlBaseParser.ELSE - 32)) | (1 << (SqlBaseParser.END - 32)) | (1 << (SqlBaseParser.JOIN - 32)) | (1 << (SqlBaseParser.CROSS - 32)) | (1 << (SqlBaseParser.OUTER - 32)) | (1 << (SqlBaseParser.INNER - 32)) | (1 << (SqlBaseParser.LEFT - 32)) | (1 << (SqlBaseParser.SEMI - 32)) | (1 << (SqlBaseParser.RIGHT - 32)) | (1 << (SqlBaseParser.FULL - 32)) | (1 << (SqlBaseParser.NATURAL - 32)) | (1 << (SqlBaseParser.ON - 32)) | (1 << (SqlBaseParser.PIVOT - 32)) | (1 << (SqlBaseParser.LATERAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlBaseParser.WINDOW - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.DIRECTORY - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlBaseParser.COLUMNS - 96)) | (1 << (SqlBaseParser.COLUMN - 96)) | (1 << (SqlBaseParser.USE - 96)) | (1 << (SqlBaseParser.PARTITIONS - 96)) | (1 << (SqlBaseParser.FUNCTIONS - 96)) | (1 << (SqlBaseParser.DROP - 96)) | (1 << (SqlBaseParser.UNION - 96)) | (1 << (SqlBaseParser.EXCEPT - 96)) | (1 << (SqlBaseParser.SETMINUS - 96)) | (1 << (SqlBaseParser.INTERSECT - 96)) | (1 << (SqlBaseParser.TO - 96)) | (1 << (SqlBaseParser.TABLESAMPLE - 96)) | (1 << (SqlBaseParser.STRATIFY - 96)) | (1 << (SqlBaseParser.ALTER - 96)) | (1 << (SqlBaseParser.RENAME - 96)) | (1 << (SqlBaseParser.ARRAY - 96)) | (1 << (SqlBaseParser.MAP - 96)) | (1 << (SqlBaseParser.STRUCT - 96)) | (1 << (SqlBaseParser.COMMENT - 96)) | (1 << (SqlBaseParser.SET - 96)) | (1 << (SqlBaseParser.RESET - 96)) | (1 << (SqlBaseParser.DATA - 96)) | (1 << (SqlBaseParser.START - 96)) | (1 << (SqlBaseParser.TRANSACTION - 96)) | (1 << (SqlBaseParser.COMMIT - 96)) | (1 << (SqlBaseParser.ROLLBACK - 96)) | (1 << (SqlBaseParser.MACRO - 96)) | (1 << (SqlBaseParser.IGNORE - 96)) | (1 << (SqlBaseParser.BOTH - 96)) | (1 << (SqlBaseParser.LEADING - 96)) | (1 << (SqlBaseParser.TRAILING - 96)) | (1 << (SqlBaseParser.IF - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.EXTRACT - 128)) | (1 << (SqlBaseParser.PLUS - 128)) | (1 << (SqlBaseParser.MINUS - 128)) | (1 << (SqlBaseParser.ASTERISK - 128)) | (1 << (SqlBaseParser.DIV - 128)) | (1 << (SqlBaseParser.TILDE - 128)) | (1 << (SqlBaseParser.PERCENTLIT - 128)) | (1 << (SqlBaseParser.BUCKET - 128)) | (1 << (SqlBaseParser.OUT - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.SORT - 128)) | (1 << (SqlBaseParser.CLUSTER - 128)) | (1 << (SqlBaseParser.DISTRIBUTE - 128)) | (1 << (SqlBaseParser.OVERWRITE - 128)) | (1 << (SqlBaseParser.TRANSFORM - 128)) | (1 << (SqlBaseParser.REDUCE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlBaseParser.SERDE - 160)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 160)) | (1 << (SqlBaseParser.RECORDREADER - 160)) | (1 << (SqlBaseParser.RECORDWRITER - 160)) | (1 << (SqlBaseParser.DELIMITED - 160)) | (1 << (SqlBaseParser.FIELDS - 160)) | (1 << (SqlBaseParser.TERMINATED - 160)) | (1 << (SqlBaseParser.COLLECTION - 160)) | (1 << (SqlBaseParser.ITEMS - 160)) | (1 << (SqlBaseParser.KEYS - 160)) | (1 << (SqlBaseParser.ESCAPED - 160)) | (1 << (SqlBaseParser.LINES - 160)) | (1 << (SqlBaseParser.SEPARATED - 160)) | (1 << (SqlBaseParser.SQLFUNCTION - 160)) | (1 << (SqlBaseParser.EXTENDED - 160)) | (1 << (SqlBaseParser.REFRESH - 160)) | (1 << (SqlBaseParser.CLEAR - 160)) | (1 << (SqlBaseParser.CACHE - 160)) | (1 << (SqlBaseParser.UNCACHE - 160)) | (1 << (SqlBaseParser.LAZY - 160)) | (1 << (SqlBaseParser.FORMATTED - 160)) | (1 << (SqlBaseParser.GLOBAL - 160)) | (1 << (SqlBaseParser.TEMPORARY - 160)) | (1 << (SqlBaseParser.OPTIONS - 160)) | (1 << (SqlBaseParser.UNSET - 160)) | (1 << (SqlBaseParser.TBLPROPERTIES - 160)) | (1 << (SqlBaseParser.DBPROPERTIES - 160)) | (1 << (SqlBaseParser.BUCKETS - 160)) | (1 << (SqlBaseParser.SKEWED - 160)) | (1 << (SqlBaseParser.STORED - 160)) | (1 << (SqlBaseParser.DIRECTORIES - 160)) | (1 << (SqlBaseParser.LOCATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (SqlBaseParser.EXCHANGE - 192)) | (1 << (SqlBaseParser.ARCHIVE - 192)) | (1 << (SqlBaseParser.UNARCHIVE - 192)) | (1 << (SqlBaseParser.FILEFORMAT - 192)) | (1 << (SqlBaseParser.TOUCH - 192)) | (1 << (SqlBaseParser.COMPACT - 192)) | (1 << (SqlBaseParser.CONCATENATE - 192)) | (1 << (SqlBaseParser.CHANGE - 192)) | (1 << (SqlBaseParser.CASCADE - 192)) | (1 << (SqlBaseParser.RESTRICT - 192)) | (1 << (SqlBaseParser.CLUSTERED - 192)) | (1 << (SqlBaseParser.SORTED - 192)) | (1 << (SqlBaseParser.PURGE - 192)) | (1 << (SqlBaseParser.INPUTFORMAT - 192)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 192)) | (1 << (SqlBaseParser.DATABASE - 192)) | (1 << (SqlBaseParser.DATABASES - 192)) | (1 << (SqlBaseParser.DFS - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.ANALYZE - 192)) | (1 << (SqlBaseParser.COMPUTE - 192)) | (1 << (SqlBaseParser.LIST - 192)) | (1 << (SqlBaseParser.STATISTICS - 192)) | (1 << (SqlBaseParser.PARTITIONED - 192)) | (1 << (SqlBaseParser.EXTERNAL - 192)) | (1 << (SqlBaseParser.DEFINED - 192)) | (1 << (SqlBaseParser.REVOKE - 192)) | (1 << (SqlBaseParser.GRANT - 192)) | (1 << (SqlBaseParser.LOCK - 192)) | (1 << (SqlBaseParser.UNLOCK - 192)) | (1 << (SqlBaseParser.MSCK - 192)) | (1 << (SqlBaseParser.REPAIR - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (SqlBaseParser.RECOVER - 224)) | (1 << (SqlBaseParser.EXPORT - 224)) | (1 << (SqlBaseParser.IMPORT - 224)) | (1 << (SqlBaseParser.LOAD - 224)) | (1 << (SqlBaseParser.ROLE - 224)) | (1 << (SqlBaseParser.ROLES - 224)) | (1 << (SqlBaseParser.COMPACTIONS - 224)) | (1 << (SqlBaseParser.PRINCIPALS - 224)) | (1 << (SqlBaseParser.TRANSACTIONS - 224)) | (1 << (SqlBaseParser.INDEX - 224)) | (1 << (SqlBaseParser.INDEXES - 224)) | (1 << (SqlBaseParser.LOCKS - 224)) | (1 << (SqlBaseParser.OPTION - 224)) | (1 << (SqlBaseParser.ANTI - 224)) | (1 << (SqlBaseParser.LOCAL - 224)) | (1 << (SqlBaseParser.INPATH - 224)) | (1 << (SqlBaseParser.STRING - 224)) | (1 << (SqlBaseParser.BIGINT_LITERAL - 224)) | (1 << (SqlBaseParser.SMALLINT_LITERAL - 224)) | (1 << (SqlBaseParser.TINYINT_LITERAL - 224)) | (1 << (SqlBaseParser.INTEGER_VALUE - 224)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 224)) | (1 << (SqlBaseParser.DOUBLE_LITERAL - 224)) | (1 << (SqlBaseParser.BIGDECIMAL_LITERAL - 224)) | (1 << (SqlBaseParser.IDENTIFIER - 224)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 224)))) !== 0)) {
                this.state = 2080;
                localctx._namedExpression = this.namedExpression();
                localctx.argument.push(localctx._namedExpression);
                this.state = 2085;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__3) {
                    this.state = 2081;
                    this.match(SqlBaseParser.T__3);
                    this.state = 2082;
                    localctx._namedExpression = this.namedExpression();
                    localctx.argument.push(localctx._namedExpression);
                    this.state = 2087;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 2090;
            this.match(SqlBaseParser.T__2);
            break;

        case 5:
            localctx = new FirstContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2091;
            this.match(SqlBaseParser.FIRST);
            this.state = 2092;
            this.match(SqlBaseParser.T__1);
            this.state = 2093;
            this.expression();
            this.state = 2096;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.IGNORE) {
                this.state = 2094;
                this.match(SqlBaseParser.IGNORE);
                this.state = 2095;
                this.match(SqlBaseParser.NULLS);
            }

            this.state = 2098;
            this.match(SqlBaseParser.T__2);
            break;

        case 6:
            localctx = new LastContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2100;
            this.match(SqlBaseParser.LAST);
            this.state = 2101;
            this.match(SqlBaseParser.T__1);
            this.state = 2102;
            this.expression();
            this.state = 2105;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.IGNORE) {
                this.state = 2103;
                this.match(SqlBaseParser.IGNORE);
                this.state = 2104;
                this.match(SqlBaseParser.NULLS);
            }

            this.state = 2107;
            this.match(SqlBaseParser.T__2);
            break;

        case 7:
            localctx = new PositionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2109;
            this.match(SqlBaseParser.POSITION);
            this.state = 2110;
            this.match(SqlBaseParser.T__1);
            this.state = 2111;
            localctx.substr = this.valueExpression(0);
            this.state = 2112;
            this.match(SqlBaseParser.IN);
            this.state = 2113;
            localctx.str = this.valueExpression(0);
            this.state = 2114;
            this.match(SqlBaseParser.T__2);
            break;

        case 8:
            localctx = new ConstantDefaultContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2116;
            this.constant();
            break;

        case 9:
            localctx = new StarContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2117;
            this.match(SqlBaseParser.ASTERISK);
            break;

        case 10:
            localctx = new StarContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2118;
            this.qualifiedName();
            this.state = 2119;
            this.match(SqlBaseParser.T__4);
            this.state = 2120;
            this.match(SqlBaseParser.ASTERISK);
            break;

        case 11:
            localctx = new RowConstructorContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2122;
            this.match(SqlBaseParser.T__1);
            this.state = 2123;
            this.namedExpression();
            this.state = 2126; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2124;
                this.match(SqlBaseParser.T__3);
                this.state = 2125;
                this.namedExpression();
                this.state = 2128; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SqlBaseParser.T__3);
            this.state = 2130;
            this.match(SqlBaseParser.T__2);
            break;

        case 12:
            localctx = new SubqueryExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2132;
            this.match(SqlBaseParser.T__1);
            this.state = 2133;
            this.query();
            this.state = 2134;
            this.match(SqlBaseParser.T__2);
            break;

        case 13:
            localctx = new FunctionCallContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2136;
            this.qualifiedName();
            this.state = 2137;
            this.match(SqlBaseParser.T__1);
            this.state = 2149;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.NOT - 32)) | (1 << (SqlBaseParser.NO - 32)) | (1 << (SqlBaseParser.EXISTS - 32)) | (1 << (SqlBaseParser.BETWEEN - 32)) | (1 << (SqlBaseParser.LIKE - 32)) | (1 << (SqlBaseParser.RLIKE - 32)) | (1 << (SqlBaseParser.IS - 32)) | (1 << (SqlBaseParser.NULL - 32)) | (1 << (SqlBaseParser.TRUE - 32)) | (1 << (SqlBaseParser.FALSE - 32)) | (1 << (SqlBaseParser.NULLS - 32)) | (1 << (SqlBaseParser.ASC - 32)) | (1 << (SqlBaseParser.DESC - 32)) | (1 << (SqlBaseParser.FOR - 32)) | (1 << (SqlBaseParser.INTERVAL - 32)) | (1 << (SqlBaseParser.CASE - 32)) | (1 << (SqlBaseParser.WHEN - 32)) | (1 << (SqlBaseParser.THEN - 32)) | (1 << (SqlBaseParser.ELSE - 32)) | (1 << (SqlBaseParser.END - 32)) | (1 << (SqlBaseParser.JOIN - 32)) | (1 << (SqlBaseParser.CROSS - 32)) | (1 << (SqlBaseParser.OUTER - 32)) | (1 << (SqlBaseParser.INNER - 32)) | (1 << (SqlBaseParser.LEFT - 32)) | (1 << (SqlBaseParser.SEMI - 32)) | (1 << (SqlBaseParser.RIGHT - 32)) | (1 << (SqlBaseParser.FULL - 32)) | (1 << (SqlBaseParser.NATURAL - 32)) | (1 << (SqlBaseParser.ON - 32)) | (1 << (SqlBaseParser.PIVOT - 32)) | (1 << (SqlBaseParser.LATERAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlBaseParser.WINDOW - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.DIRECTORY - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlBaseParser.COLUMNS - 96)) | (1 << (SqlBaseParser.COLUMN - 96)) | (1 << (SqlBaseParser.USE - 96)) | (1 << (SqlBaseParser.PARTITIONS - 96)) | (1 << (SqlBaseParser.FUNCTIONS - 96)) | (1 << (SqlBaseParser.DROP - 96)) | (1 << (SqlBaseParser.UNION - 96)) | (1 << (SqlBaseParser.EXCEPT - 96)) | (1 << (SqlBaseParser.SETMINUS - 96)) | (1 << (SqlBaseParser.INTERSECT - 96)) | (1 << (SqlBaseParser.TO - 96)) | (1 << (SqlBaseParser.TABLESAMPLE - 96)) | (1 << (SqlBaseParser.STRATIFY - 96)) | (1 << (SqlBaseParser.ALTER - 96)) | (1 << (SqlBaseParser.RENAME - 96)) | (1 << (SqlBaseParser.ARRAY - 96)) | (1 << (SqlBaseParser.MAP - 96)) | (1 << (SqlBaseParser.STRUCT - 96)) | (1 << (SqlBaseParser.COMMENT - 96)) | (1 << (SqlBaseParser.SET - 96)) | (1 << (SqlBaseParser.RESET - 96)) | (1 << (SqlBaseParser.DATA - 96)) | (1 << (SqlBaseParser.START - 96)) | (1 << (SqlBaseParser.TRANSACTION - 96)) | (1 << (SqlBaseParser.COMMIT - 96)) | (1 << (SqlBaseParser.ROLLBACK - 96)) | (1 << (SqlBaseParser.MACRO - 96)) | (1 << (SqlBaseParser.IGNORE - 96)) | (1 << (SqlBaseParser.BOTH - 96)) | (1 << (SqlBaseParser.LEADING - 96)) | (1 << (SqlBaseParser.TRAILING - 96)) | (1 << (SqlBaseParser.IF - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.EXTRACT - 128)) | (1 << (SqlBaseParser.PLUS - 128)) | (1 << (SqlBaseParser.MINUS - 128)) | (1 << (SqlBaseParser.ASTERISK - 128)) | (1 << (SqlBaseParser.DIV - 128)) | (1 << (SqlBaseParser.TILDE - 128)) | (1 << (SqlBaseParser.PERCENTLIT - 128)) | (1 << (SqlBaseParser.BUCKET - 128)) | (1 << (SqlBaseParser.OUT - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.SORT - 128)) | (1 << (SqlBaseParser.CLUSTER - 128)) | (1 << (SqlBaseParser.DISTRIBUTE - 128)) | (1 << (SqlBaseParser.OVERWRITE - 128)) | (1 << (SqlBaseParser.TRANSFORM - 128)) | (1 << (SqlBaseParser.REDUCE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlBaseParser.SERDE - 160)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 160)) | (1 << (SqlBaseParser.RECORDREADER - 160)) | (1 << (SqlBaseParser.RECORDWRITER - 160)) | (1 << (SqlBaseParser.DELIMITED - 160)) | (1 << (SqlBaseParser.FIELDS - 160)) | (1 << (SqlBaseParser.TERMINATED - 160)) | (1 << (SqlBaseParser.COLLECTION - 160)) | (1 << (SqlBaseParser.ITEMS - 160)) | (1 << (SqlBaseParser.KEYS - 160)) | (1 << (SqlBaseParser.ESCAPED - 160)) | (1 << (SqlBaseParser.LINES - 160)) | (1 << (SqlBaseParser.SEPARATED - 160)) | (1 << (SqlBaseParser.SQLFUNCTION - 160)) | (1 << (SqlBaseParser.EXTENDED - 160)) | (1 << (SqlBaseParser.REFRESH - 160)) | (1 << (SqlBaseParser.CLEAR - 160)) | (1 << (SqlBaseParser.CACHE - 160)) | (1 << (SqlBaseParser.UNCACHE - 160)) | (1 << (SqlBaseParser.LAZY - 160)) | (1 << (SqlBaseParser.FORMATTED - 160)) | (1 << (SqlBaseParser.GLOBAL - 160)) | (1 << (SqlBaseParser.TEMPORARY - 160)) | (1 << (SqlBaseParser.OPTIONS - 160)) | (1 << (SqlBaseParser.UNSET - 160)) | (1 << (SqlBaseParser.TBLPROPERTIES - 160)) | (1 << (SqlBaseParser.DBPROPERTIES - 160)) | (1 << (SqlBaseParser.BUCKETS - 160)) | (1 << (SqlBaseParser.SKEWED - 160)) | (1 << (SqlBaseParser.STORED - 160)) | (1 << (SqlBaseParser.DIRECTORIES - 160)) | (1 << (SqlBaseParser.LOCATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (SqlBaseParser.EXCHANGE - 192)) | (1 << (SqlBaseParser.ARCHIVE - 192)) | (1 << (SqlBaseParser.UNARCHIVE - 192)) | (1 << (SqlBaseParser.FILEFORMAT - 192)) | (1 << (SqlBaseParser.TOUCH - 192)) | (1 << (SqlBaseParser.COMPACT - 192)) | (1 << (SqlBaseParser.CONCATENATE - 192)) | (1 << (SqlBaseParser.CHANGE - 192)) | (1 << (SqlBaseParser.CASCADE - 192)) | (1 << (SqlBaseParser.RESTRICT - 192)) | (1 << (SqlBaseParser.CLUSTERED - 192)) | (1 << (SqlBaseParser.SORTED - 192)) | (1 << (SqlBaseParser.PURGE - 192)) | (1 << (SqlBaseParser.INPUTFORMAT - 192)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 192)) | (1 << (SqlBaseParser.DATABASE - 192)) | (1 << (SqlBaseParser.DATABASES - 192)) | (1 << (SqlBaseParser.DFS - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.ANALYZE - 192)) | (1 << (SqlBaseParser.COMPUTE - 192)) | (1 << (SqlBaseParser.LIST - 192)) | (1 << (SqlBaseParser.STATISTICS - 192)) | (1 << (SqlBaseParser.PARTITIONED - 192)) | (1 << (SqlBaseParser.EXTERNAL - 192)) | (1 << (SqlBaseParser.DEFINED - 192)) | (1 << (SqlBaseParser.REVOKE - 192)) | (1 << (SqlBaseParser.GRANT - 192)) | (1 << (SqlBaseParser.LOCK - 192)) | (1 << (SqlBaseParser.UNLOCK - 192)) | (1 << (SqlBaseParser.MSCK - 192)) | (1 << (SqlBaseParser.REPAIR - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (SqlBaseParser.RECOVER - 224)) | (1 << (SqlBaseParser.EXPORT - 224)) | (1 << (SqlBaseParser.IMPORT - 224)) | (1 << (SqlBaseParser.LOAD - 224)) | (1 << (SqlBaseParser.ROLE - 224)) | (1 << (SqlBaseParser.ROLES - 224)) | (1 << (SqlBaseParser.COMPACTIONS - 224)) | (1 << (SqlBaseParser.PRINCIPALS - 224)) | (1 << (SqlBaseParser.TRANSACTIONS - 224)) | (1 << (SqlBaseParser.INDEX - 224)) | (1 << (SqlBaseParser.INDEXES - 224)) | (1 << (SqlBaseParser.LOCKS - 224)) | (1 << (SqlBaseParser.OPTION - 224)) | (1 << (SqlBaseParser.ANTI - 224)) | (1 << (SqlBaseParser.LOCAL - 224)) | (1 << (SqlBaseParser.INPATH - 224)) | (1 << (SqlBaseParser.STRING - 224)) | (1 << (SqlBaseParser.BIGINT_LITERAL - 224)) | (1 << (SqlBaseParser.SMALLINT_LITERAL - 224)) | (1 << (SqlBaseParser.TINYINT_LITERAL - 224)) | (1 << (SqlBaseParser.INTEGER_VALUE - 224)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 224)) | (1 << (SqlBaseParser.DOUBLE_LITERAL - 224)) | (1 << (SqlBaseParser.BIGDECIMAL_LITERAL - 224)) | (1 << (SqlBaseParser.IDENTIFIER - 224)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 224)))) !== 0)) {
                this.state = 2139;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,282,this._ctx);
                if(la_===1) {
                    this.state = 2138;
                    this.setQuantifier();

                }
                this.state = 2141;
                localctx._expression = this.expression();
                localctx.argument.push(localctx._expression);
                this.state = 2146;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__3) {
                    this.state = 2142;
                    this.match(SqlBaseParser.T__3);
                    this.state = 2143;
                    localctx._expression = this.expression();
                    localctx.argument.push(localctx._expression);
                    this.state = 2148;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 2151;
            this.match(SqlBaseParser.T__2);
            this.state = 2154;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,285,this._ctx);
            if(la_===1) {
                this.state = 2152;
                this.match(SqlBaseParser.OVER);
                this.state = 2153;
                this.windowSpec();

            }
            break;

        case 14:
            localctx = new FunctionCallContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2156;
            this.qualifiedName();
            this.state = 2157;
            this.match(SqlBaseParser.T__1);
            this.state = 2158;
            localctx.trimOption = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (SqlBaseParser.BOTH - 124)) | (1 << (SqlBaseParser.LEADING - 124)) | (1 << (SqlBaseParser.TRAILING - 124)))) !== 0))) {
                localctx.trimOption = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2159;
            localctx._expression = this.expression();
            localctx.argument.push(localctx._expression);
            this.state = 2160;
            this.match(SqlBaseParser.FROM);
            this.state = 2161;
            localctx._expression = this.expression();
            localctx.argument.push(localctx._expression);
            this.state = 2162;
            this.match(SqlBaseParser.T__2);
            break;

        case 15:
            localctx = new ColumnReferenceContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2164;
            this.identifier();
            break;

        case 16:
            localctx = new ParenthesizedExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2165;
            this.match(SqlBaseParser.T__1);
            this.state = 2166;
            this.expression();
            this.state = 2167;
            this.match(SqlBaseParser.T__2);
            break;

        case 17:
            localctx = new ExtractContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2169;
            this.match(SqlBaseParser.EXTRACT);
            this.state = 2170;
            this.match(SqlBaseParser.T__1);
            this.state = 2171;
            localctx.field = this.identifier();
            this.state = 2172;
            this.match(SqlBaseParser.FROM);
            this.state = 2173;
            localctx.source = this.valueExpression(0);
            this.state = 2174;
            this.match(SqlBaseParser.T__2);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 2188;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,288,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 2186;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,287,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new SubscriptContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
                    localctx.value = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_primaryExpression);
                    this.state = 2178;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 2179;
                    this.match(SqlBaseParser.T__7);
                    this.state = 2180;
                    localctx.index = this.valueExpression(0);
                    this.state = 2181;
                    this.match(SqlBaseParser.T__8);
                    break;

                case 2:
                    localctx = new DereferenceContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
                    localctx.base = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_primaryExpression);
                    this.state = 2183;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 2184;
                    this.match(SqlBaseParser.T__4);
                    this.state = 2185;
                    localctx.fieldName = this.identifier();
                    break;

                } 
            }
            this.state = 2190;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,288,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_constant;
    return this;
}

ConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantContext.prototype.constructor = ConstantContext;


 
ConstantContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function NullLiteralContext(parser, ctx) {
	ConstantContext.call(this, parser);
    ConstantContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NullLiteralContext.prototype = Object.create(ConstantContext.prototype);
NullLiteralContext.prototype.constructor = NullLiteralContext;

SqlBaseParser.NullLiteralContext = NullLiteralContext;

NullLiteralContext.prototype.NULL = function() {
    return this.getToken(SqlBaseParser.NULL, 0);
};
NullLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitNullLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function StringLiteralContext(parser, ctx) {
	ConstantContext.call(this, parser);
    ConstantContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StringLiteralContext.prototype = Object.create(ConstantContext.prototype);
StringLiteralContext.prototype.constructor = StringLiteralContext;

SqlBaseParser.StringLiteralContext = StringLiteralContext;

StringLiteralContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.STRING);
    } else {
        return this.getToken(SqlBaseParser.STRING, i);
    }
};

StringLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitStringLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TypeConstructorContext(parser, ctx) {
	ConstantContext.call(this, parser);
    ConstantContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeConstructorContext.prototype = Object.create(ConstantContext.prototype);
TypeConstructorContext.prototype.constructor = TypeConstructorContext;

SqlBaseParser.TypeConstructorContext = TypeConstructorContext;

TypeConstructorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TypeConstructorContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};
TypeConstructorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitTypeConstructor(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IntervalLiteralContext(parser, ctx) {
	ConstantContext.call(this, parser);
    ConstantContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntervalLiteralContext.prototype = Object.create(ConstantContext.prototype);
IntervalLiteralContext.prototype.constructor = IntervalLiteralContext;

SqlBaseParser.IntervalLiteralContext = IntervalLiteralContext;

IntervalLiteralContext.prototype.interval = function() {
    return this.getTypedRuleContext(IntervalContext,0);
};
IntervalLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitIntervalLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NumericLiteralContext(parser, ctx) {
	ConstantContext.call(this, parser);
    ConstantContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NumericLiteralContext.prototype = Object.create(ConstantContext.prototype);
NumericLiteralContext.prototype.constructor = NumericLiteralContext;

SqlBaseParser.NumericLiteralContext = NumericLiteralContext;

NumericLiteralContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};
NumericLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitNumericLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BooleanLiteralContext(parser, ctx) {
	ConstantContext.call(this, parser);
    ConstantContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BooleanLiteralContext.prototype = Object.create(ConstantContext.prototype);
BooleanLiteralContext.prototype.constructor = BooleanLiteralContext;

SqlBaseParser.BooleanLiteralContext = BooleanLiteralContext;

BooleanLiteralContext.prototype.booleanValue = function() {
    return this.getTypedRuleContext(BooleanValueContext,0);
};
BooleanLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitBooleanLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlBaseParser.ConstantContext = ConstantContext;

SqlBaseParser.prototype.constant = function() {

    var localctx = new ConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, SqlBaseParser.RULE_constant);
    try {
        this.state = 2203;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,290,this._ctx);
        switch(la_) {
        case 1:
            localctx = new NullLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2191;
            this.match(SqlBaseParser.NULL);
            break;

        case 2:
            localctx = new IntervalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2192;
            this.interval();
            break;

        case 3:
            localctx = new TypeConstructorContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2193;
            this.identifier();
            this.state = 2194;
            this.match(SqlBaseParser.STRING);
            break;

        case 4:
            localctx = new NumericLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2196;
            this.number();
            break;

        case 5:
            localctx = new BooleanLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 2197;
            this.booleanValue();
            break;

        case 6:
            localctx = new StringLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 2199; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 2198;
            		this.match(SqlBaseParser.STRING);
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 2201; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,289, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ComparisonOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_comparisonOperator;
    return this;
}

ComparisonOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparisonOperatorContext.prototype.constructor = ComparisonOperatorContext;

ComparisonOperatorContext.prototype.EQ = function() {
    return this.getToken(SqlBaseParser.EQ, 0);
};

ComparisonOperatorContext.prototype.NEQ = function() {
    return this.getToken(SqlBaseParser.NEQ, 0);
};

ComparisonOperatorContext.prototype.NEQJ = function() {
    return this.getToken(SqlBaseParser.NEQJ, 0);
};

ComparisonOperatorContext.prototype.LT = function() {
    return this.getToken(SqlBaseParser.LT, 0);
};

ComparisonOperatorContext.prototype.LTE = function() {
    return this.getToken(SqlBaseParser.LTE, 0);
};

ComparisonOperatorContext.prototype.GT = function() {
    return this.getToken(SqlBaseParser.GT, 0);
};

ComparisonOperatorContext.prototype.GTE = function() {
    return this.getToken(SqlBaseParser.GTE, 0);
};

ComparisonOperatorContext.prototype.NSEQ = function() {
    return this.getToken(SqlBaseParser.NSEQ, 0);
};

ComparisonOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitComparisonOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.ComparisonOperatorContext = ComparisonOperatorContext;

SqlBaseParser.prototype.comparisonOperator = function() {

    var localctx = new ComparisonOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, SqlBaseParser.RULE_comparisonOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2205;
        _la = this._input.LA(1);
        if(!(((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (SqlBaseParser.EQ - 130)) | (1 << (SqlBaseParser.NSEQ - 130)) | (1 << (SqlBaseParser.NEQ - 130)) | (1 << (SqlBaseParser.NEQJ - 130)) | (1 << (SqlBaseParser.LT - 130)) | (1 << (SqlBaseParser.LTE - 130)) | (1 << (SqlBaseParser.GT - 130)) | (1 << (SqlBaseParser.GTE - 130)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArithmeticOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_arithmeticOperator;
    return this;
}

ArithmeticOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArithmeticOperatorContext.prototype.constructor = ArithmeticOperatorContext;

ArithmeticOperatorContext.prototype.PLUS = function() {
    return this.getToken(SqlBaseParser.PLUS, 0);
};

ArithmeticOperatorContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};

ArithmeticOperatorContext.prototype.ASTERISK = function() {
    return this.getToken(SqlBaseParser.ASTERISK, 0);
};

ArithmeticOperatorContext.prototype.SLASH = function() {
    return this.getToken(SqlBaseParser.SLASH, 0);
};

ArithmeticOperatorContext.prototype.PERCENT = function() {
    return this.getToken(SqlBaseParser.PERCENT, 0);
};

ArithmeticOperatorContext.prototype.DIV = function() {
    return this.getToken(SqlBaseParser.DIV, 0);
};

ArithmeticOperatorContext.prototype.TILDE = function() {
    return this.getToken(SqlBaseParser.TILDE, 0);
};

ArithmeticOperatorContext.prototype.AMPERSAND = function() {
    return this.getToken(SqlBaseParser.AMPERSAND, 0);
};

ArithmeticOperatorContext.prototype.PIPE = function() {
    return this.getToken(SqlBaseParser.PIPE, 0);
};

ArithmeticOperatorContext.prototype.CONCAT_PIPE = function() {
    return this.getToken(SqlBaseParser.CONCAT_PIPE, 0);
};

ArithmeticOperatorContext.prototype.HAT = function() {
    return this.getToken(SqlBaseParser.HAT, 0);
};

ArithmeticOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitArithmeticOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.ArithmeticOperatorContext = ArithmeticOperatorContext;

SqlBaseParser.prototype.arithmeticOperator = function() {

    var localctx = new ArithmeticOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, SqlBaseParser.RULE_arithmeticOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2207;
        _la = this._input.LA(1);
        if(!(((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (SqlBaseParser.PLUS - 138)) | (1 << (SqlBaseParser.MINUS - 138)) | (1 << (SqlBaseParser.ASTERISK - 138)) | (1 << (SqlBaseParser.SLASH - 138)) | (1 << (SqlBaseParser.PERCENT - 138)) | (1 << (SqlBaseParser.DIV - 138)) | (1 << (SqlBaseParser.TILDE - 138)) | (1 << (SqlBaseParser.AMPERSAND - 138)) | (1 << (SqlBaseParser.PIPE - 138)) | (1 << (SqlBaseParser.CONCAT_PIPE - 138)) | (1 << (SqlBaseParser.HAT - 138)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PredicateOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_predicateOperator;
    return this;
}

PredicateOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicateOperatorContext.prototype.constructor = PredicateOperatorContext;

PredicateOperatorContext.prototype.OR = function() {
    return this.getToken(SqlBaseParser.OR, 0);
};

PredicateOperatorContext.prototype.AND = function() {
    return this.getToken(SqlBaseParser.AND, 0);
};

PredicateOperatorContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};

PredicateOperatorContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

PredicateOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitPredicateOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.PredicateOperatorContext = PredicateOperatorContext;

SqlBaseParser.prototype.predicateOperator = function() {

    var localctx = new PredicateOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, SqlBaseParser.RULE_predicateOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2209;
        _la = this._input.LA(1);
        if(!(((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (SqlBaseParser.OR - 29)) | (1 << (SqlBaseParser.AND - 29)) | (1 << (SqlBaseParser.IN - 29)) | (1 << (SqlBaseParser.NOT - 29)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BooleanValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_booleanValue;
    return this;
}

BooleanValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanValueContext.prototype.constructor = BooleanValueContext;

BooleanValueContext.prototype.TRUE = function() {
    return this.getToken(SqlBaseParser.TRUE, 0);
};

BooleanValueContext.prototype.FALSE = function() {
    return this.getToken(SqlBaseParser.FALSE, 0);
};

BooleanValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitBooleanValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.BooleanValueContext = BooleanValueContext;

SqlBaseParser.prototype.booleanValue = function() {

    var localctx = new BooleanValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, SqlBaseParser.RULE_booleanValue);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2211;
        _la = this._input.LA(1);
        if(!(_la===SqlBaseParser.TRUE || _la===SqlBaseParser.FALSE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IntervalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_interval;
    return this;
}

IntervalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalContext.prototype.constructor = IntervalContext;

IntervalContext.prototype.INTERVAL = function() {
    return this.getToken(SqlBaseParser.INTERVAL, 0);
};

IntervalContext.prototype.intervalField = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntervalFieldContext);
    } else {
        return this.getTypedRuleContext(IntervalFieldContext,i);
    }
};

IntervalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitInterval(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.IntervalContext = IntervalContext;

SqlBaseParser.prototype.interval = function() {

    var localctx = new IntervalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, SqlBaseParser.RULE_interval);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2213;
        this.match(SqlBaseParser.INTERVAL);
        this.state = 2217;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,291,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2214;
                this.intervalField(); 
            }
            this.state = 2219;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,291,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IntervalFieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_intervalField;
    this.value = null; // IntervalValueContext
    this.unit = null; // IdentifierContext
    this.to = null; // IdentifierContext
    return this;
}

IntervalFieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalFieldContext.prototype.constructor = IntervalFieldContext;

IntervalFieldContext.prototype.intervalValue = function() {
    return this.getTypedRuleContext(IntervalValueContext,0);
};

IntervalFieldContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

IntervalFieldContext.prototype.TO = function() {
    return this.getToken(SqlBaseParser.TO, 0);
};

IntervalFieldContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitIntervalField(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.IntervalFieldContext = IntervalFieldContext;

SqlBaseParser.prototype.intervalField = function() {

    var localctx = new IntervalFieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, SqlBaseParser.RULE_intervalField);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2220;
        localctx.value = this.intervalValue();
        this.state = 2221;
        localctx.unit = this.identifier();
        this.state = 2224;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,292,this._ctx);
        if(la_===1) {
            this.state = 2222;
            this.match(SqlBaseParser.TO);
            this.state = 2223;
            localctx.to = this.identifier();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IntervalValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_intervalValue;
    return this;
}

IntervalValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalValueContext.prototype.constructor = IntervalValueContext;

IntervalValueContext.prototype.INTEGER_VALUE = function() {
    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
};

IntervalValueContext.prototype.DECIMAL_VALUE = function() {
    return this.getToken(SqlBaseParser.DECIMAL_VALUE, 0);
};

IntervalValueContext.prototype.PLUS = function() {
    return this.getToken(SqlBaseParser.PLUS, 0);
};

IntervalValueContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};

IntervalValueContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

IntervalValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitIntervalValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.IntervalValueContext = IntervalValueContext;

SqlBaseParser.prototype.intervalValue = function() {

    var localctx = new IntervalValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, SqlBaseParser.RULE_intervalValue);
    var _la = 0; // Token type
    try {
        this.state = 2231;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.PLUS:
        case SqlBaseParser.MINUS:
        case SqlBaseParser.INTEGER_VALUE:
        case SqlBaseParser.DECIMAL_VALUE:
            this.enterOuterAlt(localctx, 1);
            this.state = 2227;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PLUS || _la===SqlBaseParser.MINUS) {
                this.state = 2226;
                _la = this._input.LA(1);
                if(!(_la===SqlBaseParser.PLUS || _la===SqlBaseParser.MINUS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 2229;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.INTEGER_VALUE || _la===SqlBaseParser.DECIMAL_VALUE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case SqlBaseParser.STRING:
            this.enterOuterAlt(localctx, 2);
            this.state = 2230;
            this.match(SqlBaseParser.STRING);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ColPositionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_colPosition;
    return this;
}

ColPositionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColPositionContext.prototype.constructor = ColPositionContext;

ColPositionContext.prototype.FIRST = function() {
    return this.getToken(SqlBaseParser.FIRST, 0);
};

ColPositionContext.prototype.AFTER = function() {
    return this.getToken(SqlBaseParser.AFTER, 0);
};

ColPositionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ColPositionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitColPosition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.ColPositionContext = ColPositionContext;

SqlBaseParser.prototype.colPosition = function() {

    var localctx = new ColPositionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, SqlBaseParser.RULE_colPosition);
    try {
        this.state = 2236;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.FIRST:
            this.enterOuterAlt(localctx, 1);
            this.state = 2233;
            this.match(SqlBaseParser.FIRST);
            break;
        case SqlBaseParser.AFTER:
            this.enterOuterAlt(localctx, 2);
            this.state = 2234;
            this.match(SqlBaseParser.AFTER);
            this.state = 2235;
            this.identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_dataType;
    return this;
}

DataTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeContext.prototype.constructor = DataTypeContext;


 
DataTypeContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ComplexDataTypeContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    this.complex = null; // Token;
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ComplexDataTypeContext.prototype = Object.create(DataTypeContext.prototype);
ComplexDataTypeContext.prototype.constructor = ComplexDataTypeContext;

SqlBaseParser.ComplexDataTypeContext = ComplexDataTypeContext;

ComplexDataTypeContext.prototype.dataType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DataTypeContext);
    } else {
        return this.getTypedRuleContext(DataTypeContext,i);
    }
};

ComplexDataTypeContext.prototype.ARRAY = function() {
    return this.getToken(SqlBaseParser.ARRAY, 0);
};

ComplexDataTypeContext.prototype.MAP = function() {
    return this.getToken(SqlBaseParser.MAP, 0);
};

ComplexDataTypeContext.prototype.STRUCT = function() {
    return this.getToken(SqlBaseParser.STRUCT, 0);
};

ComplexDataTypeContext.prototype.NEQ = function() {
    return this.getToken(SqlBaseParser.NEQ, 0);
};

ComplexDataTypeContext.prototype.complexColTypeList = function() {
    return this.getTypedRuleContext(ComplexColTypeListContext,0);
};
ComplexDataTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitComplexDataType(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PrimitiveDataTypeContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PrimitiveDataTypeContext.prototype = Object.create(DataTypeContext.prototype);
PrimitiveDataTypeContext.prototype.constructor = PrimitiveDataTypeContext;

SqlBaseParser.PrimitiveDataTypeContext = PrimitiveDataTypeContext;

PrimitiveDataTypeContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PrimitiveDataTypeContext.prototype.INTEGER_VALUE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.INTEGER_VALUE);
    } else {
        return this.getToken(SqlBaseParser.INTEGER_VALUE, i);
    }
};

PrimitiveDataTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitPrimitiveDataType(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlBaseParser.DataTypeContext = DataTypeContext;

SqlBaseParser.prototype.dataType = function() {

    var localctx = new DataTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, SqlBaseParser.RULE_dataType);
    var _la = 0; // Token type
    try {
        this.state = 2272;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,300,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ComplexDataTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2238;
            localctx.complex = this.match(SqlBaseParser.ARRAY);
            this.state = 2239;
            this.match(SqlBaseParser.LT);
            this.state = 2240;
            this.dataType();
            this.state = 2241;
            this.match(SqlBaseParser.GT);
            break;

        case 2:
            localctx = new ComplexDataTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2243;
            localctx.complex = this.match(SqlBaseParser.MAP);
            this.state = 2244;
            this.match(SqlBaseParser.LT);
            this.state = 2245;
            this.dataType();
            this.state = 2246;
            this.match(SqlBaseParser.T__3);
            this.state = 2247;
            this.dataType();
            this.state = 2248;
            this.match(SqlBaseParser.GT);
            break;

        case 3:
            localctx = new ComplexDataTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2250;
            localctx.complex = this.match(SqlBaseParser.STRUCT);
            this.state = 2257;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SqlBaseParser.LT:
                this.state = 2251;
                this.match(SqlBaseParser.LT);
                this.state = 2253;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.NOT - 32)) | (1 << (SqlBaseParser.NO - 32)) | (1 << (SqlBaseParser.EXISTS - 32)) | (1 << (SqlBaseParser.BETWEEN - 32)) | (1 << (SqlBaseParser.LIKE - 32)) | (1 << (SqlBaseParser.RLIKE - 32)) | (1 << (SqlBaseParser.IS - 32)) | (1 << (SqlBaseParser.NULL - 32)) | (1 << (SqlBaseParser.TRUE - 32)) | (1 << (SqlBaseParser.FALSE - 32)) | (1 << (SqlBaseParser.NULLS - 32)) | (1 << (SqlBaseParser.ASC - 32)) | (1 << (SqlBaseParser.DESC - 32)) | (1 << (SqlBaseParser.FOR - 32)) | (1 << (SqlBaseParser.INTERVAL - 32)) | (1 << (SqlBaseParser.CASE - 32)) | (1 << (SqlBaseParser.WHEN - 32)) | (1 << (SqlBaseParser.THEN - 32)) | (1 << (SqlBaseParser.ELSE - 32)) | (1 << (SqlBaseParser.END - 32)) | (1 << (SqlBaseParser.JOIN - 32)) | (1 << (SqlBaseParser.CROSS - 32)) | (1 << (SqlBaseParser.OUTER - 32)) | (1 << (SqlBaseParser.INNER - 32)) | (1 << (SqlBaseParser.LEFT - 32)) | (1 << (SqlBaseParser.SEMI - 32)) | (1 << (SqlBaseParser.RIGHT - 32)) | (1 << (SqlBaseParser.FULL - 32)) | (1 << (SqlBaseParser.NATURAL - 32)) | (1 << (SqlBaseParser.ON - 32)) | (1 << (SqlBaseParser.PIVOT - 32)) | (1 << (SqlBaseParser.LATERAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlBaseParser.WINDOW - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.DIRECTORY - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlBaseParser.COLUMNS - 96)) | (1 << (SqlBaseParser.COLUMN - 96)) | (1 << (SqlBaseParser.USE - 96)) | (1 << (SqlBaseParser.PARTITIONS - 96)) | (1 << (SqlBaseParser.FUNCTIONS - 96)) | (1 << (SqlBaseParser.DROP - 96)) | (1 << (SqlBaseParser.UNION - 96)) | (1 << (SqlBaseParser.EXCEPT - 96)) | (1 << (SqlBaseParser.SETMINUS - 96)) | (1 << (SqlBaseParser.INTERSECT - 96)) | (1 << (SqlBaseParser.TO - 96)) | (1 << (SqlBaseParser.TABLESAMPLE - 96)) | (1 << (SqlBaseParser.STRATIFY - 96)) | (1 << (SqlBaseParser.ALTER - 96)) | (1 << (SqlBaseParser.RENAME - 96)) | (1 << (SqlBaseParser.ARRAY - 96)) | (1 << (SqlBaseParser.MAP - 96)) | (1 << (SqlBaseParser.STRUCT - 96)) | (1 << (SqlBaseParser.COMMENT - 96)) | (1 << (SqlBaseParser.SET - 96)) | (1 << (SqlBaseParser.RESET - 96)) | (1 << (SqlBaseParser.DATA - 96)) | (1 << (SqlBaseParser.START - 96)) | (1 << (SqlBaseParser.TRANSACTION - 96)) | (1 << (SqlBaseParser.COMMIT - 96)) | (1 << (SqlBaseParser.ROLLBACK - 96)) | (1 << (SqlBaseParser.MACRO - 96)) | (1 << (SqlBaseParser.IGNORE - 96)) | (1 << (SqlBaseParser.BOTH - 96)) | (1 << (SqlBaseParser.LEADING - 96)) | (1 << (SqlBaseParser.TRAILING - 96)) | (1 << (SqlBaseParser.IF - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.EXTRACT - 128)) | (1 << (SqlBaseParser.DIV - 128)) | (1 << (SqlBaseParser.PERCENTLIT - 128)) | (1 << (SqlBaseParser.BUCKET - 128)) | (1 << (SqlBaseParser.OUT - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.SORT - 128)) | (1 << (SqlBaseParser.CLUSTER - 128)) | (1 << (SqlBaseParser.DISTRIBUTE - 128)) | (1 << (SqlBaseParser.OVERWRITE - 128)) | (1 << (SqlBaseParser.TRANSFORM - 128)) | (1 << (SqlBaseParser.REDUCE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlBaseParser.SERDE - 160)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 160)) | (1 << (SqlBaseParser.RECORDREADER - 160)) | (1 << (SqlBaseParser.RECORDWRITER - 160)) | (1 << (SqlBaseParser.DELIMITED - 160)) | (1 << (SqlBaseParser.FIELDS - 160)) | (1 << (SqlBaseParser.TERMINATED - 160)) | (1 << (SqlBaseParser.COLLECTION - 160)) | (1 << (SqlBaseParser.ITEMS - 160)) | (1 << (SqlBaseParser.KEYS - 160)) | (1 << (SqlBaseParser.ESCAPED - 160)) | (1 << (SqlBaseParser.LINES - 160)) | (1 << (SqlBaseParser.SEPARATED - 160)) | (1 << (SqlBaseParser.SQLFUNCTION - 160)) | (1 << (SqlBaseParser.EXTENDED - 160)) | (1 << (SqlBaseParser.REFRESH - 160)) | (1 << (SqlBaseParser.CLEAR - 160)) | (1 << (SqlBaseParser.CACHE - 160)) | (1 << (SqlBaseParser.UNCACHE - 160)) | (1 << (SqlBaseParser.LAZY - 160)) | (1 << (SqlBaseParser.FORMATTED - 160)) | (1 << (SqlBaseParser.GLOBAL - 160)) | (1 << (SqlBaseParser.TEMPORARY - 160)) | (1 << (SqlBaseParser.OPTIONS - 160)) | (1 << (SqlBaseParser.UNSET - 160)) | (1 << (SqlBaseParser.TBLPROPERTIES - 160)) | (1 << (SqlBaseParser.DBPROPERTIES - 160)) | (1 << (SqlBaseParser.BUCKETS - 160)) | (1 << (SqlBaseParser.SKEWED - 160)) | (1 << (SqlBaseParser.STORED - 160)) | (1 << (SqlBaseParser.DIRECTORIES - 160)) | (1 << (SqlBaseParser.LOCATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (SqlBaseParser.EXCHANGE - 192)) | (1 << (SqlBaseParser.ARCHIVE - 192)) | (1 << (SqlBaseParser.UNARCHIVE - 192)) | (1 << (SqlBaseParser.FILEFORMAT - 192)) | (1 << (SqlBaseParser.TOUCH - 192)) | (1 << (SqlBaseParser.COMPACT - 192)) | (1 << (SqlBaseParser.CONCATENATE - 192)) | (1 << (SqlBaseParser.CHANGE - 192)) | (1 << (SqlBaseParser.CASCADE - 192)) | (1 << (SqlBaseParser.RESTRICT - 192)) | (1 << (SqlBaseParser.CLUSTERED - 192)) | (1 << (SqlBaseParser.SORTED - 192)) | (1 << (SqlBaseParser.PURGE - 192)) | (1 << (SqlBaseParser.INPUTFORMAT - 192)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 192)) | (1 << (SqlBaseParser.DATABASE - 192)) | (1 << (SqlBaseParser.DATABASES - 192)) | (1 << (SqlBaseParser.DFS - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.ANALYZE - 192)) | (1 << (SqlBaseParser.COMPUTE - 192)) | (1 << (SqlBaseParser.LIST - 192)) | (1 << (SqlBaseParser.STATISTICS - 192)) | (1 << (SqlBaseParser.PARTITIONED - 192)) | (1 << (SqlBaseParser.EXTERNAL - 192)) | (1 << (SqlBaseParser.DEFINED - 192)) | (1 << (SqlBaseParser.REVOKE - 192)) | (1 << (SqlBaseParser.GRANT - 192)) | (1 << (SqlBaseParser.LOCK - 192)) | (1 << (SqlBaseParser.UNLOCK - 192)) | (1 << (SqlBaseParser.MSCK - 192)) | (1 << (SqlBaseParser.REPAIR - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (SqlBaseParser.RECOVER - 224)) | (1 << (SqlBaseParser.EXPORT - 224)) | (1 << (SqlBaseParser.IMPORT - 224)) | (1 << (SqlBaseParser.LOAD - 224)) | (1 << (SqlBaseParser.ROLE - 224)) | (1 << (SqlBaseParser.ROLES - 224)) | (1 << (SqlBaseParser.COMPACTIONS - 224)) | (1 << (SqlBaseParser.PRINCIPALS - 224)) | (1 << (SqlBaseParser.TRANSACTIONS - 224)) | (1 << (SqlBaseParser.INDEX - 224)) | (1 << (SqlBaseParser.INDEXES - 224)) | (1 << (SqlBaseParser.LOCKS - 224)) | (1 << (SqlBaseParser.OPTION - 224)) | (1 << (SqlBaseParser.ANTI - 224)) | (1 << (SqlBaseParser.LOCAL - 224)) | (1 << (SqlBaseParser.INPATH - 224)) | (1 << (SqlBaseParser.IDENTIFIER - 224)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 224)))) !== 0)) {
                    this.state = 2252;
                    this.complexColTypeList();
                }

                this.state = 2255;
                this.match(SqlBaseParser.GT);
                break;
            case SqlBaseParser.NEQ:
                this.state = 2256;
                this.match(SqlBaseParser.NEQ);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 4:
            localctx = new PrimitiveDataTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2259;
            this.identifier();
            this.state = 2270;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,299,this._ctx);
            if(la_===1) {
                this.state = 2260;
                this.match(SqlBaseParser.T__1);
                this.state = 2261;
                this.match(SqlBaseParser.INTEGER_VALUE);
                this.state = 2266;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__3) {
                    this.state = 2262;
                    this.match(SqlBaseParser.T__3);
                    this.state = 2263;
                    this.match(SqlBaseParser.INTEGER_VALUE);
                    this.state = 2268;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2269;
                this.match(SqlBaseParser.T__2);

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ColTypeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_colTypeList;
    return this;
}

ColTypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColTypeListContext.prototype.constructor = ColTypeListContext;

ColTypeListContext.prototype.colType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColTypeContext);
    } else {
        return this.getTypedRuleContext(ColTypeContext,i);
    }
};

ColTypeListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitColTypeList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.ColTypeListContext = ColTypeListContext;

SqlBaseParser.prototype.colTypeList = function() {

    var localctx = new ColTypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, SqlBaseParser.RULE_colTypeList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2274;
        this.colType();
        this.state = 2279;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,301,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2275;
                this.match(SqlBaseParser.T__3);
                this.state = 2276;
                this.colType(); 
            }
            this.state = 2281;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,301,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ColTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_colType;
    return this;
}

ColTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColTypeContext.prototype.constructor = ColTypeContext;

ColTypeContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ColTypeContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

ColTypeContext.prototype.COMMENT = function() {
    return this.getToken(SqlBaseParser.COMMENT, 0);
};

ColTypeContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

ColTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitColType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.ColTypeContext = ColTypeContext;

SqlBaseParser.prototype.colType = function() {

    var localctx = new ColTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, SqlBaseParser.RULE_colType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2282;
        this.identifier();
        this.state = 2283;
        this.dataType();
        this.state = 2286;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,302,this._ctx);
        if(la_===1) {
            this.state = 2284;
            this.match(SqlBaseParser.COMMENT);
            this.state = 2285;
            this.match(SqlBaseParser.STRING);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ComplexColTypeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_complexColTypeList;
    return this;
}

ComplexColTypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComplexColTypeListContext.prototype.constructor = ComplexColTypeListContext;

ComplexColTypeListContext.prototype.complexColType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComplexColTypeContext);
    } else {
        return this.getTypedRuleContext(ComplexColTypeContext,i);
    }
};

ComplexColTypeListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitComplexColTypeList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.ComplexColTypeListContext = ComplexColTypeListContext;

SqlBaseParser.prototype.complexColTypeList = function() {

    var localctx = new ComplexColTypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, SqlBaseParser.RULE_complexColTypeList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2288;
        this.complexColType();
        this.state = 2293;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__3) {
            this.state = 2289;
            this.match(SqlBaseParser.T__3);
            this.state = 2290;
            this.complexColType();
            this.state = 2295;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ComplexColTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_complexColType;
    return this;
}

ComplexColTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComplexColTypeContext.prototype.constructor = ComplexColTypeContext;

ComplexColTypeContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ComplexColTypeContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

ComplexColTypeContext.prototype.COMMENT = function() {
    return this.getToken(SqlBaseParser.COMMENT, 0);
};

ComplexColTypeContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

ComplexColTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitComplexColType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.ComplexColTypeContext = ComplexColTypeContext;

SqlBaseParser.prototype.complexColType = function() {

    var localctx = new ComplexColTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, SqlBaseParser.RULE_complexColType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2296;
        this.identifier();
        this.state = 2297;
        this.match(SqlBaseParser.T__9);
        this.state = 2298;
        this.dataType();
        this.state = 2301;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.COMMENT) {
            this.state = 2299;
            this.match(SqlBaseParser.COMMENT);
            this.state = 2300;
            this.match(SqlBaseParser.STRING);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhenClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_whenClause;
    this.condition = null; // ExpressionContext
    this.result = null; // ExpressionContext
    return this;
}

WhenClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhenClauseContext.prototype.constructor = WhenClauseContext;

WhenClauseContext.prototype.WHEN = function() {
    return this.getToken(SqlBaseParser.WHEN, 0);
};

WhenClauseContext.prototype.THEN = function() {
    return this.getToken(SqlBaseParser.THEN, 0);
};

WhenClauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

WhenClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitWhenClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.WhenClauseContext = WhenClauseContext;

SqlBaseParser.prototype.whenClause = function() {

    var localctx = new WhenClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, SqlBaseParser.RULE_whenClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2303;
        this.match(SqlBaseParser.WHEN);
        this.state = 2304;
        localctx.condition = this.expression();
        this.state = 2305;
        this.match(SqlBaseParser.THEN);
        this.state = 2306;
        localctx.result = this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WindowsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_windows;
    return this;
}

WindowsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowsContext.prototype.constructor = WindowsContext;

WindowsContext.prototype.WINDOW = function() {
    return this.getToken(SqlBaseParser.WINDOW, 0);
};

WindowsContext.prototype.namedWindow = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedWindowContext);
    } else {
        return this.getTypedRuleContext(NamedWindowContext,i);
    }
};

WindowsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitWindows(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.WindowsContext = WindowsContext;

SqlBaseParser.prototype.windows = function() {

    var localctx = new WindowsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, SqlBaseParser.RULE_windows);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2308;
        this.match(SqlBaseParser.WINDOW);
        this.state = 2309;
        this.namedWindow();
        this.state = 2314;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,305,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2310;
                this.match(SqlBaseParser.T__3);
                this.state = 2311;
                this.namedWindow(); 
            }
            this.state = 2316;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,305,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamedWindowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_namedWindow;
    return this;
}

NamedWindowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedWindowContext.prototype.constructor = NamedWindowContext;

NamedWindowContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

NamedWindowContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

NamedWindowContext.prototype.windowSpec = function() {
    return this.getTypedRuleContext(WindowSpecContext,0);
};

NamedWindowContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitNamedWindow(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.NamedWindowContext = NamedWindowContext;

SqlBaseParser.prototype.namedWindow = function() {

    var localctx = new NamedWindowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, SqlBaseParser.RULE_namedWindow);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2317;
        this.identifier();
        this.state = 2318;
        this.match(SqlBaseParser.AS);
        this.state = 2319;
        this.windowSpec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WindowSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_windowSpec;
    return this;
}

WindowSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowSpecContext.prototype.constructor = WindowSpecContext;


 
WindowSpecContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function WindowRefContext(parser, ctx) {
	WindowSpecContext.call(this, parser);
    this.name = null; // IdentifierContext;
    WindowSpecContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WindowRefContext.prototype = Object.create(WindowSpecContext.prototype);
WindowRefContext.prototype.constructor = WindowRefContext;

SqlBaseParser.WindowRefContext = WindowRefContext;

WindowRefContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
WindowRefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitWindowRef(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function WindowDefContext(parser, ctx) {
	WindowSpecContext.call(this, parser);
    this._expression = null; // ExpressionContext;
    this.partition = []; // of ExpressionContexts;
    WindowSpecContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WindowDefContext.prototype = Object.create(WindowSpecContext.prototype);
WindowDefContext.prototype.constructor = WindowDefContext;

SqlBaseParser.WindowDefContext = WindowDefContext;

WindowDefContext.prototype.CLUSTER = function() {
    return this.getToken(SqlBaseParser.CLUSTER, 0);
};

WindowDefContext.prototype.BY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.BY);
    } else {
        return this.getToken(SqlBaseParser.BY, i);
    }
};


WindowDefContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

WindowDefContext.prototype.windowFrame = function() {
    return this.getTypedRuleContext(WindowFrameContext,0);
};

WindowDefContext.prototype.sortItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SortItemContext);
    } else {
        return this.getTypedRuleContext(SortItemContext,i);
    }
};

WindowDefContext.prototype.PARTITION = function() {
    return this.getToken(SqlBaseParser.PARTITION, 0);
};

WindowDefContext.prototype.DISTRIBUTE = function() {
    return this.getToken(SqlBaseParser.DISTRIBUTE, 0);
};

WindowDefContext.prototype.ORDER = function() {
    return this.getToken(SqlBaseParser.ORDER, 0);
};

WindowDefContext.prototype.SORT = function() {
    return this.getToken(SqlBaseParser.SORT, 0);
};
WindowDefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitWindowDef(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlBaseParser.WindowSpecContext = WindowSpecContext;

SqlBaseParser.prototype.windowSpec = function() {

    var localctx = new WindowSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, SqlBaseParser.RULE_windowSpec);
    var _la = 0; // Token type
    try {
        this.state = 2363;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.SELECT:
        case SqlBaseParser.FROM:
        case SqlBaseParser.ADD:
        case SqlBaseParser.AS:
        case SqlBaseParser.ALL:
        case SqlBaseParser.ANY:
        case SqlBaseParser.DISTINCT:
        case SqlBaseParser.WHERE:
        case SqlBaseParser.GROUP:
        case SqlBaseParser.BY:
        case SqlBaseParser.GROUPING:
        case SqlBaseParser.SETS:
        case SqlBaseParser.CUBE:
        case SqlBaseParser.ROLLUP:
        case SqlBaseParser.ORDER:
        case SqlBaseParser.HAVING:
        case SqlBaseParser.LIMIT:
        case SqlBaseParser.AT:
        case SqlBaseParser.OR:
        case SqlBaseParser.AND:
        case SqlBaseParser.IN:
        case SqlBaseParser.NOT:
        case SqlBaseParser.NO:
        case SqlBaseParser.EXISTS:
        case SqlBaseParser.BETWEEN:
        case SqlBaseParser.LIKE:
        case SqlBaseParser.RLIKE:
        case SqlBaseParser.IS:
        case SqlBaseParser.NULL:
        case SqlBaseParser.TRUE:
        case SqlBaseParser.FALSE:
        case SqlBaseParser.NULLS:
        case SqlBaseParser.ASC:
        case SqlBaseParser.DESC:
        case SqlBaseParser.FOR:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.CASE:
        case SqlBaseParser.WHEN:
        case SqlBaseParser.THEN:
        case SqlBaseParser.ELSE:
        case SqlBaseParser.END:
        case SqlBaseParser.JOIN:
        case SqlBaseParser.CROSS:
        case SqlBaseParser.OUTER:
        case SqlBaseParser.INNER:
        case SqlBaseParser.LEFT:
        case SqlBaseParser.SEMI:
        case SqlBaseParser.RIGHT:
        case SqlBaseParser.FULL:
        case SqlBaseParser.NATURAL:
        case SqlBaseParser.ON:
        case SqlBaseParser.PIVOT:
        case SqlBaseParser.LATERAL:
        case SqlBaseParser.WINDOW:
        case SqlBaseParser.OVER:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.RANGE:
        case SqlBaseParser.ROWS:
        case SqlBaseParser.UNBOUNDED:
        case SqlBaseParser.PRECEDING:
        case SqlBaseParser.FOLLOWING:
        case SqlBaseParser.CURRENT:
        case SqlBaseParser.FIRST:
        case SqlBaseParser.AFTER:
        case SqlBaseParser.LAST:
        case SqlBaseParser.ROW:
        case SqlBaseParser.WITH:
        case SqlBaseParser.VALUES:
        case SqlBaseParser.CREATE:
        case SqlBaseParser.TABLE:
        case SqlBaseParser.DIRECTORY:
        case SqlBaseParser.VIEW:
        case SqlBaseParser.REPLACE:
        case SqlBaseParser.INSERT:
        case SqlBaseParser.DELETE:
        case SqlBaseParser.INTO:
        case SqlBaseParser.DESCRIBE:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.FORMAT:
        case SqlBaseParser.LOGICAL:
        case SqlBaseParser.CODEGEN:
        case SqlBaseParser.COST:
        case SqlBaseParser.CAST:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.USE:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.DROP:
        case SqlBaseParser.UNION:
        case SqlBaseParser.EXCEPT:
        case SqlBaseParser.SETMINUS:
        case SqlBaseParser.INTERSECT:
        case SqlBaseParser.TO:
        case SqlBaseParser.TABLESAMPLE:
        case SqlBaseParser.STRATIFY:
        case SqlBaseParser.ALTER:
        case SqlBaseParser.RENAME:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.MAP:
        case SqlBaseParser.STRUCT:
        case SqlBaseParser.COMMENT:
        case SqlBaseParser.SET:
        case SqlBaseParser.RESET:
        case SqlBaseParser.DATA:
        case SqlBaseParser.START:
        case SqlBaseParser.TRANSACTION:
        case SqlBaseParser.COMMIT:
        case SqlBaseParser.ROLLBACK:
        case SqlBaseParser.MACRO:
        case SqlBaseParser.IGNORE:
        case SqlBaseParser.BOTH:
        case SqlBaseParser.LEADING:
        case SqlBaseParser.TRAILING:
        case SqlBaseParser.IF:
        case SqlBaseParser.POSITION:
        case SqlBaseParser.EXTRACT:
        case SqlBaseParser.DIV:
        case SqlBaseParser.PERCENTLIT:
        case SqlBaseParser.BUCKET:
        case SqlBaseParser.OUT:
        case SqlBaseParser.OF:
        case SqlBaseParser.SORT:
        case SqlBaseParser.CLUSTER:
        case SqlBaseParser.DISTRIBUTE:
        case SqlBaseParser.OVERWRITE:
        case SqlBaseParser.TRANSFORM:
        case SqlBaseParser.REDUCE:
        case SqlBaseParser.SERDE:
        case SqlBaseParser.SERDEPROPERTIES:
        case SqlBaseParser.RECORDREADER:
        case SqlBaseParser.RECORDWRITER:
        case SqlBaseParser.DELIMITED:
        case SqlBaseParser.FIELDS:
        case SqlBaseParser.TERMINATED:
        case SqlBaseParser.COLLECTION:
        case SqlBaseParser.ITEMS:
        case SqlBaseParser.KEYS:
        case SqlBaseParser.ESCAPED:
        case SqlBaseParser.LINES:
        case SqlBaseParser.SEPARATED:
        case SqlBaseParser.SQLFUNCTION:
        case SqlBaseParser.EXTENDED:
        case SqlBaseParser.REFRESH:
        case SqlBaseParser.CLEAR:
        case SqlBaseParser.CACHE:
        case SqlBaseParser.UNCACHE:
        case SqlBaseParser.LAZY:
        case SqlBaseParser.FORMATTED:
        case SqlBaseParser.GLOBAL:
        case SqlBaseParser.TEMPORARY:
        case SqlBaseParser.OPTIONS:
        case SqlBaseParser.UNSET:
        case SqlBaseParser.TBLPROPERTIES:
        case SqlBaseParser.DBPROPERTIES:
        case SqlBaseParser.BUCKETS:
        case SqlBaseParser.SKEWED:
        case SqlBaseParser.STORED:
        case SqlBaseParser.DIRECTORIES:
        case SqlBaseParser.LOCATION:
        case SqlBaseParser.EXCHANGE:
        case SqlBaseParser.ARCHIVE:
        case SqlBaseParser.UNARCHIVE:
        case SqlBaseParser.FILEFORMAT:
        case SqlBaseParser.TOUCH:
        case SqlBaseParser.COMPACT:
        case SqlBaseParser.CONCATENATE:
        case SqlBaseParser.CHANGE:
        case SqlBaseParser.CASCADE:
        case SqlBaseParser.RESTRICT:
        case SqlBaseParser.CLUSTERED:
        case SqlBaseParser.SORTED:
        case SqlBaseParser.PURGE:
        case SqlBaseParser.INPUTFORMAT:
        case SqlBaseParser.OUTPUTFORMAT:
        case SqlBaseParser.DATABASE:
        case SqlBaseParser.DATABASES:
        case SqlBaseParser.DFS:
        case SqlBaseParser.TRUNCATE:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.COMPUTE:
        case SqlBaseParser.LIST:
        case SqlBaseParser.STATISTICS:
        case SqlBaseParser.PARTITIONED:
        case SqlBaseParser.EXTERNAL:
        case SqlBaseParser.DEFINED:
        case SqlBaseParser.REVOKE:
        case SqlBaseParser.GRANT:
        case SqlBaseParser.LOCK:
        case SqlBaseParser.UNLOCK:
        case SqlBaseParser.MSCK:
        case SqlBaseParser.REPAIR:
        case SqlBaseParser.RECOVER:
        case SqlBaseParser.EXPORT:
        case SqlBaseParser.IMPORT:
        case SqlBaseParser.LOAD:
        case SqlBaseParser.ROLE:
        case SqlBaseParser.ROLES:
        case SqlBaseParser.COMPACTIONS:
        case SqlBaseParser.PRINCIPALS:
        case SqlBaseParser.TRANSACTIONS:
        case SqlBaseParser.INDEX:
        case SqlBaseParser.INDEXES:
        case SqlBaseParser.LOCKS:
        case SqlBaseParser.OPTION:
        case SqlBaseParser.ANTI:
        case SqlBaseParser.LOCAL:
        case SqlBaseParser.INPATH:
        case SqlBaseParser.IDENTIFIER:
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
            localctx = new WindowRefContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2321;
            localctx.name = this.identifier();
            break;
        case SqlBaseParser.T__1:
            localctx = new WindowDefContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2322;
            this.match(SqlBaseParser.T__1);
            this.state = 2357;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SqlBaseParser.CLUSTER:
                this.state = 2323;
                this.match(SqlBaseParser.CLUSTER);
                this.state = 2324;
                this.match(SqlBaseParser.BY);
                this.state = 2325;
                localctx._expression = this.expression();
                localctx.partition.push(localctx._expression);
                this.state = 2330;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__3) {
                    this.state = 2326;
                    this.match(SqlBaseParser.T__3);
                    this.state = 2327;
                    localctx._expression = this.expression();
                    localctx.partition.push(localctx._expression);
                    this.state = 2332;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                break;
            case SqlBaseParser.T__2:
            case SqlBaseParser.ORDER:
            case SqlBaseParser.PARTITION:
            case SqlBaseParser.RANGE:
            case SqlBaseParser.ROWS:
            case SqlBaseParser.SORT:
            case SqlBaseParser.DISTRIBUTE:
                this.state = 2343;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.PARTITION || _la===SqlBaseParser.DISTRIBUTE) {
                    this.state = 2333;
                    _la = this._input.LA(1);
                    if(!(_la===SqlBaseParser.PARTITION || _la===SqlBaseParser.DISTRIBUTE)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2334;
                    this.match(SqlBaseParser.BY);
                    this.state = 2335;
                    localctx._expression = this.expression();
                    localctx.partition.push(localctx._expression);
                    this.state = 2340;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===SqlBaseParser.T__3) {
                        this.state = 2336;
                        this.match(SqlBaseParser.T__3);
                        this.state = 2337;
                        localctx._expression = this.expression();
                        localctx.partition.push(localctx._expression);
                        this.state = 2342;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                }

                this.state = 2355;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.ORDER || _la===SqlBaseParser.SORT) {
                    this.state = 2345;
                    _la = this._input.LA(1);
                    if(!(_la===SqlBaseParser.ORDER || _la===SqlBaseParser.SORT)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2346;
                    this.match(SqlBaseParser.BY);
                    this.state = 2347;
                    this.sortItem();
                    this.state = 2352;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===SqlBaseParser.T__3) {
                        this.state = 2348;
                        this.match(SqlBaseParser.T__3);
                        this.state = 2349;
                        this.sortItem();
                        this.state = 2354;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                }

                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2360;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.RANGE || _la===SqlBaseParser.ROWS) {
                this.state = 2359;
                this.windowFrame();
            }

            this.state = 2362;
            this.match(SqlBaseParser.T__2);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WindowFrameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_windowFrame;
    this.frameType = null; // Token
    this.start = null; // FrameBoundContext
    this.end = null; // FrameBoundContext
    return this;
}

WindowFrameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowFrameContext.prototype.constructor = WindowFrameContext;

WindowFrameContext.prototype.RANGE = function() {
    return this.getToken(SqlBaseParser.RANGE, 0);
};

WindowFrameContext.prototype.frameBound = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FrameBoundContext);
    } else {
        return this.getTypedRuleContext(FrameBoundContext,i);
    }
};

WindowFrameContext.prototype.ROWS = function() {
    return this.getToken(SqlBaseParser.ROWS, 0);
};

WindowFrameContext.prototype.BETWEEN = function() {
    return this.getToken(SqlBaseParser.BETWEEN, 0);
};

WindowFrameContext.prototype.AND = function() {
    return this.getToken(SqlBaseParser.AND, 0);
};

WindowFrameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitWindowFrame(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.WindowFrameContext = WindowFrameContext;

SqlBaseParser.prototype.windowFrame = function() {

    var localctx = new WindowFrameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, SqlBaseParser.RULE_windowFrame);
    try {
        this.state = 2381;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,314,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2365;
            localctx.frameType = this.match(SqlBaseParser.RANGE);
            this.state = 2366;
            localctx.start = this.frameBound();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2367;
            localctx.frameType = this.match(SqlBaseParser.ROWS);
            this.state = 2368;
            localctx.start = this.frameBound();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2369;
            localctx.frameType = this.match(SqlBaseParser.RANGE);
            this.state = 2370;
            this.match(SqlBaseParser.BETWEEN);
            this.state = 2371;
            localctx.start = this.frameBound();
            this.state = 2372;
            this.match(SqlBaseParser.AND);
            this.state = 2373;
            localctx.end = this.frameBound();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2375;
            localctx.frameType = this.match(SqlBaseParser.ROWS);
            this.state = 2376;
            this.match(SqlBaseParser.BETWEEN);
            this.state = 2377;
            localctx.start = this.frameBound();
            this.state = 2378;
            this.match(SqlBaseParser.AND);
            this.state = 2379;
            localctx.end = this.frameBound();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FrameBoundContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_frameBound;
    this.boundType = null; // Token
    return this;
}

FrameBoundContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FrameBoundContext.prototype.constructor = FrameBoundContext;

FrameBoundContext.prototype.UNBOUNDED = function() {
    return this.getToken(SqlBaseParser.UNBOUNDED, 0);
};

FrameBoundContext.prototype.PRECEDING = function() {
    return this.getToken(SqlBaseParser.PRECEDING, 0);
};

FrameBoundContext.prototype.FOLLOWING = function() {
    return this.getToken(SqlBaseParser.FOLLOWING, 0);
};

FrameBoundContext.prototype.ROW = function() {
    return this.getToken(SqlBaseParser.ROW, 0);
};

FrameBoundContext.prototype.CURRENT = function() {
    return this.getToken(SqlBaseParser.CURRENT, 0);
};

FrameBoundContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

FrameBoundContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitFrameBound(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.FrameBoundContext = FrameBoundContext;

SqlBaseParser.prototype.frameBound = function() {

    var localctx = new FrameBoundContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, SqlBaseParser.RULE_frameBound);
    var _la = 0; // Token type
    try {
        this.state = 2390;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,315,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2383;
            this.match(SqlBaseParser.UNBOUNDED);
            this.state = 2384;
            localctx.boundType = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.PRECEDING || _la===SqlBaseParser.FOLLOWING)) {
                localctx.boundType = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2385;
            localctx.boundType = this.match(SqlBaseParser.CURRENT);
            this.state = 2386;
            this.match(SqlBaseParser.ROW);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2387;
            this.expression();
            this.state = 2388;
            localctx.boundType = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.PRECEDING || _la===SqlBaseParser.FOLLOWING)) {
                localctx.boundType = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QualifiedNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_qualifiedName;
    return this;
}

QualifiedNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedNameContext.prototype.constructor = QualifiedNameContext;

QualifiedNameContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

QualifiedNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitQualifiedName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.QualifiedNameContext = QualifiedNameContext;

SqlBaseParser.prototype.qualifiedName = function() {

    var localctx = new QualifiedNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, SqlBaseParser.RULE_qualifiedName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2392;
        this.identifier();
        this.state = 2397;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,316,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2393;
                this.match(SqlBaseParser.T__4);
                this.state = 2394;
                this.identifier(); 
            }
            this.state = 2399;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,316,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.strictIdentifier = function() {
    return this.getTypedRuleContext(StrictIdentifierContext,0);
};

IdentifierContext.prototype.ANTI = function() {
    return this.getToken(SqlBaseParser.ANTI, 0);
};

IdentifierContext.prototype.FULL = function() {
    return this.getToken(SqlBaseParser.FULL, 0);
};

IdentifierContext.prototype.INNER = function() {
    return this.getToken(SqlBaseParser.INNER, 0);
};

IdentifierContext.prototype.LEFT = function() {
    return this.getToken(SqlBaseParser.LEFT, 0);
};

IdentifierContext.prototype.SEMI = function() {
    return this.getToken(SqlBaseParser.SEMI, 0);
};

IdentifierContext.prototype.RIGHT = function() {
    return this.getToken(SqlBaseParser.RIGHT, 0);
};

IdentifierContext.prototype.NATURAL = function() {
    return this.getToken(SqlBaseParser.NATURAL, 0);
};

IdentifierContext.prototype.JOIN = function() {
    return this.getToken(SqlBaseParser.JOIN, 0);
};

IdentifierContext.prototype.CROSS = function() {
    return this.getToken(SqlBaseParser.CROSS, 0);
};

IdentifierContext.prototype.ON = function() {
    return this.getToken(SqlBaseParser.ON, 0);
};

IdentifierContext.prototype.UNION = function() {
    return this.getToken(SqlBaseParser.UNION, 0);
};

IdentifierContext.prototype.INTERSECT = function() {
    return this.getToken(SqlBaseParser.INTERSECT, 0);
};

IdentifierContext.prototype.EXCEPT = function() {
    return this.getToken(SqlBaseParser.EXCEPT, 0);
};

IdentifierContext.prototype.SETMINUS = function() {
    return this.getToken(SqlBaseParser.SETMINUS, 0);
};

IdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.IdentifierContext = IdentifierContext;

SqlBaseParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, SqlBaseParser.RULE_identifier);
    try {
        this.state = 2415;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.SELECT:
        case SqlBaseParser.FROM:
        case SqlBaseParser.ADD:
        case SqlBaseParser.AS:
        case SqlBaseParser.ALL:
        case SqlBaseParser.ANY:
        case SqlBaseParser.DISTINCT:
        case SqlBaseParser.WHERE:
        case SqlBaseParser.GROUP:
        case SqlBaseParser.BY:
        case SqlBaseParser.GROUPING:
        case SqlBaseParser.SETS:
        case SqlBaseParser.CUBE:
        case SqlBaseParser.ROLLUP:
        case SqlBaseParser.ORDER:
        case SqlBaseParser.HAVING:
        case SqlBaseParser.LIMIT:
        case SqlBaseParser.AT:
        case SqlBaseParser.OR:
        case SqlBaseParser.AND:
        case SqlBaseParser.IN:
        case SqlBaseParser.NOT:
        case SqlBaseParser.NO:
        case SqlBaseParser.EXISTS:
        case SqlBaseParser.BETWEEN:
        case SqlBaseParser.LIKE:
        case SqlBaseParser.RLIKE:
        case SqlBaseParser.IS:
        case SqlBaseParser.NULL:
        case SqlBaseParser.TRUE:
        case SqlBaseParser.FALSE:
        case SqlBaseParser.NULLS:
        case SqlBaseParser.ASC:
        case SqlBaseParser.DESC:
        case SqlBaseParser.FOR:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.CASE:
        case SqlBaseParser.WHEN:
        case SqlBaseParser.THEN:
        case SqlBaseParser.ELSE:
        case SqlBaseParser.END:
        case SqlBaseParser.OUTER:
        case SqlBaseParser.PIVOT:
        case SqlBaseParser.LATERAL:
        case SqlBaseParser.WINDOW:
        case SqlBaseParser.OVER:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.RANGE:
        case SqlBaseParser.ROWS:
        case SqlBaseParser.UNBOUNDED:
        case SqlBaseParser.PRECEDING:
        case SqlBaseParser.FOLLOWING:
        case SqlBaseParser.CURRENT:
        case SqlBaseParser.FIRST:
        case SqlBaseParser.AFTER:
        case SqlBaseParser.LAST:
        case SqlBaseParser.ROW:
        case SqlBaseParser.WITH:
        case SqlBaseParser.VALUES:
        case SqlBaseParser.CREATE:
        case SqlBaseParser.TABLE:
        case SqlBaseParser.DIRECTORY:
        case SqlBaseParser.VIEW:
        case SqlBaseParser.REPLACE:
        case SqlBaseParser.INSERT:
        case SqlBaseParser.DELETE:
        case SqlBaseParser.INTO:
        case SqlBaseParser.DESCRIBE:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.FORMAT:
        case SqlBaseParser.LOGICAL:
        case SqlBaseParser.CODEGEN:
        case SqlBaseParser.COST:
        case SqlBaseParser.CAST:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.USE:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.DROP:
        case SqlBaseParser.TO:
        case SqlBaseParser.TABLESAMPLE:
        case SqlBaseParser.STRATIFY:
        case SqlBaseParser.ALTER:
        case SqlBaseParser.RENAME:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.MAP:
        case SqlBaseParser.STRUCT:
        case SqlBaseParser.COMMENT:
        case SqlBaseParser.SET:
        case SqlBaseParser.RESET:
        case SqlBaseParser.DATA:
        case SqlBaseParser.START:
        case SqlBaseParser.TRANSACTION:
        case SqlBaseParser.COMMIT:
        case SqlBaseParser.ROLLBACK:
        case SqlBaseParser.MACRO:
        case SqlBaseParser.IGNORE:
        case SqlBaseParser.BOTH:
        case SqlBaseParser.LEADING:
        case SqlBaseParser.TRAILING:
        case SqlBaseParser.IF:
        case SqlBaseParser.POSITION:
        case SqlBaseParser.EXTRACT:
        case SqlBaseParser.DIV:
        case SqlBaseParser.PERCENTLIT:
        case SqlBaseParser.BUCKET:
        case SqlBaseParser.OUT:
        case SqlBaseParser.OF:
        case SqlBaseParser.SORT:
        case SqlBaseParser.CLUSTER:
        case SqlBaseParser.DISTRIBUTE:
        case SqlBaseParser.OVERWRITE:
        case SqlBaseParser.TRANSFORM:
        case SqlBaseParser.REDUCE:
        case SqlBaseParser.SERDE:
        case SqlBaseParser.SERDEPROPERTIES:
        case SqlBaseParser.RECORDREADER:
        case SqlBaseParser.RECORDWRITER:
        case SqlBaseParser.DELIMITED:
        case SqlBaseParser.FIELDS:
        case SqlBaseParser.TERMINATED:
        case SqlBaseParser.COLLECTION:
        case SqlBaseParser.ITEMS:
        case SqlBaseParser.KEYS:
        case SqlBaseParser.ESCAPED:
        case SqlBaseParser.LINES:
        case SqlBaseParser.SEPARATED:
        case SqlBaseParser.SQLFUNCTION:
        case SqlBaseParser.EXTENDED:
        case SqlBaseParser.REFRESH:
        case SqlBaseParser.CLEAR:
        case SqlBaseParser.CACHE:
        case SqlBaseParser.UNCACHE:
        case SqlBaseParser.LAZY:
        case SqlBaseParser.FORMATTED:
        case SqlBaseParser.GLOBAL:
        case SqlBaseParser.TEMPORARY:
        case SqlBaseParser.OPTIONS:
        case SqlBaseParser.UNSET:
        case SqlBaseParser.TBLPROPERTIES:
        case SqlBaseParser.DBPROPERTIES:
        case SqlBaseParser.BUCKETS:
        case SqlBaseParser.SKEWED:
        case SqlBaseParser.STORED:
        case SqlBaseParser.DIRECTORIES:
        case SqlBaseParser.LOCATION:
        case SqlBaseParser.EXCHANGE:
        case SqlBaseParser.ARCHIVE:
        case SqlBaseParser.UNARCHIVE:
        case SqlBaseParser.FILEFORMAT:
        case SqlBaseParser.TOUCH:
        case SqlBaseParser.COMPACT:
        case SqlBaseParser.CONCATENATE:
        case SqlBaseParser.CHANGE:
        case SqlBaseParser.CASCADE:
        case SqlBaseParser.RESTRICT:
        case SqlBaseParser.CLUSTERED:
        case SqlBaseParser.SORTED:
        case SqlBaseParser.PURGE:
        case SqlBaseParser.INPUTFORMAT:
        case SqlBaseParser.OUTPUTFORMAT:
        case SqlBaseParser.DATABASE:
        case SqlBaseParser.DATABASES:
        case SqlBaseParser.DFS:
        case SqlBaseParser.TRUNCATE:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.COMPUTE:
        case SqlBaseParser.LIST:
        case SqlBaseParser.STATISTICS:
        case SqlBaseParser.PARTITIONED:
        case SqlBaseParser.EXTERNAL:
        case SqlBaseParser.DEFINED:
        case SqlBaseParser.REVOKE:
        case SqlBaseParser.GRANT:
        case SqlBaseParser.LOCK:
        case SqlBaseParser.UNLOCK:
        case SqlBaseParser.MSCK:
        case SqlBaseParser.REPAIR:
        case SqlBaseParser.RECOVER:
        case SqlBaseParser.EXPORT:
        case SqlBaseParser.IMPORT:
        case SqlBaseParser.LOAD:
        case SqlBaseParser.ROLE:
        case SqlBaseParser.ROLES:
        case SqlBaseParser.COMPACTIONS:
        case SqlBaseParser.PRINCIPALS:
        case SqlBaseParser.TRANSACTIONS:
        case SqlBaseParser.INDEX:
        case SqlBaseParser.INDEXES:
        case SqlBaseParser.LOCKS:
        case SqlBaseParser.OPTION:
        case SqlBaseParser.LOCAL:
        case SqlBaseParser.INPATH:
        case SqlBaseParser.IDENTIFIER:
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 2400;
            this.strictIdentifier();
            break;
        case SqlBaseParser.ANTI:
            this.enterOuterAlt(localctx, 2);
            this.state = 2401;
            this.match(SqlBaseParser.ANTI);
            break;
        case SqlBaseParser.FULL:
            this.enterOuterAlt(localctx, 3);
            this.state = 2402;
            this.match(SqlBaseParser.FULL);
            break;
        case SqlBaseParser.INNER:
            this.enterOuterAlt(localctx, 4);
            this.state = 2403;
            this.match(SqlBaseParser.INNER);
            break;
        case SqlBaseParser.LEFT:
            this.enterOuterAlt(localctx, 5);
            this.state = 2404;
            this.match(SqlBaseParser.LEFT);
            break;
        case SqlBaseParser.SEMI:
            this.enterOuterAlt(localctx, 6);
            this.state = 2405;
            this.match(SqlBaseParser.SEMI);
            break;
        case SqlBaseParser.RIGHT:
            this.enterOuterAlt(localctx, 7);
            this.state = 2406;
            this.match(SqlBaseParser.RIGHT);
            break;
        case SqlBaseParser.NATURAL:
            this.enterOuterAlt(localctx, 8);
            this.state = 2407;
            this.match(SqlBaseParser.NATURAL);
            break;
        case SqlBaseParser.JOIN:
            this.enterOuterAlt(localctx, 9);
            this.state = 2408;
            this.match(SqlBaseParser.JOIN);
            break;
        case SqlBaseParser.CROSS:
            this.enterOuterAlt(localctx, 10);
            this.state = 2409;
            this.match(SqlBaseParser.CROSS);
            break;
        case SqlBaseParser.ON:
            this.enterOuterAlt(localctx, 11);
            this.state = 2410;
            this.match(SqlBaseParser.ON);
            break;
        case SqlBaseParser.UNION:
            this.enterOuterAlt(localctx, 12);
            this.state = 2411;
            this.match(SqlBaseParser.UNION);
            break;
        case SqlBaseParser.INTERSECT:
            this.enterOuterAlt(localctx, 13);
            this.state = 2412;
            this.match(SqlBaseParser.INTERSECT);
            break;
        case SqlBaseParser.EXCEPT:
            this.enterOuterAlt(localctx, 14);
            this.state = 2413;
            this.match(SqlBaseParser.EXCEPT);
            break;
        case SqlBaseParser.SETMINUS:
            this.enterOuterAlt(localctx, 15);
            this.state = 2414;
            this.match(SqlBaseParser.SETMINUS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SqlFuncIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_sqlFuncIdentifier;
    return this;
}

SqlFuncIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SqlFuncIdentifierContext.prototype.constructor = SqlFuncIdentifierContext;

SqlFuncIdentifierContext.prototype.IDENTIFIER = function() {
    return this.getToken(SqlBaseParser.IDENTIFIER, 0);
};

SqlFuncIdentifierContext.prototype.nonReserved = function() {
    return this.getTypedRuleContext(NonReservedContext,0);
};

SqlFuncIdentifierContext.prototype.ANTI = function() {
    return this.getToken(SqlBaseParser.ANTI, 0);
};

SqlFuncIdentifierContext.prototype.FULL = function() {
    return this.getToken(SqlBaseParser.FULL, 0);
};

SqlFuncIdentifierContext.prototype.INNER = function() {
    return this.getToken(SqlBaseParser.INNER, 0);
};

SqlFuncIdentifierContext.prototype.LEFT = function() {
    return this.getToken(SqlBaseParser.LEFT, 0);
};

SqlFuncIdentifierContext.prototype.SEMI = function() {
    return this.getToken(SqlBaseParser.SEMI, 0);
};

SqlFuncIdentifierContext.prototype.RIGHT = function() {
    return this.getToken(SqlBaseParser.RIGHT, 0);
};

SqlFuncIdentifierContext.prototype.NATURAL = function() {
    return this.getToken(SqlBaseParser.NATURAL, 0);
};

SqlFuncIdentifierContext.prototype.JOIN = function() {
    return this.getToken(SqlBaseParser.JOIN, 0);
};

SqlFuncIdentifierContext.prototype.CROSS = function() {
    return this.getToken(SqlBaseParser.CROSS, 0);
};

SqlFuncIdentifierContext.prototype.ON = function() {
    return this.getToken(SqlBaseParser.ON, 0);
};

SqlFuncIdentifierContext.prototype.UNION = function() {
    return this.getToken(SqlBaseParser.UNION, 0);
};

SqlFuncIdentifierContext.prototype.INTERSECT = function() {
    return this.getToken(SqlBaseParser.INTERSECT, 0);
};

SqlFuncIdentifierContext.prototype.EXCEPT = function() {
    return this.getToken(SqlBaseParser.EXCEPT, 0);
};

SqlFuncIdentifierContext.prototype.SETMINUS = function() {
    return this.getToken(SqlBaseParser.SETMINUS, 0);
};

SqlFuncIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitSqlFuncIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.SqlFuncIdentifierContext = SqlFuncIdentifierContext;

SqlBaseParser.prototype.sqlFuncIdentifier = function() {

    var localctx = new SqlFuncIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, SqlBaseParser.RULE_sqlFuncIdentifier);
    try {
        this.state = 2433;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 2417;
            this.match(SqlBaseParser.IDENTIFIER);
            break;
        case SqlBaseParser.SELECT:
        case SqlBaseParser.FROM:
        case SqlBaseParser.ADD:
        case SqlBaseParser.AS:
        case SqlBaseParser.ALL:
        case SqlBaseParser.ANY:
        case SqlBaseParser.DISTINCT:
        case SqlBaseParser.WHERE:
        case SqlBaseParser.GROUP:
        case SqlBaseParser.BY:
        case SqlBaseParser.GROUPING:
        case SqlBaseParser.SETS:
        case SqlBaseParser.CUBE:
        case SqlBaseParser.ROLLUP:
        case SqlBaseParser.ORDER:
        case SqlBaseParser.HAVING:
        case SqlBaseParser.LIMIT:
        case SqlBaseParser.AT:
        case SqlBaseParser.OR:
        case SqlBaseParser.AND:
        case SqlBaseParser.IN:
        case SqlBaseParser.NOT:
        case SqlBaseParser.NO:
        case SqlBaseParser.EXISTS:
        case SqlBaseParser.BETWEEN:
        case SqlBaseParser.LIKE:
        case SqlBaseParser.RLIKE:
        case SqlBaseParser.IS:
        case SqlBaseParser.NULL:
        case SqlBaseParser.TRUE:
        case SqlBaseParser.FALSE:
        case SqlBaseParser.NULLS:
        case SqlBaseParser.ASC:
        case SqlBaseParser.DESC:
        case SqlBaseParser.FOR:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.CASE:
        case SqlBaseParser.WHEN:
        case SqlBaseParser.THEN:
        case SqlBaseParser.ELSE:
        case SqlBaseParser.END:
        case SqlBaseParser.OUTER:
        case SqlBaseParser.PIVOT:
        case SqlBaseParser.LATERAL:
        case SqlBaseParser.WINDOW:
        case SqlBaseParser.OVER:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.RANGE:
        case SqlBaseParser.ROWS:
        case SqlBaseParser.UNBOUNDED:
        case SqlBaseParser.PRECEDING:
        case SqlBaseParser.FOLLOWING:
        case SqlBaseParser.CURRENT:
        case SqlBaseParser.FIRST:
        case SqlBaseParser.AFTER:
        case SqlBaseParser.LAST:
        case SqlBaseParser.ROW:
        case SqlBaseParser.WITH:
        case SqlBaseParser.VALUES:
        case SqlBaseParser.CREATE:
        case SqlBaseParser.TABLE:
        case SqlBaseParser.DIRECTORY:
        case SqlBaseParser.VIEW:
        case SqlBaseParser.REPLACE:
        case SqlBaseParser.INSERT:
        case SqlBaseParser.DELETE:
        case SqlBaseParser.INTO:
        case SqlBaseParser.DESCRIBE:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.FORMAT:
        case SqlBaseParser.LOGICAL:
        case SqlBaseParser.CODEGEN:
        case SqlBaseParser.COST:
        case SqlBaseParser.CAST:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.USE:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.DROP:
        case SqlBaseParser.TO:
        case SqlBaseParser.TABLESAMPLE:
        case SqlBaseParser.STRATIFY:
        case SqlBaseParser.ALTER:
        case SqlBaseParser.RENAME:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.MAP:
        case SqlBaseParser.STRUCT:
        case SqlBaseParser.COMMENT:
        case SqlBaseParser.SET:
        case SqlBaseParser.RESET:
        case SqlBaseParser.DATA:
        case SqlBaseParser.START:
        case SqlBaseParser.TRANSACTION:
        case SqlBaseParser.COMMIT:
        case SqlBaseParser.ROLLBACK:
        case SqlBaseParser.MACRO:
        case SqlBaseParser.IGNORE:
        case SqlBaseParser.BOTH:
        case SqlBaseParser.LEADING:
        case SqlBaseParser.TRAILING:
        case SqlBaseParser.IF:
        case SqlBaseParser.POSITION:
        case SqlBaseParser.EXTRACT:
        case SqlBaseParser.DIV:
        case SqlBaseParser.PERCENTLIT:
        case SqlBaseParser.BUCKET:
        case SqlBaseParser.OUT:
        case SqlBaseParser.OF:
        case SqlBaseParser.SORT:
        case SqlBaseParser.CLUSTER:
        case SqlBaseParser.DISTRIBUTE:
        case SqlBaseParser.OVERWRITE:
        case SqlBaseParser.TRANSFORM:
        case SqlBaseParser.REDUCE:
        case SqlBaseParser.SERDE:
        case SqlBaseParser.SERDEPROPERTIES:
        case SqlBaseParser.RECORDREADER:
        case SqlBaseParser.RECORDWRITER:
        case SqlBaseParser.DELIMITED:
        case SqlBaseParser.FIELDS:
        case SqlBaseParser.TERMINATED:
        case SqlBaseParser.COLLECTION:
        case SqlBaseParser.ITEMS:
        case SqlBaseParser.KEYS:
        case SqlBaseParser.ESCAPED:
        case SqlBaseParser.LINES:
        case SqlBaseParser.SEPARATED:
        case SqlBaseParser.SQLFUNCTION:
        case SqlBaseParser.EXTENDED:
        case SqlBaseParser.REFRESH:
        case SqlBaseParser.CLEAR:
        case SqlBaseParser.CACHE:
        case SqlBaseParser.UNCACHE:
        case SqlBaseParser.LAZY:
        case SqlBaseParser.FORMATTED:
        case SqlBaseParser.GLOBAL:
        case SqlBaseParser.TEMPORARY:
        case SqlBaseParser.OPTIONS:
        case SqlBaseParser.UNSET:
        case SqlBaseParser.TBLPROPERTIES:
        case SqlBaseParser.DBPROPERTIES:
        case SqlBaseParser.BUCKETS:
        case SqlBaseParser.SKEWED:
        case SqlBaseParser.STORED:
        case SqlBaseParser.DIRECTORIES:
        case SqlBaseParser.LOCATION:
        case SqlBaseParser.EXCHANGE:
        case SqlBaseParser.ARCHIVE:
        case SqlBaseParser.UNARCHIVE:
        case SqlBaseParser.FILEFORMAT:
        case SqlBaseParser.TOUCH:
        case SqlBaseParser.COMPACT:
        case SqlBaseParser.CONCATENATE:
        case SqlBaseParser.CHANGE:
        case SqlBaseParser.CASCADE:
        case SqlBaseParser.RESTRICT:
        case SqlBaseParser.CLUSTERED:
        case SqlBaseParser.SORTED:
        case SqlBaseParser.PURGE:
        case SqlBaseParser.INPUTFORMAT:
        case SqlBaseParser.OUTPUTFORMAT:
        case SqlBaseParser.DATABASE:
        case SqlBaseParser.DATABASES:
        case SqlBaseParser.DFS:
        case SqlBaseParser.TRUNCATE:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.COMPUTE:
        case SqlBaseParser.LIST:
        case SqlBaseParser.STATISTICS:
        case SqlBaseParser.PARTITIONED:
        case SqlBaseParser.EXTERNAL:
        case SqlBaseParser.DEFINED:
        case SqlBaseParser.REVOKE:
        case SqlBaseParser.GRANT:
        case SqlBaseParser.LOCK:
        case SqlBaseParser.UNLOCK:
        case SqlBaseParser.MSCK:
        case SqlBaseParser.REPAIR:
        case SqlBaseParser.RECOVER:
        case SqlBaseParser.EXPORT:
        case SqlBaseParser.IMPORT:
        case SqlBaseParser.LOAD:
        case SqlBaseParser.ROLE:
        case SqlBaseParser.ROLES:
        case SqlBaseParser.COMPACTIONS:
        case SqlBaseParser.PRINCIPALS:
        case SqlBaseParser.TRANSACTIONS:
        case SqlBaseParser.INDEX:
        case SqlBaseParser.INDEXES:
        case SqlBaseParser.LOCKS:
        case SqlBaseParser.OPTION:
        case SqlBaseParser.LOCAL:
        case SqlBaseParser.INPATH:
            this.enterOuterAlt(localctx, 2);
            this.state = 2418;
            this.nonReserved();
            break;
        case SqlBaseParser.ANTI:
            this.enterOuterAlt(localctx, 3);
            this.state = 2419;
            this.match(SqlBaseParser.ANTI);
            break;
        case SqlBaseParser.FULL:
            this.enterOuterAlt(localctx, 4);
            this.state = 2420;
            this.match(SqlBaseParser.FULL);
            break;
        case SqlBaseParser.INNER:
            this.enterOuterAlt(localctx, 5);
            this.state = 2421;
            this.match(SqlBaseParser.INNER);
            break;
        case SqlBaseParser.LEFT:
            this.enterOuterAlt(localctx, 6);
            this.state = 2422;
            this.match(SqlBaseParser.LEFT);
            break;
        case SqlBaseParser.SEMI:
            this.enterOuterAlt(localctx, 7);
            this.state = 2423;
            this.match(SqlBaseParser.SEMI);
            break;
        case SqlBaseParser.RIGHT:
            this.enterOuterAlt(localctx, 8);
            this.state = 2424;
            this.match(SqlBaseParser.RIGHT);
            break;
        case SqlBaseParser.NATURAL:
            this.enterOuterAlt(localctx, 9);
            this.state = 2425;
            this.match(SqlBaseParser.NATURAL);
            break;
        case SqlBaseParser.JOIN:
            this.enterOuterAlt(localctx, 10);
            this.state = 2426;
            this.match(SqlBaseParser.JOIN);
            break;
        case SqlBaseParser.CROSS:
            this.enterOuterAlt(localctx, 11);
            this.state = 2427;
            this.match(SqlBaseParser.CROSS);
            break;
        case SqlBaseParser.ON:
            this.enterOuterAlt(localctx, 12);
            this.state = 2428;
            this.match(SqlBaseParser.ON);
            break;
        case SqlBaseParser.UNION:
            this.enterOuterAlt(localctx, 13);
            this.state = 2429;
            this.match(SqlBaseParser.UNION);
            break;
        case SqlBaseParser.INTERSECT:
            this.enterOuterAlt(localctx, 14);
            this.state = 2430;
            this.match(SqlBaseParser.INTERSECT);
            break;
        case SqlBaseParser.EXCEPT:
            this.enterOuterAlt(localctx, 15);
            this.state = 2431;
            this.match(SqlBaseParser.EXCEPT);
            break;
        case SqlBaseParser.SETMINUS:
            this.enterOuterAlt(localctx, 16);
            this.state = 2432;
            this.match(SqlBaseParser.SETMINUS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StrictIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_strictIdentifier;
    return this;
}

StrictIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StrictIdentifierContext.prototype.constructor = StrictIdentifierContext;


 
StrictIdentifierContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function QuotedIdentifierAlternativeContext(parser, ctx) {
	StrictIdentifierContext.call(this, parser);
    StrictIdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QuotedIdentifierAlternativeContext.prototype = Object.create(StrictIdentifierContext.prototype);
QuotedIdentifierAlternativeContext.prototype.constructor = QuotedIdentifierAlternativeContext;

SqlBaseParser.QuotedIdentifierAlternativeContext = QuotedIdentifierAlternativeContext;

QuotedIdentifierAlternativeContext.prototype.quotedIdentifier = function() {
    return this.getTypedRuleContext(QuotedIdentifierContext,0);
};
QuotedIdentifierAlternativeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitQuotedIdentifierAlternative(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function UnquotedIdentifierContext(parser, ctx) {
	StrictIdentifierContext.call(this, parser);
    StrictIdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnquotedIdentifierContext.prototype = Object.create(StrictIdentifierContext.prototype);
UnquotedIdentifierContext.prototype.constructor = UnquotedIdentifierContext;

SqlBaseParser.UnquotedIdentifierContext = UnquotedIdentifierContext;

UnquotedIdentifierContext.prototype.IDENTIFIER = function() {
    return this.getToken(SqlBaseParser.IDENTIFIER, 0);
};

UnquotedIdentifierContext.prototype.nonReserved = function() {
    return this.getTypedRuleContext(NonReservedContext,0);
};
UnquotedIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitUnquotedIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlBaseParser.StrictIdentifierContext = StrictIdentifierContext;

SqlBaseParser.prototype.strictIdentifier = function() {

    var localctx = new StrictIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, SqlBaseParser.RULE_strictIdentifier);
    try {
        this.state = 2438;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.IDENTIFIER:
            localctx = new UnquotedIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2435;
            this.match(SqlBaseParser.IDENTIFIER);
            break;
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
            localctx = new QuotedIdentifierAlternativeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2436;
            this.quotedIdentifier();
            break;
        case SqlBaseParser.SELECT:
        case SqlBaseParser.FROM:
        case SqlBaseParser.ADD:
        case SqlBaseParser.AS:
        case SqlBaseParser.ALL:
        case SqlBaseParser.ANY:
        case SqlBaseParser.DISTINCT:
        case SqlBaseParser.WHERE:
        case SqlBaseParser.GROUP:
        case SqlBaseParser.BY:
        case SqlBaseParser.GROUPING:
        case SqlBaseParser.SETS:
        case SqlBaseParser.CUBE:
        case SqlBaseParser.ROLLUP:
        case SqlBaseParser.ORDER:
        case SqlBaseParser.HAVING:
        case SqlBaseParser.LIMIT:
        case SqlBaseParser.AT:
        case SqlBaseParser.OR:
        case SqlBaseParser.AND:
        case SqlBaseParser.IN:
        case SqlBaseParser.NOT:
        case SqlBaseParser.NO:
        case SqlBaseParser.EXISTS:
        case SqlBaseParser.BETWEEN:
        case SqlBaseParser.LIKE:
        case SqlBaseParser.RLIKE:
        case SqlBaseParser.IS:
        case SqlBaseParser.NULL:
        case SqlBaseParser.TRUE:
        case SqlBaseParser.FALSE:
        case SqlBaseParser.NULLS:
        case SqlBaseParser.ASC:
        case SqlBaseParser.DESC:
        case SqlBaseParser.FOR:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.CASE:
        case SqlBaseParser.WHEN:
        case SqlBaseParser.THEN:
        case SqlBaseParser.ELSE:
        case SqlBaseParser.END:
        case SqlBaseParser.OUTER:
        case SqlBaseParser.PIVOT:
        case SqlBaseParser.LATERAL:
        case SqlBaseParser.WINDOW:
        case SqlBaseParser.OVER:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.RANGE:
        case SqlBaseParser.ROWS:
        case SqlBaseParser.UNBOUNDED:
        case SqlBaseParser.PRECEDING:
        case SqlBaseParser.FOLLOWING:
        case SqlBaseParser.CURRENT:
        case SqlBaseParser.FIRST:
        case SqlBaseParser.AFTER:
        case SqlBaseParser.LAST:
        case SqlBaseParser.ROW:
        case SqlBaseParser.WITH:
        case SqlBaseParser.VALUES:
        case SqlBaseParser.CREATE:
        case SqlBaseParser.TABLE:
        case SqlBaseParser.DIRECTORY:
        case SqlBaseParser.VIEW:
        case SqlBaseParser.REPLACE:
        case SqlBaseParser.INSERT:
        case SqlBaseParser.DELETE:
        case SqlBaseParser.INTO:
        case SqlBaseParser.DESCRIBE:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.FORMAT:
        case SqlBaseParser.LOGICAL:
        case SqlBaseParser.CODEGEN:
        case SqlBaseParser.COST:
        case SqlBaseParser.CAST:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.USE:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.DROP:
        case SqlBaseParser.TO:
        case SqlBaseParser.TABLESAMPLE:
        case SqlBaseParser.STRATIFY:
        case SqlBaseParser.ALTER:
        case SqlBaseParser.RENAME:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.MAP:
        case SqlBaseParser.STRUCT:
        case SqlBaseParser.COMMENT:
        case SqlBaseParser.SET:
        case SqlBaseParser.RESET:
        case SqlBaseParser.DATA:
        case SqlBaseParser.START:
        case SqlBaseParser.TRANSACTION:
        case SqlBaseParser.COMMIT:
        case SqlBaseParser.ROLLBACK:
        case SqlBaseParser.MACRO:
        case SqlBaseParser.IGNORE:
        case SqlBaseParser.BOTH:
        case SqlBaseParser.LEADING:
        case SqlBaseParser.TRAILING:
        case SqlBaseParser.IF:
        case SqlBaseParser.POSITION:
        case SqlBaseParser.EXTRACT:
        case SqlBaseParser.DIV:
        case SqlBaseParser.PERCENTLIT:
        case SqlBaseParser.BUCKET:
        case SqlBaseParser.OUT:
        case SqlBaseParser.OF:
        case SqlBaseParser.SORT:
        case SqlBaseParser.CLUSTER:
        case SqlBaseParser.DISTRIBUTE:
        case SqlBaseParser.OVERWRITE:
        case SqlBaseParser.TRANSFORM:
        case SqlBaseParser.REDUCE:
        case SqlBaseParser.SERDE:
        case SqlBaseParser.SERDEPROPERTIES:
        case SqlBaseParser.RECORDREADER:
        case SqlBaseParser.RECORDWRITER:
        case SqlBaseParser.DELIMITED:
        case SqlBaseParser.FIELDS:
        case SqlBaseParser.TERMINATED:
        case SqlBaseParser.COLLECTION:
        case SqlBaseParser.ITEMS:
        case SqlBaseParser.KEYS:
        case SqlBaseParser.ESCAPED:
        case SqlBaseParser.LINES:
        case SqlBaseParser.SEPARATED:
        case SqlBaseParser.SQLFUNCTION:
        case SqlBaseParser.EXTENDED:
        case SqlBaseParser.REFRESH:
        case SqlBaseParser.CLEAR:
        case SqlBaseParser.CACHE:
        case SqlBaseParser.UNCACHE:
        case SqlBaseParser.LAZY:
        case SqlBaseParser.FORMATTED:
        case SqlBaseParser.GLOBAL:
        case SqlBaseParser.TEMPORARY:
        case SqlBaseParser.OPTIONS:
        case SqlBaseParser.UNSET:
        case SqlBaseParser.TBLPROPERTIES:
        case SqlBaseParser.DBPROPERTIES:
        case SqlBaseParser.BUCKETS:
        case SqlBaseParser.SKEWED:
        case SqlBaseParser.STORED:
        case SqlBaseParser.DIRECTORIES:
        case SqlBaseParser.LOCATION:
        case SqlBaseParser.EXCHANGE:
        case SqlBaseParser.ARCHIVE:
        case SqlBaseParser.UNARCHIVE:
        case SqlBaseParser.FILEFORMAT:
        case SqlBaseParser.TOUCH:
        case SqlBaseParser.COMPACT:
        case SqlBaseParser.CONCATENATE:
        case SqlBaseParser.CHANGE:
        case SqlBaseParser.CASCADE:
        case SqlBaseParser.RESTRICT:
        case SqlBaseParser.CLUSTERED:
        case SqlBaseParser.SORTED:
        case SqlBaseParser.PURGE:
        case SqlBaseParser.INPUTFORMAT:
        case SqlBaseParser.OUTPUTFORMAT:
        case SqlBaseParser.DATABASE:
        case SqlBaseParser.DATABASES:
        case SqlBaseParser.DFS:
        case SqlBaseParser.TRUNCATE:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.COMPUTE:
        case SqlBaseParser.LIST:
        case SqlBaseParser.STATISTICS:
        case SqlBaseParser.PARTITIONED:
        case SqlBaseParser.EXTERNAL:
        case SqlBaseParser.DEFINED:
        case SqlBaseParser.REVOKE:
        case SqlBaseParser.GRANT:
        case SqlBaseParser.LOCK:
        case SqlBaseParser.UNLOCK:
        case SqlBaseParser.MSCK:
        case SqlBaseParser.REPAIR:
        case SqlBaseParser.RECOVER:
        case SqlBaseParser.EXPORT:
        case SqlBaseParser.IMPORT:
        case SqlBaseParser.LOAD:
        case SqlBaseParser.ROLE:
        case SqlBaseParser.ROLES:
        case SqlBaseParser.COMPACTIONS:
        case SqlBaseParser.PRINCIPALS:
        case SqlBaseParser.TRANSACTIONS:
        case SqlBaseParser.INDEX:
        case SqlBaseParser.INDEXES:
        case SqlBaseParser.LOCKS:
        case SqlBaseParser.OPTION:
        case SqlBaseParser.LOCAL:
        case SqlBaseParser.INPATH:
            localctx = new UnquotedIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2437;
            this.nonReserved();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QuotedIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_quotedIdentifier;
    return this;
}

QuotedIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuotedIdentifierContext.prototype.constructor = QuotedIdentifierContext;

QuotedIdentifierContext.prototype.BACKQUOTED_IDENTIFIER = function() {
    return this.getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0);
};

QuotedIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitQuotedIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.QuotedIdentifierContext = QuotedIdentifierContext;

SqlBaseParser.prototype.quotedIdentifier = function() {

    var localctx = new QuotedIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, SqlBaseParser.RULE_quotedIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2440;
        this.match(SqlBaseParser.BACKQUOTED_IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_number;
    return this;
}

NumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumberContext.prototype.constructor = NumberContext;


 
NumberContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DecimalLiteralContext(parser, ctx) {
	NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DecimalLiteralContext.prototype = Object.create(NumberContext.prototype);
DecimalLiteralContext.prototype.constructor = DecimalLiteralContext;

SqlBaseParser.DecimalLiteralContext = DecimalLiteralContext;

DecimalLiteralContext.prototype.DECIMAL_VALUE = function() {
    return this.getToken(SqlBaseParser.DECIMAL_VALUE, 0);
};

DecimalLiteralContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};
DecimalLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitDecimalLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BigIntLiteralContext(parser, ctx) {
	NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BigIntLiteralContext.prototype = Object.create(NumberContext.prototype);
BigIntLiteralContext.prototype.constructor = BigIntLiteralContext;

SqlBaseParser.BigIntLiteralContext = BigIntLiteralContext;

BigIntLiteralContext.prototype.BIGINT_LITERAL = function() {
    return this.getToken(SqlBaseParser.BIGINT_LITERAL, 0);
};

BigIntLiteralContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};
BigIntLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitBigIntLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TinyIntLiteralContext(parser, ctx) {
	NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TinyIntLiteralContext.prototype = Object.create(NumberContext.prototype);
TinyIntLiteralContext.prototype.constructor = TinyIntLiteralContext;

SqlBaseParser.TinyIntLiteralContext = TinyIntLiteralContext;

TinyIntLiteralContext.prototype.TINYINT_LITERAL = function() {
    return this.getToken(SqlBaseParser.TINYINT_LITERAL, 0);
};

TinyIntLiteralContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};
TinyIntLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitTinyIntLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BigDecimalLiteralContext(parser, ctx) {
	NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BigDecimalLiteralContext.prototype = Object.create(NumberContext.prototype);
BigDecimalLiteralContext.prototype.constructor = BigDecimalLiteralContext;

SqlBaseParser.BigDecimalLiteralContext = BigDecimalLiteralContext;

BigDecimalLiteralContext.prototype.BIGDECIMAL_LITERAL = function() {
    return this.getToken(SqlBaseParser.BIGDECIMAL_LITERAL, 0);
};

BigDecimalLiteralContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};
BigDecimalLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitBigDecimalLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DoubleLiteralContext(parser, ctx) {
	NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DoubleLiteralContext.prototype = Object.create(NumberContext.prototype);
DoubleLiteralContext.prototype.constructor = DoubleLiteralContext;

SqlBaseParser.DoubleLiteralContext = DoubleLiteralContext;

DoubleLiteralContext.prototype.DOUBLE_LITERAL = function() {
    return this.getToken(SqlBaseParser.DOUBLE_LITERAL, 0);
};

DoubleLiteralContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};
DoubleLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitDoubleLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IntegerLiteralContext(parser, ctx) {
	NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntegerLiteralContext.prototype = Object.create(NumberContext.prototype);
IntegerLiteralContext.prototype.constructor = IntegerLiteralContext;

SqlBaseParser.IntegerLiteralContext = IntegerLiteralContext;

IntegerLiteralContext.prototype.INTEGER_VALUE = function() {
    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
};

IntegerLiteralContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};
IntegerLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitIntegerLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SmallIntLiteralContext(parser, ctx) {
	NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SmallIntLiteralContext.prototype = Object.create(NumberContext.prototype);
SmallIntLiteralContext.prototype.constructor = SmallIntLiteralContext;

SqlBaseParser.SmallIntLiteralContext = SmallIntLiteralContext;

SmallIntLiteralContext.prototype.SMALLINT_LITERAL = function() {
    return this.getToken(SqlBaseParser.SMALLINT_LITERAL, 0);
};

SmallIntLiteralContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};
SmallIntLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitSmallIntLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SqlBaseParser.NumberContext = NumberContext;

SqlBaseParser.prototype.number = function() {

    var localctx = new NumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, SqlBaseParser.RULE_number);
    var _la = 0; // Token type
    try {
        this.state = 2470;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,327,this._ctx);
        switch(la_) {
        case 1:
            localctx = new DecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2443;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.MINUS) {
                this.state = 2442;
                this.match(SqlBaseParser.MINUS);
            }

            this.state = 2445;
            this.match(SqlBaseParser.DECIMAL_VALUE);
            break;

        case 2:
            localctx = new IntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2447;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.MINUS) {
                this.state = 2446;
                this.match(SqlBaseParser.MINUS);
            }

            this.state = 2449;
            this.match(SqlBaseParser.INTEGER_VALUE);
            break;

        case 3:
            localctx = new BigIntLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2451;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.MINUS) {
                this.state = 2450;
                this.match(SqlBaseParser.MINUS);
            }

            this.state = 2453;
            this.match(SqlBaseParser.BIGINT_LITERAL);
            break;

        case 4:
            localctx = new SmallIntLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2455;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.MINUS) {
                this.state = 2454;
                this.match(SqlBaseParser.MINUS);
            }

            this.state = 2457;
            this.match(SqlBaseParser.SMALLINT_LITERAL);
            break;

        case 5:
            localctx = new TinyIntLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 2459;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.MINUS) {
                this.state = 2458;
                this.match(SqlBaseParser.MINUS);
            }

            this.state = 2461;
            this.match(SqlBaseParser.TINYINT_LITERAL);
            break;

        case 6:
            localctx = new DoubleLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 2463;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.MINUS) {
                this.state = 2462;
                this.match(SqlBaseParser.MINUS);
            }

            this.state = 2465;
            this.match(SqlBaseParser.DOUBLE_LITERAL);
            break;

        case 7:
            localctx = new BigDecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 2467;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.MINUS) {
                this.state = 2466;
                this.match(SqlBaseParser.MINUS);
            }

            this.state = 2469;
            this.match(SqlBaseParser.BIGDECIMAL_LITERAL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NonReservedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_nonReserved;
    return this;
}

NonReservedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NonReservedContext.prototype.constructor = NonReservedContext;

NonReservedContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

NonReservedContext.prototype.TABLES = function() {
    return this.getToken(SqlBaseParser.TABLES, 0);
};

NonReservedContext.prototype.COLUMNS = function() {
    return this.getToken(SqlBaseParser.COLUMNS, 0);
};

NonReservedContext.prototype.COLUMN = function() {
    return this.getToken(SqlBaseParser.COLUMN, 0);
};

NonReservedContext.prototype.PARTITIONS = function() {
    return this.getToken(SqlBaseParser.PARTITIONS, 0);
};

NonReservedContext.prototype.FUNCTIONS = function() {
    return this.getToken(SqlBaseParser.FUNCTIONS, 0);
};

NonReservedContext.prototype.DATABASES = function() {
    return this.getToken(SqlBaseParser.DATABASES, 0);
};

NonReservedContext.prototype.ADD = function() {
    return this.getToken(SqlBaseParser.ADD, 0);
};

NonReservedContext.prototype.OVER = function() {
    return this.getToken(SqlBaseParser.OVER, 0);
};

NonReservedContext.prototype.PARTITION = function() {
    return this.getToken(SqlBaseParser.PARTITION, 0);
};

NonReservedContext.prototype.RANGE = function() {
    return this.getToken(SqlBaseParser.RANGE, 0);
};

NonReservedContext.prototype.ROWS = function() {
    return this.getToken(SqlBaseParser.ROWS, 0);
};

NonReservedContext.prototype.PRECEDING = function() {
    return this.getToken(SqlBaseParser.PRECEDING, 0);
};

NonReservedContext.prototype.FOLLOWING = function() {
    return this.getToken(SqlBaseParser.FOLLOWING, 0);
};

NonReservedContext.prototype.CURRENT = function() {
    return this.getToken(SqlBaseParser.CURRENT, 0);
};

NonReservedContext.prototype.ROW = function() {
    return this.getToken(SqlBaseParser.ROW, 0);
};

NonReservedContext.prototype.LAST = function() {
    return this.getToken(SqlBaseParser.LAST, 0);
};

NonReservedContext.prototype.FIRST = function() {
    return this.getToken(SqlBaseParser.FIRST, 0);
};

NonReservedContext.prototype.AFTER = function() {
    return this.getToken(SqlBaseParser.AFTER, 0);
};

NonReservedContext.prototype.MAP = function() {
    return this.getToken(SqlBaseParser.MAP, 0);
};

NonReservedContext.prototype.ARRAY = function() {
    return this.getToken(SqlBaseParser.ARRAY, 0);
};

NonReservedContext.prototype.STRUCT = function() {
    return this.getToken(SqlBaseParser.STRUCT, 0);
};

NonReservedContext.prototype.PIVOT = function() {
    return this.getToken(SqlBaseParser.PIVOT, 0);
};

NonReservedContext.prototype.LATERAL = function() {
    return this.getToken(SqlBaseParser.LATERAL, 0);
};

NonReservedContext.prototype.WINDOW = function() {
    return this.getToken(SqlBaseParser.WINDOW, 0);
};

NonReservedContext.prototype.REDUCE = function() {
    return this.getToken(SqlBaseParser.REDUCE, 0);
};

NonReservedContext.prototype.TRANSFORM = function() {
    return this.getToken(SqlBaseParser.TRANSFORM, 0);
};

NonReservedContext.prototype.SERDE = function() {
    return this.getToken(SqlBaseParser.SERDE, 0);
};

NonReservedContext.prototype.SERDEPROPERTIES = function() {
    return this.getToken(SqlBaseParser.SERDEPROPERTIES, 0);
};

NonReservedContext.prototype.RECORDREADER = function() {
    return this.getToken(SqlBaseParser.RECORDREADER, 0);
};

NonReservedContext.prototype.DELIMITED = function() {
    return this.getToken(SqlBaseParser.DELIMITED, 0);
};

NonReservedContext.prototype.FIELDS = function() {
    return this.getToken(SqlBaseParser.FIELDS, 0);
};

NonReservedContext.prototype.TERMINATED = function() {
    return this.getToken(SqlBaseParser.TERMINATED, 0);
};

NonReservedContext.prototype.COLLECTION = function() {
    return this.getToken(SqlBaseParser.COLLECTION, 0);
};

NonReservedContext.prototype.ITEMS = function() {
    return this.getToken(SqlBaseParser.ITEMS, 0);
};

NonReservedContext.prototype.KEYS = function() {
    return this.getToken(SqlBaseParser.KEYS, 0);
};

NonReservedContext.prototype.ESCAPED = function() {
    return this.getToken(SqlBaseParser.ESCAPED, 0);
};

NonReservedContext.prototype.LINES = function() {
    return this.getToken(SqlBaseParser.LINES, 0);
};

NonReservedContext.prototype.SEPARATED = function() {
    return this.getToken(SqlBaseParser.SEPARATED, 0);
};

NonReservedContext.prototype.EXTENDED = function() {
    return this.getToken(SqlBaseParser.EXTENDED, 0);
};

NonReservedContext.prototype.REFRESH = function() {
    return this.getToken(SqlBaseParser.REFRESH, 0);
};

NonReservedContext.prototype.CLEAR = function() {
    return this.getToken(SqlBaseParser.CLEAR, 0);
};

NonReservedContext.prototype.CACHE = function() {
    return this.getToken(SqlBaseParser.CACHE, 0);
};

NonReservedContext.prototype.UNCACHE = function() {
    return this.getToken(SqlBaseParser.UNCACHE, 0);
};

NonReservedContext.prototype.LAZY = function() {
    return this.getToken(SqlBaseParser.LAZY, 0);
};

NonReservedContext.prototype.GLOBAL = function() {
    return this.getToken(SqlBaseParser.GLOBAL, 0);
};

NonReservedContext.prototype.TEMPORARY = function() {
    return this.getToken(SqlBaseParser.TEMPORARY, 0);
};

NonReservedContext.prototype.OPTIONS = function() {
    return this.getToken(SqlBaseParser.OPTIONS, 0);
};

NonReservedContext.prototype.GROUPING = function() {
    return this.getToken(SqlBaseParser.GROUPING, 0);
};

NonReservedContext.prototype.CUBE = function() {
    return this.getToken(SqlBaseParser.CUBE, 0);
};

NonReservedContext.prototype.ROLLUP = function() {
    return this.getToken(SqlBaseParser.ROLLUP, 0);
};

NonReservedContext.prototype.EXPLAIN = function() {
    return this.getToken(SqlBaseParser.EXPLAIN, 0);
};

NonReservedContext.prototype.FORMAT = function() {
    return this.getToken(SqlBaseParser.FORMAT, 0);
};

NonReservedContext.prototype.LOGICAL = function() {
    return this.getToken(SqlBaseParser.LOGICAL, 0);
};

NonReservedContext.prototype.FORMATTED = function() {
    return this.getToken(SqlBaseParser.FORMATTED, 0);
};

NonReservedContext.prototype.CODEGEN = function() {
    return this.getToken(SqlBaseParser.CODEGEN, 0);
};

NonReservedContext.prototype.COST = function() {
    return this.getToken(SqlBaseParser.COST, 0);
};

NonReservedContext.prototype.TABLESAMPLE = function() {
    return this.getToken(SqlBaseParser.TABLESAMPLE, 0);
};

NonReservedContext.prototype.USE = function() {
    return this.getToken(SqlBaseParser.USE, 0);
};

NonReservedContext.prototype.TO = function() {
    return this.getToken(SqlBaseParser.TO, 0);
};

NonReservedContext.prototype.BUCKET = function() {
    return this.getToken(SqlBaseParser.BUCKET, 0);
};

NonReservedContext.prototype.PERCENTLIT = function() {
    return this.getToken(SqlBaseParser.PERCENTLIT, 0);
};

NonReservedContext.prototype.OUT = function() {
    return this.getToken(SqlBaseParser.OUT, 0);
};

NonReservedContext.prototype.OF = function() {
    return this.getToken(SqlBaseParser.OF, 0);
};

NonReservedContext.prototype.SET = function() {
    return this.getToken(SqlBaseParser.SET, 0);
};

NonReservedContext.prototype.RESET = function() {
    return this.getToken(SqlBaseParser.RESET, 0);
};

NonReservedContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};

NonReservedContext.prototype.REPLACE = function() {
    return this.getToken(SqlBaseParser.REPLACE, 0);
};

NonReservedContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

NonReservedContext.prototype.POSITION = function() {
    return this.getToken(SqlBaseParser.POSITION, 0);
};

NonReservedContext.prototype.EXTRACT = function() {
    return this.getToken(SqlBaseParser.EXTRACT, 0);
};

NonReservedContext.prototype.NO = function() {
    return this.getToken(SqlBaseParser.NO, 0);
};

NonReservedContext.prototype.DATA = function() {
    return this.getToken(SqlBaseParser.DATA, 0);
};

NonReservedContext.prototype.START = function() {
    return this.getToken(SqlBaseParser.START, 0);
};

NonReservedContext.prototype.TRANSACTION = function() {
    return this.getToken(SqlBaseParser.TRANSACTION, 0);
};

NonReservedContext.prototype.COMMIT = function() {
    return this.getToken(SqlBaseParser.COMMIT, 0);
};

NonReservedContext.prototype.ROLLBACK = function() {
    return this.getToken(SqlBaseParser.ROLLBACK, 0);
};

NonReservedContext.prototype.IGNORE = function() {
    return this.getToken(SqlBaseParser.IGNORE, 0);
};

NonReservedContext.prototype.SORT = function() {
    return this.getToken(SqlBaseParser.SORT, 0);
};

NonReservedContext.prototype.CLUSTER = function() {
    return this.getToken(SqlBaseParser.CLUSTER, 0);
};

NonReservedContext.prototype.DISTRIBUTE = function() {
    return this.getToken(SqlBaseParser.DISTRIBUTE, 0);
};

NonReservedContext.prototype.UNSET = function() {
    return this.getToken(SqlBaseParser.UNSET, 0);
};

NonReservedContext.prototype.TBLPROPERTIES = function() {
    return this.getToken(SqlBaseParser.TBLPROPERTIES, 0);
};

NonReservedContext.prototype.SKEWED = function() {
    return this.getToken(SqlBaseParser.SKEWED, 0);
};

NonReservedContext.prototype.STORED = function() {
    return this.getToken(SqlBaseParser.STORED, 0);
};

NonReservedContext.prototype.DIRECTORIES = function() {
    return this.getToken(SqlBaseParser.DIRECTORIES, 0);
};

NonReservedContext.prototype.LOCATION = function() {
    return this.getToken(SqlBaseParser.LOCATION, 0);
};

NonReservedContext.prototype.EXCHANGE = function() {
    return this.getToken(SqlBaseParser.EXCHANGE, 0);
};

NonReservedContext.prototype.ARCHIVE = function() {
    return this.getToken(SqlBaseParser.ARCHIVE, 0);
};

NonReservedContext.prototype.UNARCHIVE = function() {
    return this.getToken(SqlBaseParser.UNARCHIVE, 0);
};

NonReservedContext.prototype.FILEFORMAT = function() {
    return this.getToken(SqlBaseParser.FILEFORMAT, 0);
};

NonReservedContext.prototype.TOUCH = function() {
    return this.getToken(SqlBaseParser.TOUCH, 0);
};

NonReservedContext.prototype.COMPACT = function() {
    return this.getToken(SqlBaseParser.COMPACT, 0);
};

NonReservedContext.prototype.CONCATENATE = function() {
    return this.getToken(SqlBaseParser.CONCATENATE, 0);
};

NonReservedContext.prototype.CHANGE = function() {
    return this.getToken(SqlBaseParser.CHANGE, 0);
};

NonReservedContext.prototype.CASCADE = function() {
    return this.getToken(SqlBaseParser.CASCADE, 0);
};

NonReservedContext.prototype.RESTRICT = function() {
    return this.getToken(SqlBaseParser.RESTRICT, 0);
};

NonReservedContext.prototype.BUCKETS = function() {
    return this.getToken(SqlBaseParser.BUCKETS, 0);
};

NonReservedContext.prototype.CLUSTERED = function() {
    return this.getToken(SqlBaseParser.CLUSTERED, 0);
};

NonReservedContext.prototype.SORTED = function() {
    return this.getToken(SqlBaseParser.SORTED, 0);
};

NonReservedContext.prototype.PURGE = function() {
    return this.getToken(SqlBaseParser.PURGE, 0);
};

NonReservedContext.prototype.INPUTFORMAT = function() {
    return this.getToken(SqlBaseParser.INPUTFORMAT, 0);
};

NonReservedContext.prototype.OUTPUTFORMAT = function() {
    return this.getToken(SqlBaseParser.OUTPUTFORMAT, 0);
};

NonReservedContext.prototype.DBPROPERTIES = function() {
    return this.getToken(SqlBaseParser.DBPROPERTIES, 0);
};

NonReservedContext.prototype.DFS = function() {
    return this.getToken(SqlBaseParser.DFS, 0);
};

NonReservedContext.prototype.TRUNCATE = function() {
    return this.getToken(SqlBaseParser.TRUNCATE, 0);
};

NonReservedContext.prototype.COMPUTE = function() {
    return this.getToken(SqlBaseParser.COMPUTE, 0);
};

NonReservedContext.prototype.LIST = function() {
    return this.getToken(SqlBaseParser.LIST, 0);
};

NonReservedContext.prototype.STATISTICS = function() {
    return this.getToken(SqlBaseParser.STATISTICS, 0);
};

NonReservedContext.prototype.ANALYZE = function() {
    return this.getToken(SqlBaseParser.ANALYZE, 0);
};

NonReservedContext.prototype.PARTITIONED = function() {
    return this.getToken(SqlBaseParser.PARTITIONED, 0);
};

NonReservedContext.prototype.EXTERNAL = function() {
    return this.getToken(SqlBaseParser.EXTERNAL, 0);
};

NonReservedContext.prototype.DEFINED = function() {
    return this.getToken(SqlBaseParser.DEFINED, 0);
};

NonReservedContext.prototype.RECORDWRITER = function() {
    return this.getToken(SqlBaseParser.RECORDWRITER, 0);
};

NonReservedContext.prototype.REVOKE = function() {
    return this.getToken(SqlBaseParser.REVOKE, 0);
};

NonReservedContext.prototype.GRANT = function() {
    return this.getToken(SqlBaseParser.GRANT, 0);
};

NonReservedContext.prototype.LOCK = function() {
    return this.getToken(SqlBaseParser.LOCK, 0);
};

NonReservedContext.prototype.UNLOCK = function() {
    return this.getToken(SqlBaseParser.UNLOCK, 0);
};

NonReservedContext.prototype.MSCK = function() {
    return this.getToken(SqlBaseParser.MSCK, 0);
};

NonReservedContext.prototype.REPAIR = function() {
    return this.getToken(SqlBaseParser.REPAIR, 0);
};

NonReservedContext.prototype.RECOVER = function() {
    return this.getToken(SqlBaseParser.RECOVER, 0);
};

NonReservedContext.prototype.EXPORT = function() {
    return this.getToken(SqlBaseParser.EXPORT, 0);
};

NonReservedContext.prototype.IMPORT = function() {
    return this.getToken(SqlBaseParser.IMPORT, 0);
};

NonReservedContext.prototype.LOAD = function() {
    return this.getToken(SqlBaseParser.LOAD, 0);
};

NonReservedContext.prototype.VALUES = function() {
    return this.getToken(SqlBaseParser.VALUES, 0);
};

NonReservedContext.prototype.COMMENT = function() {
    return this.getToken(SqlBaseParser.COMMENT, 0);
};

NonReservedContext.prototype.ROLE = function() {
    return this.getToken(SqlBaseParser.ROLE, 0);
};

NonReservedContext.prototype.ROLES = function() {
    return this.getToken(SqlBaseParser.ROLES, 0);
};

NonReservedContext.prototype.COMPACTIONS = function() {
    return this.getToken(SqlBaseParser.COMPACTIONS, 0);
};

NonReservedContext.prototype.PRINCIPALS = function() {
    return this.getToken(SqlBaseParser.PRINCIPALS, 0);
};

NonReservedContext.prototype.TRANSACTIONS = function() {
    return this.getToken(SqlBaseParser.TRANSACTIONS, 0);
};

NonReservedContext.prototype.INDEX = function() {
    return this.getToken(SqlBaseParser.INDEX, 0);
};

NonReservedContext.prototype.INDEXES = function() {
    return this.getToken(SqlBaseParser.INDEXES, 0);
};

NonReservedContext.prototype.LOCKS = function() {
    return this.getToken(SqlBaseParser.LOCKS, 0);
};

NonReservedContext.prototype.OPTION = function() {
    return this.getToken(SqlBaseParser.OPTION, 0);
};

NonReservedContext.prototype.LOCAL = function() {
    return this.getToken(SqlBaseParser.LOCAL, 0);
};

NonReservedContext.prototype.INPATH = function() {
    return this.getToken(SqlBaseParser.INPATH, 0);
};

NonReservedContext.prototype.ASC = function() {
    return this.getToken(SqlBaseParser.ASC, 0);
};

NonReservedContext.prototype.DESC = function() {
    return this.getToken(SqlBaseParser.DESC, 0);
};

NonReservedContext.prototype.LIMIT = function() {
    return this.getToken(SqlBaseParser.LIMIT, 0);
};

NonReservedContext.prototype.RENAME = function() {
    return this.getToken(SqlBaseParser.RENAME, 0);
};

NonReservedContext.prototype.SETS = function() {
    return this.getToken(SqlBaseParser.SETS, 0);
};

NonReservedContext.prototype.AT = function() {
    return this.getToken(SqlBaseParser.AT, 0);
};

NonReservedContext.prototype.NULLS = function() {
    return this.getToken(SqlBaseParser.NULLS, 0);
};

NonReservedContext.prototype.OVERWRITE = function() {
    return this.getToken(SqlBaseParser.OVERWRITE, 0);
};

NonReservedContext.prototype.ALL = function() {
    return this.getToken(SqlBaseParser.ALL, 0);
};

NonReservedContext.prototype.ANY = function() {
    return this.getToken(SqlBaseParser.ANY, 0);
};

NonReservedContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

NonReservedContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

NonReservedContext.prototype.BETWEEN = function() {
    return this.getToken(SqlBaseParser.BETWEEN, 0);
};

NonReservedContext.prototype.BY = function() {
    return this.getToken(SqlBaseParser.BY, 0);
};

NonReservedContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

NonReservedContext.prototype.DELETE = function() {
    return this.getToken(SqlBaseParser.DELETE, 0);
};

NonReservedContext.prototype.DESCRIBE = function() {
    return this.getToken(SqlBaseParser.DESCRIBE, 0);
};

NonReservedContext.prototype.DROP = function() {
    return this.getToken(SqlBaseParser.DROP, 0);
};

NonReservedContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

NonReservedContext.prototype.FALSE = function() {
    return this.getToken(SqlBaseParser.FALSE, 0);
};

NonReservedContext.prototype.FOR = function() {
    return this.getToken(SqlBaseParser.FOR, 0);
};

NonReservedContext.prototype.GROUP = function() {
    return this.getToken(SqlBaseParser.GROUP, 0);
};

NonReservedContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};

NonReservedContext.prototype.INSERT = function() {
    return this.getToken(SqlBaseParser.INSERT, 0);
};

NonReservedContext.prototype.INTO = function() {
    return this.getToken(SqlBaseParser.INTO, 0);
};

NonReservedContext.prototype.IS = function() {
    return this.getToken(SqlBaseParser.IS, 0);
};

NonReservedContext.prototype.LIKE = function() {
    return this.getToken(SqlBaseParser.LIKE, 0);
};

NonReservedContext.prototype.NULL = function() {
    return this.getToken(SqlBaseParser.NULL, 0);
};

NonReservedContext.prototype.ORDER = function() {
    return this.getToken(SqlBaseParser.ORDER, 0);
};

NonReservedContext.prototype.OUTER = function() {
    return this.getToken(SqlBaseParser.OUTER, 0);
};

NonReservedContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

NonReservedContext.prototype.TRUE = function() {
    return this.getToken(SqlBaseParser.TRUE, 0);
};

NonReservedContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

NonReservedContext.prototype.RLIKE = function() {
    return this.getToken(SqlBaseParser.RLIKE, 0);
};

NonReservedContext.prototype.AND = function() {
    return this.getToken(SqlBaseParser.AND, 0);
};

NonReservedContext.prototype.CASE = function() {
    return this.getToken(SqlBaseParser.CASE, 0);
};

NonReservedContext.prototype.CAST = function() {
    return this.getToken(SqlBaseParser.CAST, 0);
};

NonReservedContext.prototype.DISTINCT = function() {
    return this.getToken(SqlBaseParser.DISTINCT, 0);
};

NonReservedContext.prototype.DIV = function() {
    return this.getToken(SqlBaseParser.DIV, 0);
};

NonReservedContext.prototype.ELSE = function() {
    return this.getToken(SqlBaseParser.ELSE, 0);
};

NonReservedContext.prototype.END = function() {
    return this.getToken(SqlBaseParser.END, 0);
};

NonReservedContext.prototype.SQLFUNCTION = function() {
    return this.getToken(SqlBaseParser.SQLFUNCTION, 0);
};

NonReservedContext.prototype.INTERVAL = function() {
    return this.getToken(SqlBaseParser.INTERVAL, 0);
};

NonReservedContext.prototype.MACRO = function() {
    return this.getToken(SqlBaseParser.MACRO, 0);
};

NonReservedContext.prototype.OR = function() {
    return this.getToken(SqlBaseParser.OR, 0);
};

NonReservedContext.prototype.STRATIFY = function() {
    return this.getToken(SqlBaseParser.STRATIFY, 0);
};

NonReservedContext.prototype.THEN = function() {
    return this.getToken(SqlBaseParser.THEN, 0);
};

NonReservedContext.prototype.UNBOUNDED = function() {
    return this.getToken(SqlBaseParser.UNBOUNDED, 0);
};

NonReservedContext.prototype.WHEN = function() {
    return this.getToken(SqlBaseParser.WHEN, 0);
};

NonReservedContext.prototype.DATABASE = function() {
    return this.getToken(SqlBaseParser.DATABASE, 0);
};

NonReservedContext.prototype.SELECT = function() {
    return this.getToken(SqlBaseParser.SELECT, 0);
};

NonReservedContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

NonReservedContext.prototype.WHERE = function() {
    return this.getToken(SqlBaseParser.WHERE, 0);
};

NonReservedContext.prototype.HAVING = function() {
    return this.getToken(SqlBaseParser.HAVING, 0);
};

NonReservedContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

NonReservedContext.prototype.DIRECTORY = function() {
    return this.getToken(SqlBaseParser.DIRECTORY, 0);
};

NonReservedContext.prototype.BOTH = function() {
    return this.getToken(SqlBaseParser.BOTH, 0);
};

NonReservedContext.prototype.LEADING = function() {
    return this.getToken(SqlBaseParser.LEADING, 0);
};

NonReservedContext.prototype.TRAILING = function() {
    return this.getToken(SqlBaseParser.TRAILING, 0);
};

NonReservedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return visitor.visitNonReserved(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SqlBaseParser.NonReservedContext = NonReservedContext;

SqlBaseParser.prototype.nonReserved = function() {

    var localctx = new NonReservedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, SqlBaseParser.RULE_nonReserved);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2472;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.NOT - 32)) | (1 << (SqlBaseParser.NO - 32)) | (1 << (SqlBaseParser.EXISTS - 32)) | (1 << (SqlBaseParser.BETWEEN - 32)) | (1 << (SqlBaseParser.LIKE - 32)) | (1 << (SqlBaseParser.RLIKE - 32)) | (1 << (SqlBaseParser.IS - 32)) | (1 << (SqlBaseParser.NULL - 32)) | (1 << (SqlBaseParser.TRUE - 32)) | (1 << (SqlBaseParser.FALSE - 32)) | (1 << (SqlBaseParser.NULLS - 32)) | (1 << (SqlBaseParser.ASC - 32)) | (1 << (SqlBaseParser.DESC - 32)) | (1 << (SqlBaseParser.FOR - 32)) | (1 << (SqlBaseParser.INTERVAL - 32)) | (1 << (SqlBaseParser.CASE - 32)) | (1 << (SqlBaseParser.WHEN - 32)) | (1 << (SqlBaseParser.THEN - 32)) | (1 << (SqlBaseParser.ELSE - 32)) | (1 << (SqlBaseParser.END - 32)) | (1 << (SqlBaseParser.OUTER - 32)) | (1 << (SqlBaseParser.PIVOT - 32)) | (1 << (SqlBaseParser.LATERAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlBaseParser.WINDOW - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.DIRECTORY - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlBaseParser.COLUMNS - 96)) | (1 << (SqlBaseParser.COLUMN - 96)) | (1 << (SqlBaseParser.USE - 96)) | (1 << (SqlBaseParser.PARTITIONS - 96)) | (1 << (SqlBaseParser.FUNCTIONS - 96)) | (1 << (SqlBaseParser.DROP - 96)) | (1 << (SqlBaseParser.TO - 96)) | (1 << (SqlBaseParser.TABLESAMPLE - 96)) | (1 << (SqlBaseParser.STRATIFY - 96)) | (1 << (SqlBaseParser.ALTER - 96)) | (1 << (SqlBaseParser.RENAME - 96)) | (1 << (SqlBaseParser.ARRAY - 96)) | (1 << (SqlBaseParser.MAP - 96)) | (1 << (SqlBaseParser.STRUCT - 96)) | (1 << (SqlBaseParser.COMMENT - 96)) | (1 << (SqlBaseParser.SET - 96)) | (1 << (SqlBaseParser.RESET - 96)) | (1 << (SqlBaseParser.DATA - 96)) | (1 << (SqlBaseParser.START - 96)) | (1 << (SqlBaseParser.TRANSACTION - 96)) | (1 << (SqlBaseParser.COMMIT - 96)) | (1 << (SqlBaseParser.ROLLBACK - 96)) | (1 << (SqlBaseParser.MACRO - 96)) | (1 << (SqlBaseParser.IGNORE - 96)) | (1 << (SqlBaseParser.BOTH - 96)) | (1 << (SqlBaseParser.LEADING - 96)) | (1 << (SqlBaseParser.TRAILING - 96)) | (1 << (SqlBaseParser.IF - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.EXTRACT - 128)) | (1 << (SqlBaseParser.DIV - 128)) | (1 << (SqlBaseParser.PERCENTLIT - 128)) | (1 << (SqlBaseParser.BUCKET - 128)) | (1 << (SqlBaseParser.OUT - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.SORT - 128)) | (1 << (SqlBaseParser.CLUSTER - 128)) | (1 << (SqlBaseParser.DISTRIBUTE - 128)) | (1 << (SqlBaseParser.OVERWRITE - 128)) | (1 << (SqlBaseParser.TRANSFORM - 128)) | (1 << (SqlBaseParser.REDUCE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlBaseParser.SERDE - 160)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 160)) | (1 << (SqlBaseParser.RECORDREADER - 160)) | (1 << (SqlBaseParser.RECORDWRITER - 160)) | (1 << (SqlBaseParser.DELIMITED - 160)) | (1 << (SqlBaseParser.FIELDS - 160)) | (1 << (SqlBaseParser.TERMINATED - 160)) | (1 << (SqlBaseParser.COLLECTION - 160)) | (1 << (SqlBaseParser.ITEMS - 160)) | (1 << (SqlBaseParser.KEYS - 160)) | (1 << (SqlBaseParser.ESCAPED - 160)) | (1 << (SqlBaseParser.LINES - 160)) | (1 << (SqlBaseParser.SEPARATED - 160)) | (1 << (SqlBaseParser.SQLFUNCTION - 160)) | (1 << (SqlBaseParser.EXTENDED - 160)) | (1 << (SqlBaseParser.REFRESH - 160)) | (1 << (SqlBaseParser.CLEAR - 160)) | (1 << (SqlBaseParser.CACHE - 160)) | (1 << (SqlBaseParser.UNCACHE - 160)) | (1 << (SqlBaseParser.LAZY - 160)) | (1 << (SqlBaseParser.FORMATTED - 160)) | (1 << (SqlBaseParser.GLOBAL - 160)) | (1 << (SqlBaseParser.TEMPORARY - 160)) | (1 << (SqlBaseParser.OPTIONS - 160)) | (1 << (SqlBaseParser.UNSET - 160)) | (1 << (SqlBaseParser.TBLPROPERTIES - 160)) | (1 << (SqlBaseParser.DBPROPERTIES - 160)) | (1 << (SqlBaseParser.BUCKETS - 160)) | (1 << (SqlBaseParser.SKEWED - 160)) | (1 << (SqlBaseParser.STORED - 160)) | (1 << (SqlBaseParser.DIRECTORIES - 160)) | (1 << (SqlBaseParser.LOCATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (SqlBaseParser.EXCHANGE - 192)) | (1 << (SqlBaseParser.ARCHIVE - 192)) | (1 << (SqlBaseParser.UNARCHIVE - 192)) | (1 << (SqlBaseParser.FILEFORMAT - 192)) | (1 << (SqlBaseParser.TOUCH - 192)) | (1 << (SqlBaseParser.COMPACT - 192)) | (1 << (SqlBaseParser.CONCATENATE - 192)) | (1 << (SqlBaseParser.CHANGE - 192)) | (1 << (SqlBaseParser.CASCADE - 192)) | (1 << (SqlBaseParser.RESTRICT - 192)) | (1 << (SqlBaseParser.CLUSTERED - 192)) | (1 << (SqlBaseParser.SORTED - 192)) | (1 << (SqlBaseParser.PURGE - 192)) | (1 << (SqlBaseParser.INPUTFORMAT - 192)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 192)) | (1 << (SqlBaseParser.DATABASE - 192)) | (1 << (SqlBaseParser.DATABASES - 192)) | (1 << (SqlBaseParser.DFS - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.ANALYZE - 192)) | (1 << (SqlBaseParser.COMPUTE - 192)) | (1 << (SqlBaseParser.LIST - 192)) | (1 << (SqlBaseParser.STATISTICS - 192)) | (1 << (SqlBaseParser.PARTITIONED - 192)) | (1 << (SqlBaseParser.EXTERNAL - 192)) | (1 << (SqlBaseParser.DEFINED - 192)) | (1 << (SqlBaseParser.REVOKE - 192)) | (1 << (SqlBaseParser.GRANT - 192)) | (1 << (SqlBaseParser.LOCK - 192)) | (1 << (SqlBaseParser.UNLOCK - 192)) | (1 << (SqlBaseParser.MSCK - 192)) | (1 << (SqlBaseParser.REPAIR - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (SqlBaseParser.RECOVER - 224)) | (1 << (SqlBaseParser.EXPORT - 224)) | (1 << (SqlBaseParser.IMPORT - 224)) | (1 << (SqlBaseParser.LOAD - 224)) | (1 << (SqlBaseParser.ROLE - 224)) | (1 << (SqlBaseParser.ROLES - 224)) | (1 << (SqlBaseParser.COMPACTIONS - 224)) | (1 << (SqlBaseParser.PRINCIPALS - 224)) | (1 << (SqlBaseParser.TRANSACTIONS - 224)) | (1 << (SqlBaseParser.INDEX - 224)) | (1 << (SqlBaseParser.INDEXES - 224)) | (1 << (SqlBaseParser.LOCKS - 224)) | (1 << (SqlBaseParser.OPTION - 224)) | (1 << (SqlBaseParser.LOCAL - 224)) | (1 << (SqlBaseParser.INPATH - 224)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


SqlBaseParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 36:
			return this.queryTerm_sempred(localctx, predIndex);
	case 73:
			return this.booleanExpression_sempred(localctx, predIndex);
	case 75:
			return this.valueExpression_sempred(localctx, predIndex);
	case 76:
			return this.primaryExpression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

SqlBaseParser.prototype.queryTerm_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SqlBaseParser.prototype.booleanExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.precpred(this._ctx, 2);
		case 2:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SqlBaseParser.prototype.valueExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return this.precpred(this._ctx, 6);
		case 4:
			return this.precpred(this._ctx, 5);
		case 5:
			return this.precpred(this._ctx, 4);
		case 6:
			return this.precpred(this._ctx, 3);
		case 7:
			return this.precpred(this._ctx, 2);
		case 8:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SqlBaseParser.prototype.primaryExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 9:
			return this.precpred(this._ctx, 5);
		case 10:
			return this.precpred(this._ctx, 3);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.SqlBaseParser = SqlBaseParser;
