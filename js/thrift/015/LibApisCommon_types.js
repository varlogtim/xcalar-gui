//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


XcalarApiException = function(args) {
  this.status = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
  }
};
Thrift.inherits(XcalarApiException, Thrift.TException);
XcalarApiException.prototype.name = 'XcalarApiException';
XcalarApiException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiException.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiException');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DfFieldAttrHeaderT = function(args) {
  this.name = null;
  this.type = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
DfFieldAttrHeaderT.prototype = {};
DfFieldAttrHeaderT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DfFieldAttrHeaderT.prototype.write = function(output) {
  output.writeStructBegin('DfFieldAttrHeaderT');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

KeyValuePairFixedT = function(args) {
  this.key = null;
  this.value = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
KeyValuePairFixedT.prototype = {};
KeyValuePairFixedT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.key = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.value = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeyValuePairFixedT.prototype.write = function(output) {
  output.writeStructBegin('KeyValuePairFixedT');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.I64, 1);
    output.writeI64(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.I64, 2);
    output.writeI64(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

KeyValuePairVariableT = function(args) {
  this.key = null;
  this.valueSize = null;
  this.value = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.valueSize !== undefined) {
      this.valueSize = args.valueSize;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
KeyValuePairVariableT.prototype = {};
KeyValuePairVariableT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.key = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.valueSize = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeyValuePairVariableT.prototype.write = function(output) {
  output.writeStructBegin('KeyValuePairVariableT');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.I64, 1);
    output.writeI64(this.key);
    output.writeFieldEnd();
  }
  if (this.valueSize !== null && this.valueSize !== undefined) {
    output.writeFieldBegin('valueSize', Thrift.Type.I64, 2);
    output.writeI64(this.valueSize);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

KeyValuePairT = function(args) {
  this.kvPairFixed = null;
  this.kvPairVariable = null;
  if (args) {
    if (args.kvPairFixed !== undefined) {
      this.kvPairFixed = args.kvPairFixed;
    }
    if (args.kvPairVariable !== undefined) {
      this.kvPairVariable = args.kvPairVariable;
    }
  }
};
KeyValuePairT.prototype = {};
KeyValuePairT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.kvPairFixed = new KeyValuePairFixedT();
        this.kvPairFixed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.kvPairVariable = new KeyValuePairVariableT();
        this.kvPairVariable.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeyValuePairT.prototype.write = function(output) {
  output.writeStructBegin('KeyValuePairT');
  if (this.kvPairFixed !== null && this.kvPairFixed !== undefined) {
    output.writeFieldBegin('kvPairFixed', Thrift.Type.STRUCT, 1);
    this.kvPairFixed.write(output);
    output.writeFieldEnd();
  }
  if (this.kvPairVariable !== null && this.kvPairVariable !== undefined) {
    output.writeFieldBegin('kvPairVariable', Thrift.Type.STRUCT, 2);
    this.kvPairVariable.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

KeyValuePairsT = function(args) {
  this.recordType = null;
  this.totalRecordsSize = null;
  this.numRecords = null;
  this.records = null;
  if (args) {
    if (args.recordType !== undefined) {
      this.recordType = args.recordType;
    }
    if (args.totalRecordsSize !== undefined) {
      this.totalRecordsSize = args.totalRecordsSize;
    }
    if (args.numRecords !== undefined) {
      this.numRecords = args.numRecords;
    }
    if (args.records !== undefined) {
      this.records = args.records;
    }
  }
};
KeyValuePairsT.prototype = {};
KeyValuePairsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.recordType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.totalRecordsSize = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRecords = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.records = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new KeyValuePairT();
          elem6.read(input);
          this.records.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeyValuePairsT.prototype.write = function(output) {
  output.writeStructBegin('KeyValuePairsT');
  if (this.recordType !== null && this.recordType !== undefined) {
    output.writeFieldBegin('recordType', Thrift.Type.I32, 1);
    output.writeI32(this.recordType);
    output.writeFieldEnd();
  }
  if (this.totalRecordsSize !== null && this.totalRecordsSize !== undefined) {
    output.writeFieldBegin('totalRecordsSize', Thrift.Type.I64, 2);
    output.writeI64(this.totalRecordsSize);
    output.writeFieldEnd();
  }
  if (this.numRecords !== null && this.numRecords !== undefined) {
    output.writeFieldBegin('numRecords', Thrift.Type.I32, 3);
    output.writeI32(this.numRecords);
    output.writeFieldEnd();
  }
  if (this.records !== null && this.records !== undefined) {
    output.writeFieldBegin('records', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.records.length);
    for (var iter7 in this.records)
    {
      if (this.records.hasOwnProperty(iter7))
      {
        iter7 = this.records[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiFileAttrT = function(args) {
  this.isDirectory = null;
  this.size = null;
  if (args) {
    if (args.isDirectory !== undefined) {
      this.isDirectory = args.isDirectory;
    }
    if (args.size !== undefined) {
      this.size = args.size;
    }
  }
};
XcalarApiFileAttrT.prototype = {};
XcalarApiFileAttrT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.isDirectory = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.size = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiFileAttrT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiFileAttrT');
  if (this.isDirectory !== null && this.isDirectory !== undefined) {
    output.writeFieldBegin('isDirectory', Thrift.Type.BOOL, 1);
    output.writeBool(this.isDirectory);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I64, 2);
    output.writeI64(this.size);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiFileT = function(args) {
  this.attr = null;
  this.name = null;
  if (args) {
    if (args.attr !== undefined) {
      this.attr = args.attr;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
XcalarApiFileT.prototype = {};
XcalarApiFileT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.attr = new XcalarApiFileAttrT();
        this.attr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiFileT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiFileT');
  if (this.attr !== null && this.attr !== undefined) {
    output.writeFieldBegin('attr', Thrift.Type.STRUCT, 1);
    this.attr.write(output);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListFilesInputT = function(args) {
  this.url = null;
  if (args) {
    if (args.url !== undefined) {
      this.url = args.url;
    }
  }
};
XcalarApiListFilesInputT.prototype = {};
XcalarApiListFilesInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListFilesInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListFilesInputT');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListFilesOutputT = function(args) {
  this.status = null;
  this.numFiles = null;
  this.files = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.numFiles !== undefined) {
      this.numFiles = args.numFiles;
    }
    if (args.files !== undefined) {
      this.files = args.files;
    }
  }
};
XcalarApiListFilesOutputT.prototype = {};
XcalarApiListFilesOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numFiles = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.files = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new XcalarApiFileT();
          elem14.read(input);
          this.files.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListFilesOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListFilesOutputT');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.numFiles !== null && this.numFiles !== undefined) {
    output.writeFieldBegin('numFiles', Thrift.Type.I64, 2);
    output.writeI64(this.numFiles);
    output.writeFieldEnd();
  }
  if (this.files !== null && this.files !== undefined) {
    output.writeFieldBegin('files', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.files.length);
    for (var iter15 in this.files)
    {
      if (this.files.hasOwnProperty(iter15))
      {
        iter15 = this.files[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiKeyValuePairT = function(args) {
  this.key = null;
  this.value = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
XcalarApiKeyValuePairT.prototype = {};
XcalarApiKeyValuePairT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiKeyValuePairT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiKeyValuePairT');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiKeyLookupOutputT = function(args) {
  this.status = null;
  this.value = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
XcalarApiKeyLookupOutputT.prototype = {};
XcalarApiKeyLookupOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiKeyLookupOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiKeyLookupOutputT');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiTableT = function(args) {
  this.tableName = null;
  this.tableId = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.tableId !== undefined) {
      this.tableId = args.tableId;
    }
  }
};
XcalarApiTableT.prototype = {};
XcalarApiTableT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.tableId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiTableT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiTableT');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.tableId !== null && this.tableId !== undefined) {
    output.writeFieldBegin('tableId', Thrift.Type.I64, 2);
    output.writeI64(this.tableId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDatasetT = function(args) {
  this.url = null;
  this.datasetId = null;
  this.formatType = null;
  this.name = null;
  this.loadIsComplete = null;
  this.refCount = null;
  if (args) {
    if (args.url !== undefined) {
      this.url = args.url;
    }
    if (args.datasetId !== undefined) {
      this.datasetId = args.datasetId;
    }
    if (args.formatType !== undefined) {
      this.formatType = args.formatType;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.loadIsComplete !== undefined) {
      this.loadIsComplete = args.loadIsComplete;
    }
    if (args.refCount !== undefined) {
      this.refCount = args.refCount;
    }
  }
};
XcalarApiDatasetT.prototype = {};
XcalarApiDatasetT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.datasetId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.formatType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.loadIsComplete = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.refCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDatasetT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDatasetT');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.datasetId !== null && this.datasetId !== undefined) {
    output.writeFieldBegin('datasetId', Thrift.Type.I64, 2);
    output.writeI64(this.datasetId);
    output.writeFieldEnd();
  }
  if (this.formatType !== null && this.formatType !== undefined) {
    output.writeFieldBegin('formatType', Thrift.Type.I32, 3);
    output.writeI32(this.formatType);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 4);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.loadIsComplete !== null && this.loadIsComplete !== undefined) {
    output.writeFieldBegin('loadIsComplete', Thrift.Type.BOOL, 5);
    output.writeBool(this.loadIsComplete);
    output.writeFieldEnd();
  }
  if (this.refCount !== null && this.refCount !== undefined) {
    output.writeFieldBegin('refCount', Thrift.Type.I32, 6);
    output.writeI32(this.refCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDfCsvLoadArgsT = function(args) {
  this.recordDelim = null;
  this.fieldDelim = null;
  if (args) {
    if (args.recordDelim !== undefined) {
      this.recordDelim = args.recordDelim;
    }
    if (args.fieldDelim !== undefined) {
      this.fieldDelim = args.fieldDelim;
    }
  }
};
XcalarApiDfCsvLoadArgsT.prototype = {};
XcalarApiDfCsvLoadArgsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.recordDelim = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fieldDelim = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDfCsvLoadArgsT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDfCsvLoadArgsT');
  if (this.recordDelim !== null && this.recordDelim !== undefined) {
    output.writeFieldBegin('recordDelim', Thrift.Type.STRING, 1);
    output.writeString(this.recordDelim);
    output.writeFieldEnd();
  }
  if (this.fieldDelim !== null && this.fieldDelim !== undefined) {
    output.writeFieldBegin('fieldDelim', Thrift.Type.STRING, 2);
    output.writeString(this.fieldDelim);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDfLoadArgsT = function(args) {
  this.csv = null;
  if (args) {
    if (args.csv !== undefined) {
      this.csv = args.csv;
    }
  }
};
XcalarApiDfLoadArgsT.prototype = {};
XcalarApiDfLoadArgsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.csv = new XcalarApiDfCsvLoadArgsT();
        this.csv.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDfLoadArgsT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDfLoadArgsT');
  if (this.csv !== null && this.csv !== undefined) {
    output.writeFieldBegin('csv', Thrift.Type.STRUCT, 1);
    this.csv.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiExportInputT = function(args) {
  this.srcTable = null;
  this.fileName = null;
  if (args) {
    if (args.srcTable !== undefined) {
      this.srcTable = args.srcTable;
    }
    if (args.fileName !== undefined) {
      this.fileName = args.fileName;
    }
  }
};
XcalarApiExportInputT.prototype = {};
XcalarApiExportInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.srcTable = new XcalarApiTableT();
        this.srcTable.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fileName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiExportInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiExportInputT');
  if (this.srcTable !== null && this.srcTable !== undefined) {
    output.writeFieldBegin('srcTable', Thrift.Type.STRUCT, 1);
    this.srcTable.write(output);
    output.writeFieldEnd();
  }
  if (this.fileName !== null && this.fileName !== undefined) {
    output.writeFieldBegin('fileName', Thrift.Type.STRING, 2);
    output.writeString(this.fileName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiExportOutputT = function(args) {
  this.status = null;
  this.outputPath = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.outputPath !== undefined) {
      this.outputPath = args.outputPath;
    }
  }
};
XcalarApiExportOutputT.prototype = {};
XcalarApiExportOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.outputPath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiExportOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiExportOutputT');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.outputPath !== null && this.outputPath !== undefined) {
    output.writeFieldBegin('outputPath', Thrift.Type.STRING, 2);
    output.writeString(this.outputPath);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiBulkLoadInputT = function(args) {
  this.dataset = null;
  this.maxSize = null;
  this.loadArgs = null;
  if (args) {
    if (args.dataset !== undefined) {
      this.dataset = args.dataset;
    }
    if (args.maxSize !== undefined) {
      this.maxSize = args.maxSize;
    }
    if (args.loadArgs !== undefined) {
      this.loadArgs = args.loadArgs;
    }
  }
};
XcalarApiBulkLoadInputT.prototype = {};
XcalarApiBulkLoadInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.dataset = new XcalarApiDatasetT();
        this.dataset.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.maxSize = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.loadArgs = new XcalarApiDfLoadArgsT();
        this.loadArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiBulkLoadInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiBulkLoadInputT');
  if (this.dataset !== null && this.dataset !== undefined) {
    output.writeFieldBegin('dataset', Thrift.Type.STRUCT, 1);
    this.dataset.write(output);
    output.writeFieldEnd();
  }
  if (this.maxSize !== null && this.maxSize !== undefined) {
    output.writeFieldBegin('maxSize', Thrift.Type.I64, 2);
    output.writeI64(this.maxSize);
    output.writeFieldEnd();
  }
  if (this.loadArgs !== null && this.loadArgs !== undefined) {
    output.writeFieldBegin('loadArgs', Thrift.Type.STRUCT, 3);
    this.loadArgs.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiNamedInputT = function(args) {
  this.isTable = null;
  this.name = null;
  this.xid = null;
  if (args) {
    if (args.isTable !== undefined) {
      this.isTable = args.isTable;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.xid !== undefined) {
      this.xid = args.xid;
    }
  }
};
XcalarApiNamedInputT.prototype = {};
XcalarApiNamedInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.isTable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.xid = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiNamedInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiNamedInputT');
  if (this.isTable !== null && this.isTable !== undefined) {
    output.writeFieldBegin('isTable', Thrift.Type.BOOL, 1);
    output.writeBool(this.isTable);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.xid !== null && this.xid !== undefined) {
    output.writeFieldBegin('xid', Thrift.Type.I64, 3);
    output.writeI64(this.xid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiIndexInputT = function(args) {
  this.source = null;
  this.keyName = null;
  this.dstTable = null;
  if (args) {
    if (args.source !== undefined) {
      this.source = args.source;
    }
    if (args.keyName !== undefined) {
      this.keyName = args.keyName;
    }
    if (args.dstTable !== undefined) {
      this.dstTable = args.dstTable;
    }
  }
};
XcalarApiIndexInputT.prototype = {};
XcalarApiIndexInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.source = new XcalarApiNamedInputT();
        this.source.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.keyName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.dstTable = new XcalarApiTableT();
        this.dstTable.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiIndexInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiIndexInputT');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRUCT, 1);
    this.source.write(output);
    output.writeFieldEnd();
  }
  if (this.keyName !== null && this.keyName !== undefined) {
    output.writeFieldBegin('keyName', Thrift.Type.STRING, 2);
    output.writeString(this.keyName);
    output.writeFieldEnd();
  }
  if (this.dstTable !== null && this.dstTable !== undefined) {
    output.writeFieldBegin('dstTable', Thrift.Type.STRUCT, 3);
    this.dstTable.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiStatInputT = function(args) {
  this.nodeId = null;
  if (args) {
    if (args.nodeId !== undefined) {
      this.nodeId = args.nodeId;
    }
  }
};
XcalarApiStatInputT.prototype = {};
XcalarApiStatInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.nodeId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiStatInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiStatInputT');
  if (this.nodeId !== null && this.nodeId !== undefined) {
    output.writeFieldBegin('nodeId', Thrift.Type.I64, 1);
    output.writeI64(this.nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiMakeRetinaInputT = function(args) {
  this.retinaName = null;
  this.tableName = null;
  if (args) {
    if (args.retinaName !== undefined) {
      this.retinaName = args.retinaName;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
XcalarApiMakeRetinaInputT.prototype = {};
XcalarApiMakeRetinaInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.retinaName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiMakeRetinaInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiMakeRetinaInputT');
  if (this.retinaName !== null && this.retinaName !== undefined) {
    output.writeFieldBegin('retinaName', Thrift.Type.STRING, 1);
    output.writeString(this.retinaName);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiFilterInputT = function(args) {
  this.filterStr = null;
  this.srcTable = null;
  this.dstTable = null;
  if (args) {
    if (args.filterStr !== undefined) {
      this.filterStr = args.filterStr;
    }
    if (args.srcTable !== undefined) {
      this.srcTable = args.srcTable;
    }
    if (args.dstTable !== undefined) {
      this.dstTable = args.dstTable;
    }
  }
};
XcalarApiFilterInputT.prototype = {};
XcalarApiFilterInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filterStr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.srcTable = new XcalarApiTableT();
        this.srcTable.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.dstTable = new XcalarApiTableT();
        this.dstTable.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiFilterInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiFilterInputT');
  if (this.filterStr !== null && this.filterStr !== undefined) {
    output.writeFieldBegin('filterStr', Thrift.Type.STRING, 1);
    output.writeString(this.filterStr);
    output.writeFieldEnd();
  }
  if (this.srcTable !== null && this.srcTable !== undefined) {
    output.writeFieldBegin('srcTable', Thrift.Type.STRUCT, 2);
    this.srcTable.write(output);
    output.writeFieldEnd();
  }
  if (this.dstTable !== null && this.dstTable !== undefined) {
    output.writeFieldBegin('dstTable', Thrift.Type.STRUCT, 3);
    this.dstTable.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGroupByInputT = function(args) {
  this.table = null;
  this.groupByTable = null;
  this.groupByOp = null;
  this.fieldName = null;
  this.newFieldName = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.groupByTable !== undefined) {
      this.groupByTable = args.groupByTable;
    }
    if (args.groupByOp !== undefined) {
      this.groupByOp = args.groupByOp;
    }
    if (args.fieldName !== undefined) {
      this.fieldName = args.fieldName;
    }
    if (args.newFieldName !== undefined) {
      this.newFieldName = args.newFieldName;
    }
  }
};
XcalarApiGroupByInputT.prototype = {};
XcalarApiGroupByInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.table = new XcalarApiTableT();
        this.table.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.groupByTable = new XcalarApiTableT();
        this.groupByTable.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.groupByOp = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.fieldName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.newFieldName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGroupByInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGroupByInputT');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRUCT, 1);
    this.table.write(output);
    output.writeFieldEnd();
  }
  if (this.groupByTable !== null && this.groupByTable !== undefined) {
    output.writeFieldBegin('groupByTable', Thrift.Type.STRUCT, 2);
    this.groupByTable.write(output);
    output.writeFieldEnd();
  }
  if (this.groupByOp !== null && this.groupByOp !== undefined) {
    output.writeFieldBegin('groupByOp', Thrift.Type.I32, 3);
    output.writeI32(this.groupByOp);
    output.writeFieldEnd();
  }
  if (this.fieldName !== null && this.fieldName !== undefined) {
    output.writeFieldBegin('fieldName', Thrift.Type.STRING, 4);
    output.writeString(this.fieldName);
    output.writeFieldEnd();
  }
  if (this.newFieldName !== null && this.newFieldName !== undefined) {
    output.writeFieldBegin('newFieldName', Thrift.Type.STRING, 5);
    output.writeString(this.newFieldName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiAggregateInputT = function(args) {
  this.table = null;
  this.aggregateOp = null;
  this.fieldName = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.aggregateOp !== undefined) {
      this.aggregateOp = args.aggregateOp;
    }
    if (args.fieldName !== undefined) {
      this.fieldName = args.fieldName;
    }
  }
};
XcalarApiAggregateInputT.prototype = {};
XcalarApiAggregateInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.table = new XcalarApiTableT();
        this.table.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.aggregateOp = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.fieldName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiAggregateInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiAggregateInputT');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRUCT, 1);
    this.table.write(output);
    output.writeFieldEnd();
  }
  if (this.aggregateOp !== null && this.aggregateOp !== undefined) {
    output.writeFieldBegin('aggregateOp', Thrift.Type.I32, 2);
    output.writeI32(this.aggregateOp);
    output.writeFieldEnd();
  }
  if (this.fieldName !== null && this.fieldName !== undefined) {
    output.writeFieldBegin('fieldName', Thrift.Type.STRING, 3);
    output.writeString(this.fieldName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiEditColInputT = function(args) {
  this.source = null;
  this.currFieldName = null;
  this.newFieldName = null;
  this.newFieldType = null;
  if (args) {
    if (args.source !== undefined) {
      this.source = args.source;
    }
    if (args.currFieldName !== undefined) {
      this.currFieldName = args.currFieldName;
    }
    if (args.newFieldName !== undefined) {
      this.newFieldName = args.newFieldName;
    }
    if (args.newFieldType !== undefined) {
      this.newFieldType = args.newFieldType;
    }
  }
};
XcalarApiEditColInputT.prototype = {};
XcalarApiEditColInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.source = new XcalarApiNamedInputT();
        this.source.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.currFieldName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.newFieldName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.newFieldType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiEditColInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiEditColInputT');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRUCT, 1);
    this.source.write(output);
    output.writeFieldEnd();
  }
  if (this.currFieldName !== null && this.currFieldName !== undefined) {
    output.writeFieldBegin('currFieldName', Thrift.Type.STRING, 2);
    output.writeString(this.currFieldName);
    output.writeFieldEnd();
  }
  if (this.newFieldName !== null && this.newFieldName !== undefined) {
    output.writeFieldBegin('newFieldName', Thrift.Type.STRING, 3);
    output.writeString(this.newFieldName);
    output.writeFieldEnd();
  }
  if (this.newFieldType !== null && this.newFieldType !== undefined) {
    output.writeFieldBegin('newFieldType', Thrift.Type.I32, 4);
    output.writeI32(this.newFieldType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiResultSetNextInputT = function(args) {
  this.resultSetId = null;
  this.numRecords = null;
  if (args) {
    if (args.resultSetId !== undefined) {
      this.resultSetId = args.resultSetId;
    }
    if (args.numRecords !== undefined) {
      this.numRecords = args.numRecords;
    }
  }
};
XcalarApiResultSetNextInputT.prototype = {};
XcalarApiResultSetNextInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.resultSetId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numRecords = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiResultSetNextInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiResultSetNextInputT');
  if (this.resultSetId !== null && this.resultSetId !== undefined) {
    output.writeFieldBegin('resultSetId', Thrift.Type.I64, 1);
    output.writeI64(this.resultSetId);
    output.writeFieldEnd();
  }
  if (this.numRecords !== null && this.numRecords !== undefined) {
    output.writeFieldBegin('numRecords', Thrift.Type.I64, 2);
    output.writeI64(this.numRecords);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiFreeResultSetInputT = function(args) {
  this.resultSetId = null;
  if (args) {
    if (args.resultSetId !== undefined) {
      this.resultSetId = args.resultSetId;
    }
  }
};
XcalarApiFreeResultSetInputT.prototype = {};
XcalarApiFreeResultSetInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.resultSetId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiFreeResultSetInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiFreeResultSetInputT');
  if (this.resultSetId !== null && this.resultSetId !== undefined) {
    output.writeFieldBegin('resultSetId', Thrift.Type.I64, 1);
    output.writeI64(this.resultSetId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiStatT = function(args) {
  this.threadName = null;
  this.statName = null;
  this.statValue = null;
  this.statType = null;
  this.statLife = null;
  this.groupId = null;
  if (args) {
    if (args.threadName !== undefined) {
      this.threadName = args.threadName;
    }
    if (args.statName !== undefined) {
      this.statName = args.statName;
    }
    if (args.statValue !== undefined) {
      this.statValue = args.statValue;
    }
    if (args.statType !== undefined) {
      this.statType = args.statType;
    }
    if (args.statLife !== undefined) {
      this.statLife = args.statLife;
    }
    if (args.groupId !== undefined) {
      this.groupId = args.groupId;
    }
  }
};
XcalarApiStatT.prototype = {};
XcalarApiStatT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.threadName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.statName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.statValue = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.statType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.statLife = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.groupId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiStatT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiStatT');
  if (this.threadName !== null && this.threadName !== undefined) {
    output.writeFieldBegin('threadName', Thrift.Type.STRING, 1);
    output.writeString(this.threadName);
    output.writeFieldEnd();
  }
  if (this.statName !== null && this.statName !== undefined) {
    output.writeFieldBegin('statName', Thrift.Type.STRING, 2);
    output.writeString(this.statName);
    output.writeFieldEnd();
  }
  if (this.statValue !== null && this.statValue !== undefined) {
    output.writeFieldBegin('statValue', Thrift.Type.I64, 3);
    output.writeI64(this.statValue);
    output.writeFieldEnd();
  }
  if (this.statType !== null && this.statType !== undefined) {
    output.writeFieldBegin('statType', Thrift.Type.I32, 4);
    output.writeI32(this.statType);
    output.writeFieldEnd();
  }
  if (this.statLife !== null && this.statLife !== undefined) {
    output.writeFieldBegin('statLife', Thrift.Type.I32, 5);
    output.writeI32(this.statLife);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.I64, 6);
    output.writeI64(this.groupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiJoinInputT = function(args) {
  this.leftTable = null;
  this.rightTable = null;
  this.joinTable = null;
  this.joinType = null;
  if (args) {
    if (args.leftTable !== undefined) {
      this.leftTable = args.leftTable;
    }
    if (args.rightTable !== undefined) {
      this.rightTable = args.rightTable;
    }
    if (args.joinTable !== undefined) {
      this.joinTable = args.joinTable;
    }
    if (args.joinType !== undefined) {
      this.joinType = args.joinType;
    }
  }
};
XcalarApiJoinInputT.prototype = {};
XcalarApiJoinInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.leftTable = new XcalarApiTableT();
        this.leftTable.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.rightTable = new XcalarApiTableT();
        this.rightTable.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.joinTable = new XcalarApiTableT();
        this.joinTable.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.joinType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiJoinInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiJoinInputT');
  if (this.leftTable !== null && this.leftTable !== undefined) {
    output.writeFieldBegin('leftTable', Thrift.Type.STRUCT, 1);
    this.leftTable.write(output);
    output.writeFieldEnd();
  }
  if (this.rightTable !== null && this.rightTable !== undefined) {
    output.writeFieldBegin('rightTable', Thrift.Type.STRUCT, 2);
    this.rightTable.write(output);
    output.writeFieldEnd();
  }
  if (this.joinTable !== null && this.joinTable !== undefined) {
    output.writeFieldBegin('joinTable', Thrift.Type.STRUCT, 3);
    this.joinTable.write(output);
    output.writeFieldEnd();
  }
  if (this.joinType !== null && this.joinType !== undefined) {
    output.writeFieldBegin('joinType', Thrift.Type.I32, 4);
    output.writeI32(this.joinType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiResultSetAbsoluteInputT = function(args) {
  this.resultSetId = null;
  this.position = null;
  if (args) {
    if (args.resultSetId !== undefined) {
      this.resultSetId = args.resultSetId;
    }
    if (args.position !== undefined) {
      this.position = args.position;
    }
  }
};
XcalarApiResultSetAbsoluteInputT.prototype = {};
XcalarApiResultSetAbsoluteInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.resultSetId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.position = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiResultSetAbsoluteInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiResultSetAbsoluteInputT');
  if (this.resultSetId !== null && this.resultSetId !== undefined) {
    output.writeFieldBegin('resultSetId', Thrift.Type.I64, 1);
    output.writeI64(this.resultSetId);
    output.writeFieldEnd();
  }
  if (this.position !== null && this.position !== undefined) {
    output.writeFieldBegin('position', Thrift.Type.I64, 2);
    output.writeI64(this.position);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiParameterT = function(args) {
  this.parameterName = null;
  this.parameterValue = null;
  if (args) {
    if (args.parameterName !== undefined) {
      this.parameterName = args.parameterName;
    }
    if (args.parameterValue !== undefined) {
      this.parameterValue = args.parameterValue;
    }
  }
};
XcalarApiParameterT.prototype = {};
XcalarApiParameterT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.parameterName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.parameterValue = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiParameterT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiParameterT');
  if (this.parameterName !== null && this.parameterName !== undefined) {
    output.writeFieldBegin('parameterName', Thrift.Type.STRING, 1);
    output.writeString(this.parameterName);
    output.writeFieldEnd();
  }
  if (this.parameterValue !== null && this.parameterValue !== undefined) {
    output.writeFieldBegin('parameterValue', Thrift.Type.STRING, 2);
    output.writeString(this.parameterValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiParamLoadT = function(args) {
  this.datasetUrl = null;
  if (args) {
    if (args.datasetUrl !== undefined) {
      this.datasetUrl = args.datasetUrl;
    }
  }
};
XcalarApiParamLoadT.prototype = {};
XcalarApiParamLoadT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.datasetUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiParamLoadT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiParamLoadT');
  if (this.datasetUrl !== null && this.datasetUrl !== undefined) {
    output.writeFieldBegin('datasetUrl', Thrift.Type.STRING, 1);
    output.writeString(this.datasetUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiParamFilterT = function(args) {
  this.filterStr = null;
  if (args) {
    if (args.filterStr !== undefined) {
      this.filterStr = args.filterStr;
    }
  }
};
XcalarApiParamFilterT.prototype = {};
XcalarApiParamFilterT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filterStr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiParamFilterT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiParamFilterT');
  if (this.filterStr !== null && this.filterStr !== undefined) {
    output.writeFieldBegin('filterStr', Thrift.Type.STRING, 1);
    output.writeString(this.filterStr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiParamInputT = function(args) {
  this.paramLoad = null;
  this.paramFilter = null;
  if (args) {
    if (args.paramLoad !== undefined) {
      this.paramLoad = args.paramLoad;
    }
    if (args.paramFilter !== undefined) {
      this.paramFilter = args.paramFilter;
    }
  }
};
XcalarApiParamInputT.prototype = {};
XcalarApiParamInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.paramLoad = new XcalarApiParamLoadT();
        this.paramLoad.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.paramFilter = new XcalarApiParamFilterT();
        this.paramFilter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiParamInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiParamInputT');
  if (this.paramLoad !== null && this.paramLoad !== undefined) {
    output.writeFieldBegin('paramLoad', Thrift.Type.STRUCT, 1);
    this.paramLoad.write(output);
    output.writeFieldEnd();
  }
  if (this.paramFilter !== null && this.paramFilter !== undefined) {
    output.writeFieldBegin('paramFilter', Thrift.Type.STRUCT, 2);
    this.paramFilter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUpdateRetinaInputT = function(args) {
  this.retinaName = null;
  this.dagNodeId = null;
  this.paramType = null;
  this.paramInput = null;
  if (args) {
    if (args.retinaName !== undefined) {
      this.retinaName = args.retinaName;
    }
    if (args.dagNodeId !== undefined) {
      this.dagNodeId = args.dagNodeId;
    }
    if (args.paramType !== undefined) {
      this.paramType = args.paramType;
    }
    if (args.paramInput !== undefined) {
      this.paramInput = args.paramInput;
    }
  }
};
XcalarApiUpdateRetinaInputT.prototype = {};
XcalarApiUpdateRetinaInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.retinaName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.dagNodeId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.paramType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.paramInput = new XcalarApiParamInputT();
        this.paramInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUpdateRetinaInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUpdateRetinaInputT');
  if (this.retinaName !== null && this.retinaName !== undefined) {
    output.writeFieldBegin('retinaName', Thrift.Type.STRING, 1);
    output.writeString(this.retinaName);
    output.writeFieldEnd();
  }
  if (this.dagNodeId !== null && this.dagNodeId !== undefined) {
    output.writeFieldBegin('dagNodeId', Thrift.Type.I64, 2);
    output.writeI64(this.dagNodeId);
    output.writeFieldEnd();
  }
  if (this.paramType !== null && this.paramType !== undefined) {
    output.writeFieldBegin('paramType', Thrift.Type.I32, 3);
    output.writeI32(this.paramType);
    output.writeFieldEnd();
  }
  if (this.paramInput !== null && this.paramInput !== undefined) {
    output.writeFieldBegin('paramInput', Thrift.Type.STRUCT, 4);
    this.paramInput.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiAddParameterToRetinaInputT = function(args) {
  this.retinaName = null;
  this.parameter = null;
  if (args) {
    if (args.retinaName !== undefined) {
      this.retinaName = args.retinaName;
    }
    if (args.parameter !== undefined) {
      this.parameter = args.parameter;
    }
  }
};
XcalarApiAddParameterToRetinaInputT.prototype = {};
XcalarApiAddParameterToRetinaInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.retinaName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.parameter = new XcalarApiParameterT();
        this.parameter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiAddParameterToRetinaInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiAddParameterToRetinaInputT');
  if (this.retinaName !== null && this.retinaName !== undefined) {
    output.writeFieldBegin('retinaName', Thrift.Type.STRING, 1);
    output.writeString(this.retinaName);
    output.writeFieldEnd();
  }
  if (this.parameter !== null && this.parameter !== undefined) {
    output.writeFieldBegin('parameter', Thrift.Type.STRUCT, 2);
    this.parameter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListParametersInRetinaOutputT = function(args) {
  this.status = null;
  this.numParameters = null;
  this.parameters = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.numParameters !== undefined) {
      this.numParameters = args.numParameters;
    }
    if (args.parameters !== undefined) {
      this.parameters = args.parameters;
    }
  }
};
XcalarApiListParametersInRetinaOutputT.prototype = {};
XcalarApiListParametersInRetinaOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numParameters = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.parameters = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new XcalarApiParameterT();
          elem22.read(input);
          this.parameters.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListParametersInRetinaOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListParametersInRetinaOutputT');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.numParameters !== null && this.numParameters !== undefined) {
    output.writeFieldBegin('numParameters', Thrift.Type.I64, 2);
    output.writeI64(this.numParameters);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.parameters.length);
    for (var iter23 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(iter23))
      {
        iter23 = this.parameters[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiExecuteRetinaInputT = function(args) {
  this.retinaName = null;
  this.exportToFile = null;
  this.dstTableName = null;
  this.exportFileName = null;
  this.numParameters = null;
  this.parameters = null;
  if (args) {
    if (args.retinaName !== undefined) {
      this.retinaName = args.retinaName;
    }
    if (args.exportToFile !== undefined) {
      this.exportToFile = args.exportToFile;
    }
    if (args.dstTableName !== undefined) {
      this.dstTableName = args.dstTableName;
    }
    if (args.exportFileName !== undefined) {
      this.exportFileName = args.exportFileName;
    }
    if (args.numParameters !== undefined) {
      this.numParameters = args.numParameters;
    }
    if (args.parameters !== undefined) {
      this.parameters = args.parameters;
    }
  }
};
XcalarApiExecuteRetinaInputT.prototype = {};
XcalarApiExecuteRetinaInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.retinaName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.exportToFile = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dstTableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.exportFileName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.numParameters = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.parameters = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new XcalarApiParameterT();
          elem30.read(input);
          this.parameters.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiExecuteRetinaInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiExecuteRetinaInputT');
  if (this.retinaName !== null && this.retinaName !== undefined) {
    output.writeFieldBegin('retinaName', Thrift.Type.STRING, 1);
    output.writeString(this.retinaName);
    output.writeFieldEnd();
  }
  if (this.exportToFile !== null && this.exportToFile !== undefined) {
    output.writeFieldBegin('exportToFile', Thrift.Type.BOOL, 2);
    output.writeBool(this.exportToFile);
    output.writeFieldEnd();
  }
  if (this.dstTableName !== null && this.dstTableName !== undefined) {
    output.writeFieldBegin('dstTableName', Thrift.Type.STRING, 3);
    output.writeString(this.dstTableName);
    output.writeFieldEnd();
  }
  if (this.exportFileName !== null && this.exportFileName !== undefined) {
    output.writeFieldBegin('exportFileName', Thrift.Type.STRING, 4);
    output.writeString(this.exportFileName);
    output.writeFieldEnd();
  }
  if (this.numParameters !== null && this.numParameters !== undefined) {
    output.writeFieldBegin('numParameters', Thrift.Type.I64, 5);
    output.writeI64(this.numParameters);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.parameters.length);
    for (var iter31 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(iter31))
      {
        iter31 = this.parameters[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetStatOutputT = function(args) {
  this.status = null;
  this.numStats = null;
  this.stats = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.numStats !== undefined) {
      this.numStats = args.numStats;
    }
    if (args.stats !== undefined) {
      this.stats = args.stats;
    }
  }
};
XcalarApiGetStatOutputT.prototype = {};
XcalarApiGetStatOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numStats = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.stats = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new XcalarApiStatT();
          elem38.read(input);
          this.stats.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetStatOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetStatOutputT');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.numStats !== null && this.numStats !== undefined) {
    output.writeFieldBegin('numStats', Thrift.Type.I64, 2);
    output.writeI64(this.numStats);
    output.writeFieldEnd();
  }
  if (this.stats !== null && this.stats !== undefined) {
    output.writeFieldBegin('stats', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.stats.length);
    for (var iter39 in this.stats)
    {
      if (this.stats.hasOwnProperty(iter39))
      {
        iter39 = this.stats[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiStatByGroupIdInputT = function(args) {
  this.nodeId = null;
  this.numGroupId = null;
  this.groupId = null;
  if (args) {
    if (args.nodeId !== undefined) {
      this.nodeId = args.nodeId;
    }
    if (args.numGroupId !== undefined) {
      this.numGroupId = args.numGroupId;
    }
    if (args.groupId !== undefined) {
      this.groupId = args.groupId;
    }
  }
};
XcalarApiStatByGroupIdInputT.prototype = {};
XcalarApiStatByGroupIdInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.nodeId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numGroupId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.groupId = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = input.readI64().value;
          this.groupId.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiStatByGroupIdInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiStatByGroupIdInputT');
  if (this.nodeId !== null && this.nodeId !== undefined) {
    output.writeFieldBegin('nodeId', Thrift.Type.I64, 1);
    output.writeI64(this.nodeId);
    output.writeFieldEnd();
  }
  if (this.numGroupId !== null && this.numGroupId !== undefined) {
    output.writeFieldBegin('numGroupId', Thrift.Type.I64, 2);
    output.writeI64(this.numGroupId);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I64, this.groupId.length);
    for (var iter47 in this.groupId)
    {
      if (this.groupId.hasOwnProperty(iter47))
      {
        iter47 = this.groupId[iter47];
        output.writeI64(iter47);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiMapInputT = function(args) {
  this.evalStr = null;
  this.srcTable = null;
  this.dstTable = null;
  this.newFieldName = null;
  if (args) {
    if (args.evalStr !== undefined) {
      this.evalStr = args.evalStr;
    }
    if (args.srcTable !== undefined) {
      this.srcTable = args.srcTable;
    }
    if (args.dstTable !== undefined) {
      this.dstTable = args.dstTable;
    }
    if (args.newFieldName !== undefined) {
      this.newFieldName = args.newFieldName;
    }
  }
};
XcalarApiMapInputT.prototype = {};
XcalarApiMapInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.evalStr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.srcTable = new XcalarApiTableT();
        this.srcTable.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.dstTable = new XcalarApiTableT();
        this.dstTable.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.newFieldName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiMapInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiMapInputT');
  if (this.evalStr !== null && this.evalStr !== undefined) {
    output.writeFieldBegin('evalStr', Thrift.Type.STRING, 1);
    output.writeString(this.evalStr);
    output.writeFieldEnd();
  }
  if (this.srcTable !== null && this.srcTable !== undefined) {
    output.writeFieldBegin('srcTable', Thrift.Type.STRUCT, 2);
    this.srcTable.write(output);
    output.writeFieldEnd();
  }
  if (this.dstTable !== null && this.dstTable !== undefined) {
    output.writeFieldBegin('dstTable', Thrift.Type.STRUCT, 3);
    this.dstTable.write(output);
    output.writeFieldEnd();
  }
  if (this.newFieldName !== null && this.newFieldName !== undefined) {
    output.writeFieldBegin('newFieldName', Thrift.Type.STRING, 4);
    output.writeString(this.newFieldName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiQueryStateInputT = function(args) {
  this.queryId = null;
  if (args) {
    if (args.queryId !== undefined) {
      this.queryId = args.queryId;
    }
  }
};
XcalarApiQueryStateInputT.prototype = {};
XcalarApiQueryStateInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.queryId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiQueryStateInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiQueryStateInputT');
  if (this.queryId !== null && this.queryId !== undefined) {
    output.writeFieldBegin('queryId', Thrift.Type.I64, 1);
    output.writeI64(this.queryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiStartNodesInputT = function(args) {
  this.numNodes = null;
  if (args) {
    if (args.numNodes !== undefined) {
      this.numNodes = args.numNodes;
    }
  }
};
XcalarApiStartNodesInputT.prototype = {};
XcalarApiStartNodesInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numNodes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiStartNodesInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiStartNodesInputT');
  if (this.numNodes !== null && this.numNodes !== undefined) {
    output.writeFieldBegin('numNodes', Thrift.Type.I64, 1);
    output.writeI64(this.numNodes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetStatGroupIdMapOutputT = function(args) {
  this.status = null;
  this.numGroupNames = null;
  this.groupName = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.numGroupNames !== undefined) {
      this.numGroupNames = args.numGroupNames;
    }
    if (args.groupName !== undefined) {
      this.groupName = args.groupName;
    }
  }
};
XcalarApiGetStatGroupIdMapOutputT.prototype = {};
XcalarApiGetStatGroupIdMapOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numGroupNames = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.groupName = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = input.readString().value;
          this.groupName.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetStatGroupIdMapOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetStatGroupIdMapOutputT');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.numGroupNames !== null && this.numGroupNames !== undefined) {
    output.writeFieldBegin('numGroupNames', Thrift.Type.I64, 2);
    output.writeI64(this.numGroupNames);
    output.writeFieldEnd();
  }
  if (this.groupName !== null && this.groupName !== undefined) {
    output.writeFieldBegin('groupName', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.groupName.length);
    for (var iter55 in this.groupName)
    {
      if (this.groupName.hasOwnProperty(iter55))
      {
        iter55 = this.groupName[iter55];
        output.writeString(iter55);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiCountOutputT = function(args) {
  this.status = null;
  this.numCounts = null;
  this.counts = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.numCounts !== undefined) {
      this.numCounts = args.numCounts;
    }
    if (args.counts !== undefined) {
      this.counts = args.counts;
    }
  }
};
XcalarApiCountOutputT.prototype = {};
XcalarApiCountOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numCounts = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.counts = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = input.readI64().value;
          this.counts.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiCountOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiCountOutputT');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.numCounts !== null && this.numCounts !== undefined) {
    output.writeFieldBegin('numCounts', Thrift.Type.I64, 2);
    output.writeI64(this.numCounts);
    output.writeFieldEnd();
  }
  if (this.counts !== null && this.counts !== undefined) {
    output.writeFieldBegin('counts', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I64, this.counts.length);
    for (var iter63 in this.counts)
    {
      if (this.counts.hasOwnProperty(iter63))
      {
        iter63 = this.counts[iter63];
        output.writeI64(iter63);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiMakeResultSetOutputT = function(args) {
  this.status = null;
  this.resultSetId = null;
  this.numEntries = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.resultSetId !== undefined) {
      this.resultSetId = args.resultSetId;
    }
    if (args.numEntries !== undefined) {
      this.numEntries = args.numEntries;
    }
  }
};
XcalarApiMakeResultSetOutputT.prototype = {};
XcalarApiMakeResultSetOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.resultSetId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numEntries = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiMakeResultSetOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiMakeResultSetOutputT');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.resultSetId !== null && this.resultSetId !== undefined) {
    output.writeFieldBegin('resultSetId', Thrift.Type.I64, 2);
    output.writeI64(this.resultSetId);
    output.writeFieldEnd();
  }
  if (this.numEntries !== null && this.numEntries !== undefined) {
    output.writeFieldBegin('numEntries', Thrift.Type.I64, 3);
    output.writeI64(this.numEntries);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiResultSetNextOutputT = function(args) {
  this.status = null;
  this.keysAttrHeader = null;
  this.kvPairs = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.keysAttrHeader !== undefined) {
      this.keysAttrHeader = args.keysAttrHeader;
    }
    if (args.kvPairs !== undefined) {
      this.kvPairs = args.kvPairs;
    }
  }
};
XcalarApiResultSetNextOutputT.prototype = {};
XcalarApiResultSetNextOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.keysAttrHeader = new DfFieldAttrHeaderT();
        this.keysAttrHeader.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.kvPairs = new KeyValuePairsT();
        this.kvPairs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiResultSetNextOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiResultSetNextOutputT');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.keysAttrHeader !== null && this.keysAttrHeader !== undefined) {
    output.writeFieldBegin('keysAttrHeader', Thrift.Type.STRUCT, 2);
    this.keysAttrHeader.write(output);
    output.writeFieldEnd();
  }
  if (this.kvPairs !== null && this.kvPairs !== undefined) {
    output.writeFieldBegin('kvPairs', Thrift.Type.STRUCT, 3);
    this.kvPairs.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListTablesOutputT = function(args) {
  this.numTables = null;
  this.tables = null;
  if (args) {
    if (args.numTables !== undefined) {
      this.numTables = args.numTables;
    }
    if (args.tables !== undefined) {
      this.tables = args.tables;
    }
  }
};
XcalarApiListTablesOutputT.prototype = {};
XcalarApiListTablesOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numTables = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.tables = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new XcalarApiTableT();
          elem70.read(input);
          this.tables.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListTablesOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListTablesOutputT');
  if (this.numTables !== null && this.numTables !== undefined) {
    output.writeFieldBegin('numTables', Thrift.Type.I64, 1);
    output.writeI64(this.numTables);
    output.writeFieldEnd();
  }
  if (this.tables !== null && this.tables !== undefined) {
    output.writeFieldBegin('tables', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.tables.length);
    for (var iter71 in this.tables)
    {
      if (this.tables.hasOwnProperty(iter71))
      {
        iter71 = this.tables[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListDatasetsOutputT = function(args) {
  this.numDatasets = null;
  this.datasets = null;
  if (args) {
    if (args.numDatasets !== undefined) {
      this.numDatasets = args.numDatasets;
    }
    if (args.datasets !== undefined) {
      this.datasets = args.datasets;
    }
  }
};
XcalarApiListDatasetsOutputT.prototype = {};
XcalarApiListDatasetsOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numDatasets = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.datasets = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new XcalarApiDatasetT();
          elem78.read(input);
          this.datasets.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListDatasetsOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListDatasetsOutputT');
  if (this.numDatasets !== null && this.numDatasets !== undefined) {
    output.writeFieldBegin('numDatasets', Thrift.Type.I32, 1);
    output.writeI32(this.numDatasets);
    output.writeFieldEnd();
  }
  if (this.datasets !== null && this.datasets !== undefined) {
    output.writeFieldBegin('datasets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.datasets.length);
    for (var iter79 in this.datasets)
    {
      if (this.datasets.hasOwnProperty(iter79))
      {
        iter79 = this.datasets[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDeleteTableStatusT = function(args) {
  this.table = null;
  this.status = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
  }
};
XcalarApiDeleteTableStatusT.prototype = {};
XcalarApiDeleteTableStatusT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.table = new XcalarApiTableT();
        this.table.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDeleteTableStatusT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDeleteTableStatusT');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRUCT, 1);
    this.table.write(output);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiBulkDeleteTablesOutputT = function(args) {
  this.numTables = null;
  this.status = null;
  this.statuses = null;
  if (args) {
    if (args.numTables !== undefined) {
      this.numTables = args.numTables;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.statuses !== undefined) {
      this.statuses = args.statuses;
    }
  }
};
XcalarApiBulkDeleteTablesOutputT.prototype = {};
XcalarApiBulkDeleteTablesOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numTables = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.statuses = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = new XcalarApiDeleteTableStatusT();
          elem86.read(input);
          this.statuses.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiBulkDeleteTablesOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiBulkDeleteTablesOutputT');
  if (this.numTables !== null && this.numTables !== undefined) {
    output.writeFieldBegin('numTables', Thrift.Type.I32, 1);
    output.writeI32(this.numTables);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.statuses !== null && this.statuses !== undefined) {
    output.writeFieldBegin('statuses', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.statuses.length);
    for (var iter87 in this.statuses)
    {
      if (this.statuses.hasOwnProperty(iter87))
      {
        iter87 = this.statuses[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiNewTableOutputT = function(args) {
  this.status = null;
  this.tableName = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
XcalarApiNewTableOutputT.prototype = {};
XcalarApiNewTableOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiNewTableOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiNewTableOutputT');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetTableRefCountOutputT = function(args) {
  this.status = null;
  this.refCount = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.refCount !== undefined) {
      this.refCount = args.refCount;
    }
  }
};
XcalarApiGetTableRefCountOutputT.prototype = {};
XcalarApiGetTableRefCountOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.refCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetTableRefCountOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetTableRefCountOutputT');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.refCount !== null && this.refCount !== undefined) {
    output.writeFieldBegin('refCount', Thrift.Type.I64, 2);
    output.writeI64(this.refCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiQueryOutputT = function(args) {
  this.status = null;
  this.queryId = null;
  this.nodeId = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.queryId !== undefined) {
      this.queryId = args.queryId;
    }
    if (args.nodeId !== undefined) {
      this.nodeId = args.nodeId;
    }
  }
};
XcalarApiQueryOutputT.prototype = {};
XcalarApiQueryOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.queryId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.nodeId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiQueryOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiQueryOutputT');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.queryId !== null && this.queryId !== undefined) {
    output.writeFieldBegin('queryId', Thrift.Type.I64, 2);
    output.writeI64(this.queryId);
    output.writeFieldEnd();
  }
  if (this.nodeId !== null && this.nodeId !== undefined) {
    output.writeFieldBegin('nodeId', Thrift.Type.I64, 3);
    output.writeI64(this.nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiBulkLoadOutputT = function(args) {
  this.status = null;
  this.dataset = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.dataset !== undefined) {
      this.dataset = args.dataset;
    }
  }
};
XcalarApiBulkLoadOutputT.prototype = {};
XcalarApiBulkLoadOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.dataset = new XcalarApiDatasetT();
        this.dataset.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiBulkLoadOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiBulkLoadOutputT');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.dataset !== null && this.dataset !== undefined) {
    output.writeFieldBegin('dataset', Thrift.Type.STRUCT, 2);
    this.dataset.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetVersionOutputT = function(args) {
  this.version = null;
  this.apiVersionSignatureFull = null;
  this.apiVersionSignatureShort = null;
  if (args) {
    if (args.version !== undefined) {
      this.version = args.version;
    }
    if (args.apiVersionSignatureFull !== undefined) {
      this.apiVersionSignatureFull = args.apiVersionSignatureFull;
    }
    if (args.apiVersionSignatureShort !== undefined) {
      this.apiVersionSignatureShort = args.apiVersionSignatureShort;
    }
  }
};
XcalarApiGetVersionOutputT.prototype = {};
XcalarApiGetVersionOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.apiVersionSignatureFull = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.apiVersionSignatureShort = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetVersionOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetVersionOutputT');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 1);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.apiVersionSignatureFull !== null && this.apiVersionSignatureFull !== undefined) {
    output.writeFieldBegin('apiVersionSignatureFull', Thrift.Type.STRING, 2);
    output.writeString(this.apiVersionSignatureFull);
    output.writeFieldEnd();
  }
  if (this.apiVersionSignatureShort !== null && this.apiVersionSignatureShort !== undefined) {
    output.writeFieldBegin('apiVersionSignatureShort', Thrift.Type.I32, 3);
    output.writeI32(this.apiVersionSignatureShort);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiAggregateOutputT = function(args) {
  this.status = null;
  this.jsonAnswer = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.jsonAnswer !== undefined) {
      this.jsonAnswer = args.jsonAnswer;
    }
  }
};
XcalarApiAggregateOutputT.prototype = {};
XcalarApiAggregateOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.jsonAnswer = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiAggregateOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiAggregateOutputT');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.jsonAnswer !== null && this.jsonAnswer !== undefined) {
    output.writeFieldBegin('jsonAnswer', Thrift.Type.STRING, 2);
    output.writeString(this.jsonAnswer);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSingleQueryT = function(args) {
  this.singleQuery = null;
  this.status = null;
  if (args) {
    if (args.singleQuery !== undefined) {
      this.singleQuery = args.singleQuery;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
  }
};
XcalarApiSingleQueryT.prototype = {};
XcalarApiSingleQueryT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.singleQuery = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSingleQueryT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSingleQueryT');
  if (this.singleQuery !== null && this.singleQuery !== undefined) {
    output.writeFieldBegin('singleQuery', Thrift.Type.STRING, 1);
    output.writeString(this.singleQuery);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiQueryStateOutputT = function(args) {
  this.queryState = null;
  this.queryStatus = null;
  this.query = null;
  this.numQueuedWorkItem = null;
  this.numRunningWorkItem = null;
  this.numCompletedWorkItem = null;
  this.numFailedWorkItem = null;
  this.failedSingleQueryArray = null;
  if (args) {
    if (args.queryState !== undefined) {
      this.queryState = args.queryState;
    }
    if (args.queryStatus !== undefined) {
      this.queryStatus = args.queryStatus;
    }
    if (args.query !== undefined) {
      this.query = args.query;
    }
    if (args.numQueuedWorkItem !== undefined) {
      this.numQueuedWorkItem = args.numQueuedWorkItem;
    }
    if (args.numRunningWorkItem !== undefined) {
      this.numRunningWorkItem = args.numRunningWorkItem;
    }
    if (args.numCompletedWorkItem !== undefined) {
      this.numCompletedWorkItem = args.numCompletedWorkItem;
    }
    if (args.numFailedWorkItem !== undefined) {
      this.numFailedWorkItem = args.numFailedWorkItem;
    }
    if (args.failedSingleQueryArray !== undefined) {
      this.failedSingleQueryArray = args.failedSingleQueryArray;
    }
  }
};
XcalarApiQueryStateOutputT.prototype = {};
XcalarApiQueryStateOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.queryState = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.queryStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.numQueuedWorkItem = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.numRunningWorkItem = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.numCompletedWorkItem = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.numFailedWorkItem = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.failedSingleQueryArray = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = new XcalarApiSingleQueryT();
          elem94.read(input);
          this.failedSingleQueryArray.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiQueryStateOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiQueryStateOutputT');
  if (this.queryState !== null && this.queryState !== undefined) {
    output.writeFieldBegin('queryState', Thrift.Type.I32, 1);
    output.writeI32(this.queryState);
    output.writeFieldEnd();
  }
  if (this.queryStatus !== null && this.queryStatus !== undefined) {
    output.writeFieldBegin('queryStatus', Thrift.Type.I32, 2);
    output.writeI32(this.queryStatus);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 3);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.numQueuedWorkItem !== null && this.numQueuedWorkItem !== undefined) {
    output.writeFieldBegin('numQueuedWorkItem', Thrift.Type.I64, 4);
    output.writeI64(this.numQueuedWorkItem);
    output.writeFieldEnd();
  }
  if (this.numRunningWorkItem !== null && this.numRunningWorkItem !== undefined) {
    output.writeFieldBegin('numRunningWorkItem', Thrift.Type.I64, 5);
    output.writeI64(this.numRunningWorkItem);
    output.writeFieldEnd();
  }
  if (this.numCompletedWorkItem !== null && this.numCompletedWorkItem !== undefined) {
    output.writeFieldBegin('numCompletedWorkItem', Thrift.Type.I64, 6);
    output.writeI64(this.numCompletedWorkItem);
    output.writeFieldEnd();
  }
  if (this.numFailedWorkItem !== null && this.numFailedWorkItem !== undefined) {
    output.writeFieldBegin('numFailedWorkItem', Thrift.Type.I64, 7);
    output.writeI64(this.numFailedWorkItem);
    output.writeFieldEnd();
  }
  if (this.failedSingleQueryArray !== null && this.failedSingleQueryArray !== undefined) {
    output.writeFieldBegin('failedSingleQueryArray', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.failedSingleQueryArray.length);
    for (var iter95 in this.failedSingleQueryArray)
    {
      if (this.failedSingleQueryArray.hasOwnProperty(iter95))
      {
        iter95 = this.failedSingleQueryArray[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiInputT = function(args) {
  this.loadInput = null;
  this.indexInput = null;
  this.statInput = null;
  this.tableInput = null;
  this.resultSetNextInput = null;
  this.joinInput = null;
  this.filterInput = null;
  this.groupByInput = null;
  this.editColInput = null;
  this.resultSetAbsoluteInput = null;
  this.freeResultSetInput = null;
  this.deleteTableInput = null;
  this.getTableRefCountInput = null;
  this.listTablesInput = null;
  this.bulkDeleteTablesInput = null;
  this.queryInput = null;
  this.destroyDsInput = null;
  this.statByGroupIdInput = null;
  this.makeResultSetInput = null;
  this.mapInput = null;
  this.aggregateInput = null;
  this.queryStateInput = null;
  this.exportInput = null;
  this.dagTableNameInput = null;
  this.listFilesInput = null;
  this.startNodesInput = null;
  this.makeRetinaInput = null;
  this.getRetinaInput = null;
  this.executeRetinaInput = null;
  this.updateRetinaInput = null;
  this.addParameterToRetinaInput = null;
  this.listParametersInRetinaInput = null;
  this.keyLookupInput = null;
  this.keyAddOrReplaceInput = null;
  this.keyDeleteInput = null;
  if (args) {
    if (args.loadInput !== undefined) {
      this.loadInput = args.loadInput;
    }
    if (args.indexInput !== undefined) {
      this.indexInput = args.indexInput;
    }
    if (args.statInput !== undefined) {
      this.statInput = args.statInput;
    }
    if (args.tableInput !== undefined) {
      this.tableInput = args.tableInput;
    }
    if (args.resultSetNextInput !== undefined) {
      this.resultSetNextInput = args.resultSetNextInput;
    }
    if (args.joinInput !== undefined) {
      this.joinInput = args.joinInput;
    }
    if (args.filterInput !== undefined) {
      this.filterInput = args.filterInput;
    }
    if (args.groupByInput !== undefined) {
      this.groupByInput = args.groupByInput;
    }
    if (args.editColInput !== undefined) {
      this.editColInput = args.editColInput;
    }
    if (args.resultSetAbsoluteInput !== undefined) {
      this.resultSetAbsoluteInput = args.resultSetAbsoluteInput;
    }
    if (args.freeResultSetInput !== undefined) {
      this.freeResultSetInput = args.freeResultSetInput;
    }
    if (args.deleteTableInput !== undefined) {
      this.deleteTableInput = args.deleteTableInput;
    }
    if (args.getTableRefCountInput !== undefined) {
      this.getTableRefCountInput = args.getTableRefCountInput;
    }
    if (args.listTablesInput !== undefined) {
      this.listTablesInput = args.listTablesInput;
    }
    if (args.bulkDeleteTablesInput !== undefined) {
      this.bulkDeleteTablesInput = args.bulkDeleteTablesInput;
    }
    if (args.queryInput !== undefined) {
      this.queryInput = args.queryInput;
    }
    if (args.destroyDsInput !== undefined) {
      this.destroyDsInput = args.destroyDsInput;
    }
    if (args.statByGroupIdInput !== undefined) {
      this.statByGroupIdInput = args.statByGroupIdInput;
    }
    if (args.makeResultSetInput !== undefined) {
      this.makeResultSetInput = args.makeResultSetInput;
    }
    if (args.mapInput !== undefined) {
      this.mapInput = args.mapInput;
    }
    if (args.aggregateInput !== undefined) {
      this.aggregateInput = args.aggregateInput;
    }
    if (args.queryStateInput !== undefined) {
      this.queryStateInput = args.queryStateInput;
    }
    if (args.exportInput !== undefined) {
      this.exportInput = args.exportInput;
    }
    if (args.dagTableNameInput !== undefined) {
      this.dagTableNameInput = args.dagTableNameInput;
    }
    if (args.listFilesInput !== undefined) {
      this.listFilesInput = args.listFilesInput;
    }
    if (args.startNodesInput !== undefined) {
      this.startNodesInput = args.startNodesInput;
    }
    if (args.makeRetinaInput !== undefined) {
      this.makeRetinaInput = args.makeRetinaInput;
    }
    if (args.getRetinaInput !== undefined) {
      this.getRetinaInput = args.getRetinaInput;
    }
    if (args.executeRetinaInput !== undefined) {
      this.executeRetinaInput = args.executeRetinaInput;
    }
    if (args.updateRetinaInput !== undefined) {
      this.updateRetinaInput = args.updateRetinaInput;
    }
    if (args.addParameterToRetinaInput !== undefined) {
      this.addParameterToRetinaInput = args.addParameterToRetinaInput;
    }
    if (args.listParametersInRetinaInput !== undefined) {
      this.listParametersInRetinaInput = args.listParametersInRetinaInput;
    }
    if (args.keyLookupInput !== undefined) {
      this.keyLookupInput = args.keyLookupInput;
    }
    if (args.keyAddOrReplaceInput !== undefined) {
      this.keyAddOrReplaceInput = args.keyAddOrReplaceInput;
    }
    if (args.keyDeleteInput !== undefined) {
      this.keyDeleteInput = args.keyDeleteInput;
    }
  }
};
XcalarApiInputT.prototype = {};
XcalarApiInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.loadInput = new XcalarApiBulkLoadInputT();
        this.loadInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.indexInput = new XcalarApiIndexInputT();
        this.indexInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.statInput = new XcalarApiStatInputT();
        this.statInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.tableInput = new XcalarApiTableT();
        this.tableInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.resultSetNextInput = new XcalarApiResultSetNextInputT();
        this.resultSetNextInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.joinInput = new XcalarApiJoinInputT();
        this.joinInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.filterInput = new XcalarApiFilterInputT();
        this.filterInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.groupByInput = new XcalarApiGroupByInputT();
        this.groupByInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.editColInput = new XcalarApiEditColInputT();
        this.editColInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.resultSetAbsoluteInput = new XcalarApiResultSetAbsoluteInputT();
        this.resultSetAbsoluteInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.freeResultSetInput = new XcalarApiFreeResultSetInputT();
        this.freeResultSetInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.deleteTableInput = new XcalarApiTableT();
        this.deleteTableInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.getTableRefCountInput = new XcalarApiTableT();
        this.getTableRefCountInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.listTablesInput = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.bulkDeleteTablesInput = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.queryInput = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.destroyDsInput = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRUCT) {
        this.statByGroupIdInput = new XcalarApiStatByGroupIdInputT();
        this.statByGroupIdInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.makeResultSetInput = new XcalarApiNamedInputT();
        this.makeResultSetInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRUCT) {
        this.mapInput = new XcalarApiMapInputT();
        this.mapInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRUCT) {
        this.aggregateInput = new XcalarApiAggregateInputT();
        this.aggregateInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRUCT) {
        this.queryStateInput = new XcalarApiQueryStateInputT();
        this.queryStateInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRUCT) {
        this.exportInput = new XcalarApiExportInputT();
        this.exportInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRING) {
        this.dagTableNameInput = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRUCT) {
        this.listFilesInput = new XcalarApiListFilesInputT();
        this.listFilesInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.STRUCT) {
        this.startNodesInput = new XcalarApiStartNodesInputT();
        this.startNodesInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.STRUCT) {
        this.makeRetinaInput = new XcalarApiMakeRetinaInputT();
        this.makeRetinaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.STRING) {
        this.getRetinaInput = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRUCT) {
        this.executeRetinaInput = new XcalarApiExecuteRetinaInputT();
        this.executeRetinaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.STRUCT) {
        this.updateRetinaInput = new XcalarApiUpdateRetinaInputT();
        this.updateRetinaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.STRUCT) {
        this.addParameterToRetinaInput = new XcalarApiAddParameterToRetinaInputT();
        this.addParameterToRetinaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.STRING) {
        this.listParametersInRetinaInput = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.STRING) {
        this.keyLookupInput = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.STRUCT) {
        this.keyAddOrReplaceInput = new XcalarApiKeyValuePairT();
        this.keyAddOrReplaceInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 36:
      if (ftype == Thrift.Type.STRING) {
        this.keyDeleteInput = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiInputT');
  if (this.loadInput !== null && this.loadInput !== undefined) {
    output.writeFieldBegin('loadInput', Thrift.Type.STRUCT, 1);
    this.loadInput.write(output);
    output.writeFieldEnd();
  }
  if (this.indexInput !== null && this.indexInput !== undefined) {
    output.writeFieldBegin('indexInput', Thrift.Type.STRUCT, 2);
    this.indexInput.write(output);
    output.writeFieldEnd();
  }
  if (this.statInput !== null && this.statInput !== undefined) {
    output.writeFieldBegin('statInput', Thrift.Type.STRUCT, 3);
    this.statInput.write(output);
    output.writeFieldEnd();
  }
  if (this.tableInput !== null && this.tableInput !== undefined) {
    output.writeFieldBegin('tableInput', Thrift.Type.STRUCT, 4);
    this.tableInput.write(output);
    output.writeFieldEnd();
  }
  if (this.resultSetNextInput !== null && this.resultSetNextInput !== undefined) {
    output.writeFieldBegin('resultSetNextInput', Thrift.Type.STRUCT, 5);
    this.resultSetNextInput.write(output);
    output.writeFieldEnd();
  }
  if (this.joinInput !== null && this.joinInput !== undefined) {
    output.writeFieldBegin('joinInput', Thrift.Type.STRUCT, 6);
    this.joinInput.write(output);
    output.writeFieldEnd();
  }
  if (this.filterInput !== null && this.filterInput !== undefined) {
    output.writeFieldBegin('filterInput', Thrift.Type.STRUCT, 7);
    this.filterInput.write(output);
    output.writeFieldEnd();
  }
  if (this.groupByInput !== null && this.groupByInput !== undefined) {
    output.writeFieldBegin('groupByInput', Thrift.Type.STRUCT, 8);
    this.groupByInput.write(output);
    output.writeFieldEnd();
  }
  if (this.editColInput !== null && this.editColInput !== undefined) {
    output.writeFieldBegin('editColInput', Thrift.Type.STRUCT, 10);
    this.editColInput.write(output);
    output.writeFieldEnd();
  }
  if (this.resultSetAbsoluteInput !== null && this.resultSetAbsoluteInput !== undefined) {
    output.writeFieldBegin('resultSetAbsoluteInput', Thrift.Type.STRUCT, 11);
    this.resultSetAbsoluteInput.write(output);
    output.writeFieldEnd();
  }
  if (this.freeResultSetInput !== null && this.freeResultSetInput !== undefined) {
    output.writeFieldBegin('freeResultSetInput', Thrift.Type.STRUCT, 12);
    this.freeResultSetInput.write(output);
    output.writeFieldEnd();
  }
  if (this.deleteTableInput !== null && this.deleteTableInput !== undefined) {
    output.writeFieldBegin('deleteTableInput', Thrift.Type.STRUCT, 13);
    this.deleteTableInput.write(output);
    output.writeFieldEnd();
  }
  if (this.getTableRefCountInput !== null && this.getTableRefCountInput !== undefined) {
    output.writeFieldBegin('getTableRefCountInput', Thrift.Type.STRUCT, 14);
    this.getTableRefCountInput.write(output);
    output.writeFieldEnd();
  }
  if (this.listTablesInput !== null && this.listTablesInput !== undefined) {
    output.writeFieldBegin('listTablesInput', Thrift.Type.STRING, 15);
    output.writeString(this.listTablesInput);
    output.writeFieldEnd();
  }
  if (this.bulkDeleteTablesInput !== null && this.bulkDeleteTablesInput !== undefined) {
    output.writeFieldBegin('bulkDeleteTablesInput', Thrift.Type.STRING, 16);
    output.writeString(this.bulkDeleteTablesInput);
    output.writeFieldEnd();
  }
  if (this.queryInput !== null && this.queryInput !== undefined) {
    output.writeFieldBegin('queryInput', Thrift.Type.STRING, 17);
    output.writeString(this.queryInput);
    output.writeFieldEnd();
  }
  if (this.destroyDsInput !== null && this.destroyDsInput !== undefined) {
    output.writeFieldBegin('destroyDsInput', Thrift.Type.STRING, 18);
    output.writeString(this.destroyDsInput);
    output.writeFieldEnd();
  }
  if (this.statByGroupIdInput !== null && this.statByGroupIdInput !== undefined) {
    output.writeFieldBegin('statByGroupIdInput', Thrift.Type.STRUCT, 19);
    this.statByGroupIdInput.write(output);
    output.writeFieldEnd();
  }
  if (this.makeResultSetInput !== null && this.makeResultSetInput !== undefined) {
    output.writeFieldBegin('makeResultSetInput', Thrift.Type.STRUCT, 20);
    this.makeResultSetInput.write(output);
    output.writeFieldEnd();
  }
  if (this.mapInput !== null && this.mapInput !== undefined) {
    output.writeFieldBegin('mapInput', Thrift.Type.STRUCT, 21);
    this.mapInput.write(output);
    output.writeFieldEnd();
  }
  if (this.aggregateInput !== null && this.aggregateInput !== undefined) {
    output.writeFieldBegin('aggregateInput', Thrift.Type.STRUCT, 22);
    this.aggregateInput.write(output);
    output.writeFieldEnd();
  }
  if (this.queryStateInput !== null && this.queryStateInput !== undefined) {
    output.writeFieldBegin('queryStateInput', Thrift.Type.STRUCT, 23);
    this.queryStateInput.write(output);
    output.writeFieldEnd();
  }
  if (this.exportInput !== null && this.exportInput !== undefined) {
    output.writeFieldBegin('exportInput', Thrift.Type.STRUCT, 24);
    this.exportInput.write(output);
    output.writeFieldEnd();
  }
  if (this.dagTableNameInput !== null && this.dagTableNameInput !== undefined) {
    output.writeFieldBegin('dagTableNameInput', Thrift.Type.STRING, 25);
    output.writeString(this.dagTableNameInput);
    output.writeFieldEnd();
  }
  if (this.listFilesInput !== null && this.listFilesInput !== undefined) {
    output.writeFieldBegin('listFilesInput', Thrift.Type.STRUCT, 26);
    this.listFilesInput.write(output);
    output.writeFieldEnd();
  }
  if (this.startNodesInput !== null && this.startNodesInput !== undefined) {
    output.writeFieldBegin('startNodesInput', Thrift.Type.STRUCT, 27);
    this.startNodesInput.write(output);
    output.writeFieldEnd();
  }
  if (this.makeRetinaInput !== null && this.makeRetinaInput !== undefined) {
    output.writeFieldBegin('makeRetinaInput', Thrift.Type.STRUCT, 28);
    this.makeRetinaInput.write(output);
    output.writeFieldEnd();
  }
  if (this.getRetinaInput !== null && this.getRetinaInput !== undefined) {
    output.writeFieldBegin('getRetinaInput', Thrift.Type.STRING, 29);
    output.writeString(this.getRetinaInput);
    output.writeFieldEnd();
  }
  if (this.executeRetinaInput !== null && this.executeRetinaInput !== undefined) {
    output.writeFieldBegin('executeRetinaInput', Thrift.Type.STRUCT, 30);
    this.executeRetinaInput.write(output);
    output.writeFieldEnd();
  }
  if (this.updateRetinaInput !== null && this.updateRetinaInput !== undefined) {
    output.writeFieldBegin('updateRetinaInput', Thrift.Type.STRUCT, 31);
    this.updateRetinaInput.write(output);
    output.writeFieldEnd();
  }
  if (this.addParameterToRetinaInput !== null && this.addParameterToRetinaInput !== undefined) {
    output.writeFieldBegin('addParameterToRetinaInput', Thrift.Type.STRUCT, 32);
    this.addParameterToRetinaInput.write(output);
    output.writeFieldEnd();
  }
  if (this.listParametersInRetinaInput !== null && this.listParametersInRetinaInput !== undefined) {
    output.writeFieldBegin('listParametersInRetinaInput', Thrift.Type.STRING, 33);
    output.writeString(this.listParametersInRetinaInput);
    output.writeFieldEnd();
  }
  if (this.keyLookupInput !== null && this.keyLookupInput !== undefined) {
    output.writeFieldBegin('keyLookupInput', Thrift.Type.STRING, 34);
    output.writeString(this.keyLookupInput);
    output.writeFieldEnd();
  }
  if (this.keyAddOrReplaceInput !== null && this.keyAddOrReplaceInput !== undefined) {
    output.writeFieldBegin('keyAddOrReplaceInput', Thrift.Type.STRUCT, 35);
    this.keyAddOrReplaceInput.write(output);
    output.writeFieldEnd();
  }
  if (this.keyDeleteInput !== null && this.keyDeleteInput !== undefined) {
    output.writeFieldBegin('keyDeleteInput', Thrift.Type.STRING, 36);
    output.writeString(this.keyDeleteInput);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDagNodeT = function(args) {
  this.dagNodeId = null;
  this.api = null;
  this.input = null;
  if (args) {
    if (args.dagNodeId !== undefined) {
      this.dagNodeId = args.dagNodeId;
    }
    if (args.api !== undefined) {
      this.api = args.api;
    }
    if (args.input !== undefined) {
      this.input = args.input;
    }
  }
};
XcalarApiDagNodeT.prototype = {};
XcalarApiDagNodeT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.dagNodeId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.api = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.input = new XcalarApiInputT();
        this.input.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDagNodeT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDagNodeT');
  if (this.dagNodeId !== null && this.dagNodeId !== undefined) {
    output.writeFieldBegin('dagNodeId', Thrift.Type.I64, 1);
    output.writeI64(this.dagNodeId);
    output.writeFieldEnd();
  }
  if (this.api !== null && this.api !== undefined) {
    output.writeFieldBegin('api', Thrift.Type.I32, 2);
    output.writeI32(this.api);
    output.writeFieldEnd();
  }
  if (this.input !== null && this.input !== undefined) {
    output.writeFieldBegin('input', Thrift.Type.STRUCT, 3);
    this.input.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDagOutputT = function(args) {
  this.status = null;
  this.numNodes = null;
  this.node = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.numNodes !== undefined) {
      this.numNodes = args.numNodes;
    }
    if (args.node !== undefined) {
      this.node = args.node;
    }
  }
};
XcalarApiDagOutputT.prototype = {};
XcalarApiDagOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numNodes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.node = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = new XcalarApiDagNodeT();
          elem102.read(input);
          this.node.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDagOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDagOutputT');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.numNodes !== null && this.numNodes !== undefined) {
    output.writeFieldBegin('numNodes', Thrift.Type.I64, 2);
    output.writeI64(this.numNodes);
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.node.length);
    for (var iter103 in this.node)
    {
      if (this.node.hasOwnProperty(iter103))
      {
        iter103 = this.node[iter103];
        iter103.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiRetinaDescT = function(args) {
  this.retinaName = null;
  if (args) {
    if (args.retinaName !== undefined) {
      this.retinaName = args.retinaName;
    }
  }
};
XcalarApiRetinaDescT.prototype = {};
XcalarApiRetinaDescT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.retinaName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiRetinaDescT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiRetinaDescT');
  if (this.retinaName !== null && this.retinaName !== undefined) {
    output.writeFieldBegin('retinaName', Thrift.Type.STRING, 1);
    output.writeString(this.retinaName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiRetinaT = function(args) {
  this.retinaDesc = null;
  this.retinaDag = null;
  if (args) {
    if (args.retinaDesc !== undefined) {
      this.retinaDesc = args.retinaDesc;
    }
    if (args.retinaDag !== undefined) {
      this.retinaDag = args.retinaDag;
    }
  }
};
XcalarApiRetinaT.prototype = {};
XcalarApiRetinaT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.retinaDesc = new XcalarApiRetinaDescT();
        this.retinaDesc.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.retinaDag = new XcalarApiDagOutputT();
        this.retinaDag.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiRetinaT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiRetinaT');
  if (this.retinaDesc !== null && this.retinaDesc !== undefined) {
    output.writeFieldBegin('retinaDesc', Thrift.Type.STRUCT, 1);
    this.retinaDesc.write(output);
    output.writeFieldEnd();
  }
  if (this.retinaDag !== null && this.retinaDag !== undefined) {
    output.writeFieldBegin('retinaDag', Thrift.Type.STRUCT, 2);
    this.retinaDag.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListRetinasOutputT = function(args) {
  this.status = null;
  this.numRetinas = null;
  this.retinaDescs = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.numRetinas !== undefined) {
      this.numRetinas = args.numRetinas;
    }
    if (args.retinaDescs !== undefined) {
      this.retinaDescs = args.retinaDescs;
    }
  }
};
XcalarApiListRetinasOutputT.prototype = {};
XcalarApiListRetinasOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numRetinas = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.retinaDescs = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = new XcalarApiRetinaDescT();
          elem110.read(input);
          this.retinaDescs.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListRetinasOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListRetinasOutputT');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.numRetinas !== null && this.numRetinas !== undefined) {
    output.writeFieldBegin('numRetinas', Thrift.Type.I64, 2);
    output.writeI64(this.numRetinas);
    output.writeFieldEnd();
  }
  if (this.retinaDescs !== null && this.retinaDescs !== undefined) {
    output.writeFieldBegin('retinaDescs', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.retinaDescs.length);
    for (var iter111 in this.retinaDescs)
    {
      if (this.retinaDescs.hasOwnProperty(iter111))
      {
        iter111 = this.retinaDescs[iter111];
        iter111.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetRetinaOutputT = function(args) {
  this.status = null;
  this.retina = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.retina !== undefined) {
      this.retina = args.retina;
    }
  }
};
XcalarApiGetRetinaOutputT.prototype = {};
XcalarApiGetRetinaOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.retina = new XcalarApiRetinaT();
        this.retina.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetRetinaOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetRetinaOutputT');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.retina !== null && this.retina !== undefined) {
    output.writeFieldBegin('retina', Thrift.Type.STRUCT, 2);
    this.retina.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiOutputT = function(args) {
  this.getVersionOutput = null;
  this.statusOutput = null;
  this.statOutput = null;
  this.listTablesOutput = null;
  this.makeResultSetOutput = null;
  this.resultSetNextOutput = null;
  this.countOutput = null;
  this.indexOutput = null;
  this.loadOutput = null;
  this.getTableRefCountOutput = null;
  this.deleteTablesOutput = null;
  this.joinOutput = null;
  this.statGroupIdMapOutput = null;
  this.listDatasetsOutput = null;
  this.mapOutput = null;
  this.aggregateOutput = null;
  this.filterOutput = null;
  this.queryOutput = null;
  this.queryStateOutput = null;
  this.exportOutput = null;
  this.dagOutput = null;
  this.listFilesOutput = null;
  this.groupByOutput = null;
  this.listRetinasOutput = null;
  this.getRetinaOutput = null;
  this.listParametersInRetinaOutput = null;
  this.keyLookupOutput = null;
  if (args) {
    if (args.getVersionOutput !== undefined) {
      this.getVersionOutput = args.getVersionOutput;
    }
    if (args.statusOutput !== undefined) {
      this.statusOutput = args.statusOutput;
    }
    if (args.statOutput !== undefined) {
      this.statOutput = args.statOutput;
    }
    if (args.listTablesOutput !== undefined) {
      this.listTablesOutput = args.listTablesOutput;
    }
    if (args.makeResultSetOutput !== undefined) {
      this.makeResultSetOutput = args.makeResultSetOutput;
    }
    if (args.resultSetNextOutput !== undefined) {
      this.resultSetNextOutput = args.resultSetNextOutput;
    }
    if (args.countOutput !== undefined) {
      this.countOutput = args.countOutput;
    }
    if (args.indexOutput !== undefined) {
      this.indexOutput = args.indexOutput;
    }
    if (args.loadOutput !== undefined) {
      this.loadOutput = args.loadOutput;
    }
    if (args.getTableRefCountOutput !== undefined) {
      this.getTableRefCountOutput = args.getTableRefCountOutput;
    }
    if (args.deleteTablesOutput !== undefined) {
      this.deleteTablesOutput = args.deleteTablesOutput;
    }
    if (args.joinOutput !== undefined) {
      this.joinOutput = args.joinOutput;
    }
    if (args.statGroupIdMapOutput !== undefined) {
      this.statGroupIdMapOutput = args.statGroupIdMapOutput;
    }
    if (args.listDatasetsOutput !== undefined) {
      this.listDatasetsOutput = args.listDatasetsOutput;
    }
    if (args.mapOutput !== undefined) {
      this.mapOutput = args.mapOutput;
    }
    if (args.aggregateOutput !== undefined) {
      this.aggregateOutput = args.aggregateOutput;
    }
    if (args.filterOutput !== undefined) {
      this.filterOutput = args.filterOutput;
    }
    if (args.queryOutput !== undefined) {
      this.queryOutput = args.queryOutput;
    }
    if (args.queryStateOutput !== undefined) {
      this.queryStateOutput = args.queryStateOutput;
    }
    if (args.exportOutput !== undefined) {
      this.exportOutput = args.exportOutput;
    }
    if (args.dagOutput !== undefined) {
      this.dagOutput = args.dagOutput;
    }
    if (args.listFilesOutput !== undefined) {
      this.listFilesOutput = args.listFilesOutput;
    }
    if (args.groupByOutput !== undefined) {
      this.groupByOutput = args.groupByOutput;
    }
    if (args.listRetinasOutput !== undefined) {
      this.listRetinasOutput = args.listRetinasOutput;
    }
    if (args.getRetinaOutput !== undefined) {
      this.getRetinaOutput = args.getRetinaOutput;
    }
    if (args.listParametersInRetinaOutput !== undefined) {
      this.listParametersInRetinaOutput = args.listParametersInRetinaOutput;
    }
    if (args.keyLookupOutput !== undefined) {
      this.keyLookupOutput = args.keyLookupOutput;
    }
  }
};
XcalarApiOutputT.prototype = {};
XcalarApiOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.getVersionOutput = new XcalarApiGetVersionOutputT();
        this.getVersionOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.statusOutput = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.statOutput = new XcalarApiGetStatOutputT();
        this.statOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.listTablesOutput = new XcalarApiListTablesOutputT();
        this.listTablesOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.makeResultSetOutput = new XcalarApiMakeResultSetOutputT();
        this.makeResultSetOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.resultSetNextOutput = new XcalarApiResultSetNextOutputT();
        this.resultSetNextOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.countOutput = new XcalarApiCountOutputT();
        this.countOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.indexOutput = new XcalarApiNewTableOutputT();
        this.indexOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.loadOutput = new XcalarApiBulkLoadOutputT();
        this.loadOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.getTableRefCountOutput = new XcalarApiGetTableRefCountOutputT();
        this.getTableRefCountOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.deleteTablesOutput = new XcalarApiBulkDeleteTablesOutputT();
        this.deleteTablesOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.joinOutput = new XcalarApiNewTableOutputT();
        this.joinOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.statGroupIdMapOutput = new XcalarApiGetStatGroupIdMapOutputT();
        this.statGroupIdMapOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.listDatasetsOutput = new XcalarApiListDatasetsOutputT();
        this.listDatasetsOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.mapOutput = new XcalarApiNewTableOutputT();
        this.mapOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRUCT) {
        this.aggregateOutput = new XcalarApiAggregateOutputT();
        this.aggregateOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRUCT) {
        this.filterOutput = new XcalarApiNewTableOutputT();
        this.filterOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRUCT) {
        this.queryOutput = new XcalarApiQueryOutputT();
        this.queryOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRUCT) {
        this.queryStateOutput = new XcalarApiQueryStateOutputT();
        this.queryStateOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.exportOutput = new XcalarApiExportOutputT();
        this.exportOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRUCT) {
        this.dagOutput = new XcalarApiDagOutputT();
        this.dagOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRUCT) {
        this.listFilesOutput = new XcalarApiListFilesOutputT();
        this.listFilesOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRUCT) {
        this.groupByOutput = new XcalarApiNewTableOutputT();
        this.groupByOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRUCT) {
        this.listRetinasOutput = new XcalarApiListRetinasOutputT();
        this.listRetinasOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRUCT) {
        this.getRetinaOutput = new XcalarApiGetRetinaOutputT();
        this.getRetinaOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRUCT) {
        this.listParametersInRetinaOutput = new XcalarApiListParametersInRetinaOutputT();
        this.listParametersInRetinaOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.STRUCT) {
        this.keyLookupOutput = new XcalarApiKeyLookupOutputT();
        this.keyLookupOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiOutputT');
  if (this.getVersionOutput !== null && this.getVersionOutput !== undefined) {
    output.writeFieldBegin('getVersionOutput', Thrift.Type.STRUCT, 1);
    this.getVersionOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.statusOutput !== null && this.statusOutput !== undefined) {
    output.writeFieldBegin('statusOutput', Thrift.Type.I32, 2);
    output.writeI32(this.statusOutput);
    output.writeFieldEnd();
  }
  if (this.statOutput !== null && this.statOutput !== undefined) {
    output.writeFieldBegin('statOutput', Thrift.Type.STRUCT, 3);
    this.statOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listTablesOutput !== null && this.listTablesOutput !== undefined) {
    output.writeFieldBegin('listTablesOutput', Thrift.Type.STRUCT, 4);
    this.listTablesOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.makeResultSetOutput !== null && this.makeResultSetOutput !== undefined) {
    output.writeFieldBegin('makeResultSetOutput', Thrift.Type.STRUCT, 5);
    this.makeResultSetOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.resultSetNextOutput !== null && this.resultSetNextOutput !== undefined) {
    output.writeFieldBegin('resultSetNextOutput', Thrift.Type.STRUCT, 6);
    this.resultSetNextOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.countOutput !== null && this.countOutput !== undefined) {
    output.writeFieldBegin('countOutput', Thrift.Type.STRUCT, 7);
    this.countOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.indexOutput !== null && this.indexOutput !== undefined) {
    output.writeFieldBegin('indexOutput', Thrift.Type.STRUCT, 8);
    this.indexOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.loadOutput !== null && this.loadOutput !== undefined) {
    output.writeFieldBegin('loadOutput', Thrift.Type.STRUCT, 9);
    this.loadOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.getTableRefCountOutput !== null && this.getTableRefCountOutput !== undefined) {
    output.writeFieldBegin('getTableRefCountOutput', Thrift.Type.STRUCT, 10);
    this.getTableRefCountOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.deleteTablesOutput !== null && this.deleteTablesOutput !== undefined) {
    output.writeFieldBegin('deleteTablesOutput', Thrift.Type.STRUCT, 11);
    this.deleteTablesOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.joinOutput !== null && this.joinOutput !== undefined) {
    output.writeFieldBegin('joinOutput', Thrift.Type.STRUCT, 12);
    this.joinOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.statGroupIdMapOutput !== null && this.statGroupIdMapOutput !== undefined) {
    output.writeFieldBegin('statGroupIdMapOutput', Thrift.Type.STRUCT, 13);
    this.statGroupIdMapOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listDatasetsOutput !== null && this.listDatasetsOutput !== undefined) {
    output.writeFieldBegin('listDatasetsOutput', Thrift.Type.STRUCT, 14);
    this.listDatasetsOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.mapOutput !== null && this.mapOutput !== undefined) {
    output.writeFieldBegin('mapOutput', Thrift.Type.STRUCT, 15);
    this.mapOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.aggregateOutput !== null && this.aggregateOutput !== undefined) {
    output.writeFieldBegin('aggregateOutput', Thrift.Type.STRUCT, 16);
    this.aggregateOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.filterOutput !== null && this.filterOutput !== undefined) {
    output.writeFieldBegin('filterOutput', Thrift.Type.STRUCT, 17);
    this.filterOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.queryOutput !== null && this.queryOutput !== undefined) {
    output.writeFieldBegin('queryOutput', Thrift.Type.STRUCT, 18);
    this.queryOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.queryStateOutput !== null && this.queryStateOutput !== undefined) {
    output.writeFieldBegin('queryStateOutput', Thrift.Type.STRUCT, 19);
    this.queryStateOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.exportOutput !== null && this.exportOutput !== undefined) {
    output.writeFieldBegin('exportOutput', Thrift.Type.STRUCT, 20);
    this.exportOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.dagOutput !== null && this.dagOutput !== undefined) {
    output.writeFieldBegin('dagOutput', Thrift.Type.STRUCT, 21);
    this.dagOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listFilesOutput !== null && this.listFilesOutput !== undefined) {
    output.writeFieldBegin('listFilesOutput', Thrift.Type.STRUCT, 22);
    this.listFilesOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.groupByOutput !== null && this.groupByOutput !== undefined) {
    output.writeFieldBegin('groupByOutput', Thrift.Type.STRUCT, 23);
    this.groupByOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listRetinasOutput !== null && this.listRetinasOutput !== undefined) {
    output.writeFieldBegin('listRetinasOutput', Thrift.Type.STRUCT, 24);
    this.listRetinasOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.getRetinaOutput !== null && this.getRetinaOutput !== undefined) {
    output.writeFieldBegin('getRetinaOutput', Thrift.Type.STRUCT, 25);
    this.getRetinaOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listParametersInRetinaOutput !== null && this.listParametersInRetinaOutput !== undefined) {
    output.writeFieldBegin('listParametersInRetinaOutput', Thrift.Type.STRUCT, 26);
    this.listParametersInRetinaOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.keyLookupOutput !== null && this.keyLookupOutput !== undefined) {
    output.writeFieldBegin('keyLookupOutput', Thrift.Type.STRUCT, 27);
    this.keyLookupOutput.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiWorkItemT = function(args) {
  this.apiVersionSignature = null;
  this.api = null;
  this.input = null;
  if (args) {
    if (args.apiVersionSignature !== undefined) {
      this.apiVersionSignature = args.apiVersionSignature;
    }
    if (args.api !== undefined) {
      this.api = args.api;
    }
    if (args.input !== undefined) {
      this.input = args.input;
    }
  }
};
XcalarApiWorkItemT.prototype = {};
XcalarApiWorkItemT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.apiVersionSignature = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.api = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.input = new XcalarApiInputT();
        this.input.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiWorkItemT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiWorkItemT');
  if (this.apiVersionSignature !== null && this.apiVersionSignature !== undefined) {
    output.writeFieldBegin('apiVersionSignature', Thrift.Type.I32, 1);
    output.writeI32(this.apiVersionSignature);
    output.writeFieldEnd();
  }
  if (this.api !== null && this.api !== undefined) {
    output.writeFieldBegin('api', Thrift.Type.I32, 2);
    output.writeI32(this.api);
    output.writeFieldEnd();
  }
  if (this.input !== null && this.input !== undefined) {
    output.writeFieldBegin('input', Thrift.Type.STRUCT, 3);
    this.input.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiWorkItemResult = function(args) {
  this.jobStatus = null;
  this.output = null;
  if (args) {
    if (args.jobStatus !== undefined) {
      this.jobStatus = args.jobStatus;
    }
    if (args.output !== undefined) {
      this.output = args.output;
    }
  }
};
XcalarApiWorkItemResult.prototype = {};
XcalarApiWorkItemResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.jobStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.output = new XcalarApiOutputT();
        this.output.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiWorkItemResult.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiWorkItemResult');
  if (this.jobStatus !== null && this.jobStatus !== undefined) {
    output.writeFieldBegin('jobStatus', Thrift.Type.I32, 1);
    output.writeI32(this.jobStatus);
    output.writeFieldEnd();
  }
  if (this.output !== null && this.output !== undefined) {
    output.writeFieldBegin('output', Thrift.Type.STRUCT, 2);
    this.output.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDatasetIdInvalidT = 0;
XcalarApiTableIdInvalidT = 0;
XcalarApiXidInvalidT = 0;
XcalarApiDagNodeIdInvalidT = 0;
XcalarApiMaxKeyLenT = 255;
