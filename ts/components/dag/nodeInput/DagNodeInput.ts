class DagNodeInput {
    protected input;
    public static schema = {}; // schema is generated by taking a valid input struct
    // example and running it through https://www.jsonschema.net/

    constructor(inputStruct) {
        inputStruct = inputStruct || {};
        this.setInput(inputStruct);
    }

    public getInput() {
        return this.input;
    }

    public setInput(input) {
        this.input = input;
    }

    public isConfigured(): boolean {
        return (Object.keys(this.input).length > 0);
    }

    public validate(input?): {error: string} {
        input = input || this.input;
        window["ajv"] = new Ajv(); //TODO: try to reuse
        const validate = ajv.compile(this.constructor["schema"]);
        const valid = validate(input);
        if (!valid) {
            // only saving first error message
            const msg = this._parseValidationErrMsg(validate.errors[0]);
            return {error: msg};
        } else {
            return null;
        }
    }

    private _parseValidationErrMsg(errorObj) {
        let path = errorObj.dataPath;
        if (path[0] === ".") {
            path = path.slice(1);
        }
        if (!path) {
            path = "Configuration ";
        }
        let msg = errorObj.message;
        switch (errorObj.keyword) {
            case ("enum"):
                msg += ": " + xcHelper.listToEnglish(errorObj.params.allowedValues);
                break;
            case ("additionalProperties"):
                msg += ": " + errorObj.params.additionalProperty;
                break;
            default:
            // do nothing
        }
        if (errorObj.keyword === "enum") {

        }
        msg = path + " " + msg;
        return msg;
    }
}