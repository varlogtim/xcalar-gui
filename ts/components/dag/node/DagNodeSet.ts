class DagNodeSet extends DagNode {
    protected input: DagNodeSetInput;

    public constructor(options: DagNodeInfo, runtime?: DagRuntime) {
        super(options, runtime);
        this.type = DagNodeType.Set;
        this.maxParents = -1;
        this.minParents = 1;
        this.display.icon = "&#xea2d;";
        this.input = this.getRuntime().accessible(new DagNodeSetInput(<DagNodeSetInputStruct>options.input, this));
    }

    public static readonly specificSchema = {
        "definitions": {},
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$id": "http://example.com/root.json",
        "type": "object",
        "additionalProperties": true,
        "required": [
          "parents"
        ],
        "properties": {
          "parents": {
            "$id": "#/properties/parents",
            "type": "array",
            "items": {
              "$id": "#/properties/parents/items",
              "type": "string",
              "pattern": "^(.*)$"
            }
          },"subType": {
            "$id": "#/properties/subType",
            "type": "string",
            "enum": [DagNodeSubType.Union, DagNodeSubType.Intersect, DagNodeSubType.Except]
          }
        }
    };

    /**
     * Set set(union/except/intersect) node's parameters
     * @param input {DagNodeSetInputStruct}
     * @param input.columns tables' column infos
     * @param input.dedup {boolean} Remove deduplicate rows or not
     */
    public setParam(
        input: DagNodeSetInputStruct = <DagNodeSetInputStruct>{},
        noAutoExecute?: boolean
    ) {
        this.input.setInput({
            columns: input.columns,
            dedup: input.dedup
        });
        super.setParam(null, noAutoExecute);
    }

    public lineageChange(
        _columns: ProgCol[],
        replaceParameters?: boolean
    ): DagLineageChange {
        const changes: DagColumnChange[] = [];
        let finalCols: ProgCol[] = [];
        const input = this.input.getInput(replaceParameters);
        if (input.columns && input.columns.length > 0) {
            finalCols = input.columns[0].map((colInfo) => {
                const colName: string = colInfo.destColumn;
                const colType: ColumnType = colInfo.columnType;
                if (xcHelper.parsePrefixColName(colName).prefix) {
                    throw new Error("column generated by set operation cannot have prefix");
                }
                return ColManager.newPullCol(colName, colName, colType);
            });

            const parents: DagNode[] = this.getParents();
            input.columns.forEach((colLists, i) => {
                const colMap: Map<string, ProgCol> = new Map();
                parents[i].getLineage().getColumns(replaceParameters).forEach((prgoCol) => {
                    colMap.set(prgoCol.getBackColName(), prgoCol);
                });
                colLists.forEach((colInfo, j) => {
                    const colName: string = colInfo.sourceColumn;
                    const oldProgCol: ProgCol = colMap.get(colName);
                    changes.push({
                        from: oldProgCol,
                        to: finalCols[j]
                    });
                    colMap.delete(colName);
                });

                for (let prgoCol of colMap.values()) {
                    changes.push({
                        from: prgoCol,
                        to: null
                    });
                }
            });
        }

        return {
            columns: finalCols,
            changes: changes
        };
    }

    public applyColumnMapping(renameMap, index): void {
        const newRenameMap = xcHelper.deepCopy(renameMap);
        const input = this.input.getInput();
        try {
            input.columns[index].forEach((columnInfo, i) => {
                if (renameMap.columns[columnInfo.sourceColumn]) {
                    const prevColName = columnInfo.sourceColumn
                    input.columns[index][i].sourceColumn =
                                renameMap.columns[prevColName];
                    delete newRenameMap.columns[prevColName];
                }
            });
            this.input.setInput(input);
        } catch(err) {
            console.error(err);
        }
        super.setParam(null, true);
        return newRenameMap;
    }

    /**
     * @override
     * @param pos the index of the parent node that will be disconnected
     * @returns whether the index was spliced
     */
    public disconnectFromParent(parentNode: DagNode, pos: number): boolean {
        super.disconnectFromParent(parentNode, pos);
        let param = this.getParam();
        param.columns.splice(pos, 1);
        this.setParam(param, true);
        return true;
    }

    public reinsertColumn(column, connectorIndex: number): void {
        this.input.insertColumn(column, connectorIndex);
        this.setParam(this.getParam(), true); // trigger change
    }

    /**
     * @override
     */
    protected _genParamHint(): string {
        let hint: string = "";
        const input: DagNodeSetInputStruct = this.getParam();
        if (input.columns.length === 0) {
            return hint;
        }
        const len: number = input.columns[0].length;
        if (len) {
            hint = this.getSubType();
            if (!input.dedup) {
                hint += " All";
            }
            hint += " " + len + " ";
            hint += (len > 1) ? "Columns" : "Column";
        }
        return hint;
    }

    protected _getColumnsUsedInInput(): Set<string> {
        const set: Set<string> = new Set();
        this.input.getInput().columns.forEach((oneColumn) => {
            if (oneColumn != null) {
                oneColumn.forEach((colInfo) => {
                    if (colInfo != null) {
                        set.add(colInfo.sourceColumn);
                    }
                });
            }
        });
        return set;
    }
}

if (typeof exports !== 'undefined') {
    exports.DagNodeSet = DagNodeSet;
};
