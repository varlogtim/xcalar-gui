class DagNodeRound extends DagNode {
    protected input: DagNodeRoundInput;

    public constructor(options: DagNodeInfo) {
        super(options);
        this.type = DagNodeType.Round;
        this.minParents = 1;
        this.maxParents = 1;
        this.display.icon = "&#xe943;"
        this.input = new DagNodeRoundInput(<DagNodeRoundInputStruct>options.input);
    }

    /**
     * @override
     * @param param
     */
    public setParam(param: DagNodeRoundInputStruct): void {
        this.input.setInput({
            sourceColumn: param.sourceColumn || '',
            numDecimals: param.numDecimals || 0,
            destColumn: param.destColumn || ''
        });
        super.setParam();
    }

    /**
     * @override
     * @param columns
     */
    public lineageChange(columns: ProgCol[]): DagLineageChange {
        const newColName = this.input.getInput().destColumn;
        const changes = [];
        const allCols = columns.map((v) => v);
        if (newColName.length > 0) {
            const newCol = ColManager.newPullCol(newColName, newColName, ColumnType.float);
            if (xcHelper.parsePrefixColName(newColName).prefix) {
                throw new Error("columns generated by map cannot have prefix");
            }
            changes.push({from: null, to: newCol});
            allCols.push(newCol);
        }

        return {
            columns: allCols,
            changes: changes
        };
    }

    /**
     * @override
     */
    protected _genParamHint(): string {
        let hint: string = "";
        const input: DagNodeRoundInputStruct = this.getParam();
        if (input.sourceColumn && input.numDecimals != null) {
            hint = `Round ${input.sourceColumn} to\n` +
                    `${input.numDecimals} decimal places`;
        }
        return hint;
    }

    protected _getColumnsUsedInInput(): Set<string> {
        const set = new Set();
        set.add(this.input.getInput().sourceColumn);
        return set;
    }
}